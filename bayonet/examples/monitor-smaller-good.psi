num_steps := 80;
dat Queue{
    data: (Packet × ℝ)[];
    def Queue(){
        data = ([]:(Packet × ℝ)[]);
    }
    def pushFront(x: Packet × ℝ){
        data=[x]~data;
    }
    def pushBack(x: Packet × ℝ){
        data=data~[x];
    }
    def takeFront(){
        r:=front();
        popFront();
        return r;
    }
    def takeBack(){
        r:=data[size()-1];
        data=data[0..size()-1];
        return r;
    }
    def size(){
        return data.length;
    }
    def front(){
        return data[0];
    }
    def dupFront(){
        pushFront(front());
    }
    def popFront(){
        data=data[1..size()];
    }
}
k := 5, H0 := 0, Controller := 1, S1 := 2, S2 := 3, H1 := 4;
CTRL_PROB := 1 / 2, TRAFFIC := 4, OBSERVE_BAD := 0;
dat Packet{
    def Packet(){
    }
}
dat __controller_ty{
    Q_in: Queue, Q_out: Queue;
    num_packets: ℝ, tot_packets: ℝ;
    def __controller_ty(){
        Q_in = Queue();
        Q_out = Queue();
        num_packets = 0;
        tot_packets = 1;
    }
    def __run(){
        num_packets = (num_packets+1);
        if OBSERVE_BAD{
            tot_packets = 6;
            if (num_packets==1){
                observe((Q_in.data[0][1]==1));
            } else {
                if (num_packets==2){
                    observe((Q_in.data[0][1]==1));
                } else {
                    if (num_packets==3){
                        observe((Q_in.data[0][1]==1));
                    } else {
                        if (num_packets==4){
                            observe((Q_in.data[0][1]==2));
                        } else {
                            if (num_packets==5){
                                observe((Q_in.data[0][1]==4));
                            } else {
                                if (num_packets==6){
                                    observe((Q_in.data[0][1]==4));
                                } else {
                                    observe(0);
                                }
                            }
                        }
                    }
                }
            }
        } else {
            tot_packets = 7;
            if (num_packets==1){
                observe((Q_in.data[0][1]==1));
            } else {
                if (num_packets==2){
                    observe((Q_in.data[0][1]==4));
                } else {
                    if (num_packets==3){
                        observe((Q_in.data[0][1]==1));
                    } else {
                        if (num_packets==4){
                            observe((Q_in.data[0][1]==4));
                        } else {
                            if (num_packets==5){
                                observe((Q_in.data[0][1]==1));
                            } else {
                                if (num_packets==6){
                                    observe((Q_in.data[0][1]==4));
                                } else {
                                    if (num_packets==7){
                                        observe((Q_in.data[0][1]==4));
                                    } else {
                                        observe(0);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        Q_in.popFront();
    }
}
dat __h0_ty{
    Q_in: Queue, Q_out: Queue;
    num_sent: ℝ;
    def __h0_ty(){
        Q_in = Queue();
        Q_out = Queue();
        num_sent = 0;
    }
    def __run(){
        if (num_sent<TRAFFIC){
            Q_in.pushFront((Packet(),0));
            num_sent = (num_sent+1);
            Q_out.pushBack((Q_in.takeFront()[0],1));
        } else {
            Q_in.popFront();
        }
    }
}
dat __h1_ty{
    Q_in: Queue, Q_out: Queue;
    def __h1_ty(){
        Q_in = Queue();
        Q_out = Queue();
    }
    def __run(){
        if flip(CTRL_PROB){
            Q_in.dupFront();
            Q_out.pushBack((Q_in.takeFront()[0],100));
        }
        Q_in.popFront();
    }
}
dat __s1_ty{
    Q_in: Queue, Q_out: Queue;
    bad_hash: ℝ;
    def __s1_ty(){
        Q_in = Queue();
        Q_out = Queue();
        bad_hash = 2;
    }
    def __run(){
        if (bad_hash==2){
            bad_hash = flip((1/10));
        }
        if flip(CTRL_PROB){
            Q_in.dupFront();
            Q_out.pushBack((Q_in.takeFront()[0],100));
        }
        if (((bad_hash==1)&&flip((1/3)))||((bad_hash==0)&&flip((1/2)))){
            Q_out.pushBack((Q_in.takeFront()[0],2));
        } else {
            Q_out.pushBack((Q_in.takeFront()[0],3));
        }
    }
}
dat __s2_ty{
    Q_in: Queue, Q_out: Queue;
    def __s2_ty(){
        Q_in = Queue();
        Q_out = Queue();
    }
    def __run(){
        if flip(CTRL_PROB){
            Q_in.dupFront();
            Q_out.pushBack((Q_in.takeFront()[0],100));
        }
        Q_out.pushBack((Q_in.takeFront()[0],2));
    }
}
RunSw:=0, FwdQ:=1;
dat __D{
    __H0 : __h0_ty, __Controller : __controller_ty, __S1 : __s1_ty, __S2 : __s2_ty, __H1 : __h1_ty;
    def __D(){
        __H0 = __h0_ty(), __Controller = __controller_ty(), __S1 = __s1_ty(), __S2 = __s2_ty(), __H1 = __h1_ty();
    }
    def scheduler(){
        actions := ([]: (R x R)[]);
        for i in [0..k){
            if (if i == 0 { __H0.Q_in } else if i == 1 { __Controller.Q_in } else if i == 2 { __S1.Q_in } else if i == 3 { __S2.Q_in } else  { __H1.Q_in }).size() > 0 {
                actions ~= [(RunSw,i)];
            }
            if (if i == 0 { __H0.Q_out } else if i == 1 { __Controller.Q_out } else if i == 2 { __S1.Q_out } else if i == 3 { __S2.Q_out } else  { __H1.Q_out }).size() > 0 {
                actions ~= [(FwdQ,i)];
            }
        }
        return actions[uniformInt(0,actions.length - 1)];
    }
    def __step(){
        if __H0.Q_in.size() || __H0.Q_out.size() || __Controller.Q_in.size() || __Controller.Q_out.size() || __S1.Q_in.size() || __S1.Q_out.size() || __S2.Q_in.size() || __S2.Q_out.size() || __H1.Q_in.size() || __H1.Q_out.size() {
            (action,node) := scheduler();
            if action {
                if node == 0 && __H0.Q_out.size() {
                    (pkt,port) := __H0.Q_out.takeFront();
                    if port == 1 {
                        __S1.Q_in.pushBack((pkt, 1));
                    }
                    if port == 100 {
                        __Controller.Q_in.pushBack((pkt, 3));
                    }
                }
                if node == 1 && __Controller.Q_out.size() {
                    (pkt,port) := __Controller.Q_out.takeFront();
                    if port == 1 {
                        __S1.Q_in.pushBack((pkt, 100));
                    }
                    if port == 2 {
                        __S2.Q_in.pushBack((pkt, 100));
                    }
                    if port == 3 {
                        __H0.Q_in.pushBack((pkt, 100));
                    }
                    if port == 4 {
                        __H1.Q_in.pushBack((pkt, 100));
                    }
                }
                if node == 2 && __S1.Q_out.size() {
                    (pkt,port) := __S1.Q_out.takeFront();
                    if port == 1 {
                        __H0.Q_in.pushBack((pkt, 1));
                    }
                    if port == 2 {
                        __H1.Q_in.pushBack((pkt, 1));
                    }
                    if port == 3 {
                        __S2.Q_in.pushBack((pkt, 1));
                    }
                    if port == 100 {
                        __Controller.Q_in.pushBack((pkt, 1));
                    }
                }
                if node == 3 && __S2.Q_out.size() {
                    (pkt,port) := __S2.Q_out.takeFront();
                    if port == 1 {
                        __S1.Q_in.pushBack((pkt, 3));
                    }
                    if port == 2 {
                        __H1.Q_in.pushBack((pkt, 2));
                    }
                    if port == 100 {
                        __Controller.Q_in.pushBack((pkt, 2));
                    }
                }
                if node == 4 && __H1.Q_out.size() {
                    (pkt,port) := __H1.Q_out.takeFront();
                    if port == 1 {
                        __S1.Q_in.pushBack((pkt, 2));
                    }
                    if port == 2 {
                        __S2.Q_in.pushBack((pkt, 2));
                    }
                    if port == 100 {
                        __Controller.Q_in.pushBack((pkt, 4));
                    }
                }
            } else {
                if node == 0 && __H0.Q_in.size() {
                    __H0.__run();
                }
                if node == 1 && __Controller.Q_in.size() {
                    __Controller.__run();
                }
                if node == 2 && __S1.Q_in.size() {
                    __S1.__run();
                }
                if node == 3 && __S2.Q_in.size() {
                    __S2.__run();
                }
                if node == 4 && __H1.Q_in.size() {
                    __H1.__run();
                }
            }
        }
    }
}
def main(){
    __d := __D();
    __d.__H0.Q_in.pushBack((Packet(),0));
    __d.__H0.__run();
    repeat num_steps {
        __d.__step();
    }
    observe((if Controller == 1 { __d.__Controller.num_packets } else { assert(0) }) == (if Controller == 1 { __d.__Controller.tot_packets } else { assert(0) }));
    assert(!(__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__Controller.Q_in.size() || __d.__Controller.Q_out.size() || __d.__S1.Q_in.size() || __d.__S1.Q_out.size() || __d.__S2.Q_in.size() || __d.__S2.Q_out.size() || __d.__H1.Q_in.size() || __d.__H1.Q_out.size()));
    q₁ := Expectation(((if S1 == 2 { __d.__S1.bad_hash } else { assert(0) })) !=0);
    return (q₁);
}

