
parameters{ NUM_PACKETS(3), COST_01(1), COST_02(2), COST_03(3), COST_12(1), COST_23(1)}

num_steps 30;

queue_capacity 2;

query probability(pkt_count@H1 < NUM_PACKETS);

topology{
	nodes{ H0, H1, S0, S1, S2, S3 }
	links{
		(H0,pt1) <-> (S0,pt1),
		(S0,pt2) <-> (S1,pt1),
		(S0,pt3) <-> (S3,pt1),
		(S0,pt4) <-> (S2,pt1),
		(S1,pt2) <-> (S2,pt2),
		(S2,pt3) <-> (S3,pt2),
		(S3,pt3) <-> (H1,pt1)
	}
}

packet_fields{}

programs{ H0 -> h0, H1 -> h1, S0 -> s0, S1 -> s1, S2 -> s2, S3 -> s3 }

def h0(pkt, port) state pkt_count(0){
	new;
	if pkt_count < NUM_PACKETS{
		new;
		pkt_count = pkt_count + 1;
		fwd(1);
	}else { drop; drop; }
}

def h1(pkt, port) state pkt_count(0){
	pkt_count = pkt_count + 1;
	drop;
}

def s0(pkt, port)
state
route1(0), route2(0), route3(0),
shortest1(0), shortest2(0), shortest3(0),
nshortest(0), which(0)
{
	if port == 1{
		route1 = COST_01 + COST_12 + COST_23;
		route2 = COST_03;
		route3 = COST_02 + COST_23;
		shortest1 = route1 <= route2 && route2 <= route3;
		shortest2 = route2 <= route1 && route2 <= route3;
		shortest3 = route3 <= route1 && route3 <= route2;
		nshortest = shortest1 + shortest2 + shortest3;
		which = uniformInt(1,nshortest);
		if which == shortest1 { fwd(2); }
		else if which == shortest1+shortest2 { fwd(3); }
		else { fwd(4); }
	}
}

def s1(pkt,port){
	if port == 1{
		fwd(2);
	}
}
def s2(pkt,port){
	if port ==  1 || port == 2{
		fwd(3);
	}
}
def s3(pkt,port){
	if port == 1 || port == 2{
		fwd(3);
	}
}


def scheduler() state phase(0), cur_node(0){ // Phase 0: Execute RunSw, Phase 1: Exectue FwdQ
	for p in [0..2){
		if phase == 0{
			for i in [0..k){
				if (Q_in@cur_node).size() > 0{
					return (RunSw,cur_node);
				}
				cur_node = (cur_node + 1) % k;
			}
			phase = 1;
			cur_node = 0;
		}
		if phase == 1{
			for i in [0..k){
				if (Q_out@cur_node).size() > 0{
					return (FwdQ,cur_node);
				}
				cur_node = (cur_node + 1) % k;
			}
			phase = 0;
			cur_node = 0;
		}
	}
	assert(0);
}

