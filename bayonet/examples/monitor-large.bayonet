parameters{ CTRL_PROB(1/5), TRAFFIC_YAHOO(5), TRAFFIC_GOOGLE(10), OBSERVE_BAD(1) }

num_steps 1000;

post_observe num_packets@Controller == tot_packets@Controller;
query probability(bad_hash@S1);

/*
         --S2----Yahoo
        /    ---/    \
       /    /         \
H0---S1---S3---S5------Google
      \       /       /
       \    /        /
        --S4---S6---

Traffic from S1 to Yahoo is split between S2 and S3.
Traffic from S1 to Google is split between S3 and S4.
Traffic from S4 to Google is split between S5 and S6.
Traffic to S3 is forwarded to Yahoo.
*/

topology{
	nodes { H0, Controller, Yahoo, Google, S1, S2, S3, S4, S5, S6 }
	links{
		// links to controller
		(Controller,pt1) <-> (S1,pt100),
		(Controller,pt2) <-> (S2,pt100),
		(Controller,pt3) <-> (S3,pt100),
		(Controller,pt4) <-> (S4,pt100),
		(Controller,pt5) <-> (S5,pt100),
		(Controller,pt6) <-> (S6,pt100),
		(Controller,pt7) <-> (H0,pt100),
		(Controller,pt8) <-> (Yahoo,pt100),
		(Controller,pt9) <-> (Google,pt100),
		
		// network
		(H0,pt1) <-> (S1,pt1),

		(S1,pt2) <-> (S2,pt1),
		(S1,pt3) <-> (S3,pt1),
		(S1,pt4) <-> (S4,pt1),

		(S2,pt2) <-> (Yahoo,pt1),

		(S3,pt2) <-> (Yahoo,pt2),
		(S3,pt3) <-> (S5,pt1),
		
		(S4,pt2) <-> (S5,pt2),
		(S4,pt3) <-> (S6,pt1),

		(Yahoo,pt3) <-> (Google,pt1),

		(S5,pt3) <-> (Google,pt2),

		(S6,pt2) <-> (Google,pt3)
	}
}

packet_fields{ dst }

programs{ Controller -> controller, H0 -> h0, Yahoo -> yahoo, Google -> google, S1 -> s1, S2 -> s2, S3 -> s3, S4 -> s4, S5 -> s5, S6 -> s6 }

def controller(pkt, port) state num_packets(0), tot_packets(1){
	num_packets = num_packets + 1;
	if OBSERVE_BAD {
		// 11 packets
		tot_packets = 11;
		//[(1,Yahoo),(2,Yahoo),(4,Google),(8,Yahoo),(3,Google),(1,Google),(9,Google),(4,Google),(3,Google),(6,Google),(9,Google)]
		if num_packets == 1 {
			observe(port==1 and pkt.dst==Yahoo);
		}else if num_packets == 2 {
			observe(port==2 and pkt.dst==Yahoo);
		}else if num_packets == 3 {
			observe(port==4 and pkt.dst==Google);
		}else if num_packets == 4 {
			observe(port==8 and pkt.dst==Yahoo);
		}else if num_packets == 5 {
			observe(port==3 and pkt.dst==Google);
		}else if num_packets == 6 {
			observe(port==1 and pkt.dst==Google);
		}else if num_packets == 7 {
			observe(port==9 and pkt.dst==Google);
		}else if num_packets == 8 {
			observe(port==4 and pkt.dst==Google);
		}else if num_packets == 9 {
			observe(port==3 and pkt.dst==Google);
		}else if num_packets == 10 {
			observe(port==6 and pkt.dst==Google);
		}else if num_packets == 11 {
			observe(port==9 and pkt.dst==Google);
		}else{
			observe(0);
		}
	}else{
		// 10 packets
		tot_packets = 10;
		// [(1,Yahoo),(4,Google),(8,Yahoo),(1,Google),(6,Google),(9,Google),(1,Google),(4,Google),(6,Google),(9,Google)]
		if num_packets == 1 {
			observe(port==1 and pkt.dst==Yahoo);
		}else if num_packets == 2 {
			observe(port==4 and pkt.dst==Google);
		}else if num_packets == 3 {
			observe(port==8 and pkt.dst==Yahoo);
		}else if num_packets == 4 {
			observe(port==1 and pkt.dst==Google);
		}else if num_packets == 5 {
			observe(port==6 and pkt.dst==Google);
		}else if num_packets == 6 {
			observe(port==9 and pkt.dst==Google);
		}else if num_packets == 7 {
			observe(port==1 and pkt.dst==Google);
		}else if num_packets == 8 {
			observe(port==4 and pkt.dst==Google);
		}else if num_packets == 9 {
			observe(port==6 and pkt.dst==Google);
		}else if num_packets == 10 {
			observe(port==9 and pkt.dst==Google);
		}else{
			observe(0);
		}
	}
	drop;
}

def h0(pkt, port) state num_yahoo(0), num_google(0){
	rem_yahoo := TRAFFIC_YAHOO - num_yahoo;
	rem_google := TRAFFIC_GOOGLE - num_google;
	if rem_yahoo > 0 or rem_google > 0 {
		new;
		if flip(rem_yahoo/(rem_yahoo+rem_google)) {
			num_yahoo = num_yahoo + 1;
			pkt.dst = Yahoo;
		} else {
			num_google = num_google + 1;
			pkt.dst = Google;
		}
		fwd(1);
	}else{
		drop;
	}
}

def yahoo(pkt, port){
	if flip(CTRL_PROB) {
		dup;
		fwd(100);
	}
	if pkt.dst == Yahoo{
		drop;
	}else if pkt.dst == Google{
		fwd(3);
	}
}

def google(pkt, port){
	if flip(CTRL_PROB) {
		dup;
		fwd(100);
	}
	drop;
}

def s1(pkt, port) state bad_hash(2){
	if bad_hash == 2 { bad_hash = flip(1/10); }
	if flip(CTRL_PROB) {
		dup;
		fwd(100);
	}
	if pkt.dst == Yahoo {
		if flip(1/2){
			fwd(2);
		}else{
			fwd(3);
		}
	}else if pkt.dst == Google {
		if bad_hash == 1 and flip(1/3) or bad_hash == 0 and flip(1/2){
			fwd(3);
		}else{
			fwd(4);
		}
	}
}

def s2(pkt, port){
	if flip(CTRL_PROB) {
		dup;
		fwd(100);
	}
	fwd(2);
}

def s3(pkt, port){
	if flip(CTRL_PROB) {
		dup;
		fwd(100);
	}
	fwd(2);
}

def s4(pkt, port){
	if flip(CTRL_PROB) {
		dup;
		fwd(100);
	}
	if flip(1/2){
		fwd(2);
	}else{
		fwd(3);
	}
}

def s5(pkt,port){
	if flip(CTRL_PROB) {
		dup;
		fwd(100);
	}
	fwd(3);
}

def s6(pkt,port){
	if flip(CTRL_PROB) {
		dup;
		fwd(100);
	}
	fwd(2);
}


def scheduler(){
	actions := ([]: (R x R)[]);
	for i in [0..k){
		if (Q_in@i).size() > 0 { actions ~= [(RunSw,i)]; }
		if (Q_out@i).size() > 0 { actions ~= [(FwdQ,i)]; }
	}
	return actions[uniformInt(0,actions.length-1)];
}
