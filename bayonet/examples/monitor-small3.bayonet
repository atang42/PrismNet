parameters{ CTRL_PROB(1/2), TRAFFIC(3), OBSERVE_BAD(0) }

num_steps 40;

post_observe num_packets@Controller == tot_packets@Controller;
query probability(bad_hash@S1);

/*

H0--S1----H1
     \    /
      \  /
       S2

Traffic from S1 to H1 is split between S1 and S2.
*/

topology{
	nodes { H0, Controller, S1, S2, H1 }
	links{
		// links to controller
		(Controller,pt1) <-> (S1,pt100),
		(Controller,pt2) <-> (S2,pt100),
		(Controller,pt3) <-> (H0,pt100),
		(Controller,pt4) <-> (H1,pt100),
		
		// network
		(H0,pt1) <-> (S1,pt1),

		(S1,pt2) <-> (H1,pt1),
		(S1,pt3) <-> (S2,pt1),

		(S2,pt2) <-> (H1,pt2),
	}
}

packet_fields{ }

programs{ Controller -> controller, H0 -> h0, S1 -> s1, S2 -> s2, H1 -> h1 }

def controller(pkt, port) state num_packets(0), tot_packets(1){
	num_packets = num_packets + 1;
	if OBSERVE_BAD {
		// 5 packets
		tot_packets = 5;
		// [2,1,1,2,4]
		if num_packets==1{
			observe(port==2);
		}else if num_packets==2{
			observe(port==1);
		}else if num_packets==3{
			observe(port==1);
		}else if num_packets==4{
			observe(port==2);
		}else if num_packets==5{
			observe(port==4);
		}else{
			observe(0);
		}
	}else{
		// 4 packets
		tot_packets = 4;
		// [4,1,1,4]
		if num_packets==1{
			observe(port==4);
		}else if num_packets==2{
			observe(port==1);
		}else if num_packets==3{
			observe(port==1);
		}else if num_packets==4{
			observe(port==4);
		}else{
			observe(0);
		}
	}
	drop;
}

def h0(pkt, port) state num_sent(0){
	if num_sent < TRAFFIC{
		new;
		num_sent = num_sent + 1;
		fwd(1);
	}else{
		drop;
	}
}

def h1(pkt, port){
	if flip(CTRL_PROB) {
		dup;
		fwd(100);
	}
	drop;
}

def s1(pkt, port) state bad_hash(2){
	if bad_hash == 2 { bad_hash = flip(1/10); }
	if flip(CTRL_PROB) {
		dup;
		fwd(100);
	}
	if bad_hash==1 and flip(1/3) or bad_hash==0 and flip(1/2){
		fwd(2);
	}else{
		fwd(3);
	}
}

def s2(pkt, port){
	if flip(CTRL_PROB) {
		dup;
		fwd(100);
	}
	fwd(2);
}


def scheduler(){
	actions := ([]: (R x R)[]);
	for i in [0..k){
		if (Q_in@i).size() > 0 { actions ~= [(RunSw,i)]; }
		if (Q_out@i).size() > 0 { actions ~= [(FwdQ,i)]; }
	}
	return actions[uniformInt(0,actions.length-1)];
}
