num_steps 10;
query expectation(pkt_count@H0);
query expectation(pkt_count@H1);

parameters{ P }

topology{
    nodes{H0,H1,S0}
    links{
        link1: (H0,pt1) <-> (S0,pt1),
        link2: (S0,pt2) <-> (H1,pt1),
    }
}

packet_fields{ dst }

programs{ H0->h0, H1->h1, S0->s0 }

def h0(pkt,port) state pkt_count(0){
	new;
    pkt_count = pkt_count+1;
    pkt.dst = 1;
    fwd(1);
}

def s0(pkt,port){
    if port == 1{
		if flip(P){
			fwd(2);
		}else{
			drop;
		}
    }else{
        fwd(1);
    }
}

def h1(pkt,port) state pkt_count(0){
    pkt_count = pkt_count+1;
	drop;
}


def scheduler() state num_actions(0){
	actions := ([]: (R x R)[]);
	for i in [0..k){
		if (Q_in@i).size() > 0 { actions ~= [(RunSw,i)]; }
		if (Q_out@i).size() > 0 { actions ~= [(FwdQ,i)]; }
	}
	num_actions += 1;
	return actions[uniformInt(0,actions.length-1)];
}


/*def scheduler(){
    which := uniformInt(1,3);
    node := if which == 1 { H0 }
    else if which == 2 { H1 }
    else { S0 };
    action := if bernoulli(1/2) { FwdQ } else { RunSw };
	return (action,node);
}*/
