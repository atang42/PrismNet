statement: __d := __D'()
particle-size: 1
particle-size: 1
statement: this.__H0 = __h0_ty'() , this.__Controller = __controller_ty'() , this.__S1 = __s1_ty'() , this.__S2 = __s2_ty'() , this.__H1 = __h1_ty'()
statement: this.__H0 = __h0_ty'() , this.__Controller = __controller_ty'() , this.__S1 = __s1_ty'() , this.__S2 = __s2_ty'()
statement: this.__H0 = __h0_ty'() , this.__Controller = __controller_ty'() , this.__S1 = __s1_ty'()
statement: this.__H0 = __h0_ty'() , this.__Controller = __controller_ty'()
statement: this.__H0 = __h0_ty'()
particle-size: 1
particle-size: 1
statement: this.Q_in = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.Q_out = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.num_sent = 0
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.__Controller = __controller_ty'()
particle-size: 1
particle-size: 1
statement: this.Q_in = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.Q_out = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.num_packets = 0
particle-size: 1
statement: this.tot_packets = 1
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.__S1 = __s1_ty'()
particle-size: 1
particle-size: 1
statement: this.Q_in = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.Q_out = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.bad_hash = 2
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.__S2 = __s2_ty'()
particle-size: 1
particle-size: 1
statement: this.Q_in = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.Q_out = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.__H1 = __h1_ty'()
particle-size: 1
particle-size: 1
statement: this.Q_in = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.Q_out = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: __d.__H0.Q_in.pushBack((Packet'(),0))
particle-size: 1
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = this'.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: __d.__H0.__run()
particle-size: 1
particle-size: 1
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.pushFront((Packet'(),0))
particle-size: 1
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = [x] ~ this'.data
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.num_sent = (this'.num_sent + 1)
particle-size: 1
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1))
particle-size: 1
particle-size: 1
statement: r := this'.front()
particle-size: 1
particle-size: 1
statement: return this'.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.popFront()
particle-size: 1
particle-size: 1
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = this'.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: repeat 30 {
    __d.__step();
}
repetition: 1
statement: __d.__step()
particle-size: 1
particle-size: 1
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: (action,node) := this'.scheduler()
particle-size: 1
particle-size: 1
statement: actions := ([]: (R × R)[])
particle-size: 1
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 1
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
statement: actions ~= [(0,i)]
particle-size: 1
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
statement: actions ~= [(1,i)]
particle-size: 1
loop-index: 1
particle-size: 1
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
loop-index: 2
particle-size: 1
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
loop-index: 3
particle-size: 1
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
loop-index: 4
particle-size: 1
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 1
particle-size: 1
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: (pkt,port) := this'.__H0.Q_out.takeFront()
particle-size: 1
particle-size: 1
statement: r := this'.front()
particle-size: 1
particle-size: 1
statement: return this'.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.popFront()
particle-size: 1
particle-size: 1
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = this'.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,3));
}
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.__H0.__run()
particle-size: 1
particle-size: 1
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.pushFront((Packet'(),0))
particle-size: 1
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = [x] ~ this'.data
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.num_sent = (this'.num_sent + 1)
particle-size: 1
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1))
particle-size: 1
particle-size: 1
statement: r := this'.front()
particle-size: 1
particle-size: 1
statement: return this'.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.popFront()
particle-size: 1
particle-size: 1
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = this'.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
repetition: 2
statement: __d.__step()
particle-size: 2
particle-size: 2
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: (action,node) := this'.scheduler()
particle-size: 2
particle-size: 2
statement: actions := ([]: (R × R)[])
particle-size: 2
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 2
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
statement: actions ~= [(0,i)]
particle-size: 2
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
statement: actions ~= [(1,i)]
particle-size: 1
loop-index: 1
particle-size: 2
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
loop-index: 2
particle-size: 2
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
statement: actions ~= [(0,i)]
particle-size: 1
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
loop-index: 3
particle-size: 2
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
loop-index: 4
particle-size: 2
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 2
particle-size: 2
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: (pkt,port) := this'.__H0.Q_out.takeFront()
particle-size: 1
particle-size: 1
statement: r := this'.front()
particle-size: 1
particle-size: 1
statement: return this'.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.popFront()
particle-size: 1
particle-size: 1
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = this'.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,3));
}
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.__H0.__run()
particle-size: 2
particle-size: 2
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.pushFront((Packet'(),0))
particle-size: 1
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = [x] ~ this'.data
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.num_sent = (this'.num_sent + 1)
particle-size: 1
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1))
particle-size: 1
particle-size: 1
statement: r := this'.front()
particle-size: 1
particle-size: 1
statement: return this'.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.popFront()
particle-size: 1
particle-size: 1
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = this'.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.Q_in.popFront()
particle-size: 1
particle-size: 1
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.__S1.__run()
particle-size: 1
particle-size: 1
statement: if (this'.bad_hash == 2) {
    this'.bad_hash = flip((1 / 10));
}
statement: this'.bad_hash = flip((1 / 10))
particle-size: 1
particle-size: 1
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 2
particle-size: 2
particle-size: 2
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 2
particle-size: 2
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 4
particle-size: 4
statement: this'.Q_in.dupFront()
particle-size: 2
particle-size: 2
statement: this'.pushFront(this'.front())
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = [x] ~ this'.data
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 2
particle-size: 2
statement: r := this'.front()
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.popFront()
particle-size: 2
particle-size: 2
statement: this'.data = this'.data[1..this'.size()]
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return r
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = this'.data ~ [x]
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if (((this'.bad_hash == 1) && flip((1 / 3))) || ((this'.bad_hash == 0) && flip((1 / 2)))) {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
} else {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
}
particle-size: 4
particle-size: 4
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 16
particle-size: 16
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 8
particle-size: 8
statement: r := this'.front()
particle-size: 8
particle-size: 8
statement: return this'.data[0]
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.popFront()
particle-size: 8
particle-size: 8
statement: this'.data = this'.data[1..this'.size()]
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return r
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.data = this'.data ~ [x]
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3))
particle-size: 8
particle-size: 8
statement: r := this'.front()
particle-size: 8
particle-size: 8
statement: return this'.data[0]
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.popFront()
particle-size: 8
particle-size: 8
statement: this'.data = this'.data[1..this'.size()]
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return r
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.data = this'.data ~ [x]
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 16
particle-size: 8
particle-size: 8
particle-size: 8
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return ()
particle-size: 11
particle-size: 11
particle-size: 11
particle-size: 10
repetition: 3
statement: __d.__step()
particle-size: 10
particle-size: 10
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: (action,node) := this'.scheduler()
particle-size: 10
particle-size: 10
statement: actions := ([]: (R × R)[])
particle-size: 10
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 10
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
statement: actions ~= [(0,i)]
particle-size: 9
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
statement: actions ~= [(1,i)]
particle-size: 2
loop-index: 1
particle-size: 10
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
loop-index: 2
particle-size: 10
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
statement: actions ~= [(0,i)]
particle-size: 1
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
statement: actions ~= [(1,i)]
particle-size: 8
loop-index: 3
particle-size: 10
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
loop-index: 4
particle-size: 10
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 10
particle-size: 10
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: (pkt,port) := this'.__H0.Q_out.takeFront()
particle-size: 2
particle-size: 2
statement: r := this'.front()
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.popFront()
particle-size: 2
particle-size: 2
statement: this'.data = this'.data[1..this'.size()]
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return r
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = this'.data ~ [x]
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,3));
}
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 8
particle-size: 8
statement: r := this'.front()
particle-size: 8
particle-size: 8
statement: return this'.data[0]
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.popFront()
particle-size: 8
particle-size: 8
statement: this'.data = this'.data[1..this'.size()]
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return r
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: if port == 1 {
    this'.__H0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,1));
}
statement: this'.__H1.Q_in.pushBack((pkt,1))
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = this'.data ~ [x]
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = this'.data ~ [x]
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,1));
}
statement: this'.__Controller.Q_in.pushBack((pkt,1))
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.data = this'.data ~ [x]
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.__H0.__run()
particle-size: 9
particle-size: 9
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.pushFront((Packet'(),0))
particle-size: 8
particle-size: 8
statement: return this
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.data = [x] ~ this'.data
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.num_sent = (this'.num_sent + 1)
particle-size: 8
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1))
particle-size: 8
particle-size: 8
statement: r := this'.front()
particle-size: 8
particle-size: 8
statement: return this'.data[0]
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.popFront()
particle-size: 8
particle-size: 8
statement: this'.data = this'.data[1..this'.size()]
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return r
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.data = this'.data ~ [x]
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.Q_in.popFront()
particle-size: 1
particle-size: 1
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.__S1.__run()
particle-size: 1
particle-size: 1
statement: if (this'.bad_hash == 2) {
    this'.bad_hash = flip((1 / 10));
}
statement: this'.bad_hash = flip((1 / 10))
particle-size: 1
particle-size: 1
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 2
particle-size: 2
particle-size: 2
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 2
particle-size: 2
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 4
particle-size: 4
statement: this'.Q_in.dupFront()
particle-size: 2
particle-size: 2
statement: this'.pushFront(this'.front())
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = [x] ~ this'.data
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 2
particle-size: 2
statement: r := this'.front()
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.popFront()
particle-size: 2
particle-size: 2
statement: this'.data = this'.data[1..this'.size()]
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return r
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = this'.data ~ [x]
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if (((this'.bad_hash == 1) && flip((1 / 3))) || ((this'.bad_hash == 0) && flip((1 / 2)))) {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
} else {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
}
particle-size: 4
particle-size: 4
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 16
particle-size: 16
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 8
particle-size: 8
statement: r := this'.front()
particle-size: 8
particle-size: 8
statement: return this'.data[0]
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.popFront()
particle-size: 8
particle-size: 8
statement: this'.data = this'.data[1..this'.size()]
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return r
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.data = this'.data ~ [x]
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3))
particle-size: 8
particle-size: 8
statement: r := this'.front()
particle-size: 8
particle-size: 8
statement: return this'.data[0]
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.popFront()
particle-size: 8
particle-size: 8
statement: this'.data = this'.data[1..this'.size()]
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return r
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.data = this'.data ~ [x]
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 16
particle-size: 8
particle-size: 8
particle-size: 8
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 17
particle-size: 17
statement: return this'.data.length
particle-size: 17
particle-size: 17
particle-size: 17
particle-size: 17
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 17
particle-size: 17
statement: return this'.data.length
particle-size: 17
particle-size: 17
particle-size: 17
particle-size: 17
statement: return ()
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 18
repetition: 4
statement: __d.__step()
particle-size: 18
particle-size: 18
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: (action,node) := this'.scheduler()
particle-size: 18
particle-size: 18
statement: actions := ([]: (R × R)[])
particle-size: 18
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 18
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
statement: actions ~= [(0,i)]
particle-size: 17
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
statement: actions ~= [(1,i)]
particle-size: 9
loop-index: 1
particle-size: 18
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
statement: actions ~= [(0,i)]
particle-size: 4
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
loop-index: 2
particle-size: 18
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
statement: actions ~= [(0,i)]
particle-size: 2
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
statement: actions ~= [(1,i)]
particle-size: 12
loop-index: 3
particle-size: 18
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
statement: actions ~= [(0,i)]
particle-size: 2
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
loop-index: 4
particle-size: 18
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
statement: actions ~= [(0,i)]
particle-size: 2
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 18
particle-size: 18
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 21
particle-size: 21
statement: return this'.data.length
particle-size: 21
particle-size: 21
particle-size: 21
particle-size: 21
statement: (pkt,port) := this'.__H0.Q_out.takeFront()
particle-size: 9
particle-size: 9
statement: r := this'.front()
particle-size: 9
particle-size: 9
statement: return this'.data[0]
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this'.popFront()
particle-size: 9
particle-size: 9
statement: this'.data = this'.data[1..this'.size()]
particle-size: 9
particle-size: 9
statement: return this'.data.length
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return r
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 9
particle-size: 9
particle-size: 9
statement: this'.data = this'.data ~ [x]
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,3));
}
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 21
particle-size: 21
statement: return this'.data.length
particle-size: 21
particle-size: 21
particle-size: 21
particle-size: 21
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 21
particle-size: 21
statement: return this'.data.length
particle-size: 21
particle-size: 21
particle-size: 21
particle-size: 21
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 12
particle-size: 12
statement: r := this'.front()
particle-size: 12
particle-size: 12
statement: return this'.data[0]
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.popFront()
particle-size: 12
particle-size: 12
statement: this'.data = this'.data[1..this'.size()]
particle-size: 12
particle-size: 12
statement: return this'.data.length
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: return ()
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: return r
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: if port == 1 {
    this'.__H0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,1));
}
statement: this'.__H1.Q_in.pushBack((pkt,1))
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.data = this'.data ~ [x]
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.data = this'.data ~ [x]
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,1));
}
statement: this'.__Controller.Q_in.pushBack((pkt,1))
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.data = this'.data ~ [x]
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 21
particle-size: 21
statement: return this'.data.length
particle-size: 21
particle-size: 21
particle-size: 21
particle-size: 21
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 21
particle-size: 21
statement: return this'.data.length
particle-size: 21
particle-size: 21
particle-size: 21
particle-size: 21
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: this'.__H0.__run()
particle-size: 17
particle-size: 17
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.pushFront((Packet'(),0))
particle-size: 8
particle-size: 8
statement: return this
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.data = [x] ~ this'.data
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.num_sent = (this'.num_sent + 1)
particle-size: 8
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1))
particle-size: 8
particle-size: 8
statement: r := this'.front()
particle-size: 8
particle-size: 8
statement: return this'.data[0]
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.popFront()
particle-size: 8
particle-size: 8
statement: this'.data = this'.data[1..this'.size()]
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return r
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.data = this'.data ~ [x]
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.Q_in.popFront()
particle-size: 9
particle-size: 9
statement: this'.data = this'.data[1..this'.size()]
particle-size: 9
particle-size: 9
statement: return this'.data.length
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 17
particle-size: 17
particle-size: 17
particle-size: 17
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: this'.__Controller.__run()
particle-size: 4
particle-size: 4
statement: this'.num_packets = (this'.num_packets + 1)
particle-size: 4
statement: if 0 {
    this'.tot_packets = 4;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 2));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 4) {
        observe((this'.Q_in.data[0][1] == 4));
    } else {
        observe(0);
    }
} else {
    this'.tot_packets = 3;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 2));
    } else {
        observe(0);
    }
}
statement: this'.tot_packets = 3
particle-size: 4
statement: if (this'.num_packets == 1) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 2));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 4))
particle-size: 0
particle-size: 0
particle-size: 0
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 23
particle-size: 23
statement: return this'.data.length
particle-size: 23
particle-size: 23
particle-size: 23
particle-size: 23
statement: this'.__S1.__run()
particle-size: 2
particle-size: 2
statement: if (this'.bad_hash == 2) {
    this'.bad_hash = flip((1 / 10));
}
statement: this'.bad_hash = flip((1 / 10))
particle-size: 2
particle-size: 2
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 4
particle-size: 4
particle-size: 4
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 4
particle-size: 4
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 8
particle-size: 8
statement: this'.Q_in.dupFront()
particle-size: 4
particle-size: 4
statement: this'.pushFront(this'.front())
particle-size: 4
particle-size: 4
statement: return this'.data[0]
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.data = [x] ~ this'.data
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 4
particle-size: 4
statement: r := this'.front()
particle-size: 4
particle-size: 4
statement: return this'.data[0]
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.popFront()
particle-size: 4
particle-size: 4
statement: this'.data = this'.data[1..this'.size()]
particle-size: 4
particle-size: 4
statement: return this'.data.length
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return r
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.data = this'.data ~ [x]
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: if (((this'.bad_hash == 1) && flip((1 / 3))) || ((this'.bad_hash == 0) && flip((1 / 2)))) {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
} else {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
}
particle-size: 8
particle-size: 8
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 32
particle-size: 32
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 16
particle-size: 16
statement: r := this'.front()
particle-size: 16
particle-size: 16
statement: return this'.data[0]
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.popFront()
particle-size: 16
particle-size: 16
statement: this'.data = this'.data[1..this'.size()]
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return r
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.data = this'.data ~ [x]
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3))
particle-size: 16
particle-size: 16
statement: r := this'.front()
particle-size: 16
particle-size: 16
statement: return this'.data[0]
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.popFront()
particle-size: 16
particle-size: 16
statement: this'.data = this'.data[1..this'.size()]
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return r
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.data = this'.data ~ [x]
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return ()
particle-size: 32
particle-size: 16
particle-size: 16
particle-size: 16
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 37
particle-size: 37
statement: return this'.data.length
particle-size: 37
particle-size: 37
particle-size: 37
particle-size: 37
statement: this'.__S2.__run()
particle-size: 2
particle-size: 2
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 2
particle-size: 2
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 4
particle-size: 4
statement: this'.Q_in.dupFront()
particle-size: 2
particle-size: 2
statement: this'.pushFront(this'.front())
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = [x] ~ this'.data
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 2
particle-size: 2
statement: r := this'.front()
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.popFront()
particle-size: 2
particle-size: 2
statement: this'.data = this'.data[1..this'.size()]
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return r
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = this'.data ~ [x]
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 4
particle-size: 4
statement: r := this'.front()
particle-size: 4
particle-size: 4
statement: return this'.data[0]
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.popFront()
particle-size: 4
particle-size: 4
statement: this'.data = this'.data[1..this'.size()]
particle-size: 4
particle-size: 4
statement: return this'.data.length
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return r
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.data = this'.data ~ [x]
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 39
particle-size: 39
statement: return this'.data.length
particle-size: 39
particle-size: 39
particle-size: 39
particle-size: 39
statement: this'.__H1.__run()
particle-size: 2
particle-size: 2
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 2
particle-size: 2
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 4
particle-size: 4
statement: this'.Q_in.dupFront()
particle-size: 2
particle-size: 2
statement: this'.pushFront(this'.front())
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = [x] ~ this'.data
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 2
particle-size: 2
statement: r := this'.front()
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.popFront()
particle-size: 2
particle-size: 2
statement: this'.data = this'.data[1..this'.size()]
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return r
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = this'.data ~ [x]
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.Q_in.popFront()
particle-size: 4
particle-size: 4
statement: this'.data = this'.data[1..this'.size()]
particle-size: 4
particle-size: 4
statement: return this'.data.length
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 62
particle-size: 62
particle-size: 62
particle-size: 37
repetition: 5
statement: __d.__step()
particle-size: 37
particle-size: 37
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 37
particle-size: 37
statement: return this'.data.length
particle-size: 37
particle-size: 37
particle-size: 37
particle-size: 37
particle-size: 37
particle-size: 37
statement: return this'.data.length
particle-size: 37
particle-size: 37
particle-size: 37
particle-size: 37
particle-size: 37
particle-size: 37
statement: return this'.data.length
particle-size: 37
particle-size: 37
particle-size: 37
particle-size: 37
particle-size: 37
particle-size: 37
statement: return this'.data.length
particle-size: 37
particle-size: 37
particle-size: 37
particle-size: 37
particle-size: 37
particle-size: 37
statement: return this'.data.length
particle-size: 37
particle-size: 37
particle-size: 37
particle-size: 37
particle-size: 37
particle-size: 37
statement: return this'.data.length
particle-size: 37
particle-size: 37
particle-size: 37
particle-size: 37
particle-size: 37
particle-size: 37
statement: return this'.data.length
particle-size: 37
particle-size: 37
particle-size: 37
particle-size: 37
particle-size: 37
particle-size: 37
statement: return this'.data.length
particle-size: 37
particle-size: 37
particle-size: 37
particle-size: 37
particle-size: 37
particle-size: 37
statement: return this'.data.length
particle-size: 37
particle-size: 37
particle-size: 37
particle-size: 37
particle-size: 37
particle-size: 37
statement: return this'.data.length
particle-size: 37
particle-size: 37
particle-size: 37
particle-size: 37
statement: (action,node) := this'.scheduler()
particle-size: 37
particle-size: 37
statement: actions := ([]: (R × R)[])
particle-size: 37
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 37
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 37
particle-size: 37
statement: return this'.data.length
particle-size: 37
particle-size: 37
particle-size: 37
statement: actions ~= [(0,i)]
particle-size: 28
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 37
particle-size: 37
statement: return this'.data.length
particle-size: 37
particle-size: 37
particle-size: 37
statement: actions ~= [(1,i)]
particle-size: 16
loop-index: 1
particle-size: 37
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 37
particle-size: 37
statement: return this'.data.length
particle-size: 37
particle-size: 37
particle-size: 37
statement: actions ~= [(0,i)]
particle-size: 8
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 37
particle-size: 37
statement: return this'.data.length
particle-size: 37
particle-size: 37
particle-size: 37
loop-index: 2
particle-size: 37
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 37
particle-size: 37
statement: return this'.data.length
particle-size: 37
particle-size: 37
particle-size: 37
statement: actions ~= [(0,i)]
particle-size: 9
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 37
particle-size: 37
statement: return this'.data.length
particle-size: 37
particle-size: 37
particle-size: 37
statement: actions ~= [(1,i)]
particle-size: 20
loop-index: 3
particle-size: 37
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 37
particle-size: 37
statement: return this'.data.length
particle-size: 37
particle-size: 37
particle-size: 37
statement: actions ~= [(0,i)]
particle-size: 4
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 37
particle-size: 37
statement: return this'.data.length
particle-size: 37
particle-size: 37
particle-size: 37
statement: actions ~= [(1,i)]
particle-size: 4
loop-index: 4
particle-size: 37
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 37
particle-size: 37
statement: return this'.data.length
particle-size: 37
particle-size: 37
particle-size: 37
statement: actions ~= [(0,i)]
particle-size: 4
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 37
particle-size: 37
statement: return this'.data.length
particle-size: 37
particle-size: 37
particle-size: 37
statement: actions ~= [(1,i)]
particle-size: 2
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 37
particle-size: 37
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 95
particle-size: 95
particle-size: 95
particle-size: 95
particle-size: 95
particle-size: 95
particle-size: 95
particle-size: 95
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 42
particle-size: 42
statement: return this'.data.length
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: (pkt,port) := this'.__H0.Q_out.takeFront()
particle-size: 16
particle-size: 16
statement: r := this'.front()
particle-size: 16
particle-size: 16
statement: return this'.data[0]
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.popFront()
particle-size: 16
particle-size: 16
statement: this'.data = this'.data[1..this'.size()]
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return r
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.data = this'.data ~ [x]
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,3));
}
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 42
particle-size: 42
statement: return this'.data.length
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 42
particle-size: 42
statement: return this'.data.length
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 20
particle-size: 20
statement: r := this'.front()
particle-size: 20
particle-size: 20
statement: return this'.data[0]
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: this'.popFront()
particle-size: 20
particle-size: 20
statement: this'.data = this'.data[1..this'.size()]
particle-size: 20
particle-size: 20
statement: return this'.data.length
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: return ()
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: return r
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: if port == 1 {
    this'.__H0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,1));
}
statement: this'.__H1.Q_in.pushBack((pkt,1))
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.data = this'.data ~ [x]
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.data = this'.data ~ [x]
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,1));
}
statement: this'.__Controller.Q_in.pushBack((pkt,1))
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.data = this'.data ~ [x]
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 42
particle-size: 42
statement: return this'.data.length
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 4
particle-size: 4
statement: r := this'.front()
particle-size: 4
particle-size: 4
statement: return this'.data[0]
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.popFront()
particle-size: 4
particle-size: 4
statement: this'.data = this'.data[1..this'.size()]
particle-size: 4
particle-size: 4
statement: return this'.data.length
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return r
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,3));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,2));
}
statement: this'.__H1.Q_in.pushBack((pkt,2))
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = this'.data ~ [x]
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,2));
}
statement: this'.__Controller.Q_in.pushBack((pkt,2))
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = this'.data ~ [x]
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 42
particle-size: 42
statement: return this'.data.length
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: (pkt,port) := this'.__H1.Q_out.takeFront()
particle-size: 2
particle-size: 2
statement: r := this'.front()
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.popFront()
particle-size: 2
particle-size: 2
statement: this'.data = this'.data[1..this'.size()]
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return r
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this'.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,4));
}
statement: this'.__Controller.Q_in.pushBack((pkt,4))
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = this'.data ~ [x]
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 53
particle-size: 53
statement: return this'.data.length
particle-size: 53
particle-size: 53
particle-size: 53
particle-size: 53
statement: this'.__H0.__run()
particle-size: 28
particle-size: 28
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.pushFront((Packet'(),0))
particle-size: 12
particle-size: 12
statement: return this
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.data = [x] ~ this'.data
particle-size: 12
statement: return ()
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.num_sent = (this'.num_sent + 1)
particle-size: 12
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1))
particle-size: 12
particle-size: 12
statement: r := this'.front()
particle-size: 12
particle-size: 12
statement: return this'.data[0]
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.popFront()
particle-size: 12
particle-size: 12
statement: this'.data = this'.data[1..this'.size()]
particle-size: 12
particle-size: 12
statement: return this'.data.length
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: return ()
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: return r
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.data = this'.data ~ [x]
particle-size: 12
statement: return ()
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.Q_in.popFront()
particle-size: 16
particle-size: 16
statement: this'.data = this'.data[1..this'.size()]
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return ()
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 53
particle-size: 53
statement: return this'.data.length
particle-size: 53
particle-size: 53
particle-size: 53
particle-size: 53
statement: this'.__Controller.__run()
particle-size: 8
particle-size: 8
statement: this'.num_packets = (this'.num_packets + 1)
particle-size: 8
statement: if 0 {
    this'.tot_packets = 4;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 2));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 4) {
        observe((this'.Q_in.data[0][1] == 4));
    } else {
        observe(0);
    }
} else {
    this'.tot_packets = 3;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 2));
    } else {
        observe(0);
    }
}
statement: this'.tot_packets = 3
particle-size: 8
statement: if (this'.num_packets == 1) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 2));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 4))
particle-size: 0
particle-size: 0
particle-size: 0
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 45
particle-size: 45
statement: return this'.data.length
particle-size: 45
particle-size: 45
particle-size: 45
particle-size: 45
statement: this'.__S1.__run()
particle-size: 9
particle-size: 9
statement: if (this'.bad_hash == 2) {
    this'.bad_hash = flip((1 / 10));
}
statement: this'.bad_hash = flip((1 / 10))
particle-size: 1
particle-size: 1
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 2
particle-size: 2
particle-size: 2
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 10
particle-size: 10
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 20
particle-size: 20
statement: this'.Q_in.dupFront()
particle-size: 10
particle-size: 10
statement: this'.pushFront(this'.front())
particle-size: 10
particle-size: 10
statement: return this'.data[0]
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.data = [x] ~ this'.data
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 10
particle-size: 10
statement: r := this'.front()
particle-size: 10
particle-size: 10
statement: return this'.data[0]
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.popFront()
particle-size: 10
particle-size: 10
statement: this'.data = this'.data[1..this'.size()]
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return r
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.data = this'.data ~ [x]
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: if (((this'.bad_hash == 1) && flip((1 / 3))) || ((this'.bad_hash == 0) && flip((1 / 2)))) {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
} else {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
}
particle-size: 20
particle-size: 20
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 80
particle-size: 80
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 40
particle-size: 40
statement: r := this'.front()
particle-size: 40
particle-size: 40
statement: return this'.data[0]
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: this'.popFront()
particle-size: 40
particle-size: 40
statement: this'.data = this'.data[1..this'.size()]
particle-size: 40
particle-size: 40
statement: return this'.data.length
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: return ()
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: return r
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: this'.data = this'.data ~ [x]
particle-size: 40
statement: return ()
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3))
particle-size: 40
particle-size: 40
statement: r := this'.front()
particle-size: 40
particle-size: 40
statement: return this'.data[0]
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: this'.popFront()
particle-size: 40
particle-size: 40
statement: this'.data = this'.data[1..this'.size()]
particle-size: 40
particle-size: 40
statement: return this'.data.length
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: return ()
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: return r
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: this'.data = this'.data ~ [x]
particle-size: 40
statement: return ()
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: return ()
particle-size: 80
particle-size: 40
particle-size: 40
particle-size: 40
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 76
particle-size: 76
statement: return this'.data.length
particle-size: 76
particle-size: 76
particle-size: 76
particle-size: 76
statement: this'.__S2.__run()
particle-size: 4
particle-size: 4
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 4
particle-size: 4
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 8
particle-size: 8
statement: this'.Q_in.dupFront()
particle-size: 4
particle-size: 4
statement: this'.pushFront(this'.front())
particle-size: 4
particle-size: 4
statement: return this'.data[0]
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.data = [x] ~ this'.data
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 4
particle-size: 4
statement: r := this'.front()
particle-size: 4
particle-size: 4
statement: return this'.data[0]
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.popFront()
particle-size: 4
particle-size: 4
statement: this'.data = this'.data[1..this'.size()]
particle-size: 4
particle-size: 4
statement: return this'.data.length
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return r
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.data = this'.data ~ [x]
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 8
particle-size: 8
statement: r := this'.front()
particle-size: 8
particle-size: 8
statement: return this'.data[0]
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.popFront()
particle-size: 8
particle-size: 8
statement: this'.data = this'.data[1..this'.size()]
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return r
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.data = this'.data ~ [x]
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 80
particle-size: 80
statement: return this'.data.length
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: this'.__H1.__run()
particle-size: 4
particle-size: 4
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 4
particle-size: 4
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 8
particle-size: 8
statement: this'.Q_in.dupFront()
particle-size: 4
particle-size: 4
statement: this'.pushFront(this'.front())
particle-size: 4
particle-size: 4
statement: return this'.data[0]
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.data = [x] ~ this'.data
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 4
particle-size: 4
statement: r := this'.front()
particle-size: 4
particle-size: 4
statement: return this'.data[0]
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.popFront()
particle-size: 4
particle-size: 4
statement: this'.data = this'.data[1..this'.size()]
particle-size: 4
particle-size: 4
statement: return this'.data.length
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return r
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.data = this'.data ~ [x]
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.Q_in.popFront()
particle-size: 8
particle-size: 8
statement: this'.data = this'.data[1..this'.size()]
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 82
repetition: 6
statement: __d.__step()
particle-size: 82
particle-size: 82
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 82
particle-size: 82
statement: return this'.data.length
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
statement: return this'.data.length
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
statement: return this'.data.length
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
statement: return this'.data.length
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
statement: return this'.data.length
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
statement: return this'.data.length
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
statement: return this'.data.length
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
statement: return this'.data.length
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
statement: return this'.data.length
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
statement: return this'.data.length
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
statement: (action,node) := this'.scheduler()
particle-size: 82
particle-size: 82
statement: actions := ([]: (R × R)[])
particle-size: 82
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 82
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 82
particle-size: 82
statement: return this'.data.length
particle-size: 82
particle-size: 82
particle-size: 82
statement: actions ~= [(0,i)]
particle-size: 66
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 82
particle-size: 82
statement: return this'.data.length
particle-size: 82
particle-size: 82
particle-size: 82
statement: actions ~= [(1,i)]
particle-size: 20
loop-index: 1
particle-size: 82
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 82
particle-size: 82
statement: return this'.data.length
particle-size: 82
particle-size: 82
particle-size: 82
statement: actions ~= [(0,i)]
particle-size: 24
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 82
particle-size: 82
statement: return this'.data.length
particle-size: 82
particle-size: 82
particle-size: 82
loop-index: 2
particle-size: 82
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 82
particle-size: 82
statement: return this'.data.length
particle-size: 82
particle-size: 82
particle-size: 82
statement: actions ~= [(0,i)]
particle-size: 16
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 82
particle-size: 82
statement: return this'.data.length
particle-size: 82
particle-size: 82
particle-size: 82
statement: actions ~= [(1,i)]
particle-size: 48
loop-index: 3
particle-size: 82
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 82
particle-size: 82
statement: return this'.data.length
particle-size: 82
particle-size: 82
particle-size: 82
statement: actions ~= [(0,i)]
particle-size: 6
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 82
particle-size: 82
statement: return this'.data.length
particle-size: 82
particle-size: 82
particle-size: 82
statement: actions ~= [(1,i)]
particle-size: 10
loop-index: 4
particle-size: 82
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 82
particle-size: 82
statement: return this'.data.length
particle-size: 82
particle-size: 82
particle-size: 82
statement: actions ~= [(0,i)]
particle-size: 8
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 82
particle-size: 82
statement: return this'.data.length
particle-size: 82
particle-size: 82
particle-size: 82
statement: actions ~= [(1,i)]
particle-size: 4
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 82
particle-size: 82
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 202
particle-size: 202
particle-size: 202
particle-size: 202
particle-size: 202
particle-size: 202
particle-size: 202
particle-size: 202
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 82
particle-size: 82
statement: return this'.data.length
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
statement: (pkt,port) := this'.__H0.Q_out.takeFront()
particle-size: 20
particle-size: 20
statement: r := this'.front()
particle-size: 20
particle-size: 20
statement: return this'.data[0]
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: this'.popFront()
particle-size: 20
particle-size: 20
statement: this'.data = this'.data[1..this'.size()]
particle-size: 20
particle-size: 20
statement: return this'.data.length
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: return ()
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: return r
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 20
particle-size: 20
particle-size: 20
statement: this'.data = this'.data ~ [x]
particle-size: 20
statement: return ()
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,3));
}
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 82
particle-size: 82
statement: return this'.data.length
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 82
particle-size: 82
statement: return this'.data.length
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 48
particle-size: 48
statement: r := this'.front()
particle-size: 48
particle-size: 48
statement: return this'.data[0]
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: this'.popFront()
particle-size: 48
particle-size: 48
statement: this'.data = this'.data[1..this'.size()]
particle-size: 48
particle-size: 48
statement: return this'.data.length
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: return ()
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: return r
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: if port == 1 {
    this'.__H0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,1));
}
statement: this'.__H1.Q_in.pushBack((pkt,1))
particle-size: 14
particle-size: 14
particle-size: 14
statement: this'.data = this'.data ~ [x]
particle-size: 14
statement: return ()
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 14
particle-size: 14
particle-size: 14
statement: this'.data = this'.data ~ [x]
particle-size: 14
statement: return ()
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,1));
}
statement: this'.__Controller.Q_in.pushBack((pkt,1))
particle-size: 20
particle-size: 20
particle-size: 20
statement: this'.data = this'.data ~ [x]
particle-size: 20
statement: return ()
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 82
particle-size: 82
statement: return this'.data.length
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 10
particle-size: 10
statement: r := this'.front()
particle-size: 10
particle-size: 10
statement: return this'.data[0]
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.popFront()
particle-size: 10
particle-size: 10
statement: this'.data = this'.data[1..this'.size()]
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return r
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,3));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,2));
}
statement: this'.__H1.Q_in.pushBack((pkt,2))
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.data = this'.data ~ [x]
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,2));
}
statement: this'.__Controller.Q_in.pushBack((pkt,2))
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.data = this'.data ~ [x]
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 82
particle-size: 82
statement: return this'.data.length
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
statement: (pkt,port) := this'.__H1.Q_out.takeFront()
particle-size: 4
particle-size: 4
statement: r := this'.front()
particle-size: 4
particle-size: 4
statement: return this'.data[0]
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.popFront()
particle-size: 4
particle-size: 4
statement: this'.data = this'.data[1..this'.size()]
particle-size: 4
particle-size: 4
statement: return this'.data.length
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return r
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this'.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,4));
}
statement: this'.__Controller.Q_in.pushBack((pkt,4))
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.data = this'.data ~ [x]
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 120
particle-size: 120
statement: return this'.data.length
particle-size: 120
particle-size: 120
particle-size: 120
particle-size: 120
statement: this'.__H0.__run()
particle-size: 66
particle-size: 66
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.pushFront((Packet'(),0))
particle-size: 14
particle-size: 14
statement: return this
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: this'.data = [x] ~ this'.data
particle-size: 14
statement: return ()
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: this'.num_sent = (this'.num_sent + 1)
particle-size: 14
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1))
particle-size: 14
particle-size: 14
statement: r := this'.front()
particle-size: 14
particle-size: 14
statement: return this'.data[0]
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: this'.popFront()
particle-size: 14
particle-size: 14
statement: this'.data = this'.data[1..this'.size()]
particle-size: 14
particle-size: 14
statement: return this'.data.length
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: return ()
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: return r
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: this'.data = this'.data ~ [x]
particle-size: 14
statement: return ()
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: this'.Q_in.popFront()
particle-size: 52
particle-size: 52
statement: this'.data = this'.data[1..this'.size()]
particle-size: 52
particle-size: 52
statement: return this'.data.length
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
statement: return ()
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
statement: return ()
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 120
particle-size: 120
statement: return this'.data.length
particle-size: 120
particle-size: 120
particle-size: 120
particle-size: 120
statement: this'.__Controller.__run()
particle-size: 24
particle-size: 24
statement: this'.num_packets = (this'.num_packets + 1)
particle-size: 24
statement: if 0 {
    this'.tot_packets = 4;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 2));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 4) {
        observe((this'.Q_in.data[0][1] == 4));
    } else {
        observe(0);
    }
} else {
    this'.tot_packets = 3;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 2));
    } else {
        observe(0);
    }
}
statement: this'.tot_packets = 3
particle-size: 24
statement: if (this'.num_packets == 1) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 2));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 4))
statement: this'.Q_in.popFront()
particle-size: 2
particle-size: 2
statement: this'.data = this'.data[1..this'.size()]
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 98
particle-size: 98
statement: return this'.data.length
particle-size: 98
particle-size: 98
particle-size: 98
particle-size: 98
statement: this'.__S1.__run()
particle-size: 16
particle-size: 16
statement: if (this'.bad_hash == 2) {
    this'.bad_hash = flip((1 / 10));
}
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 16
particle-size: 16
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 32
particle-size: 32
statement: this'.Q_in.dupFront()
particle-size: 16
particle-size: 16
statement: this'.pushFront(this'.front())
particle-size: 16
particle-size: 16
statement: return this'.data[0]
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.data = [x] ~ this'.data
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 16
particle-size: 16
statement: r := this'.front()
particle-size: 16
particle-size: 16
statement: return this'.data[0]
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.popFront()
particle-size: 16
particle-size: 16
statement: this'.data = this'.data[1..this'.size()]
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return r
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.data = this'.data ~ [x]
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: if (((this'.bad_hash == 1) && flip((1 / 3))) || ((this'.bad_hash == 0) && flip((1 / 2)))) {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
} else {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
}
particle-size: 32
particle-size: 32
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 128
particle-size: 128
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 64
particle-size: 64
statement: r := this'.front()
particle-size: 64
particle-size: 64
statement: return this'.data[0]
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: this'.popFront()
particle-size: 64
particle-size: 64
statement: this'.data = this'.data[1..this'.size()]
particle-size: 64
particle-size: 64
statement: return this'.data.length
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: return ()
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: return r
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: this'.data = this'.data ~ [x]
particle-size: 64
statement: return ()
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3))
particle-size: 64
particle-size: 64
statement: r := this'.front()
particle-size: 64
particle-size: 64
statement: return this'.data[0]
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: this'.popFront()
particle-size: 64
particle-size: 64
statement: this'.data = this'.data[1..this'.size()]
particle-size: 64
particle-size: 64
statement: return this'.data.length
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: return ()
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: return r
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: this'.data = this'.data ~ [x]
particle-size: 64
statement: return ()
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: return ()
particle-size: 128
particle-size: 64
particle-size: 64
particle-size: 64
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 146
particle-size: 146
statement: return this'.data.length
particle-size: 146
particle-size: 146
particle-size: 146
particle-size: 146
statement: this'.__S2.__run()
particle-size: 6
particle-size: 6
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 6
particle-size: 6
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 12
particle-size: 12
statement: this'.Q_in.dupFront()
particle-size: 6
particle-size: 6
statement: this'.pushFront(this'.front())
particle-size: 6
particle-size: 6
statement: return this'.data[0]
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.data = [x] ~ this'.data
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 6
particle-size: 6
statement: r := this'.front()
particle-size: 6
particle-size: 6
statement: return this'.data[0]
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.popFront()
particle-size: 6
particle-size: 6
statement: this'.data = this'.data[1..this'.size()]
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return r
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.data = this'.data ~ [x]
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 12
particle-size: 12
statement: r := this'.front()
particle-size: 12
particle-size: 12
statement: return this'.data[0]
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.popFront()
particle-size: 12
particle-size: 12
statement: this'.data = this'.data[1..this'.size()]
particle-size: 12
particle-size: 12
statement: return this'.data.length
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: return ()
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: return r
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.data = this'.data ~ [x]
particle-size: 12
statement: return ()
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: return ()
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 152
particle-size: 152
statement: return this'.data.length
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
statement: this'.__H1.__run()
particle-size: 8
particle-size: 8
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 8
particle-size: 8
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 16
particle-size: 16
statement: this'.Q_in.dupFront()
particle-size: 8
particle-size: 8
statement: this'.pushFront(this'.front())
particle-size: 8
particle-size: 8
statement: return this'.data[0]
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.data = [x] ~ this'.data
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 8
particle-size: 8
statement: r := this'.front()
particle-size: 8
particle-size: 8
statement: return this'.data[0]
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.popFront()
particle-size: 8
particle-size: 8
statement: this'.data = this'.data[1..this'.size()]
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return r
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.data = this'.data ~ [x]
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.Q_in.popFront()
particle-size: 16
particle-size: 16
statement: this'.data = this'.data[1..this'.size()]
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return ()
particle-size: 242
particle-size: 242
particle-size: 242
particle-size: 148
repetition: 7
statement: __d.__step()
particle-size: 148
particle-size: 148
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 148
particle-size: 148
statement: return this'.data.length
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
statement: return this'.data.length
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
statement: return this'.data.length
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
statement: return this'.data.length
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
statement: return this'.data.length
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
statement: return this'.data.length
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
statement: return this'.data.length
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
statement: return this'.data.length
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
statement: return this'.data.length
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
statement: return this'.data.length
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
statement: (action,node) := this'.scheduler()
particle-size: 148
particle-size: 148
statement: actions := ([]: (R × R)[])
particle-size: 148
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 148
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 148
particle-size: 148
statement: return this'.data.length
particle-size: 148
particle-size: 148
particle-size: 148
statement: actions ~= [(0,i)]
particle-size: 96
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 148
particle-size: 148
statement: return this'.data.length
particle-size: 148
particle-size: 148
particle-size: 148
statement: actions ~= [(1,i)]
particle-size: 26
loop-index: 1
particle-size: 148
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 148
particle-size: 148
statement: return this'.data.length
particle-size: 148
particle-size: 148
particle-size: 148
statement: actions ~= [(0,i)]
particle-size: 64
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 148
particle-size: 148
statement: return this'.data.length
particle-size: 148
particle-size: 148
particle-size: 148
loop-index: 2
particle-size: 148
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 148
particle-size: 148
statement: return this'.data.length
particle-size: 148
particle-size: 148
particle-size: 148
statement: actions ~= [(0,i)]
particle-size: 20
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 148
particle-size: 148
statement: return this'.data.length
particle-size: 148
particle-size: 148
particle-size: 148
statement: actions ~= [(1,i)]
particle-size: 92
loop-index: 3
particle-size: 148
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 148
particle-size: 148
statement: return this'.data.length
particle-size: 148
particle-size: 148
particle-size: 148
statement: actions ~= [(0,i)]
particle-size: 18
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 148
particle-size: 148
statement: return this'.data.length
particle-size: 148
particle-size: 148
particle-size: 148
statement: actions ~= [(1,i)]
particle-size: 16
loop-index: 4
particle-size: 148
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 148
particle-size: 148
statement: return this'.data.length
particle-size: 148
particle-size: 148
particle-size: 148
statement: actions ~= [(0,i)]
particle-size: 24
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 148
particle-size: 148
statement: return this'.data.length
particle-size: 148
particle-size: 148
particle-size: 148
statement: actions ~= [(1,i)]
particle-size: 8
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 148
particle-size: 148
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 364
particle-size: 364
particle-size: 364
particle-size: 364
particle-size: 364
particle-size: 364
particle-size: 364
particle-size: 364
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 142
particle-size: 142
statement: return this'.data.length
particle-size: 142
particle-size: 142
particle-size: 142
particle-size: 142
statement: (pkt,port) := this'.__H0.Q_out.takeFront()
particle-size: 26
particle-size: 26
statement: r := this'.front()
particle-size: 26
particle-size: 26
statement: return this'.data[0]
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: this'.popFront()
particle-size: 26
particle-size: 26
statement: this'.data = this'.data[1..this'.size()]
particle-size: 26
particle-size: 26
statement: return this'.data.length
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: return ()
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: return r
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 26
particle-size: 26
particle-size: 26
statement: this'.data = this'.data ~ [x]
particle-size: 26
statement: return ()
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,3));
}
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 142
particle-size: 142
statement: return this'.data.length
particle-size: 142
particle-size: 142
particle-size: 142
particle-size: 142
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 142
particle-size: 142
statement: return this'.data.length
particle-size: 142
particle-size: 142
particle-size: 142
particle-size: 142
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 92
particle-size: 92
statement: r := this'.front()
particle-size: 92
particle-size: 92
statement: return this'.data[0]
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: this'.popFront()
particle-size: 92
particle-size: 92
statement: this'.data = this'.data[1..this'.size()]
particle-size: 92
particle-size: 92
statement: return this'.data.length
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: return ()
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: return r
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: if port == 1 {
    this'.__H0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,1));
}
statement: this'.__H1.Q_in.pushBack((pkt,1))
particle-size: 30
particle-size: 30
particle-size: 30
statement: this'.data = this'.data ~ [x]
particle-size: 30
statement: return ()
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 30
particle-size: 30
particle-size: 30
statement: this'.data = this'.data ~ [x]
particle-size: 30
statement: return ()
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,1));
}
statement: this'.__Controller.Q_in.pushBack((pkt,1))
particle-size: 32
particle-size: 32
particle-size: 32
statement: this'.data = this'.data ~ [x]
particle-size: 32
statement: return ()
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 142
particle-size: 142
statement: return this'.data.length
particle-size: 142
particle-size: 142
particle-size: 142
particle-size: 142
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 16
particle-size: 16
statement: r := this'.front()
particle-size: 16
particle-size: 16
statement: return this'.data[0]
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.popFront()
particle-size: 16
particle-size: 16
statement: this'.data = this'.data[1..this'.size()]
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return r
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,3));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,2));
}
statement: this'.__H1.Q_in.pushBack((pkt,2))
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.data = this'.data ~ [x]
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,2));
}
statement: this'.__Controller.Q_in.pushBack((pkt,2))
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.data = this'.data ~ [x]
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 142
particle-size: 142
statement: return this'.data.length
particle-size: 142
particle-size: 142
particle-size: 142
particle-size: 142
statement: (pkt,port) := this'.__H1.Q_out.takeFront()
particle-size: 8
particle-size: 8
statement: r := this'.front()
particle-size: 8
particle-size: 8
statement: return this'.data[0]
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.popFront()
particle-size: 8
particle-size: 8
statement: this'.data = this'.data[1..this'.size()]
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return r
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this'.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,4));
}
statement: this'.__Controller.Q_in.pushBack((pkt,4))
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.data = this'.data ~ [x]
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 222
particle-size: 222
statement: return this'.data.length
particle-size: 222
particle-size: 222
particle-size: 222
particle-size: 222
statement: this'.__H0.__run()
particle-size: 96
particle-size: 96
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.pushFront((Packet'(),0))
particle-size: 14
particle-size: 14
statement: return this
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: this'.data = [x] ~ this'.data
particle-size: 14
statement: return ()
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: this'.num_sent = (this'.num_sent + 1)
particle-size: 14
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1))
particle-size: 14
particle-size: 14
statement: r := this'.front()
particle-size: 14
particle-size: 14
statement: return this'.data[0]
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: this'.popFront()
particle-size: 14
particle-size: 14
statement: this'.data = this'.data[1..this'.size()]
particle-size: 14
particle-size: 14
statement: return this'.data.length
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: return ()
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: return r
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: this'.data = this'.data ~ [x]
particle-size: 14
statement: return ()
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: this'.Q_in.popFront()
particle-size: 82
particle-size: 82
statement: this'.data = this'.data[1..this'.size()]
particle-size: 82
particle-size: 82
statement: return this'.data.length
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
statement: return ()
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
statement: return ()
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 222
particle-size: 222
statement: return this'.data.length
particle-size: 222
particle-size: 222
particle-size: 222
particle-size: 222
statement: this'.__Controller.__run()
particle-size: 64
particle-size: 64
statement: this'.num_packets = (this'.num_packets + 1)
particle-size: 64
statement: if 0 {
    this'.tot_packets = 4;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 2));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 4) {
        observe((this'.Q_in.data[0][1] == 4));
    } else {
        observe(0);
    }
} else {
    this'.tot_packets = 3;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 2));
    } else {
        observe(0);
    }
}
statement: this'.tot_packets = 3
particle-size: 64
statement: if (this'.num_packets == 1) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 2));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 4))
statement: this'.Q_in.popFront()
particle-size: 2
particle-size: 2
statement: this'.data = this'.data[1..this'.size()]
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 160
particle-size: 160
statement: return this'.data.length
particle-size: 160
particle-size: 160
particle-size: 160
particle-size: 160
statement: this'.__S1.__run()
particle-size: 20
particle-size: 20
statement: if (this'.bad_hash == 2) {
    this'.bad_hash = flip((1 / 10));
}
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 20
particle-size: 20
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 40
particle-size: 40
statement: this'.Q_in.dupFront()
particle-size: 20
particle-size: 20
statement: this'.pushFront(this'.front())
particle-size: 20
particle-size: 20
statement: return this'.data[0]
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: this'.data = [x] ~ this'.data
particle-size: 20
statement: return ()
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: return ()
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 20
particle-size: 20
statement: r := this'.front()
particle-size: 20
particle-size: 20
statement: return this'.data[0]
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: this'.popFront()
particle-size: 20
particle-size: 20
statement: this'.data = this'.data[1..this'.size()]
particle-size: 20
particle-size: 20
statement: return this'.data.length
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: return ()
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: return r
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: this'.data = this'.data ~ [x]
particle-size: 20
statement: return ()
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: if (((this'.bad_hash == 1) && flip((1 / 3))) || ((this'.bad_hash == 0) && flip((1 / 2)))) {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
} else {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
}
particle-size: 40
particle-size: 40
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 160
particle-size: 160
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 80
particle-size: 80
statement: r := this'.front()
particle-size: 80
particle-size: 80
statement: return this'.data[0]
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: this'.popFront()
particle-size: 80
particle-size: 80
statement: this'.data = this'.data[1..this'.size()]
particle-size: 80
particle-size: 80
statement: return this'.data.length
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: return ()
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: return r
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: this'.data = this'.data ~ [x]
particle-size: 80
statement: return ()
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3))
particle-size: 80
particle-size: 80
statement: r := this'.front()
particle-size: 80
particle-size: 80
statement: return this'.data[0]
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: this'.popFront()
particle-size: 80
particle-size: 80
statement: this'.data = this'.data[1..this'.size()]
particle-size: 80
particle-size: 80
statement: return this'.data.length
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: return ()
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: return r
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: this'.data = this'.data ~ [x]
particle-size: 80
statement: return ()
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: return ()
particle-size: 160
particle-size: 80
particle-size: 80
particle-size: 80
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 220
particle-size: 220
statement: return this'.data.length
particle-size: 220
particle-size: 220
particle-size: 220
particle-size: 220
statement: this'.__S2.__run()
particle-size: 18
particle-size: 18
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 18
particle-size: 18
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 36
particle-size: 36
statement: this'.Q_in.dupFront()
particle-size: 18
particle-size: 18
statement: this'.pushFront(this'.front())
particle-size: 18
particle-size: 18
statement: return this'.data[0]
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.data = [x] ~ this'.data
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 18
particle-size: 18
statement: r := this'.front()
particle-size: 18
particle-size: 18
statement: return this'.data[0]
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.popFront()
particle-size: 18
particle-size: 18
statement: this'.data = this'.data[1..this'.size()]
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return r
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.data = this'.data ~ [x]
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 36
particle-size: 36
statement: r := this'.front()
particle-size: 36
particle-size: 36
statement: return this'.data[0]
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: this'.popFront()
particle-size: 36
particle-size: 36
statement: this'.data = this'.data[1..this'.size()]
particle-size: 36
particle-size: 36
statement: return this'.data.length
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: return ()
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: return r
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: this'.data = this'.data ~ [x]
particle-size: 36
statement: return ()
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: return ()
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 238
particle-size: 238
statement: return this'.data.length
particle-size: 238
particle-size: 238
particle-size: 238
particle-size: 238
statement: this'.__H1.__run()
particle-size: 24
particle-size: 24
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 24
particle-size: 24
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 48
particle-size: 48
statement: this'.Q_in.dupFront()
particle-size: 24
particle-size: 24
statement: this'.pushFront(this'.front())
particle-size: 24
particle-size: 24
statement: return this'.data[0]
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: this'.data = [x] ~ this'.data
particle-size: 24
statement: return ()
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: return ()
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 24
particle-size: 24
statement: r := this'.front()
particle-size: 24
particle-size: 24
statement: return this'.data[0]
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: this'.popFront()
particle-size: 24
particle-size: 24
statement: this'.data = this'.data[1..this'.size()]
particle-size: 24
particle-size: 24
statement: return this'.data.length
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: return ()
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: return r
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: this'.data = this'.data ~ [x]
particle-size: 24
statement: return ()
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: this'.Q_in.popFront()
particle-size: 48
particle-size: 48
statement: this'.data = this'.data[1..this'.size()]
particle-size: 48
particle-size: 48
statement: return this'.data.length
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: return ()
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: return ()
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: return ()
particle-size: 404
particle-size: 404
particle-size: 404
particle-size: 200
repetition: 8
statement: __d.__step()
particle-size: 200
particle-size: 200
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 200
particle-size: 200
statement: return this'.data.length
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
statement: return this'.data.length
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
statement: return this'.data.length
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
statement: return this'.data.length
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
statement: return this'.data.length
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
statement: return this'.data.length
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
statement: return this'.data.length
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
statement: return this'.data.length
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
statement: return this'.data.length
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
statement: return this'.data.length
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
statement: (action,node) := this'.scheduler()
particle-size: 200
particle-size: 200
statement: actions := ([]: (R × R)[])
particle-size: 200
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 200
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 200
particle-size: 200
statement: return this'.data.length
particle-size: 200
particle-size: 200
particle-size: 200
statement: actions ~= [(0,i)]
particle-size: 118
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 200
particle-size: 200
statement: return this'.data.length
particle-size: 200
particle-size: 200
particle-size: 200
statement: actions ~= [(1,i)]
particle-size: 28
loop-index: 1
particle-size: 200
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 200
particle-size: 200
statement: return this'.data.length
particle-size: 200
particle-size: 200
particle-size: 200
statement: actions ~= [(0,i)]
particle-size: 104
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 200
particle-size: 200
statement: return this'.data.length
particle-size: 200
particle-size: 200
particle-size: 200
loop-index: 2
particle-size: 200
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 200
particle-size: 200
statement: return this'.data.length
particle-size: 200
particle-size: 200
particle-size: 200
statement: actions ~= [(0,i)]
particle-size: 26
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 200
particle-size: 200
statement: return this'.data.length
particle-size: 200
particle-size: 200
particle-size: 200
statement: actions ~= [(1,i)]
particle-size: 128
loop-index: 3
particle-size: 200
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 200
particle-size: 200
statement: return this'.data.length
particle-size: 200
particle-size: 200
particle-size: 200
statement: actions ~= [(0,i)]
particle-size: 30
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 200
particle-size: 200
statement: return this'.data.length
particle-size: 200
particle-size: 200
particle-size: 200
statement: actions ~= [(1,i)]
particle-size: 42
loop-index: 4
particle-size: 200
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 200
particle-size: 200
statement: return this'.data.length
particle-size: 200
particle-size: 200
particle-size: 200
statement: actions ~= [(0,i)]
particle-size: 40
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 200
particle-size: 200
statement: return this'.data.length
particle-size: 200
particle-size: 200
particle-size: 200
statement: actions ~= [(1,i)]
particle-size: 24
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 200
particle-size: 200
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 540
particle-size: 540
particle-size: 540
particle-size: 540
particle-size: 540
particle-size: 540
particle-size: 540
particle-size: 540
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 222
particle-size: 222
statement: return this'.data.length
particle-size: 222
particle-size: 222
particle-size: 222
particle-size: 222
statement: (pkt,port) := this'.__H0.Q_out.takeFront()
particle-size: 28
particle-size: 28
statement: r := this'.front()
particle-size: 28
particle-size: 28
statement: return this'.data[0]
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
statement: this'.popFront()
particle-size: 28
particle-size: 28
statement: this'.data = this'.data[1..this'.size()]
particle-size: 28
particle-size: 28
statement: return this'.data.length
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
statement: return ()
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
statement: return r
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 28
particle-size: 28
particle-size: 28
statement: this'.data = this'.data ~ [x]
particle-size: 28
statement: return ()
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,3));
}
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 222
particle-size: 222
statement: return this'.data.length
particle-size: 222
particle-size: 222
particle-size: 222
particle-size: 222
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 222
particle-size: 222
statement: return this'.data.length
particle-size: 222
particle-size: 222
particle-size: 222
particle-size: 222
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 128
particle-size: 128
statement: r := this'.front()
particle-size: 128
particle-size: 128
statement: return this'.data[0]
particle-size: 128
particle-size: 128
particle-size: 128
particle-size: 128
particle-size: 128
statement: this'.popFront()
particle-size: 128
particle-size: 128
statement: this'.data = this'.data[1..this'.size()]
particle-size: 128
particle-size: 128
statement: return this'.data.length
particle-size: 128
particle-size: 128
particle-size: 128
particle-size: 128
particle-size: 128
statement: return ()
particle-size: 128
particle-size: 128
particle-size: 128
particle-size: 128
statement: return r
particle-size: 128
particle-size: 128
particle-size: 128
particle-size: 128
particle-size: 128
particle-size: 128
statement: if port == 1 {
    this'.__H0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,1));
}
statement: this'.__H1.Q_in.pushBack((pkt,1))
particle-size: 32
particle-size: 32
particle-size: 32
statement: this'.data = this'.data ~ [x]
particle-size: 32
statement: return ()
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 32
particle-size: 32
particle-size: 32
statement: this'.data = this'.data ~ [x]
particle-size: 32
statement: return ()
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,1));
}
statement: this'.__Controller.Q_in.pushBack((pkt,1))
particle-size: 64
particle-size: 64
particle-size: 64
statement: this'.data = this'.data ~ [x]
particle-size: 64
statement: return ()
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 222
particle-size: 222
statement: return this'.data.length
particle-size: 222
particle-size: 222
particle-size: 222
particle-size: 222
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 42
particle-size: 42
statement: r := this'.front()
particle-size: 42
particle-size: 42
statement: return this'.data[0]
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: this'.popFront()
particle-size: 42
particle-size: 42
statement: this'.data = this'.data[1..this'.size()]
particle-size: 42
particle-size: 42
statement: return this'.data.length
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: return ()
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: return r
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,3));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,2));
}
statement: this'.__H1.Q_in.pushBack((pkt,2))
particle-size: 24
particle-size: 24
particle-size: 24
statement: this'.data = this'.data ~ [x]
particle-size: 24
statement: return ()
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,2));
}
statement: this'.__Controller.Q_in.pushBack((pkt,2))
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.data = this'.data ~ [x]
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 222
particle-size: 222
statement: return this'.data.length
particle-size: 222
particle-size: 222
particle-size: 222
particle-size: 222
statement: (pkt,port) := this'.__H1.Q_out.takeFront()
particle-size: 24
particle-size: 24
statement: r := this'.front()
particle-size: 24
particle-size: 24
statement: return this'.data[0]
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: this'.popFront()
particle-size: 24
particle-size: 24
statement: this'.data = this'.data[1..this'.size()]
particle-size: 24
particle-size: 24
statement: return this'.data.length
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: return ()
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: return r
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this'.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,4));
}
statement: this'.__Controller.Q_in.pushBack((pkt,4))
particle-size: 24
particle-size: 24
particle-size: 24
statement: this'.data = this'.data ~ [x]
particle-size: 24
statement: return ()
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 318
particle-size: 318
statement: return this'.data.length
particle-size: 318
particle-size: 318
particle-size: 318
particle-size: 318
statement: this'.__H0.__run()
particle-size: 118
particle-size: 118
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.pushFront((Packet'(),0))
particle-size: 12
particle-size: 12
statement: return this
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.data = [x] ~ this'.data
particle-size: 12
statement: return ()
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.num_sent = (this'.num_sent + 1)
particle-size: 12
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1))
particle-size: 12
particle-size: 12
statement: r := this'.front()
particle-size: 12
particle-size: 12
statement: return this'.data[0]
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.popFront()
particle-size: 12
particle-size: 12
statement: this'.data = this'.data[1..this'.size()]
particle-size: 12
particle-size: 12
statement: return this'.data.length
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: return ()
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: return r
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.data = this'.data ~ [x]
particle-size: 12
statement: return ()
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.Q_in.popFront()
particle-size: 106
particle-size: 106
statement: this'.data = this'.data[1..this'.size()]
particle-size: 106
particle-size: 106
statement: return this'.data.length
particle-size: 106
particle-size: 106
particle-size: 106
particle-size: 106
particle-size: 106
statement: return ()
particle-size: 106
particle-size: 106
particle-size: 106
particle-size: 106
statement: return ()
particle-size: 118
particle-size: 118
particle-size: 118
particle-size: 118
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 318
particle-size: 318
statement: return this'.data.length
particle-size: 318
particle-size: 318
particle-size: 318
particle-size: 318
statement: this'.__Controller.__run()
particle-size: 104
particle-size: 104
statement: this'.num_packets = (this'.num_packets + 1)
particle-size: 104
statement: if 0 {
    this'.tot_packets = 4;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 2));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 4) {
        observe((this'.Q_in.data[0][1] == 4));
    } else {
        observe(0);
    }
} else {
    this'.tot_packets = 3;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 2));
    } else {
        observe(0);
    }
}
statement: this'.tot_packets = 3
particle-size: 104
statement: if (this'.num_packets == 1) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 2));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 4))
statement: this'.Q_in.popFront()
particle-size: 6
particle-size: 6
statement: this'.data = this'.data[1..this'.size()]
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 220
particle-size: 220
statement: return this'.data.length
particle-size: 220
particle-size: 220
particle-size: 220
particle-size: 220
statement: this'.__S1.__run()
particle-size: 26
particle-size: 26
statement: if (this'.bad_hash == 2) {
    this'.bad_hash = flip((1 / 10));
}
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 26
particle-size: 26
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 52
particle-size: 52
statement: this'.Q_in.dupFront()
particle-size: 26
particle-size: 26
statement: this'.pushFront(this'.front())
particle-size: 26
particle-size: 26
statement: return this'.data[0]
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: this'.data = [x] ~ this'.data
particle-size: 26
statement: return ()
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: return ()
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 26
particle-size: 26
statement: r := this'.front()
particle-size: 26
particle-size: 26
statement: return this'.data[0]
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: this'.popFront()
particle-size: 26
particle-size: 26
statement: this'.data = this'.data[1..this'.size()]
particle-size: 26
particle-size: 26
statement: return this'.data.length
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: return ()
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: return r
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: this'.data = this'.data ~ [x]
particle-size: 26
statement: return ()
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: if (((this'.bad_hash == 1) && flip((1 / 3))) || ((this'.bad_hash == 0) && flip((1 / 2)))) {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
} else {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
}
particle-size: 52
particle-size: 52
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 208
particle-size: 208
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 104
particle-size: 104
statement: r := this'.front()
particle-size: 104
particle-size: 104
statement: return this'.data[0]
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: this'.popFront()
particle-size: 104
particle-size: 104
statement: this'.data = this'.data[1..this'.size()]
particle-size: 104
particle-size: 104
statement: return this'.data.length
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: return ()
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: return r
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: this'.data = this'.data ~ [x]
particle-size: 104
statement: return ()
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3))
particle-size: 104
particle-size: 104
statement: r := this'.front()
particle-size: 104
particle-size: 104
statement: return this'.data[0]
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: this'.popFront()
particle-size: 104
particle-size: 104
statement: this'.data = this'.data[1..this'.size()]
particle-size: 104
particle-size: 104
statement: return this'.data.length
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: return ()
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: return r
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: this'.data = this'.data ~ [x]
particle-size: 104
statement: return ()
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: return ()
particle-size: 208
particle-size: 104
particle-size: 104
particle-size: 104
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 298
particle-size: 298
statement: return this'.data.length
particle-size: 298
particle-size: 298
particle-size: 298
particle-size: 298
statement: this'.__S2.__run()
particle-size: 30
particle-size: 30
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 30
particle-size: 30
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 60
particle-size: 60
statement: this'.Q_in.dupFront()
particle-size: 30
particle-size: 30
statement: this'.pushFront(this'.front())
particle-size: 30
particle-size: 30
statement: return this'.data[0]
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
statement: this'.data = [x] ~ this'.data
particle-size: 30
statement: return ()
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
statement: return ()
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 30
particle-size: 30
statement: r := this'.front()
particle-size: 30
particle-size: 30
statement: return this'.data[0]
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
statement: this'.popFront()
particle-size: 30
particle-size: 30
statement: this'.data = this'.data[1..this'.size()]
particle-size: 30
particle-size: 30
statement: return this'.data.length
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
statement: return ()
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
statement: return r
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
statement: this'.data = this'.data ~ [x]
particle-size: 30
statement: return ()
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 60
particle-size: 60
statement: r := this'.front()
particle-size: 60
particle-size: 60
statement: return this'.data[0]
particle-size: 60
particle-size: 60
particle-size: 60
particle-size: 60
particle-size: 60
statement: this'.popFront()
particle-size: 60
particle-size: 60
statement: this'.data = this'.data[1..this'.size()]
particle-size: 60
particle-size: 60
statement: return this'.data.length
particle-size: 60
particle-size: 60
particle-size: 60
particle-size: 60
particle-size: 60
statement: return ()
particle-size: 60
particle-size: 60
particle-size: 60
particle-size: 60
statement: return r
particle-size: 60
particle-size: 60
particle-size: 60
particle-size: 60
particle-size: 60
particle-size: 60
particle-size: 60
statement: this'.data = this'.data ~ [x]
particle-size: 60
statement: return ()
particle-size: 60
particle-size: 60
particle-size: 60
particle-size: 60
statement: return ()
particle-size: 60
particle-size: 60
particle-size: 60
particle-size: 60
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 328
particle-size: 328
statement: return this'.data.length
particle-size: 328
particle-size: 328
particle-size: 328
particle-size: 328
statement: this'.__H1.__run()
particle-size: 40
particle-size: 40
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 40
particle-size: 40
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 80
particle-size: 80
statement: this'.Q_in.dupFront()
particle-size: 40
particle-size: 40
statement: this'.pushFront(this'.front())
particle-size: 40
particle-size: 40
statement: return this'.data[0]
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: this'.data = [x] ~ this'.data
particle-size: 40
statement: return ()
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: return ()
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 40
particle-size: 40
statement: r := this'.front()
particle-size: 40
particle-size: 40
statement: return this'.data[0]
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: this'.popFront()
particle-size: 40
particle-size: 40
statement: this'.data = this'.data[1..this'.size()]
particle-size: 40
particle-size: 40
statement: return this'.data.length
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: return ()
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: return r
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: this'.data = this'.data ~ [x]
particle-size: 40
statement: return ()
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: this'.Q_in.popFront()
particle-size: 80
particle-size: 80
statement: this'.data = this'.data[1..this'.size()]
particle-size: 80
particle-size: 80
statement: return this'.data.length
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: return ()
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: return ()
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: return ()
particle-size: 590
particle-size: 590
particle-size: 590
particle-size: 256
repetition: 9
statement: __d.__step()
particle-size: 256
particle-size: 256
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 256
particle-size: 256
statement: return this'.data.length
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
statement: return this'.data.length
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
statement: return this'.data.length
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
statement: return this'.data.length
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
statement: return this'.data.length
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
statement: return this'.data.length
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
statement: return this'.data.length
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
statement: return this'.data.length
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
statement: return this'.data.length
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
statement: return this'.data.length
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
statement: (action,node) := this'.scheduler()
particle-size: 256
particle-size: 256
statement: actions := ([]: (R × R)[])
particle-size: 256
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 256
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 256
particle-size: 256
statement: return this'.data.length
particle-size: 256
particle-size: 256
particle-size: 256
statement: actions ~= [(0,i)]
particle-size: 150
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 256
particle-size: 256
statement: return this'.data.length
particle-size: 256
particle-size: 256
particle-size: 256
statement: actions ~= [(1,i)]
particle-size: 26
loop-index: 1
particle-size: 256
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 256
particle-size: 256
statement: return this'.data.length
particle-size: 256
particle-size: 256
particle-size: 256
statement: actions ~= [(0,i)]
particle-size: 158
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 256
particle-size: 256
statement: return this'.data.length
particle-size: 256
particle-size: 256
particle-size: 256
loop-index: 2
particle-size: 256
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 256
particle-size: 256
statement: return this'.data.length
particle-size: 256
particle-size: 256
particle-size: 256
statement: actions ~= [(0,i)]
particle-size: 28
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 256
particle-size: 256
statement: return this'.data.length
particle-size: 256
particle-size: 256
particle-size: 256
statement: actions ~= [(1,i)]
particle-size: 164
loop-index: 3
particle-size: 256
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 256
particle-size: 256
statement: return this'.data.length
particle-size: 256
particle-size: 256
particle-size: 256
statement: actions ~= [(0,i)]
particle-size: 32
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 256
particle-size: 256
statement: return this'.data.length
particle-size: 256
particle-size: 256
particle-size: 256
statement: actions ~= [(1,i)]
particle-size: 78
loop-index: 4
particle-size: 256
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 256
particle-size: 256
statement: return this'.data.length
particle-size: 256
particle-size: 256
particle-size: 256
statement: actions ~= [(0,i)]
particle-size: 56
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 256
particle-size: 256
statement: return this'.data.length
particle-size: 256
particle-size: 256
particle-size: 256
statement: actions ~= [(1,i)]
particle-size: 40
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 256
particle-size: 256
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 732
particle-size: 732
particle-size: 732
particle-size: 732
particle-size: 732
particle-size: 732
particle-size: 732
particle-size: 732
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 308
particle-size: 308
statement: return this'.data.length
particle-size: 308
particle-size: 308
particle-size: 308
particle-size: 308
statement: (pkt,port) := this'.__H0.Q_out.takeFront()
particle-size: 26
particle-size: 26
statement: r := this'.front()
particle-size: 26
particle-size: 26
statement: return this'.data[0]
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: this'.popFront()
particle-size: 26
particle-size: 26
statement: this'.data = this'.data[1..this'.size()]
particle-size: 26
particle-size: 26
statement: return this'.data.length
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: return ()
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: return r
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 26
particle-size: 26
particle-size: 26
statement: this'.data = this'.data ~ [x]
particle-size: 26
statement: return ()
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,3));
}
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 308
particle-size: 308
statement: return this'.data.length
particle-size: 308
particle-size: 308
particle-size: 308
particle-size: 308
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 308
particle-size: 308
statement: return this'.data.length
particle-size: 308
particle-size: 308
particle-size: 308
particle-size: 308
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 164
particle-size: 164
statement: r := this'.front()
particle-size: 164
particle-size: 164
statement: return this'.data[0]
particle-size: 164
particle-size: 164
particle-size: 164
particle-size: 164
particle-size: 164
statement: this'.popFront()
particle-size: 164
particle-size: 164
statement: this'.data = this'.data[1..this'.size()]
particle-size: 164
particle-size: 164
statement: return this'.data.length
particle-size: 164
particle-size: 164
particle-size: 164
particle-size: 164
particle-size: 164
statement: return ()
particle-size: 164
particle-size: 164
particle-size: 164
particle-size: 164
statement: return r
particle-size: 164
particle-size: 164
particle-size: 164
particle-size: 164
particle-size: 164
particle-size: 164
statement: if port == 1 {
    this'.__H0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,1));
}
statement: this'.__H1.Q_in.pushBack((pkt,1))
particle-size: 30
particle-size: 30
particle-size: 30
statement: this'.data = this'.data ~ [x]
particle-size: 30
statement: return ()
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 30
particle-size: 30
particle-size: 30
statement: this'.data = this'.data ~ [x]
particle-size: 30
statement: return ()
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,1));
}
statement: this'.__Controller.Q_in.pushBack((pkt,1))
particle-size: 104
particle-size: 104
particle-size: 104
statement: this'.data = this'.data ~ [x]
particle-size: 104
statement: return ()
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 308
particle-size: 308
statement: return this'.data.length
particle-size: 308
particle-size: 308
particle-size: 308
particle-size: 308
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 78
particle-size: 78
statement: r := this'.front()
particle-size: 78
particle-size: 78
statement: return this'.data[0]
particle-size: 78
particle-size: 78
particle-size: 78
particle-size: 78
particle-size: 78
statement: this'.popFront()
particle-size: 78
particle-size: 78
statement: this'.data = this'.data[1..this'.size()]
particle-size: 78
particle-size: 78
statement: return this'.data.length
particle-size: 78
particle-size: 78
particle-size: 78
particle-size: 78
particle-size: 78
statement: return ()
particle-size: 78
particle-size: 78
particle-size: 78
particle-size: 78
statement: return r
particle-size: 78
particle-size: 78
particle-size: 78
particle-size: 78
particle-size: 78
particle-size: 78
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,3));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,2));
}
statement: this'.__H1.Q_in.pushBack((pkt,2))
particle-size: 48
particle-size: 48
particle-size: 48
statement: this'.data = this'.data ~ [x]
particle-size: 48
statement: return ()
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,2));
}
statement: this'.__Controller.Q_in.pushBack((pkt,2))
particle-size: 30
particle-size: 30
particle-size: 30
statement: this'.data = this'.data ~ [x]
particle-size: 30
statement: return ()
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 308
particle-size: 308
statement: return this'.data.length
particle-size: 308
particle-size: 308
particle-size: 308
particle-size: 308
statement: (pkt,port) := this'.__H1.Q_out.takeFront()
particle-size: 40
particle-size: 40
statement: r := this'.front()
particle-size: 40
particle-size: 40
statement: return this'.data[0]
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: this'.popFront()
particle-size: 40
particle-size: 40
statement: this'.data = this'.data[1..this'.size()]
particle-size: 40
particle-size: 40
statement: return this'.data.length
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: return ()
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: return r
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this'.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,4));
}
statement: this'.__Controller.Q_in.pushBack((pkt,4))
particle-size: 40
particle-size: 40
particle-size: 40
statement: this'.data = this'.data ~ [x]
particle-size: 40
statement: return ()
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 424
particle-size: 424
statement: return this'.data.length
particle-size: 424
particle-size: 424
particle-size: 424
particle-size: 424
statement: this'.__H0.__run()
particle-size: 150
particle-size: 150
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.pushFront((Packet'(),0))
particle-size: 10
particle-size: 10
statement: return this
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.data = [x] ~ this'.data
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.num_sent = (this'.num_sent + 1)
particle-size: 10
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1))
particle-size: 10
particle-size: 10
statement: r := this'.front()
particle-size: 10
particle-size: 10
statement: return this'.data[0]
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.popFront()
particle-size: 10
particle-size: 10
statement: this'.data = this'.data[1..this'.size()]
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return r
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.data = this'.data ~ [x]
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.Q_in.popFront()
particle-size: 140
particle-size: 140
statement: this'.data = this'.data[1..this'.size()]
particle-size: 140
particle-size: 140
statement: return this'.data.length
particle-size: 140
particle-size: 140
particle-size: 140
particle-size: 140
particle-size: 140
statement: return ()
particle-size: 140
particle-size: 140
particle-size: 140
particle-size: 140
statement: return ()
particle-size: 150
particle-size: 150
particle-size: 150
particle-size: 150
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 424
particle-size: 424
statement: return this'.data.length
particle-size: 424
particle-size: 424
particle-size: 424
particle-size: 424
statement: this'.__Controller.__run()
particle-size: 158
particle-size: 158
statement: this'.num_packets = (this'.num_packets + 1)
particle-size: 158
statement: if 0 {
    this'.tot_packets = 4;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 2));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 4) {
        observe((this'.Q_in.data[0][1] == 4));
    } else {
        observe(0);
    }
} else {
    this'.tot_packets = 3;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 2));
    } else {
        observe(0);
    }
}
statement: this'.tot_packets = 3
particle-size: 158
statement: if (this'.num_packets == 1) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 2));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 4))
statement: this'.Q_in.popFront()
particle-size: 16
particle-size: 16
statement: this'.data = this'.data[1..this'.size()]
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 282
particle-size: 282
statement: return this'.data.length
particle-size: 282
particle-size: 282
particle-size: 282
particle-size: 282
statement: this'.__S1.__run()
particle-size: 28
particle-size: 28
statement: if (this'.bad_hash == 2) {
    this'.bad_hash = flip((1 / 10));
}
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 28
particle-size: 28
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 56
particle-size: 56
statement: this'.Q_in.dupFront()
particle-size: 28
particle-size: 28
statement: this'.pushFront(this'.front())
particle-size: 28
particle-size: 28
statement: return this'.data[0]
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
statement: this'.data = [x] ~ this'.data
particle-size: 28
statement: return ()
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
statement: return ()
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 28
particle-size: 28
statement: r := this'.front()
particle-size: 28
particle-size: 28
statement: return this'.data[0]
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
statement: this'.popFront()
particle-size: 28
particle-size: 28
statement: this'.data = this'.data[1..this'.size()]
particle-size: 28
particle-size: 28
statement: return this'.data.length
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
statement: return ()
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
statement: return r
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
statement: this'.data = this'.data ~ [x]
particle-size: 28
statement: return ()
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
statement: if (((this'.bad_hash == 1) && flip((1 / 3))) || ((this'.bad_hash == 0) && flip((1 / 2)))) {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
} else {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
}
particle-size: 56
particle-size: 56
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 224
particle-size: 224
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 112
particle-size: 112
statement: r := this'.front()
particle-size: 112
particle-size: 112
statement: return this'.data[0]
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: this'.popFront()
particle-size: 112
particle-size: 112
statement: this'.data = this'.data[1..this'.size()]
particle-size: 112
particle-size: 112
statement: return this'.data.length
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: return ()
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: return r
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: this'.data = this'.data ~ [x]
particle-size: 112
statement: return ()
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3))
particle-size: 112
particle-size: 112
statement: r := this'.front()
particle-size: 112
particle-size: 112
statement: return this'.data[0]
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: this'.popFront()
particle-size: 112
particle-size: 112
statement: this'.data = this'.data[1..this'.size()]
particle-size: 112
particle-size: 112
statement: return this'.data.length
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: return ()
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: return r
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: this'.data = this'.data ~ [x]
particle-size: 112
statement: return ()
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: return ()
particle-size: 224
particle-size: 112
particle-size: 112
particle-size: 112
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 366
particle-size: 366
statement: return this'.data.length
particle-size: 366
particle-size: 366
particle-size: 366
particle-size: 366
statement: this'.__S2.__run()
particle-size: 32
particle-size: 32
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 32
particle-size: 32
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 64
particle-size: 64
statement: this'.Q_in.dupFront()
particle-size: 32
particle-size: 32
statement: this'.pushFront(this'.front())
particle-size: 32
particle-size: 32
statement: return this'.data[0]
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: this'.data = [x] ~ this'.data
particle-size: 32
statement: return ()
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: return ()
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 32
particle-size: 32
statement: r := this'.front()
particle-size: 32
particle-size: 32
statement: return this'.data[0]
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: this'.popFront()
particle-size: 32
particle-size: 32
statement: this'.data = this'.data[1..this'.size()]
particle-size: 32
particle-size: 32
statement: return this'.data.length
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: return ()
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: return r
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: this'.data = this'.data ~ [x]
particle-size: 32
statement: return ()
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 64
particle-size: 64
statement: r := this'.front()
particle-size: 64
particle-size: 64
statement: return this'.data[0]
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: this'.popFront()
particle-size: 64
particle-size: 64
statement: this'.data = this'.data[1..this'.size()]
particle-size: 64
particle-size: 64
statement: return this'.data.length
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: return ()
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: return r
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: this'.data = this'.data ~ [x]
particle-size: 64
statement: return ()
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: return ()
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 398
particle-size: 398
statement: return this'.data.length
particle-size: 398
particle-size: 398
particle-size: 398
particle-size: 398
statement: this'.__H1.__run()
particle-size: 56
particle-size: 56
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 56
particle-size: 56
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 112
particle-size: 112
statement: this'.Q_in.dupFront()
particle-size: 56
particle-size: 56
statement: this'.pushFront(this'.front())
particle-size: 56
particle-size: 56
statement: return this'.data[0]
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: this'.data = [x] ~ this'.data
particle-size: 56
statement: return ()
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: return ()
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 56
particle-size: 56
statement: r := this'.front()
particle-size: 56
particle-size: 56
statement: return this'.data[0]
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: this'.popFront()
particle-size: 56
particle-size: 56
statement: this'.data = this'.data[1..this'.size()]
particle-size: 56
particle-size: 56
statement: return this'.data.length
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: return ()
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: return r
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: this'.data = this'.data ~ [x]
particle-size: 56
statement: return ()
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: this'.Q_in.popFront()
particle-size: 112
particle-size: 112
statement: this'.data = this'.data[1..this'.size()]
particle-size: 112
particle-size: 112
statement: return this'.data.length
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: return ()
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: return ()
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: return ()
particle-size: 762
particle-size: 762
particle-size: 762
particle-size: 330
repetition: 10
statement: __d.__step()
particle-size: 330
particle-size: 330
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 330
particle-size: 330
statement: return this'.data.length
particle-size: 330
particle-size: 330
particle-size: 330
particle-size: 330
particle-size: 330
particle-size: 330
statement: return this'.data.length
particle-size: 330
particle-size: 330
particle-size: 330
particle-size: 330
particle-size: 330
particle-size: 330
statement: return this'.data.length
particle-size: 330
particle-size: 330
particle-size: 330
particle-size: 330
particle-size: 330
particle-size: 330
statement: return this'.data.length
particle-size: 330
particle-size: 330
particle-size: 330
particle-size: 330
particle-size: 330
particle-size: 330
statement: return this'.data.length
particle-size: 330
particle-size: 330
particle-size: 330
particle-size: 330
particle-size: 330
particle-size: 330
statement: return this'.data.length
particle-size: 330
particle-size: 330
particle-size: 330
particle-size: 330
particle-size: 330
particle-size: 330
statement: return this'.data.length
particle-size: 330
particle-size: 330
particle-size: 330
particle-size: 330
particle-size: 330
particle-size: 330
statement: return this'.data.length
particle-size: 330
particle-size: 330
particle-size: 330
particle-size: 330
particle-size: 330
particle-size: 330
statement: return this'.data.length
particle-size: 330
particle-size: 330
particle-size: 330
particle-size: 330
particle-size: 330
particle-size: 330
statement: return this'.data.length
particle-size: 330
particle-size: 330
particle-size: 330
particle-size: 330
statement: (action,node) := this'.scheduler()
particle-size: 330
particle-size: 330
statement: actions := ([]: (R × R)[])
particle-size: 330
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 330
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 330
particle-size: 330
statement: return this'.data.length
particle-size: 330
particle-size: 330
particle-size: 330
statement: actions ~= [(0,i)]
particle-size: 190
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 330
particle-size: 330
statement: return this'.data.length
particle-size: 330
particle-size: 330
particle-size: 330
statement: actions ~= [(1,i)]
particle-size: 22
loop-index: 1
particle-size: 330
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 330
particle-size: 330
statement: return this'.data.length
particle-size: 330
particle-size: 330
particle-size: 330
statement: actions ~= [(0,i)]
particle-size: 230
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 330
particle-size: 330
statement: return this'.data.length
particle-size: 330
particle-size: 330
particle-size: 330
loop-index: 2
particle-size: 330
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 330
particle-size: 330
statement: return this'.data.length
particle-size: 330
particle-size: 330
particle-size: 330
statement: actions ~= [(0,i)]
particle-size: 26
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 330
particle-size: 330
statement: return this'.data.length
particle-size: 330
particle-size: 330
particle-size: 330
statement: actions ~= [(1,i)]
particle-size: 200
loop-index: 3
particle-size: 330
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 330
particle-size: 330
statement: return this'.data.length
particle-size: 330
particle-size: 330
particle-size: 330
statement: actions ~= [(0,i)]
particle-size: 34
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 330
particle-size: 330
statement: return this'.data.length
particle-size: 330
particle-size: 330
particle-size: 330
statement: actions ~= [(1,i)]
particle-size: 98
loop-index: 4
particle-size: 330
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 330
particle-size: 330
statement: return this'.data.length
particle-size: 330
particle-size: 330
particle-size: 330
statement: actions ~= [(0,i)]
particle-size: 82
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 330
particle-size: 330
statement: return this'.data.length
particle-size: 330
particle-size: 330
particle-size: 330
statement: actions ~= [(1,i)]
particle-size: 56
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 330
particle-size: 330
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 938
particle-size: 938
particle-size: 938
particle-size: 938
particle-size: 938
particle-size: 938
particle-size: 938
particle-size: 938
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 376
particle-size: 376
statement: return this'.data.length
particle-size: 376
particle-size: 376
particle-size: 376
particle-size: 376
statement: (pkt,port) := this'.__H0.Q_out.takeFront()
particle-size: 22
particle-size: 22
statement: r := this'.front()
particle-size: 22
particle-size: 22
statement: return this'.data[0]
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: this'.popFront()
particle-size: 22
particle-size: 22
statement: this'.data = this'.data[1..this'.size()]
particle-size: 22
particle-size: 22
statement: return this'.data.length
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: return ()
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: return r
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 22
particle-size: 22
particle-size: 22
statement: this'.data = this'.data ~ [x]
particle-size: 22
statement: return ()
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,3));
}
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 376
particle-size: 376
statement: return this'.data.length
particle-size: 376
particle-size: 376
particle-size: 376
particle-size: 376
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 376
particle-size: 376
statement: return this'.data.length
particle-size: 376
particle-size: 376
particle-size: 376
particle-size: 376
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 200
particle-size: 200
statement: r := this'.front()
particle-size: 200
particle-size: 200
statement: return this'.data[0]
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
statement: this'.popFront()
particle-size: 200
particle-size: 200
statement: this'.data = this'.data[1..this'.size()]
particle-size: 200
particle-size: 200
statement: return this'.data.length
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
statement: return ()
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
statement: return r
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
statement: if port == 1 {
    this'.__H0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,1));
}
statement: this'.__H1.Q_in.pushBack((pkt,1))
particle-size: 44
particle-size: 44
particle-size: 44
statement: this'.data = this'.data ~ [x]
particle-size: 44
statement: return ()
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 44
particle-size: 44
particle-size: 44
statement: this'.data = this'.data ~ [x]
particle-size: 44
statement: return ()
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,1));
}
statement: this'.__Controller.Q_in.pushBack((pkt,1))
particle-size: 112
particle-size: 112
particle-size: 112
statement: this'.data = this'.data ~ [x]
particle-size: 112
statement: return ()
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 376
particle-size: 376
statement: return this'.data.length
particle-size: 376
particle-size: 376
particle-size: 376
particle-size: 376
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 98
particle-size: 98
statement: r := this'.front()
particle-size: 98
particle-size: 98
statement: return this'.data[0]
particle-size: 98
particle-size: 98
particle-size: 98
particle-size: 98
particle-size: 98
statement: this'.popFront()
particle-size: 98
particle-size: 98
statement: this'.data = this'.data[1..this'.size()]
particle-size: 98
particle-size: 98
statement: return this'.data.length
particle-size: 98
particle-size: 98
particle-size: 98
particle-size: 98
particle-size: 98
statement: return ()
particle-size: 98
particle-size: 98
particle-size: 98
particle-size: 98
statement: return r
particle-size: 98
particle-size: 98
particle-size: 98
particle-size: 98
particle-size: 98
particle-size: 98
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,3));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,2));
}
statement: this'.__H1.Q_in.pushBack((pkt,2))
particle-size: 66
particle-size: 66
particle-size: 66
statement: this'.data = this'.data ~ [x]
particle-size: 66
statement: return ()
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,2));
}
statement: this'.__Controller.Q_in.pushBack((pkt,2))
particle-size: 32
particle-size: 32
particle-size: 32
statement: this'.data = this'.data ~ [x]
particle-size: 32
statement: return ()
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 376
particle-size: 376
statement: return this'.data.length
particle-size: 376
particle-size: 376
particle-size: 376
particle-size: 376
statement: (pkt,port) := this'.__H1.Q_out.takeFront()
particle-size: 56
particle-size: 56
statement: r := this'.front()
particle-size: 56
particle-size: 56
statement: return this'.data[0]
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: this'.popFront()
particle-size: 56
particle-size: 56
statement: this'.data = this'.data[1..this'.size()]
particle-size: 56
particle-size: 56
statement: return this'.data.length
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: return ()
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: return r
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this'.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,4));
}
statement: this'.__Controller.Q_in.pushBack((pkt,4))
particle-size: 56
particle-size: 56
particle-size: 56
statement: this'.data = this'.data ~ [x]
particle-size: 56
statement: return ()
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 562
particle-size: 562
statement: return this'.data.length
particle-size: 562
particle-size: 562
particle-size: 562
particle-size: 562
statement: this'.__H0.__run()
particle-size: 190
particle-size: 190
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.pushFront((Packet'(),0))
particle-size: 2
particle-size: 2
statement: return this
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = [x] ~ this'.data
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.num_sent = (this'.num_sent + 1)
particle-size: 2
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1))
particle-size: 2
particle-size: 2
statement: r := this'.front()
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.popFront()
particle-size: 2
particle-size: 2
statement: this'.data = this'.data[1..this'.size()]
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return r
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = this'.data ~ [x]
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.Q_in.popFront()
particle-size: 188
particle-size: 188
statement: this'.data = this'.data[1..this'.size()]
particle-size: 188
particle-size: 188
statement: return this'.data.length
particle-size: 188
particle-size: 188
particle-size: 188
particle-size: 188
particle-size: 188
statement: return ()
particle-size: 188
particle-size: 188
particle-size: 188
particle-size: 188
statement: return ()
particle-size: 190
particle-size: 190
particle-size: 190
particle-size: 190
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 562
particle-size: 562
statement: return this'.data.length
particle-size: 562
particle-size: 562
particle-size: 562
particle-size: 562
statement: this'.__Controller.__run()
particle-size: 230
particle-size: 230
statement: this'.num_packets = (this'.num_packets + 1)
particle-size: 230
statement: if 0 {
    this'.tot_packets = 4;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 2));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 4) {
        observe((this'.Q_in.data[0][1] == 4));
    } else {
        observe(0);
    }
} else {
    this'.tot_packets = 3;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 2));
    } else {
        observe(0);
    }
}
statement: this'.tot_packets = 3
particle-size: 230
statement: if (this'.num_packets == 1) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 2));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 4))
statement: this'.Q_in.popFront()
particle-size: 24
particle-size: 24
statement: this'.data = this'.data[1..this'.size()]
particle-size: 24
particle-size: 24
statement: return this'.data.length
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: return ()
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: return ()
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 356
particle-size: 356
statement: return this'.data.length
particle-size: 356
particle-size: 356
particle-size: 356
particle-size: 356
statement: this'.__S1.__run()
particle-size: 26
particle-size: 26
statement: if (this'.bad_hash == 2) {
    this'.bad_hash = flip((1 / 10));
}
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 26
particle-size: 26
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 52
particle-size: 52
statement: this'.Q_in.dupFront()
particle-size: 26
particle-size: 26
statement: this'.pushFront(this'.front())
particle-size: 26
particle-size: 26
statement: return this'.data[0]
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: this'.data = [x] ~ this'.data
particle-size: 26
statement: return ()
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: return ()
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 26
particle-size: 26
statement: r := this'.front()
particle-size: 26
particle-size: 26
statement: return this'.data[0]
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: this'.popFront()
particle-size: 26
particle-size: 26
statement: this'.data = this'.data[1..this'.size()]
particle-size: 26
particle-size: 26
statement: return this'.data.length
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: return ()
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: return r
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: this'.data = this'.data ~ [x]
particle-size: 26
statement: return ()
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: if (((this'.bad_hash == 1) && flip((1 / 3))) || ((this'.bad_hash == 0) && flip((1 / 2)))) {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
} else {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
}
particle-size: 52
particle-size: 52
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 208
particle-size: 208
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 104
particle-size: 104
statement: r := this'.front()
particle-size: 104
particle-size: 104
statement: return this'.data[0]
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: this'.popFront()
particle-size: 104
particle-size: 104
statement: this'.data = this'.data[1..this'.size()]
particle-size: 104
particle-size: 104
statement: return this'.data.length
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: return ()
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: return r
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: this'.data = this'.data ~ [x]
particle-size: 104
statement: return ()
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3))
particle-size: 104
particle-size: 104
statement: r := this'.front()
particle-size: 104
particle-size: 104
statement: return this'.data[0]
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: this'.popFront()
particle-size: 104
particle-size: 104
statement: this'.data = this'.data[1..this'.size()]
particle-size: 104
particle-size: 104
statement: return this'.data.length
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: return ()
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: return r
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: this'.data = this'.data ~ [x]
particle-size: 104
statement: return ()
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: return ()
particle-size: 208
particle-size: 104
particle-size: 104
particle-size: 104
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 434
particle-size: 434
statement: return this'.data.length
particle-size: 434
particle-size: 434
particle-size: 434
particle-size: 434
statement: this'.__S2.__run()
particle-size: 34
particle-size: 34
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 34
particle-size: 34
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 68
particle-size: 68
statement: this'.Q_in.dupFront()
particle-size: 34
particle-size: 34
statement: this'.pushFront(this'.front())
particle-size: 34
particle-size: 34
statement: return this'.data[0]
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: this'.data = [x] ~ this'.data
particle-size: 34
statement: return ()
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: return ()
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 34
particle-size: 34
statement: r := this'.front()
particle-size: 34
particle-size: 34
statement: return this'.data[0]
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: this'.popFront()
particle-size: 34
particle-size: 34
statement: this'.data = this'.data[1..this'.size()]
particle-size: 34
particle-size: 34
statement: return this'.data.length
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: return ()
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: return r
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: this'.data = this'.data ~ [x]
particle-size: 34
statement: return ()
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 68
particle-size: 68
statement: r := this'.front()
particle-size: 68
particle-size: 68
statement: return this'.data[0]
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
statement: this'.popFront()
particle-size: 68
particle-size: 68
statement: this'.data = this'.data[1..this'.size()]
particle-size: 68
particle-size: 68
statement: return this'.data.length
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
statement: return ()
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
statement: return r
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
statement: this'.data = this'.data ~ [x]
particle-size: 68
statement: return ()
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
statement: return ()
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 468
particle-size: 468
statement: return this'.data.length
particle-size: 468
particle-size: 468
particle-size: 468
particle-size: 468
statement: this'.__H1.__run()
particle-size: 82
particle-size: 82
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 82
particle-size: 82
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 164
particle-size: 164
statement: this'.Q_in.dupFront()
particle-size: 82
particle-size: 82
statement: this'.pushFront(this'.front())
particle-size: 82
particle-size: 82
statement: return this'.data[0]
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
statement: this'.data = [x] ~ this'.data
particle-size: 82
statement: return ()
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
statement: return ()
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 82
particle-size: 82
statement: r := this'.front()
particle-size: 82
particle-size: 82
statement: return this'.data[0]
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
statement: this'.popFront()
particle-size: 82
particle-size: 82
statement: this'.data = this'.data[1..this'.size()]
particle-size: 82
particle-size: 82
statement: return this'.data.length
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
statement: return ()
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
statement: return r
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
statement: this'.data = this'.data ~ [x]
particle-size: 82
statement: return ()
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
statement: this'.Q_in.popFront()
particle-size: 164
particle-size: 164
statement: this'.data = this'.data[1..this'.size()]
particle-size: 164
particle-size: 164
statement: return this'.data.length
particle-size: 164
particle-size: 164
particle-size: 164
particle-size: 164
particle-size: 164
statement: return ()
particle-size: 164
particle-size: 164
particle-size: 164
particle-size: 164
statement: return ()
particle-size: 164
particle-size: 164
particle-size: 164
particle-size: 164
statement: return ()
particle-size: 926
particle-size: 926
particle-size: 926
particle-size: 408
repetition: 11
statement: __d.__step()
particle-size: 408
particle-size: 408
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 408
particle-size: 408
statement: return this'.data.length
particle-size: 408
particle-size: 408
particle-size: 408
particle-size: 408
particle-size: 408
particle-size: 408
statement: return this'.data.length
particle-size: 408
particle-size: 408
particle-size: 408
particle-size: 408
particle-size: 408
particle-size: 408
statement: return this'.data.length
particle-size: 408
particle-size: 408
particle-size: 408
particle-size: 408
particle-size: 408
particle-size: 408
statement: return this'.data.length
particle-size: 408
particle-size: 408
particle-size: 408
particle-size: 408
particle-size: 408
particle-size: 408
statement: return this'.data.length
particle-size: 408
particle-size: 408
particle-size: 408
particle-size: 408
particle-size: 408
particle-size: 408
statement: return this'.data.length
particle-size: 408
particle-size: 408
particle-size: 408
particle-size: 408
particle-size: 408
particle-size: 408
statement: return this'.data.length
particle-size: 408
particle-size: 408
particle-size: 408
particle-size: 408
particle-size: 408
particle-size: 408
statement: return this'.data.length
particle-size: 408
particle-size: 408
particle-size: 408
particle-size: 408
particle-size: 408
particle-size: 408
statement: return this'.data.length
particle-size: 408
particle-size: 408
particle-size: 408
particle-size: 408
particle-size: 408
particle-size: 408
statement: return this'.data.length
particle-size: 408
particle-size: 408
particle-size: 408
particle-size: 408
statement: (action,node) := this'.scheduler()
particle-size: 406
particle-size: 406
statement: actions := ([]: (R × R)[])
particle-size: 406
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 406
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 406
particle-size: 406
statement: return this'.data.length
particle-size: 406
particle-size: 406
particle-size: 406
statement: actions ~= [(0,i)]
particle-size: 220
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 406
particle-size: 406
statement: return this'.data.length
particle-size: 406
particle-size: 406
particle-size: 406
statement: actions ~= [(1,i)]
particle-size: 12
loop-index: 1
particle-size: 406
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 406
particle-size: 406
statement: return this'.data.length
particle-size: 406
particle-size: 406
particle-size: 406
statement: actions ~= [(0,i)]
particle-size: 318
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 406
particle-size: 406
statement: return this'.data.length
particle-size: 406
particle-size: 406
particle-size: 406
loop-index: 2
particle-size: 406
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 406
particle-size: 406
statement: return this'.data.length
particle-size: 406
particle-size: 406
particle-size: 406
statement: actions ~= [(0,i)]
particle-size: 22
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 406
particle-size: 406
statement: return this'.data.length
particle-size: 406
particle-size: 406
particle-size: 406
statement: actions ~= [(1,i)]
particle-size: 208
loop-index: 3
particle-size: 406
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 406
particle-size: 406
statement: return this'.data.length
particle-size: 406
particle-size: 406
particle-size: 406
statement: actions ~= [(0,i)]
particle-size: 44
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 406
particle-size: 406
statement: return this'.data.length
particle-size: 406
particle-size: 406
particle-size: 406
statement: actions ~= [(1,i)]
particle-size: 114
loop-index: 4
particle-size: 406
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 406
particle-size: 406
statement: return this'.data.length
particle-size: 406
particle-size: 406
particle-size: 406
statement: actions ~= [(0,i)]
particle-size: 112
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 406
particle-size: 406
statement: return this'.data.length
particle-size: 406
particle-size: 406
particle-size: 406
statement: actions ~= [(1,i)]
particle-size: 82
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 406
particle-size: 406
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 1132
particle-size: 1132
particle-size: 1132
particle-size: 1132
particle-size: 1132
particle-size: 1132
particle-size: 1132
particle-size: 1132
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 416
particle-size: 416
statement: return this'.data.length
particle-size: 416
particle-size: 416
particle-size: 416
particle-size: 416
statement: (pkt,port) := this'.__H0.Q_out.takeFront()
particle-size: 12
particle-size: 12
statement: r := this'.front()
particle-size: 12
particle-size: 12
statement: return this'.data[0]
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.popFront()
particle-size: 12
particle-size: 12
statement: this'.data = this'.data[1..this'.size()]
particle-size: 12
particle-size: 12
statement: return this'.data.length
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: return ()
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: return r
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.data = this'.data ~ [x]
particle-size: 12
statement: return ()
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,3));
}
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 416
particle-size: 416
statement: return this'.data.length
particle-size: 416
particle-size: 416
particle-size: 416
particle-size: 416
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 416
particle-size: 416
statement: return this'.data.length
particle-size: 416
particle-size: 416
particle-size: 416
particle-size: 416
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 208
particle-size: 208
statement: r := this'.front()
particle-size: 208
particle-size: 208
statement: return this'.data[0]
particle-size: 208
particle-size: 208
particle-size: 208
particle-size: 208
particle-size: 208
statement: this'.popFront()
particle-size: 208
particle-size: 208
statement: this'.data = this'.data[1..this'.size()]
particle-size: 208
particle-size: 208
statement: return this'.data.length
particle-size: 208
particle-size: 208
particle-size: 208
particle-size: 208
particle-size: 208
statement: return ()
particle-size: 208
particle-size: 208
particle-size: 208
particle-size: 208
statement: return r
particle-size: 208
particle-size: 208
particle-size: 208
particle-size: 208
particle-size: 208
particle-size: 208
statement: if port == 1 {
    this'.__H0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,1));
}
statement: this'.__H1.Q_in.pushBack((pkt,1))
particle-size: 52
particle-size: 52
particle-size: 52
statement: this'.data = this'.data ~ [x]
particle-size: 52
statement: return ()
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 52
particle-size: 52
particle-size: 52
statement: this'.data = this'.data ~ [x]
particle-size: 52
statement: return ()
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,1));
}
statement: this'.__Controller.Q_in.pushBack((pkt,1))
particle-size: 104
particle-size: 104
particle-size: 104
statement: this'.data = this'.data ~ [x]
particle-size: 104
statement: return ()
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 416
particle-size: 416
statement: return this'.data.length
particle-size: 416
particle-size: 416
particle-size: 416
particle-size: 416
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 114
particle-size: 114
statement: r := this'.front()
particle-size: 114
particle-size: 114
statement: return this'.data[0]
particle-size: 114
particle-size: 114
particle-size: 114
particle-size: 114
particle-size: 114
statement: this'.popFront()
particle-size: 114
particle-size: 114
statement: this'.data = this'.data[1..this'.size()]
particle-size: 114
particle-size: 114
statement: return this'.data.length
particle-size: 114
particle-size: 114
particle-size: 114
particle-size: 114
particle-size: 114
statement: return ()
particle-size: 114
particle-size: 114
particle-size: 114
particle-size: 114
statement: return r
particle-size: 114
particle-size: 114
particle-size: 114
particle-size: 114
particle-size: 114
particle-size: 114
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,3));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,2));
}
statement: this'.__H1.Q_in.pushBack((pkt,2))
particle-size: 80
particle-size: 80
particle-size: 80
statement: this'.data = this'.data ~ [x]
particle-size: 80
statement: return ()
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,2));
}
statement: this'.__Controller.Q_in.pushBack((pkt,2))
particle-size: 34
particle-size: 34
particle-size: 34
statement: this'.data = this'.data ~ [x]
particle-size: 34
statement: return ()
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 416
particle-size: 416
statement: return this'.data.length
particle-size: 416
particle-size: 416
particle-size: 416
particle-size: 416
statement: (pkt,port) := this'.__H1.Q_out.takeFront()
particle-size: 82
particle-size: 82
statement: r := this'.front()
particle-size: 82
particle-size: 82
statement: return this'.data[0]
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
statement: this'.popFront()
particle-size: 82
particle-size: 82
statement: this'.data = this'.data[1..this'.size()]
particle-size: 82
particle-size: 82
statement: return this'.data.length
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
statement: return ()
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
statement: return r
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this'.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,4));
}
statement: this'.__Controller.Q_in.pushBack((pkt,4))
particle-size: 82
particle-size: 82
particle-size: 82
statement: this'.data = this'.data ~ [x]
particle-size: 82
statement: return ()
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 716
particle-size: 716
statement: return this'.data.length
particle-size: 716
particle-size: 716
particle-size: 716
particle-size: 716
statement: this'.__H0.__run()
particle-size: 220
particle-size: 220
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 220
particle-size: 220
statement: this'.data = this'.data[1..this'.size()]
particle-size: 220
particle-size: 220
statement: return this'.data.length
particle-size: 220
particle-size: 220
particle-size: 220
particle-size: 220
particle-size: 220
statement: return ()
particle-size: 220
particle-size: 220
particle-size: 220
particle-size: 220
statement: return ()
particle-size: 220
particle-size: 220
particle-size: 220
particle-size: 220
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 716
particle-size: 716
statement: return this'.data.length
particle-size: 716
particle-size: 716
particle-size: 716
particle-size: 716
statement: this'.__Controller.__run()
particle-size: 318
particle-size: 318
statement: this'.num_packets = (this'.num_packets + 1)
particle-size: 318
statement: if 0 {
    this'.tot_packets = 4;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 2));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 4) {
        observe((this'.Q_in.data[0][1] == 4));
    } else {
        observe(0);
    }
} else {
    this'.tot_packets = 3;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 2));
    } else {
        observe(0);
    }
}
statement: this'.tot_packets = 3
particle-size: 318
statement: if (this'.num_packets == 1) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 2));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 4))
statement: if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 2));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 1))
statement: this'.Q_in.popFront()
particle-size: 38
particle-size: 38
statement: this'.data = this'.data[1..this'.size()]
particle-size: 38
particle-size: 38
statement: return this'.data.length
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: return ()
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: return ()
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 436
particle-size: 436
statement: return this'.data.length
particle-size: 436
particle-size: 436
particle-size: 436
particle-size: 436
statement: this'.__S1.__run()
particle-size: 22
particle-size: 22
statement: if (this'.bad_hash == 2) {
    this'.bad_hash = flip((1 / 10));
}
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 22
particle-size: 22
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 44
particle-size: 44
statement: this'.Q_in.dupFront()
particle-size: 22
particle-size: 22
statement: this'.pushFront(this'.front())
particle-size: 22
particle-size: 22
statement: return this'.data[0]
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: this'.data = [x] ~ this'.data
particle-size: 22
statement: return ()
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: return ()
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 22
particle-size: 22
statement: r := this'.front()
particle-size: 22
particle-size: 22
statement: return this'.data[0]
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: this'.popFront()
particle-size: 22
particle-size: 22
statement: this'.data = this'.data[1..this'.size()]
particle-size: 22
particle-size: 22
statement: return this'.data.length
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: return ()
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: return r
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: this'.data = this'.data ~ [x]
particle-size: 22
statement: return ()
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: if (((this'.bad_hash == 1) && flip((1 / 3))) || ((this'.bad_hash == 0) && flip((1 / 2)))) {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
} else {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
}
particle-size: 44
particle-size: 44
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 176
particle-size: 176
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 88
particle-size: 88
statement: r := this'.front()
particle-size: 88
particle-size: 88
statement: return this'.data[0]
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: this'.popFront()
particle-size: 88
particle-size: 88
statement: this'.data = this'.data[1..this'.size()]
particle-size: 88
particle-size: 88
statement: return this'.data.length
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: return ()
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: return r
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: this'.data = this'.data ~ [x]
particle-size: 88
statement: return ()
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3))
particle-size: 88
particle-size: 88
statement: r := this'.front()
particle-size: 88
particle-size: 88
statement: return this'.data[0]
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: this'.popFront()
particle-size: 88
particle-size: 88
statement: this'.data = this'.data[1..this'.size()]
particle-size: 88
particle-size: 88
statement: return this'.data.length
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: return ()
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: return r
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: this'.data = this'.data ~ [x]
particle-size: 88
statement: return ()
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: return ()
particle-size: 176
particle-size: 88
particle-size: 88
particle-size: 88
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 502
particle-size: 502
statement: return this'.data.length
particle-size: 502
particle-size: 502
particle-size: 502
particle-size: 502
statement: this'.__S2.__run()
particle-size: 44
particle-size: 44
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 44
particle-size: 44
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 88
particle-size: 88
statement: this'.Q_in.dupFront()
particle-size: 44
particle-size: 44
statement: this'.pushFront(this'.front())
particle-size: 44
particle-size: 44
statement: return this'.data[0]
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
statement: this'.data = [x] ~ this'.data
particle-size: 44
statement: return ()
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
statement: return ()
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 44
particle-size: 44
statement: r := this'.front()
particle-size: 44
particle-size: 44
statement: return this'.data[0]
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
statement: this'.popFront()
particle-size: 44
particle-size: 44
statement: this'.data = this'.data[1..this'.size()]
particle-size: 44
particle-size: 44
statement: return this'.data.length
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
statement: return ()
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
statement: return r
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
statement: this'.data = this'.data ~ [x]
particle-size: 44
statement: return ()
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 88
particle-size: 88
statement: r := this'.front()
particle-size: 88
particle-size: 88
statement: return this'.data[0]
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: this'.popFront()
particle-size: 88
particle-size: 88
statement: this'.data = this'.data[1..this'.size()]
particle-size: 88
particle-size: 88
statement: return this'.data.length
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: return ()
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: return r
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: this'.data = this'.data ~ [x]
particle-size: 88
statement: return ()
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: return ()
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 546
particle-size: 546
statement: return this'.data.length
particle-size: 546
particle-size: 546
particle-size: 546
particle-size: 546
statement: this'.__H1.__run()
particle-size: 112
particle-size: 112
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 112
particle-size: 112
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 224
particle-size: 224
statement: this'.Q_in.dupFront()
particle-size: 112
particle-size: 112
statement: this'.pushFront(this'.front())
particle-size: 112
particle-size: 112
statement: return this'.data[0]
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: this'.data = [x] ~ this'.data
particle-size: 112
statement: return ()
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: return ()
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 112
particle-size: 112
statement: r := this'.front()
particle-size: 112
particle-size: 112
statement: return this'.data[0]
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: this'.popFront()
particle-size: 112
particle-size: 112
statement: this'.data = this'.data[1..this'.size()]
particle-size: 112
particle-size: 112
statement: return this'.data.length
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: return ()
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: return r
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: this'.data = this'.data ~ [x]
particle-size: 112
statement: return ()
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: this'.Q_in.popFront()
particle-size: 224
particle-size: 224
statement: this'.data = this'.data[1..this'.size()]
particle-size: 224
particle-size: 224
statement: return this'.data.length
particle-size: 224
particle-size: 224
particle-size: 224
particle-size: 224
particle-size: 224
statement: return ()
particle-size: 224
particle-size: 224
particle-size: 224
particle-size: 224
statement: return ()
particle-size: 224
particle-size: 224
particle-size: 224
particle-size: 224
statement: return ()
particle-size: 1076
particle-size: 1076
particle-size: 1076
particle-size: 488
repetition: 12
statement: __d.__step()
particle-size: 488
particle-size: 488
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 488
particle-size: 488
statement: return this'.data.length
particle-size: 488
particle-size: 488
particle-size: 488
particle-size: 488
particle-size: 488
particle-size: 488
statement: return this'.data.length
particle-size: 488
particle-size: 488
particle-size: 488
particle-size: 488
particle-size: 488
particle-size: 488
statement: return this'.data.length
particle-size: 488
particle-size: 488
particle-size: 488
particle-size: 488
particle-size: 488
particle-size: 488
statement: return this'.data.length
particle-size: 488
particle-size: 488
particle-size: 488
particle-size: 488
particle-size: 488
particle-size: 488
statement: return this'.data.length
particle-size: 488
particle-size: 488
particle-size: 488
particle-size: 488
particle-size: 488
particle-size: 488
statement: return this'.data.length
particle-size: 488
particle-size: 488
particle-size: 488
particle-size: 488
particle-size: 488
particle-size: 488
statement: return this'.data.length
particle-size: 488
particle-size: 488
particle-size: 488
particle-size: 488
particle-size: 488
particle-size: 488
statement: return this'.data.length
particle-size: 488
particle-size: 488
particle-size: 488
particle-size: 488
particle-size: 488
particle-size: 488
statement: return this'.data.length
particle-size: 488
particle-size: 488
particle-size: 488
particle-size: 488
particle-size: 488
particle-size: 488
statement: return this'.data.length
particle-size: 488
particle-size: 488
particle-size: 488
particle-size: 488
statement: (action,node) := this'.scheduler()
particle-size: 486
particle-size: 486
statement: actions := ([]: (R × R)[])
particle-size: 486
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 486
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 486
particle-size: 486
statement: return this'.data.length
particle-size: 486
particle-size: 486
particle-size: 486
statement: actions ~= [(0,i)]
particle-size: 266
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 486
particle-size: 486
statement: return this'.data.length
particle-size: 486
particle-size: 486
particle-size: 486
statement: actions ~= [(1,i)]
particle-size: 2
loop-index: 1
particle-size: 486
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 486
particle-size: 486
statement: return this'.data.length
particle-size: 486
particle-size: 486
particle-size: 486
statement: actions ~= [(0,i)]
particle-size: 418
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 486
particle-size: 486
statement: return this'.data.length
particle-size: 486
particle-size: 486
particle-size: 486
loop-index: 2
particle-size: 486
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 486
particle-size: 486
statement: return this'.data.length
particle-size: 486
particle-size: 486
particle-size: 486
statement: actions ~= [(0,i)]
particle-size: 12
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 486
particle-size: 486
statement: return this'.data.length
particle-size: 486
particle-size: 486
particle-size: 486
statement: actions ~= [(1,i)]
particle-size: 192
loop-index: 3
particle-size: 486
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 486
particle-size: 486
statement: return this'.data.length
particle-size: 486
particle-size: 486
particle-size: 486
statement: actions ~= [(0,i)]
particle-size: 52
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 486
particle-size: 486
statement: return this'.data.length
particle-size: 486
particle-size: 486
particle-size: 486
statement: actions ~= [(1,i)]
particle-size: 146
loop-index: 4
particle-size: 486
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 486
particle-size: 486
statement: return this'.data.length
particle-size: 486
particle-size: 486
particle-size: 486
statement: actions ~= [(0,i)]
particle-size: 134
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 486
particle-size: 486
statement: return this'.data.length
particle-size: 486
particle-size: 486
particle-size: 486
statement: actions ~= [(1,i)]
particle-size: 108
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 486
particle-size: 486
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 1330
particle-size: 1330
particle-size: 1330
particle-size: 1330
particle-size: 1330
particle-size: 1330
particle-size: 1330
particle-size: 1330
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 448
particle-size: 448
statement: return this'.data.length
particle-size: 448
particle-size: 448
particle-size: 448
particle-size: 448
statement: (pkt,port) := this'.__H0.Q_out.takeFront()
particle-size: 2
particle-size: 2
statement: r := this'.front()
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.popFront()
particle-size: 2
particle-size: 2
statement: this'.data = this'.data[1..this'.size()]
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return r
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = this'.data ~ [x]
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,3));
}
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 448
particle-size: 448
statement: return this'.data.length
particle-size: 448
particle-size: 448
particle-size: 448
particle-size: 448
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 448
particle-size: 448
statement: return this'.data.length
particle-size: 448
particle-size: 448
particle-size: 448
particle-size: 448
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 192
particle-size: 192
statement: r := this'.front()
particle-size: 192
particle-size: 192
statement: return this'.data[0]
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
statement: this'.popFront()
particle-size: 192
particle-size: 192
statement: this'.data = this'.data[1..this'.size()]
particle-size: 192
particle-size: 192
statement: return this'.data.length
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
statement: return ()
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
statement: return r
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
statement: if port == 1 {
    this'.__H0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,1));
}
statement: this'.__H1.Q_in.pushBack((pkt,1))
particle-size: 52
particle-size: 52
particle-size: 52
statement: this'.data = this'.data ~ [x]
particle-size: 52
statement: return ()
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 52
particle-size: 52
particle-size: 52
statement: this'.data = this'.data ~ [x]
particle-size: 52
statement: return ()
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,1));
}
statement: this'.__Controller.Q_in.pushBack((pkt,1))
particle-size: 88
particle-size: 88
particle-size: 88
statement: this'.data = this'.data ~ [x]
particle-size: 88
statement: return ()
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 448
particle-size: 448
statement: return this'.data.length
particle-size: 448
particle-size: 448
particle-size: 448
particle-size: 448
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 146
particle-size: 146
statement: r := this'.front()
particle-size: 146
particle-size: 146
statement: return this'.data[0]
particle-size: 146
particle-size: 146
particle-size: 146
particle-size: 146
particle-size: 146
statement: this'.popFront()
particle-size: 146
particle-size: 146
statement: this'.data = this'.data[1..this'.size()]
particle-size: 146
particle-size: 146
statement: return this'.data.length
particle-size: 146
particle-size: 146
particle-size: 146
particle-size: 146
particle-size: 146
statement: return ()
particle-size: 146
particle-size: 146
particle-size: 146
particle-size: 146
statement: return r
particle-size: 146
particle-size: 146
particle-size: 146
particle-size: 146
particle-size: 146
particle-size: 146
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,3));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,2));
}
statement: this'.__H1.Q_in.pushBack((pkt,2))
particle-size: 98
particle-size: 98
particle-size: 98
statement: this'.data = this'.data ~ [x]
particle-size: 98
statement: return ()
particle-size: 98
particle-size: 98
particle-size: 98
particle-size: 98
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,2));
}
statement: this'.__Controller.Q_in.pushBack((pkt,2))
particle-size: 48
particle-size: 48
particle-size: 48
statement: this'.data = this'.data ~ [x]
particle-size: 48
statement: return ()
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 448
particle-size: 448
statement: return this'.data.length
particle-size: 448
particle-size: 448
particle-size: 448
particle-size: 448
statement: (pkt,port) := this'.__H1.Q_out.takeFront()
particle-size: 108
particle-size: 108
statement: r := this'.front()
particle-size: 108
particle-size: 108
statement: return this'.data[0]
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
statement: this'.popFront()
particle-size: 108
particle-size: 108
statement: this'.data = this'.data[1..this'.size()]
particle-size: 108
particle-size: 108
statement: return this'.data.length
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
statement: return ()
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
statement: return r
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this'.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,4));
}
statement: this'.__Controller.Q_in.pushBack((pkt,4))
particle-size: 108
particle-size: 108
particle-size: 108
statement: this'.data = this'.data ~ [x]
particle-size: 108
statement: return ()
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 882
particle-size: 882
statement: return this'.data.length
particle-size: 882
particle-size: 882
particle-size: 882
particle-size: 882
statement: this'.__H0.__run()
particle-size: 266
particle-size: 266
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 266
particle-size: 266
statement: this'.data = this'.data[1..this'.size()]
particle-size: 266
particle-size: 266
statement: return this'.data.length
particle-size: 266
particle-size: 266
particle-size: 266
particle-size: 266
particle-size: 266
statement: return ()
particle-size: 266
particle-size: 266
particle-size: 266
particle-size: 266
statement: return ()
particle-size: 266
particle-size: 266
particle-size: 266
particle-size: 266
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 882
particle-size: 882
statement: return this'.data.length
particle-size: 882
particle-size: 882
particle-size: 882
particle-size: 882
statement: this'.__Controller.__run()
particle-size: 418
particle-size: 418
statement: this'.num_packets = (this'.num_packets + 1)
particle-size: 418
statement: if 0 {
    this'.tot_packets = 4;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 2));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 4) {
        observe((this'.Q_in.data[0][1] == 4));
    } else {
        observe(0);
    }
} else {
    this'.tot_packets = 3;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 2));
    } else {
        observe(0);
    }
}
statement: this'.tot_packets = 3
particle-size: 418
statement: if (this'.num_packets == 1) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 2));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 4))
statement: if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 2));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 1))
statement: this'.Q_in.popFront()
particle-size: 54
particle-size: 54
statement: this'.data = this'.data[1..this'.size()]
particle-size: 54
particle-size: 54
statement: return this'.data.length
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: return ()
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: return ()
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 518
particle-size: 518
statement: return this'.data.length
particle-size: 518
particle-size: 518
particle-size: 518
particle-size: 518
statement: this'.__S1.__run()
particle-size: 12
particle-size: 12
statement: if (this'.bad_hash == 2) {
    this'.bad_hash = flip((1 / 10));
}
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 12
particle-size: 12
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 24
particle-size: 24
statement: this'.Q_in.dupFront()
particle-size: 12
particle-size: 12
statement: this'.pushFront(this'.front())
particle-size: 12
particle-size: 12
statement: return this'.data[0]
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.data = [x] ~ this'.data
particle-size: 12
statement: return ()
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: return ()
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 12
particle-size: 12
statement: r := this'.front()
particle-size: 12
particle-size: 12
statement: return this'.data[0]
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.popFront()
particle-size: 12
particle-size: 12
statement: this'.data = this'.data[1..this'.size()]
particle-size: 12
particle-size: 12
statement: return this'.data.length
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: return ()
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: return r
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.data = this'.data ~ [x]
particle-size: 12
statement: return ()
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: if (((this'.bad_hash == 1) && flip((1 / 3))) || ((this'.bad_hash == 0) && flip((1 / 2)))) {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
} else {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
}
particle-size: 24
particle-size: 24
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 96
particle-size: 96
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 48
particle-size: 48
statement: r := this'.front()
particle-size: 48
particle-size: 48
statement: return this'.data[0]
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: this'.popFront()
particle-size: 48
particle-size: 48
statement: this'.data = this'.data[1..this'.size()]
particle-size: 48
particle-size: 48
statement: return this'.data.length
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: return ()
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: return r
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: this'.data = this'.data ~ [x]
particle-size: 48
statement: return ()
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3))
particle-size: 48
particle-size: 48
statement: r := this'.front()
particle-size: 48
particle-size: 48
statement: return this'.data[0]
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: this'.popFront()
particle-size: 48
particle-size: 48
statement: this'.data = this'.data[1..this'.size()]
particle-size: 48
particle-size: 48
statement: return this'.data.length
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: return ()
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: return r
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: this'.data = this'.data ~ [x]
particle-size: 48
statement: return ()
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: return ()
particle-size: 96
particle-size: 48
particle-size: 48
particle-size: 48
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 554
particle-size: 554
statement: return this'.data.length
particle-size: 554
particle-size: 554
particle-size: 554
particle-size: 554
statement: this'.__S2.__run()
particle-size: 52
particle-size: 52
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 52
particle-size: 52
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 104
particle-size: 104
statement: this'.Q_in.dupFront()
particle-size: 52
particle-size: 52
statement: this'.pushFront(this'.front())
particle-size: 52
particle-size: 52
statement: return this'.data[0]
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
statement: this'.data = [x] ~ this'.data
particle-size: 52
statement: return ()
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
statement: return ()
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 52
particle-size: 52
statement: r := this'.front()
particle-size: 52
particle-size: 52
statement: return this'.data[0]
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
statement: this'.popFront()
particle-size: 52
particle-size: 52
statement: this'.data = this'.data[1..this'.size()]
particle-size: 52
particle-size: 52
statement: return this'.data.length
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
statement: return ()
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
statement: return r
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
statement: this'.data = this'.data ~ [x]
particle-size: 52
statement: return ()
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 104
particle-size: 104
statement: r := this'.front()
particle-size: 104
particle-size: 104
statement: return this'.data[0]
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: this'.popFront()
particle-size: 104
particle-size: 104
statement: this'.data = this'.data[1..this'.size()]
particle-size: 104
particle-size: 104
statement: return this'.data.length
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: return ()
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: return r
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: this'.data = this'.data ~ [x]
particle-size: 104
statement: return ()
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: return ()
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 606
particle-size: 606
statement: return this'.data.length
particle-size: 606
particle-size: 606
particle-size: 606
particle-size: 606
statement: this'.__H1.__run()
particle-size: 134
particle-size: 134
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 134
particle-size: 134
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 268
particle-size: 268
statement: this'.Q_in.dupFront()
particle-size: 134
particle-size: 134
statement: this'.pushFront(this'.front())
particle-size: 134
particle-size: 134
statement: return this'.data[0]
particle-size: 134
particle-size: 134
particle-size: 134
particle-size: 134
particle-size: 134
particle-size: 134
particle-size: 134
statement: this'.data = [x] ~ this'.data
particle-size: 134
statement: return ()
particle-size: 134
particle-size: 134
particle-size: 134
particle-size: 134
statement: return ()
particle-size: 134
particle-size: 134
particle-size: 134
particle-size: 134
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 134
particle-size: 134
statement: r := this'.front()
particle-size: 134
particle-size: 134
statement: return this'.data[0]
particle-size: 134
particle-size: 134
particle-size: 134
particle-size: 134
particle-size: 134
statement: this'.popFront()
particle-size: 134
particle-size: 134
statement: this'.data = this'.data[1..this'.size()]
particle-size: 134
particle-size: 134
statement: return this'.data.length
particle-size: 134
particle-size: 134
particle-size: 134
particle-size: 134
particle-size: 134
statement: return ()
particle-size: 134
particle-size: 134
particle-size: 134
particle-size: 134
statement: return r
particle-size: 134
particle-size: 134
particle-size: 134
particle-size: 134
particle-size: 134
particle-size: 134
particle-size: 134
statement: this'.data = this'.data ~ [x]
particle-size: 134
statement: return ()
particle-size: 134
particle-size: 134
particle-size: 134
particle-size: 134
statement: this'.Q_in.popFront()
particle-size: 268
particle-size: 268
statement: this'.data = this'.data[1..this'.size()]
particle-size: 268
particle-size: 268
statement: return this'.data.length
particle-size: 268
particle-size: 268
particle-size: 268
particle-size: 268
particle-size: 268
statement: return ()
particle-size: 268
particle-size: 268
particle-size: 268
particle-size: 268
statement: return ()
particle-size: 268
particle-size: 268
particle-size: 268
particle-size: 268
statement: return ()
particle-size: 1190
particle-size: 1190
particle-size: 1190
particle-size: 526
repetition: 13
statement: __d.__step()
particle-size: 526
particle-size: 526
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 526
particle-size: 526
statement: return this'.data.length
particle-size: 526
particle-size: 526
particle-size: 526
particle-size: 526
particle-size: 526
particle-size: 526
statement: return this'.data.length
particle-size: 526
particle-size: 526
particle-size: 526
particle-size: 526
particle-size: 526
particle-size: 526
statement: return this'.data.length
particle-size: 526
particle-size: 526
particle-size: 526
particle-size: 526
particle-size: 526
particle-size: 526
statement: return this'.data.length
particle-size: 526
particle-size: 526
particle-size: 526
particle-size: 526
particle-size: 526
particle-size: 526
statement: return this'.data.length
particle-size: 526
particle-size: 526
particle-size: 526
particle-size: 526
particle-size: 526
particle-size: 526
statement: return this'.data.length
particle-size: 526
particle-size: 526
particle-size: 526
particle-size: 526
particle-size: 526
particle-size: 526
statement: return this'.data.length
particle-size: 526
particle-size: 526
particle-size: 526
particle-size: 526
particle-size: 526
particle-size: 526
statement: return this'.data.length
particle-size: 526
particle-size: 526
particle-size: 526
particle-size: 526
particle-size: 526
particle-size: 526
statement: return this'.data.length
particle-size: 526
particle-size: 526
particle-size: 526
particle-size: 526
particle-size: 526
particle-size: 526
statement: return this'.data.length
particle-size: 526
particle-size: 526
particle-size: 526
particle-size: 526
statement: (action,node) := this'.scheduler()
particle-size: 522
particle-size: 522
statement: actions := ([]: (R × R)[])
particle-size: 522
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 522
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 522
particle-size: 522
statement: return this'.data.length
particle-size: 522
particle-size: 522
particle-size: 522
statement: actions ~= [(0,i)]
particle-size: 260
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 522
particle-size: 522
statement: return this'.data.length
particle-size: 522
particle-size: 522
particle-size: 522
loop-index: 1
particle-size: 522
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 522
particle-size: 522
statement: return this'.data.length
particle-size: 522
particle-size: 522
particle-size: 522
statement: actions ~= [(0,i)]
particle-size: 468
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 522
particle-size: 522
statement: return this'.data.length
particle-size: 522
particle-size: 522
particle-size: 522
loop-index: 2
particle-size: 522
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 522
particle-size: 522
statement: return this'.data.length
particle-size: 522
particle-size: 522
particle-size: 522
statement: actions ~= [(0,i)]
particle-size: 2
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 522
particle-size: 522
statement: return this'.data.length
particle-size: 522
particle-size: 522
particle-size: 522
statement: actions ~= [(1,i)]
particle-size: 140
loop-index: 3
particle-size: 522
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 522
particle-size: 522
statement: return this'.data.length
particle-size: 522
particle-size: 522
particle-size: 522
statement: actions ~= [(0,i)]
particle-size: 52
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 522
particle-size: 522
statement: return this'.data.length
particle-size: 522
particle-size: 522
particle-size: 522
statement: actions ~= [(1,i)]
particle-size: 176
loop-index: 4
particle-size: 522
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 522
particle-size: 522
statement: return this'.data.length
particle-size: 522
particle-size: 522
particle-size: 522
statement: actions ~= [(0,i)]
particle-size: 154
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 522
particle-size: 522
statement: return this'.data.length
particle-size: 522
particle-size: 522
particle-size: 522
statement: actions ~= [(1,i)]
particle-size: 120
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 522
particle-size: 522
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 1372
particle-size: 1372
particle-size: 1372
particle-size: 1372
particle-size: 1372
particle-size: 1372
particle-size: 1372
particle-size: 1372
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 436
particle-size: 436
statement: return this'.data.length
particle-size: 436
particle-size: 436
particle-size: 436
particle-size: 436
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 436
particle-size: 436
statement: return this'.data.length
particle-size: 436
particle-size: 436
particle-size: 436
particle-size: 436
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 436
particle-size: 436
statement: return this'.data.length
particle-size: 436
particle-size: 436
particle-size: 436
particle-size: 436
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 140
particle-size: 140
statement: r := this'.front()
particle-size: 140
particle-size: 140
statement: return this'.data[0]
particle-size: 140
particle-size: 140
particle-size: 140
particle-size: 140
particle-size: 140
statement: this'.popFront()
particle-size: 140
particle-size: 140
statement: this'.data = this'.data[1..this'.size()]
particle-size: 140
particle-size: 140
statement: return this'.data.length
particle-size: 140
particle-size: 140
particle-size: 140
particle-size: 140
particle-size: 140
statement: return ()
particle-size: 140
particle-size: 140
particle-size: 140
particle-size: 140
statement: return r
particle-size: 140
particle-size: 140
particle-size: 140
particle-size: 140
particle-size: 140
particle-size: 140
statement: if port == 1 {
    this'.__H0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,1));
}
statement: this'.__H1.Q_in.pushBack((pkt,1))
particle-size: 46
particle-size: 46
particle-size: 46
statement: this'.data = this'.data ~ [x]
particle-size: 46
statement: return ()
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 46
particle-size: 46
particle-size: 46
statement: this'.data = this'.data ~ [x]
particle-size: 46
statement: return ()
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,1));
}
statement: this'.__Controller.Q_in.pushBack((pkt,1))
particle-size: 48
particle-size: 48
particle-size: 48
statement: this'.data = this'.data ~ [x]
particle-size: 48
statement: return ()
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 436
particle-size: 436
statement: return this'.data.length
particle-size: 436
particle-size: 436
particle-size: 436
particle-size: 436
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 176
particle-size: 176
statement: r := this'.front()
particle-size: 176
particle-size: 176
statement: return this'.data[0]
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
statement: this'.popFront()
particle-size: 176
particle-size: 176
statement: this'.data = this'.data[1..this'.size()]
particle-size: 176
particle-size: 176
statement: return this'.data.length
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
statement: return ()
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
statement: return r
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,3));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,2));
}
statement: this'.__H1.Q_in.pushBack((pkt,2))
particle-size: 108
particle-size: 108
particle-size: 108
statement: this'.data = this'.data ~ [x]
particle-size: 108
statement: return ()
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,2));
}
statement: this'.__Controller.Q_in.pushBack((pkt,2))
particle-size: 68
particle-size: 68
particle-size: 68
statement: this'.data = this'.data ~ [x]
particle-size: 68
statement: return ()
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 436
particle-size: 436
statement: return this'.data.length
particle-size: 436
particle-size: 436
particle-size: 436
particle-size: 436
statement: (pkt,port) := this'.__H1.Q_out.takeFront()
particle-size: 120
particle-size: 120
statement: r := this'.front()
particle-size: 120
particle-size: 120
statement: return this'.data[0]
particle-size: 120
particle-size: 120
particle-size: 120
particle-size: 120
particle-size: 120
statement: this'.popFront()
particle-size: 120
particle-size: 120
statement: this'.data = this'.data[1..this'.size()]
particle-size: 120
particle-size: 120
statement: return this'.data.length
particle-size: 120
particle-size: 120
particle-size: 120
particle-size: 120
particle-size: 120
statement: return ()
particle-size: 120
particle-size: 120
particle-size: 120
particle-size: 120
statement: return r
particle-size: 120
particle-size: 120
particle-size: 120
particle-size: 120
particle-size: 120
particle-size: 120
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this'.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,4));
}
statement: this'.__Controller.Q_in.pushBack((pkt,4))
particle-size: 120
particle-size: 120
particle-size: 120
statement: this'.data = this'.data ~ [x]
particle-size: 120
statement: return ()
particle-size: 120
particle-size: 120
particle-size: 120
particle-size: 120
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 936
particle-size: 936
statement: return this'.data.length
particle-size: 936
particle-size: 936
particle-size: 936
particle-size: 936
statement: this'.__H0.__run()
particle-size: 260
particle-size: 260
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 260
particle-size: 260
statement: this'.data = this'.data[1..this'.size()]
particle-size: 260
particle-size: 260
statement: return this'.data.length
particle-size: 260
particle-size: 260
particle-size: 260
particle-size: 260
particle-size: 260
statement: return ()
particle-size: 260
particle-size: 260
particle-size: 260
particle-size: 260
statement: return ()
particle-size: 260
particle-size: 260
particle-size: 260
particle-size: 260
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 936
particle-size: 936
statement: return this'.data.length
particle-size: 936
particle-size: 936
particle-size: 936
particle-size: 936
statement: this'.__Controller.__run()
particle-size: 468
particle-size: 468
statement: this'.num_packets = (this'.num_packets + 1)
particle-size: 468
statement: if 0 {
    this'.tot_packets = 4;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 2));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 4) {
        observe((this'.Q_in.data[0][1] == 4));
    } else {
        observe(0);
    }
} else {
    this'.tot_packets = 3;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 2));
    } else {
        observe(0);
    }
}
statement: this'.tot_packets = 3
particle-size: 468
statement: if (this'.num_packets == 1) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 2));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 4))
statement: if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 2));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 1))
statement: this'.Q_in.popFront()
particle-size: 60
particle-size: 60
statement: this'.data = this'.data[1..this'.size()]
particle-size: 60
particle-size: 60
statement: return this'.data.length
particle-size: 60
particle-size: 60
particle-size: 60
particle-size: 60
particle-size: 60
statement: return ()
particle-size: 60
particle-size: 60
particle-size: 60
particle-size: 60
statement: return ()
particle-size: 60
particle-size: 60
particle-size: 60
particle-size: 60
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 528
particle-size: 528
statement: return this'.data.length
particle-size: 528
particle-size: 528
particle-size: 528
particle-size: 528
statement: this'.__S1.__run()
particle-size: 2
particle-size: 2
statement: if (this'.bad_hash == 2) {
    this'.bad_hash = flip((1 / 10));
}
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 2
particle-size: 2
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 4
particle-size: 4
statement: this'.Q_in.dupFront()
particle-size: 2
particle-size: 2
statement: this'.pushFront(this'.front())
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = [x] ~ this'.data
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 2
particle-size: 2
statement: r := this'.front()
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.popFront()
particle-size: 2
particle-size: 2
statement: this'.data = this'.data[1..this'.size()]
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return r
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = this'.data ~ [x]
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if (((this'.bad_hash == 1) && flip((1 / 3))) || ((this'.bad_hash == 0) && flip((1 / 2)))) {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
} else {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
}
particle-size: 4
particle-size: 4
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 16
particle-size: 16
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 8
particle-size: 8
statement: r := this'.front()
particle-size: 8
particle-size: 8
statement: return this'.data[0]
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.popFront()
particle-size: 8
particle-size: 8
statement: this'.data = this'.data[1..this'.size()]
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return r
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.data = this'.data ~ [x]
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3))
particle-size: 8
particle-size: 8
statement: r := this'.front()
particle-size: 8
particle-size: 8
statement: return this'.data[0]
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.popFront()
particle-size: 8
particle-size: 8
statement: this'.data = this'.data[1..this'.size()]
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return r
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.data = this'.data ~ [x]
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 16
particle-size: 8
particle-size: 8
particle-size: 8
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 534
particle-size: 534
statement: return this'.data.length
particle-size: 534
particle-size: 534
particle-size: 534
particle-size: 534
statement: this'.__S2.__run()
particle-size: 52
particle-size: 52
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 52
particle-size: 52
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 104
particle-size: 104
statement: this'.Q_in.dupFront()
particle-size: 52
particle-size: 52
statement: this'.pushFront(this'.front())
particle-size: 52
particle-size: 52
statement: return this'.data[0]
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
statement: this'.data = [x] ~ this'.data
particle-size: 52
statement: return ()
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
statement: return ()
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 52
particle-size: 52
statement: r := this'.front()
particle-size: 52
particle-size: 52
statement: return this'.data[0]
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
statement: this'.popFront()
particle-size: 52
particle-size: 52
statement: this'.data = this'.data[1..this'.size()]
particle-size: 52
particle-size: 52
statement: return this'.data.length
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
statement: return ()
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
statement: return r
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
statement: this'.data = this'.data ~ [x]
particle-size: 52
statement: return ()
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 104
particle-size: 104
statement: r := this'.front()
particle-size: 104
particle-size: 104
statement: return this'.data[0]
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: this'.popFront()
particle-size: 104
particle-size: 104
statement: this'.data = this'.data[1..this'.size()]
particle-size: 104
particle-size: 104
statement: return this'.data.length
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: return ()
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: return r
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: this'.data = this'.data ~ [x]
particle-size: 104
statement: return ()
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: return ()
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 586
particle-size: 586
statement: return this'.data.length
particle-size: 586
particle-size: 586
particle-size: 586
particle-size: 586
statement: this'.__H1.__run()
particle-size: 154
particle-size: 154
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 154
particle-size: 154
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 308
particle-size: 308
statement: this'.Q_in.dupFront()
particle-size: 154
particle-size: 154
statement: this'.pushFront(this'.front())
particle-size: 154
particle-size: 154
statement: return this'.data[0]
particle-size: 154
particle-size: 154
particle-size: 154
particle-size: 154
particle-size: 154
particle-size: 154
particle-size: 154
statement: this'.data = [x] ~ this'.data
particle-size: 154
statement: return ()
particle-size: 154
particle-size: 154
particle-size: 154
particle-size: 154
statement: return ()
particle-size: 154
particle-size: 154
particle-size: 154
particle-size: 154
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 154
particle-size: 154
statement: r := this'.front()
particle-size: 154
particle-size: 154
statement: return this'.data[0]
particle-size: 154
particle-size: 154
particle-size: 154
particle-size: 154
particle-size: 154
statement: this'.popFront()
particle-size: 154
particle-size: 154
statement: this'.data = this'.data[1..this'.size()]
particle-size: 154
particle-size: 154
statement: return this'.data.length
particle-size: 154
particle-size: 154
particle-size: 154
particle-size: 154
particle-size: 154
statement: return ()
particle-size: 154
particle-size: 154
particle-size: 154
particle-size: 154
statement: return r
particle-size: 154
particle-size: 154
particle-size: 154
particle-size: 154
particle-size: 154
particle-size: 154
particle-size: 154
statement: this'.data = this'.data ~ [x]
particle-size: 154
statement: return ()
particle-size: 154
particle-size: 154
particle-size: 154
particle-size: 154
statement: this'.Q_in.popFront()
particle-size: 308
particle-size: 308
statement: this'.data = this'.data[1..this'.size()]
particle-size: 308
particle-size: 308
statement: return this'.data.length
particle-size: 308
particle-size: 308
particle-size: 308
particle-size: 308
particle-size: 308
statement: return ()
particle-size: 308
particle-size: 308
particle-size: 308
particle-size: 308
statement: return ()
particle-size: 308
particle-size: 308
particle-size: 308
particle-size: 308
statement: return ()
particle-size: 1180
particle-size: 1180
particle-size: 1180
particle-size: 516
repetition: 14
statement: __d.__step()
particle-size: 516
particle-size: 516
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 516
particle-size: 516
statement: return this'.data.length
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
statement: return this'.data.length
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
statement: return this'.data.length
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
statement: return this'.data.length
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
statement: return this'.data.length
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
statement: return this'.data.length
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
statement: return this'.data.length
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
statement: return this'.data.length
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
statement: return this'.data.length
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
statement: return this'.data.length
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
statement: (action,node) := this'.scheduler()
particle-size: 512
particle-size: 512
statement: actions := ([]: (R × R)[])
particle-size: 512
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 512
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 512
particle-size: 512
statement: return this'.data.length
particle-size: 512
particle-size: 512
particle-size: 512
statement: actions ~= [(0,i)]
particle-size: 252
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 512
particle-size: 512
statement: return this'.data.length
particle-size: 512
particle-size: 512
particle-size: 512
loop-index: 1
particle-size: 512
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 512
particle-size: 512
statement: return this'.data.length
particle-size: 512
particle-size: 512
particle-size: 512
statement: actions ~= [(0,i)]
particle-size: 470
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 512
particle-size: 512
statement: return this'.data.length
particle-size: 512
particle-size: 512
particle-size: 512
loop-index: 2
particle-size: 512
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 512
particle-size: 512
statement: return this'.data.length
particle-size: 512
particle-size: 512
particle-size: 512
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 512
particle-size: 512
statement: return this'.data.length
particle-size: 512
particle-size: 512
particle-size: 512
statement: actions ~= [(1,i)]
particle-size: 64
loop-index: 3
particle-size: 512
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 512
particle-size: 512
statement: return this'.data.length
particle-size: 512
particle-size: 512
particle-size: 512
statement: actions ~= [(0,i)]
particle-size: 46
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 512
particle-size: 512
statement: return this'.data.length
particle-size: 512
particle-size: 512
particle-size: 512
statement: actions ~= [(1,i)]
particle-size: 188
loop-index: 4
particle-size: 512
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 512
particle-size: 512
statement: return this'.data.length
particle-size: 512
particle-size: 512
particle-size: 512
statement: actions ~= [(0,i)]
particle-size: 162
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 512
particle-size: 512
statement: return this'.data.length
particle-size: 512
particle-size: 512
particle-size: 512
statement: actions ~= [(1,i)]
particle-size: 124
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 512
particle-size: 512
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 1306
particle-size: 1306
particle-size: 1306
particle-size: 1306
particle-size: 1306
particle-size: 1306
particle-size: 1306
particle-size: 1306
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 376
particle-size: 376
statement: return this'.data.length
particle-size: 376
particle-size: 376
particle-size: 376
particle-size: 376
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 376
particle-size: 376
statement: return this'.data.length
particle-size: 376
particle-size: 376
particle-size: 376
particle-size: 376
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 376
particle-size: 376
statement: return this'.data.length
particle-size: 376
particle-size: 376
particle-size: 376
particle-size: 376
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 64
particle-size: 64
statement: r := this'.front()
particle-size: 64
particle-size: 64
statement: return this'.data[0]
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: this'.popFront()
particle-size: 64
particle-size: 64
statement: this'.data = this'.data[1..this'.size()]
particle-size: 64
particle-size: 64
statement: return this'.data.length
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: return ()
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: return r
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: if port == 1 {
    this'.__H0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,1));
}
statement: this'.__H1.Q_in.pushBack((pkt,1))
particle-size: 28
particle-size: 28
particle-size: 28
statement: this'.data = this'.data ~ [x]
particle-size: 28
statement: return ()
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 28
particle-size: 28
particle-size: 28
statement: this'.data = this'.data ~ [x]
particle-size: 28
statement: return ()
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,1));
}
statement: this'.__Controller.Q_in.pushBack((pkt,1))
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.data = this'.data ~ [x]
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 376
particle-size: 376
statement: return this'.data.length
particle-size: 376
particle-size: 376
particle-size: 376
particle-size: 376
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 188
particle-size: 188
statement: r := this'.front()
particle-size: 188
particle-size: 188
statement: return this'.data[0]
particle-size: 188
particle-size: 188
particle-size: 188
particle-size: 188
particle-size: 188
statement: this'.popFront()
particle-size: 188
particle-size: 188
statement: this'.data = this'.data[1..this'.size()]
particle-size: 188
particle-size: 188
statement: return this'.data.length
particle-size: 188
particle-size: 188
particle-size: 188
particle-size: 188
particle-size: 188
statement: return ()
particle-size: 188
particle-size: 188
particle-size: 188
particle-size: 188
statement: return r
particle-size: 188
particle-size: 188
particle-size: 188
particle-size: 188
particle-size: 188
particle-size: 188
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,3));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,2));
}
statement: this'.__H1.Q_in.pushBack((pkt,2))
particle-size: 102
particle-size: 102
particle-size: 102
statement: this'.data = this'.data ~ [x]
particle-size: 102
statement: return ()
particle-size: 102
particle-size: 102
particle-size: 102
particle-size: 102
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,2));
}
statement: this'.__Controller.Q_in.pushBack((pkt,2))
particle-size: 86
particle-size: 86
particle-size: 86
statement: this'.data = this'.data ~ [x]
particle-size: 86
statement: return ()
particle-size: 86
particle-size: 86
particle-size: 86
particle-size: 86
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 376
particle-size: 376
statement: return this'.data.length
particle-size: 376
particle-size: 376
particle-size: 376
particle-size: 376
statement: (pkt,port) := this'.__H1.Q_out.takeFront()
particle-size: 124
particle-size: 124
statement: r := this'.front()
particle-size: 124
particle-size: 124
statement: return this'.data[0]
particle-size: 124
particle-size: 124
particle-size: 124
particle-size: 124
particle-size: 124
statement: this'.popFront()
particle-size: 124
particle-size: 124
statement: this'.data = this'.data[1..this'.size()]
particle-size: 124
particle-size: 124
statement: return this'.data.length
particle-size: 124
particle-size: 124
particle-size: 124
particle-size: 124
particle-size: 124
statement: return ()
particle-size: 124
particle-size: 124
particle-size: 124
particle-size: 124
statement: return r
particle-size: 124
particle-size: 124
particle-size: 124
particle-size: 124
particle-size: 124
particle-size: 124
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this'.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,4));
}
statement: this'.__Controller.Q_in.pushBack((pkt,4))
particle-size: 124
particle-size: 124
particle-size: 124
statement: this'.data = this'.data ~ [x]
particle-size: 124
statement: return ()
particle-size: 124
particle-size: 124
particle-size: 124
particle-size: 124
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 930
particle-size: 930
statement: return this'.data.length
particle-size: 930
particle-size: 930
particle-size: 930
particle-size: 930
statement: this'.__H0.__run()
particle-size: 252
particle-size: 252
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 252
particle-size: 252
statement: this'.data = this'.data[1..this'.size()]
particle-size: 252
particle-size: 252
statement: return this'.data.length
particle-size: 252
particle-size: 252
particle-size: 252
particle-size: 252
particle-size: 252
statement: return ()
particle-size: 252
particle-size: 252
particle-size: 252
particle-size: 252
statement: return ()
particle-size: 252
particle-size: 252
particle-size: 252
particle-size: 252
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 930
particle-size: 930
statement: return this'.data.length
particle-size: 930
particle-size: 930
particle-size: 930
particle-size: 930
statement: this'.__Controller.__run()
particle-size: 470
particle-size: 470
statement: this'.num_packets = (this'.num_packets + 1)
particle-size: 470
statement: if 0 {
    this'.tot_packets = 4;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 2));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 4) {
        observe((this'.Q_in.data[0][1] == 4));
    } else {
        observe(0);
    }
} else {
    this'.tot_packets = 3;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 2));
    } else {
        observe(0);
    }
}
statement: this'.tot_packets = 3
particle-size: 470
statement: if (this'.num_packets == 1) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 2));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 4))
statement: if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 2));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 1))
statement: this'.Q_in.popFront()
particle-size: 68
particle-size: 68
statement: this'.data = this'.data[1..this'.size()]
particle-size: 68
particle-size: 68
statement: return this'.data.length
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
statement: return ()
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
statement: return ()
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 528
particle-size: 528
statement: return this'.data.length
particle-size: 528
particle-size: 528
particle-size: 528
particle-size: 528
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 528
particle-size: 528
statement: return this'.data.length
particle-size: 528
particle-size: 528
particle-size: 528
particle-size: 528
statement: this'.__S2.__run()
particle-size: 46
particle-size: 46
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 46
particle-size: 46
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 92
particle-size: 92
statement: this'.Q_in.dupFront()
particle-size: 46
particle-size: 46
statement: this'.pushFront(this'.front())
particle-size: 46
particle-size: 46
statement: return this'.data[0]
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
statement: this'.data = [x] ~ this'.data
particle-size: 46
statement: return ()
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
statement: return ()
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 46
particle-size: 46
statement: r := this'.front()
particle-size: 46
particle-size: 46
statement: return this'.data[0]
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
statement: this'.popFront()
particle-size: 46
particle-size: 46
statement: this'.data = this'.data[1..this'.size()]
particle-size: 46
particle-size: 46
statement: return this'.data.length
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
statement: return ()
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
statement: return r
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
statement: this'.data = this'.data ~ [x]
particle-size: 46
statement: return ()
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 92
particle-size: 92
statement: r := this'.front()
particle-size: 92
particle-size: 92
statement: return this'.data[0]
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: this'.popFront()
particle-size: 92
particle-size: 92
statement: this'.data = this'.data[1..this'.size()]
particle-size: 92
particle-size: 92
statement: return this'.data.length
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: return ()
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: return r
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: this'.data = this'.data ~ [x]
particle-size: 92
statement: return ()
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: return ()
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 574
particle-size: 574
statement: return this'.data.length
particle-size: 574
particle-size: 574
particle-size: 574
particle-size: 574
statement: this'.__H1.__run()
particle-size: 162
particle-size: 162
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 162
particle-size: 162
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 324
particle-size: 324
statement: this'.Q_in.dupFront()
particle-size: 162
particle-size: 162
statement: this'.pushFront(this'.front())
particle-size: 162
particle-size: 162
statement: return this'.data[0]
particle-size: 162
particle-size: 162
particle-size: 162
particle-size: 162
particle-size: 162
particle-size: 162
particle-size: 162
statement: this'.data = [x] ~ this'.data
particle-size: 162
statement: return ()
particle-size: 162
particle-size: 162
particle-size: 162
particle-size: 162
statement: return ()
particle-size: 162
particle-size: 162
particle-size: 162
particle-size: 162
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 162
particle-size: 162
statement: r := this'.front()
particle-size: 162
particle-size: 162
statement: return this'.data[0]
particle-size: 162
particle-size: 162
particle-size: 162
particle-size: 162
particle-size: 162
statement: this'.popFront()
particle-size: 162
particle-size: 162
statement: this'.data = this'.data[1..this'.size()]
particle-size: 162
particle-size: 162
statement: return this'.data.length
particle-size: 162
particle-size: 162
particle-size: 162
particle-size: 162
particle-size: 162
statement: return ()
particle-size: 162
particle-size: 162
particle-size: 162
particle-size: 162
statement: return r
particle-size: 162
particle-size: 162
particle-size: 162
particle-size: 162
particle-size: 162
particle-size: 162
particle-size: 162
statement: this'.data = this'.data ~ [x]
particle-size: 162
statement: return ()
particle-size: 162
particle-size: 162
particle-size: 162
particle-size: 162
statement: this'.Q_in.popFront()
particle-size: 324
particle-size: 324
statement: this'.data = this'.data[1..this'.size()]
particle-size: 324
particle-size: 324
statement: return this'.data.length
particle-size: 324
particle-size: 324
particle-size: 324
particle-size: 324
particle-size: 324
statement: return ()
particle-size: 324
particle-size: 324
particle-size: 324
particle-size: 324
statement: return ()
particle-size: 324
particle-size: 324
particle-size: 324
particle-size: 324
statement: return ()
particle-size: 1116
particle-size: 1116
particle-size: 1116
particle-size: 470
repetition: 15
statement: __d.__step()
particle-size: 470
particle-size: 470
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 470
particle-size: 470
statement: return this'.data.length
particle-size: 470
particle-size: 470
particle-size: 470
particle-size: 470
particle-size: 470
particle-size: 470
statement: return this'.data.length
particle-size: 470
particle-size: 470
particle-size: 470
particle-size: 470
particle-size: 470
particle-size: 470
statement: return this'.data.length
particle-size: 470
particle-size: 470
particle-size: 470
particle-size: 470
particle-size: 470
particle-size: 470
statement: return this'.data.length
particle-size: 470
particle-size: 470
particle-size: 470
particle-size: 470
particle-size: 470
particle-size: 470
statement: return this'.data.length
particle-size: 470
particle-size: 470
particle-size: 470
particle-size: 470
particle-size: 470
particle-size: 470
statement: return this'.data.length
particle-size: 470
particle-size: 470
particle-size: 470
particle-size: 470
particle-size: 470
particle-size: 470
statement: return this'.data.length
particle-size: 470
particle-size: 470
particle-size: 470
particle-size: 470
particle-size: 470
particle-size: 470
statement: return this'.data.length
particle-size: 470
particle-size: 470
particle-size: 470
particle-size: 470
particle-size: 470
particle-size: 470
statement: return this'.data.length
particle-size: 470
particle-size: 470
particle-size: 470
particle-size: 470
particle-size: 470
particle-size: 470
statement: return this'.data.length
particle-size: 470
particle-size: 470
particle-size: 470
particle-size: 470
statement: (action,node) := this'.scheduler()
particle-size: 464
particle-size: 464
statement: actions := ([]: (R × R)[])
particle-size: 464
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 464
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 464
particle-size: 464
statement: return this'.data.length
particle-size: 464
particle-size: 464
particle-size: 464
statement: actions ~= [(0,i)]
particle-size: 218
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 464
particle-size: 464
statement: return this'.data.length
particle-size: 464
particle-size: 464
particle-size: 464
loop-index: 1
particle-size: 464
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 464
particle-size: 464
statement: return this'.data.length
particle-size: 464
particle-size: 464
particle-size: 464
statement: actions ~= [(0,i)]
particle-size: 434
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 464
particle-size: 464
statement: return this'.data.length
particle-size: 464
particle-size: 464
particle-size: 464
loop-index: 2
particle-size: 464
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 464
particle-size: 464
statement: return this'.data.length
particle-size: 464
particle-size: 464
particle-size: 464
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 464
particle-size: 464
statement: return this'.data.length
particle-size: 464
particle-size: 464
particle-size: 464
statement: actions ~= [(1,i)]
particle-size: 16
loop-index: 3
particle-size: 464
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 464
particle-size: 464
statement: return this'.data.length
particle-size: 464
particle-size: 464
particle-size: 464
statement: actions ~= [(0,i)]
particle-size: 28
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 464
particle-size: 464
statement: return this'.data.length
particle-size: 464
particle-size: 464
particle-size: 464
statement: actions ~= [(1,i)]
particle-size: 174
loop-index: 4
particle-size: 464
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 464
particle-size: 464
statement: return this'.data.length
particle-size: 464
particle-size: 464
particle-size: 464
statement: actions ~= [(0,i)]
particle-size: 138
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 464
particle-size: 464
statement: return this'.data.length
particle-size: 464
particle-size: 464
particle-size: 464
statement: actions ~= [(1,i)]
particle-size: 124
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 464
particle-size: 464
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 1132
particle-size: 1132
particle-size: 1132
particle-size: 1132
particle-size: 1132
particle-size: 1132
particle-size: 1132
particle-size: 1132
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 314
particle-size: 314
statement: return this'.data.length
particle-size: 314
particle-size: 314
particle-size: 314
particle-size: 314
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 314
particle-size: 314
statement: return this'.data.length
particle-size: 314
particle-size: 314
particle-size: 314
particle-size: 314
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 314
particle-size: 314
statement: return this'.data.length
particle-size: 314
particle-size: 314
particle-size: 314
particle-size: 314
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 16
particle-size: 16
statement: r := this'.front()
particle-size: 16
particle-size: 16
statement: return this'.data[0]
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.popFront()
particle-size: 16
particle-size: 16
statement: this'.data = this'.data[1..this'.size()]
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return r
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: if port == 1 {
    this'.__H0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,1));
}
statement: this'.__H1.Q_in.pushBack((pkt,1))
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.data = this'.data ~ [x]
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.data = this'.data ~ [x]
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,1));
}
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 314
particle-size: 314
statement: return this'.data.length
particle-size: 314
particle-size: 314
particle-size: 314
particle-size: 314
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 174
particle-size: 174
statement: r := this'.front()
particle-size: 174
particle-size: 174
statement: return this'.data[0]
particle-size: 174
particle-size: 174
particle-size: 174
particle-size: 174
particle-size: 174
statement: this'.popFront()
particle-size: 174
particle-size: 174
statement: this'.data = this'.data[1..this'.size()]
particle-size: 174
particle-size: 174
statement: return this'.data.length
particle-size: 174
particle-size: 174
particle-size: 174
particle-size: 174
particle-size: 174
statement: return ()
particle-size: 174
particle-size: 174
particle-size: 174
particle-size: 174
statement: return r
particle-size: 174
particle-size: 174
particle-size: 174
particle-size: 174
particle-size: 174
particle-size: 174
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,3));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,2));
}
statement: this'.__H1.Q_in.pushBack((pkt,2))
particle-size: 92
particle-size: 92
particle-size: 92
statement: this'.data = this'.data ~ [x]
particle-size: 92
statement: return ()
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,2));
}
statement: this'.__Controller.Q_in.pushBack((pkt,2))
particle-size: 82
particle-size: 82
particle-size: 82
statement: this'.data = this'.data ~ [x]
particle-size: 82
statement: return ()
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 314
particle-size: 314
statement: return this'.data.length
particle-size: 314
particle-size: 314
particle-size: 314
particle-size: 314
statement: (pkt,port) := this'.__H1.Q_out.takeFront()
particle-size: 124
particle-size: 124
statement: r := this'.front()
particle-size: 124
particle-size: 124
statement: return this'.data[0]
particle-size: 124
particle-size: 124
particle-size: 124
particle-size: 124
particle-size: 124
statement: this'.popFront()
particle-size: 124
particle-size: 124
statement: this'.data = this'.data[1..this'.size()]
particle-size: 124
particle-size: 124
statement: return this'.data.length
particle-size: 124
particle-size: 124
particle-size: 124
particle-size: 124
particle-size: 124
statement: return ()
particle-size: 124
particle-size: 124
particle-size: 124
particle-size: 124
statement: return r
particle-size: 124
particle-size: 124
particle-size: 124
particle-size: 124
particle-size: 124
particle-size: 124
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this'.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,4));
}
statement: this'.__Controller.Q_in.pushBack((pkt,4))
particle-size: 124
particle-size: 124
particle-size: 124
statement: this'.data = this'.data ~ [x]
particle-size: 124
statement: return ()
particle-size: 124
particle-size: 124
particle-size: 124
particle-size: 124
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 818
particle-size: 818
statement: return this'.data.length
particle-size: 818
particle-size: 818
particle-size: 818
particle-size: 818
statement: this'.__H0.__run()
particle-size: 218
particle-size: 218
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 218
particle-size: 218
statement: this'.data = this'.data[1..this'.size()]
particle-size: 218
particle-size: 218
statement: return this'.data.length
particle-size: 218
particle-size: 218
particle-size: 218
particle-size: 218
particle-size: 218
statement: return ()
particle-size: 218
particle-size: 218
particle-size: 218
particle-size: 218
statement: return ()
particle-size: 218
particle-size: 218
particle-size: 218
particle-size: 218
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 818
particle-size: 818
statement: return this'.data.length
particle-size: 818
particle-size: 818
particle-size: 818
particle-size: 818
statement: this'.__Controller.__run()
particle-size: 434
particle-size: 434
statement: this'.num_packets = (this'.num_packets + 1)
particle-size: 434
statement: if 0 {
    this'.tot_packets = 4;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 2));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 4) {
        observe((this'.Q_in.data[0][1] == 4));
    } else {
        observe(0);
    }
} else {
    this'.tot_packets = 3;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 2));
    } else {
        observe(0);
    }
}
statement: this'.tot_packets = 3
particle-size: 434
statement: if (this'.num_packets == 1) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 2));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 4))
statement: if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 2));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 1))
statement: if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 2));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 2))
statement: this'.Q_in.popFront()
particle-size: 66
particle-size: 66
statement: this'.data = this'.data[1..this'.size()]
particle-size: 66
particle-size: 66
statement: return this'.data.length
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: return ()
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: return ()
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 450
particle-size: 450
statement: return this'.data.length
particle-size: 450
particle-size: 450
particle-size: 450
particle-size: 450
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 450
particle-size: 450
statement: return this'.data.length
particle-size: 450
particle-size: 450
particle-size: 450
particle-size: 450
statement: this'.__S2.__run()
particle-size: 28
particle-size: 28
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 28
particle-size: 28
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 56
particle-size: 56
statement: this'.Q_in.dupFront()
particle-size: 28
particle-size: 28
statement: this'.pushFront(this'.front())
particle-size: 28
particle-size: 28
statement: return this'.data[0]
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
statement: this'.data = [x] ~ this'.data
particle-size: 28
statement: return ()
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
statement: return ()
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 28
particle-size: 28
statement: r := this'.front()
particle-size: 28
particle-size: 28
statement: return this'.data[0]
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
statement: this'.popFront()
particle-size: 28
particle-size: 28
statement: this'.data = this'.data[1..this'.size()]
particle-size: 28
particle-size: 28
statement: return this'.data.length
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
statement: return ()
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
statement: return r
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
statement: this'.data = this'.data ~ [x]
particle-size: 28
statement: return ()
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 56
particle-size: 56
statement: r := this'.front()
particle-size: 56
particle-size: 56
statement: return this'.data[0]
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: this'.popFront()
particle-size: 56
particle-size: 56
statement: this'.data = this'.data[1..this'.size()]
particle-size: 56
particle-size: 56
statement: return this'.data.length
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: return ()
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: return r
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: this'.data = this'.data ~ [x]
particle-size: 56
statement: return ()
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: return ()
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 478
particle-size: 478
statement: return this'.data.length
particle-size: 478
particle-size: 478
particle-size: 478
particle-size: 478
statement: this'.__H1.__run()
particle-size: 138
particle-size: 138
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 138
particle-size: 138
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 276
particle-size: 276
statement: this'.Q_in.dupFront()
particle-size: 138
particle-size: 138
statement: this'.pushFront(this'.front())
particle-size: 138
particle-size: 138
statement: return this'.data[0]
particle-size: 138
particle-size: 138
particle-size: 138
particle-size: 138
particle-size: 138
particle-size: 138
particle-size: 138
statement: this'.data = [x] ~ this'.data
particle-size: 138
statement: return ()
particle-size: 138
particle-size: 138
particle-size: 138
particle-size: 138
statement: return ()
particle-size: 138
particle-size: 138
particle-size: 138
particle-size: 138
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 138
particle-size: 138
statement: r := this'.front()
particle-size: 138
particle-size: 138
statement: return this'.data[0]
particle-size: 138
particle-size: 138
particle-size: 138
particle-size: 138
particle-size: 138
statement: this'.popFront()
particle-size: 138
particle-size: 138
statement: this'.data = this'.data[1..this'.size()]
particle-size: 138
particle-size: 138
statement: return this'.data.length
particle-size: 138
particle-size: 138
particle-size: 138
particle-size: 138
particle-size: 138
statement: return ()
particle-size: 138
particle-size: 138
particle-size: 138
particle-size: 138
statement: return r
particle-size: 138
particle-size: 138
particle-size: 138
particle-size: 138
particle-size: 138
particle-size: 138
particle-size: 138
statement: this'.data = this'.data ~ [x]
particle-size: 138
statement: return ()
particle-size: 138
particle-size: 138
particle-size: 138
particle-size: 138
statement: this'.Q_in.popFront()
particle-size: 276
particle-size: 276
statement: this'.data = this'.data[1..this'.size()]
particle-size: 276
particle-size: 276
statement: return this'.data.length
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
statement: return ()
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
statement: return ()
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
statement: return ()
particle-size: 936
particle-size: 936
particle-size: 936
particle-size: 416
repetition: 16
statement: __d.__step()
particle-size: 416
particle-size: 416
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 416
particle-size: 416
statement: return this'.data.length
particle-size: 416
particle-size: 416
particle-size: 416
particle-size: 416
particle-size: 416
particle-size: 416
statement: return this'.data.length
particle-size: 416
particle-size: 416
particle-size: 416
particle-size: 416
particle-size: 416
particle-size: 416
statement: return this'.data.length
particle-size: 416
particle-size: 416
particle-size: 416
particle-size: 416
particle-size: 416
particle-size: 416
statement: return this'.data.length
particle-size: 416
particle-size: 416
particle-size: 416
particle-size: 416
particle-size: 416
particle-size: 416
statement: return this'.data.length
particle-size: 416
particle-size: 416
particle-size: 416
particle-size: 416
particle-size: 416
particle-size: 416
statement: return this'.data.length
particle-size: 416
particle-size: 416
particle-size: 416
particle-size: 416
particle-size: 416
particle-size: 416
statement: return this'.data.length
particle-size: 416
particle-size: 416
particle-size: 416
particle-size: 416
particle-size: 416
particle-size: 416
statement: return this'.data.length
particle-size: 416
particle-size: 416
particle-size: 416
particle-size: 416
particle-size: 416
particle-size: 416
statement: return this'.data.length
particle-size: 416
particle-size: 416
particle-size: 416
particle-size: 416
particle-size: 416
particle-size: 416
statement: return this'.data.length
particle-size: 416
particle-size: 416
particle-size: 416
particle-size: 416
statement: (action,node) := this'.scheduler()
particle-size: 410
particle-size: 410
statement: actions := ([]: (R × R)[])
particle-size: 410
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 410
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 410
particle-size: 410
statement: return this'.data.length
particle-size: 410
particle-size: 410
particle-size: 410
statement: actions ~= [(0,i)]
particle-size: 192
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 410
particle-size: 410
statement: return this'.data.length
particle-size: 410
particle-size: 410
particle-size: 410
loop-index: 1
particle-size: 410
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 410
particle-size: 410
statement: return this'.data.length
particle-size: 410
particle-size: 410
particle-size: 410
statement: actions ~= [(0,i)]
particle-size: 388
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 410
particle-size: 410
statement: return this'.data.length
particle-size: 410
particle-size: 410
particle-size: 410
loop-index: 2
particle-size: 410
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 410
particle-size: 410
statement: return this'.data.length
particle-size: 410
particle-size: 410
particle-size: 410
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 410
particle-size: 410
statement: return this'.data.length
particle-size: 410
particle-size: 410
particle-size: 410
loop-index: 3
particle-size: 410
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 410
particle-size: 410
statement: return this'.data.length
particle-size: 410
particle-size: 410
particle-size: 410
statement: actions ~= [(0,i)]
particle-size: 8
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 410
particle-size: 410
statement: return this'.data.length
particle-size: 410
particle-size: 410
particle-size: 410
statement: actions ~= [(1,i)]
particle-size: 126
loop-index: 4
particle-size: 410
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 410
particle-size: 410
statement: return this'.data.length
particle-size: 410
particle-size: 410
particle-size: 410
statement: actions ~= [(0,i)]
particle-size: 104
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 410
particle-size: 410
statement: return this'.data.length
particle-size: 410
particle-size: 410
particle-size: 410
statement: actions ~= [(1,i)]
particle-size: 114
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 410
particle-size: 410
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 932
particle-size: 932
particle-size: 932
particle-size: 932
particle-size: 932
particle-size: 932
particle-size: 932
particle-size: 932
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 240
particle-size: 240
statement: return this'.data.length
particle-size: 240
particle-size: 240
particle-size: 240
particle-size: 240
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 240
particle-size: 240
statement: return this'.data.length
particle-size: 240
particle-size: 240
particle-size: 240
particle-size: 240
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 240
particle-size: 240
statement: return this'.data.length
particle-size: 240
particle-size: 240
particle-size: 240
particle-size: 240
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 240
particle-size: 240
statement: return this'.data.length
particle-size: 240
particle-size: 240
particle-size: 240
particle-size: 240
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 126
particle-size: 126
statement: r := this'.front()
particle-size: 126
particle-size: 126
statement: return this'.data[0]
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
statement: this'.popFront()
particle-size: 126
particle-size: 126
statement: this'.data = this'.data[1..this'.size()]
particle-size: 126
particle-size: 126
statement: return this'.data.length
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
statement: return ()
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
statement: return r
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,3));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,2));
}
statement: this'.__H1.Q_in.pushBack((pkt,2))
particle-size: 80
particle-size: 80
particle-size: 80
statement: this'.data = this'.data ~ [x]
particle-size: 80
statement: return ()
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,2));
}
statement: this'.__Controller.Q_in.pushBack((pkt,2))
particle-size: 46
particle-size: 46
particle-size: 46
statement: this'.data = this'.data ~ [x]
particle-size: 46
statement: return ()
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 240
particle-size: 240
statement: return this'.data.length
particle-size: 240
particle-size: 240
particle-size: 240
particle-size: 240
statement: (pkt,port) := this'.__H1.Q_out.takeFront()
particle-size: 114
particle-size: 114
statement: r := this'.front()
particle-size: 114
particle-size: 114
statement: return this'.data[0]
particle-size: 114
particle-size: 114
particle-size: 114
particle-size: 114
particle-size: 114
statement: this'.popFront()
particle-size: 114
particle-size: 114
statement: this'.data = this'.data[1..this'.size()]
particle-size: 114
particle-size: 114
statement: return this'.data.length
particle-size: 114
particle-size: 114
particle-size: 114
particle-size: 114
particle-size: 114
statement: return ()
particle-size: 114
particle-size: 114
particle-size: 114
particle-size: 114
statement: return r
particle-size: 114
particle-size: 114
particle-size: 114
particle-size: 114
particle-size: 114
particle-size: 114
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this'.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,4));
}
statement: this'.__Controller.Q_in.pushBack((pkt,4))
particle-size: 114
particle-size: 114
particle-size: 114
statement: this'.data = this'.data ~ [x]
particle-size: 114
statement: return ()
particle-size: 114
particle-size: 114
particle-size: 114
particle-size: 114
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 692
particle-size: 692
statement: return this'.data.length
particle-size: 692
particle-size: 692
particle-size: 692
particle-size: 692
statement: this'.__H0.__run()
particle-size: 192
particle-size: 192
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 192
particle-size: 192
statement: this'.data = this'.data[1..this'.size()]
particle-size: 192
particle-size: 192
statement: return this'.data.length
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
statement: return ()
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
statement: return ()
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 692
particle-size: 692
statement: return this'.data.length
particle-size: 692
particle-size: 692
particle-size: 692
particle-size: 692
statement: this'.__Controller.__run()
particle-size: 388
particle-size: 388
statement: this'.num_packets = (this'.num_packets + 1)
particle-size: 388
statement: if 0 {
    this'.tot_packets = 4;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 2));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 4) {
        observe((this'.Q_in.data[0][1] == 4));
    } else {
        observe(0);
    }
} else {
    this'.tot_packets = 3;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 2));
    } else {
        observe(0);
    }
}
statement: this'.tot_packets = 3
particle-size: 388
statement: if (this'.num_packets == 1) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 2));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 4))
statement: if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 2));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 1))
statement: if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 2));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 2))
statement: this'.Q_in.popFront()
particle-size: 66
particle-size: 66
statement: this'.data = this'.data[1..this'.size()]
particle-size: 66
particle-size: 66
statement: return this'.data.length
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: return ()
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: return ()
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 370
particle-size: 370
statement: return this'.data.length
particle-size: 370
particle-size: 370
particle-size: 370
particle-size: 370
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 370
particle-size: 370
statement: return this'.data.length
particle-size: 370
particle-size: 370
particle-size: 370
particle-size: 370
statement: this'.__S2.__run()
particle-size: 8
particle-size: 8
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 8
particle-size: 8
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 16
particle-size: 16
statement: this'.Q_in.dupFront()
particle-size: 8
particle-size: 8
statement: this'.pushFront(this'.front())
particle-size: 8
particle-size: 8
statement: return this'.data[0]
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.data = [x] ~ this'.data
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 8
particle-size: 8
statement: r := this'.front()
particle-size: 8
particle-size: 8
statement: return this'.data[0]
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.popFront()
particle-size: 8
particle-size: 8
statement: this'.data = this'.data[1..this'.size()]
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return r
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.data = this'.data ~ [x]
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 16
particle-size: 16
statement: r := this'.front()
particle-size: 16
particle-size: 16
statement: return this'.data[0]
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.popFront()
particle-size: 16
particle-size: 16
statement: this'.data = this'.data[1..this'.size()]
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return r
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.data = this'.data ~ [x]
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 378
particle-size: 378
statement: return this'.data.length
particle-size: 378
particle-size: 378
particle-size: 378
particle-size: 378
statement: this'.__H1.__run()
particle-size: 104
particle-size: 104
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 104
particle-size: 104
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 208
particle-size: 208
statement: this'.Q_in.dupFront()
particle-size: 104
particle-size: 104
statement: this'.pushFront(this'.front())
particle-size: 104
particle-size: 104
statement: return this'.data[0]
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: this'.data = [x] ~ this'.data
particle-size: 104
statement: return ()
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: return ()
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 104
particle-size: 104
statement: r := this'.front()
particle-size: 104
particle-size: 104
statement: return this'.data[0]
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: this'.popFront()
particle-size: 104
particle-size: 104
statement: this'.data = this'.data[1..this'.size()]
particle-size: 104
particle-size: 104
statement: return this'.data.length
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: return ()
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: return r
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: this'.data = this'.data ~ [x]
particle-size: 104
statement: return ()
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: this'.Q_in.popFront()
particle-size: 208
particle-size: 208
statement: this'.data = this'.data[1..this'.size()]
particle-size: 208
particle-size: 208
statement: return this'.data.length
particle-size: 208
particle-size: 208
particle-size: 208
particle-size: 208
particle-size: 208
statement: return ()
particle-size: 208
particle-size: 208
particle-size: 208
particle-size: 208
statement: return ()
particle-size: 208
particle-size: 208
particle-size: 208
particle-size: 208
statement: return ()
particle-size: 728
particle-size: 728
particle-size: 728
particle-size: 342
repetition: 17
statement: __d.__step()
particle-size: 342
particle-size: 342
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 342
particle-size: 342
statement: return this'.data.length
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
statement: return this'.data.length
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
statement: return this'.data.length
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
statement: return this'.data.length
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
statement: return this'.data.length
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
statement: return this'.data.length
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
statement: return this'.data.length
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
statement: return this'.data.length
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
statement: return this'.data.length
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
statement: return this'.data.length
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
statement: (action,node) := this'.scheduler()
particle-size: 336
particle-size: 336
statement: actions := ([]: (R × R)[])
particle-size: 336
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 336
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 336
particle-size: 336
statement: return this'.data.length
particle-size: 336
particle-size: 336
particle-size: 336
statement: actions ~= [(0,i)]
particle-size: 148
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 336
particle-size: 336
statement: return this'.data.length
particle-size: 336
particle-size: 336
particle-size: 336
loop-index: 1
particle-size: 336
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 336
particle-size: 336
statement: return this'.data.length
particle-size: 336
particle-size: 336
particle-size: 336
statement: actions ~= [(0,i)]
particle-size: 322
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 336
particle-size: 336
statement: return this'.data.length
particle-size: 336
particle-size: 336
particle-size: 336
loop-index: 2
particle-size: 336
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 336
particle-size: 336
statement: return this'.data.length
particle-size: 336
particle-size: 336
particle-size: 336
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 336
particle-size: 336
statement: return this'.data.length
particle-size: 336
particle-size: 336
particle-size: 336
loop-index: 3
particle-size: 336
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 336
particle-size: 336
statement: return this'.data.length
particle-size: 336
particle-size: 336
particle-size: 336
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 336
particle-size: 336
statement: return this'.data.length
particle-size: 336
particle-size: 336
particle-size: 336
statement: actions ~= [(1,i)]
particle-size: 60
loop-index: 4
particle-size: 336
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 336
particle-size: 336
statement: return this'.data.length
particle-size: 336
particle-size: 336
particle-size: 336
statement: actions ~= [(0,i)]
particle-size: 80
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 336
particle-size: 336
statement: return this'.data.length
particle-size: 336
particle-size: 336
particle-size: 336
statement: actions ~= [(1,i)]
particle-size: 98
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 336
particle-size: 336
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 708
particle-size: 708
particle-size: 708
particle-size: 708
particle-size: 708
particle-size: 708
particle-size: 708
particle-size: 708
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 158
particle-size: 158
statement: return this'.data.length
particle-size: 158
particle-size: 158
particle-size: 158
particle-size: 158
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 158
particle-size: 158
statement: return this'.data.length
particle-size: 158
particle-size: 158
particle-size: 158
particle-size: 158
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 158
particle-size: 158
statement: return this'.data.length
particle-size: 158
particle-size: 158
particle-size: 158
particle-size: 158
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 158
particle-size: 158
statement: return this'.data.length
particle-size: 158
particle-size: 158
particle-size: 158
particle-size: 158
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 60
particle-size: 60
statement: r := this'.front()
particle-size: 60
particle-size: 60
statement: return this'.data[0]
particle-size: 60
particle-size: 60
particle-size: 60
particle-size: 60
particle-size: 60
statement: this'.popFront()
particle-size: 60
particle-size: 60
statement: this'.data = this'.data[1..this'.size()]
particle-size: 60
particle-size: 60
statement: return this'.data.length
particle-size: 60
particle-size: 60
particle-size: 60
particle-size: 60
particle-size: 60
statement: return ()
particle-size: 60
particle-size: 60
particle-size: 60
particle-size: 60
statement: return r
particle-size: 60
particle-size: 60
particle-size: 60
particle-size: 60
particle-size: 60
particle-size: 60
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,3));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,2));
}
statement: this'.__H1.Q_in.pushBack((pkt,2))
particle-size: 48
particle-size: 48
particle-size: 48
statement: this'.data = this'.data ~ [x]
particle-size: 48
statement: return ()
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,2));
}
statement: this'.__Controller.Q_in.pushBack((pkt,2))
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.data = this'.data ~ [x]
particle-size: 12
statement: return ()
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 158
particle-size: 158
statement: return this'.data.length
particle-size: 158
particle-size: 158
particle-size: 158
particle-size: 158
statement: (pkt,port) := this'.__H1.Q_out.takeFront()
particle-size: 98
particle-size: 98
statement: r := this'.front()
particle-size: 98
particle-size: 98
statement: return this'.data[0]
particle-size: 98
particle-size: 98
particle-size: 98
particle-size: 98
particle-size: 98
statement: this'.popFront()
particle-size: 98
particle-size: 98
statement: this'.data = this'.data[1..this'.size()]
particle-size: 98
particle-size: 98
statement: return this'.data.length
particle-size: 98
particle-size: 98
particle-size: 98
particle-size: 98
particle-size: 98
statement: return ()
particle-size: 98
particle-size: 98
particle-size: 98
particle-size: 98
statement: return r
particle-size: 98
particle-size: 98
particle-size: 98
particle-size: 98
particle-size: 98
particle-size: 98
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this'.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,4));
}
statement: this'.__Controller.Q_in.pushBack((pkt,4))
particle-size: 98
particle-size: 98
particle-size: 98
statement: this'.data = this'.data ~ [x]
particle-size: 98
statement: return ()
particle-size: 98
particle-size: 98
particle-size: 98
particle-size: 98
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 550
particle-size: 550
statement: return this'.data.length
particle-size: 550
particle-size: 550
particle-size: 550
particle-size: 550
statement: this'.__H0.__run()
particle-size: 148
particle-size: 148
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 148
particle-size: 148
statement: this'.data = this'.data[1..this'.size()]
particle-size: 148
particle-size: 148
statement: return this'.data.length
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
statement: return ()
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
statement: return ()
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 550
particle-size: 550
statement: return this'.data.length
particle-size: 550
particle-size: 550
particle-size: 550
particle-size: 550
statement: this'.__Controller.__run()
particle-size: 322
particle-size: 322
statement: this'.num_packets = (this'.num_packets + 1)
particle-size: 322
statement: if 0 {
    this'.tot_packets = 4;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 2));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 4) {
        observe((this'.Q_in.data[0][1] == 4));
    } else {
        observe(0);
    }
} else {
    this'.tot_packets = 3;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 2));
    } else {
        observe(0);
    }
}
statement: this'.tot_packets = 3
particle-size: 322
statement: if (this'.num_packets == 1) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 2));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 4))
statement: if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 2));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 1))
statement: if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 2));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 2))
statement: this'.Q_in.popFront()
particle-size: 62
particle-size: 62
statement: this'.data = this'.data[1..this'.size()]
particle-size: 62
particle-size: 62
statement: return this'.data.length
particle-size: 62
particle-size: 62
particle-size: 62
particle-size: 62
particle-size: 62
statement: return ()
particle-size: 62
particle-size: 62
particle-size: 62
particle-size: 62
statement: return ()
particle-size: 62
particle-size: 62
particle-size: 62
particle-size: 62
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 290
particle-size: 290
statement: return this'.data.length
particle-size: 290
particle-size: 290
particle-size: 290
particle-size: 290
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 290
particle-size: 290
statement: return this'.data.length
particle-size: 290
particle-size: 290
particle-size: 290
particle-size: 290
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 290
particle-size: 290
statement: return this'.data.length
particle-size: 290
particle-size: 290
particle-size: 290
particle-size: 290
statement: this'.__H1.__run()
particle-size: 80
particle-size: 80
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 80
particle-size: 80
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 160
particle-size: 160
statement: this'.Q_in.dupFront()
particle-size: 80
particle-size: 80
statement: this'.pushFront(this'.front())
particle-size: 80
particle-size: 80
statement: return this'.data[0]
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: this'.data = [x] ~ this'.data
particle-size: 80
statement: return ()
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: return ()
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 80
particle-size: 80
statement: r := this'.front()
particle-size: 80
particle-size: 80
statement: return this'.data[0]
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: this'.popFront()
particle-size: 80
particle-size: 80
statement: this'.data = this'.data[1..this'.size()]
particle-size: 80
particle-size: 80
statement: return this'.data.length
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: return ()
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: return r
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: this'.data = this'.data ~ [x]
particle-size: 80
statement: return ()
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: this'.Q_in.popFront()
particle-size: 160
particle-size: 160
statement: this'.data = this'.data[1..this'.size()]
particle-size: 160
particle-size: 160
statement: return this'.data.length
particle-size: 160
particle-size: 160
particle-size: 160
particle-size: 160
particle-size: 160
statement: return ()
particle-size: 160
particle-size: 160
particle-size: 160
particle-size: 160
statement: return ()
particle-size: 160
particle-size: 160
particle-size: 160
particle-size: 160
statement: return ()
particle-size: 534
particle-size: 534
particle-size: 534
particle-size: 266
repetition: 18
statement: __d.__step()
particle-size: 266
particle-size: 266
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 266
particle-size: 266
statement: return this'.data.length
particle-size: 266
particle-size: 266
particle-size: 266
particle-size: 266
particle-size: 266
particle-size: 266
statement: return this'.data.length
particle-size: 266
particle-size: 266
particle-size: 266
particle-size: 266
particle-size: 266
particle-size: 266
statement: return this'.data.length
particle-size: 266
particle-size: 266
particle-size: 266
particle-size: 266
particle-size: 266
particle-size: 266
statement: return this'.data.length
particle-size: 266
particle-size: 266
particle-size: 266
particle-size: 266
particle-size: 266
particle-size: 266
statement: return this'.data.length
particle-size: 266
particle-size: 266
particle-size: 266
particle-size: 266
particle-size: 266
particle-size: 266
statement: return this'.data.length
particle-size: 266
particle-size: 266
particle-size: 266
particle-size: 266
particle-size: 266
particle-size: 266
statement: return this'.data.length
particle-size: 266
particle-size: 266
particle-size: 266
particle-size: 266
particle-size: 266
particle-size: 266
statement: return this'.data.length
particle-size: 266
particle-size: 266
particle-size: 266
particle-size: 266
particle-size: 266
particle-size: 266
statement: return this'.data.length
particle-size: 266
particle-size: 266
particle-size: 266
particle-size: 266
particle-size: 266
particle-size: 266
statement: return this'.data.length
particle-size: 266
particle-size: 266
particle-size: 266
particle-size: 266
statement: (action,node) := this'.scheduler()
particle-size: 260
particle-size: 260
statement: actions := ([]: (R × R)[])
particle-size: 260
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 260
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 260
particle-size: 260
statement: return this'.data.length
particle-size: 260
particle-size: 260
particle-size: 260
statement: actions ~= [(0,i)]
particle-size: 112
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 260
particle-size: 260
statement: return this'.data.length
particle-size: 260
particle-size: 260
particle-size: 260
loop-index: 1
particle-size: 260
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 260
particle-size: 260
statement: return this'.data.length
particle-size: 260
particle-size: 260
particle-size: 260
statement: actions ~= [(0,i)]
particle-size: 246
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 260
particle-size: 260
statement: return this'.data.length
particle-size: 260
particle-size: 260
particle-size: 260
loop-index: 2
particle-size: 260
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 260
particle-size: 260
statement: return this'.data.length
particle-size: 260
particle-size: 260
particle-size: 260
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 260
particle-size: 260
statement: return this'.data.length
particle-size: 260
particle-size: 260
particle-size: 260
loop-index: 3
particle-size: 260
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 260
particle-size: 260
statement: return this'.data.length
particle-size: 260
particle-size: 260
particle-size: 260
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 260
particle-size: 260
statement: return this'.data.length
particle-size: 260
particle-size: 260
particle-size: 260
statement: actions ~= [(1,i)]
particle-size: 14
loop-index: 4
particle-size: 260
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 260
particle-size: 260
statement: return this'.data.length
particle-size: 260
particle-size: 260
particle-size: 260
statement: actions ~= [(0,i)]
particle-size: 48
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 260
particle-size: 260
statement: return this'.data.length
particle-size: 260
particle-size: 260
particle-size: 260
statement: actions ~= [(1,i)]
particle-size: 80
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 260
particle-size: 260
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 500
particle-size: 500
particle-size: 500
particle-size: 500
particle-size: 500
particle-size: 500
particle-size: 500
particle-size: 500
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 94
particle-size: 94
statement: return this'.data.length
particle-size: 94
particle-size: 94
particle-size: 94
particle-size: 94
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 94
particle-size: 94
statement: return this'.data.length
particle-size: 94
particle-size: 94
particle-size: 94
particle-size: 94
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 94
particle-size: 94
statement: return this'.data.length
particle-size: 94
particle-size: 94
particle-size: 94
particle-size: 94
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 94
particle-size: 94
statement: return this'.data.length
particle-size: 94
particle-size: 94
particle-size: 94
particle-size: 94
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 14
particle-size: 14
statement: r := this'.front()
particle-size: 14
particle-size: 14
statement: return this'.data[0]
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: this'.popFront()
particle-size: 14
particle-size: 14
statement: this'.data = this'.data[1..this'.size()]
particle-size: 14
particle-size: 14
statement: return this'.data.length
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: return ()
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: return r
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,3));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,2));
}
statement: this'.__H1.Q_in.pushBack((pkt,2))
particle-size: 14
particle-size: 14
particle-size: 14
statement: this'.data = this'.data ~ [x]
particle-size: 14
statement: return ()
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,2));
}
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 94
particle-size: 94
statement: return this'.data.length
particle-size: 94
particle-size: 94
particle-size: 94
particle-size: 94
statement: (pkt,port) := this'.__H1.Q_out.takeFront()
particle-size: 80
particle-size: 80
statement: r := this'.front()
particle-size: 80
particle-size: 80
statement: return this'.data[0]
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: this'.popFront()
particle-size: 80
particle-size: 80
statement: this'.data = this'.data[1..this'.size()]
particle-size: 80
particle-size: 80
statement: return this'.data.length
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: return ()
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: return r
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this'.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,4));
}
statement: this'.__Controller.Q_in.pushBack((pkt,4))
particle-size: 80
particle-size: 80
particle-size: 80
statement: this'.data = this'.data ~ [x]
particle-size: 80
statement: return ()
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 406
particle-size: 406
statement: return this'.data.length
particle-size: 406
particle-size: 406
particle-size: 406
particle-size: 406
statement: this'.__H0.__run()
particle-size: 112
particle-size: 112
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 112
particle-size: 112
statement: this'.data = this'.data[1..this'.size()]
particle-size: 112
particle-size: 112
statement: return this'.data.length
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: return ()
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: return ()
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 406
particle-size: 406
statement: return this'.data.length
particle-size: 406
particle-size: 406
particle-size: 406
particle-size: 406
statement: this'.__Controller.__run()
particle-size: 246
particle-size: 246
statement: this'.num_packets = (this'.num_packets + 1)
particle-size: 246
statement: if 0 {
    this'.tot_packets = 4;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 2));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 4) {
        observe((this'.Q_in.data[0][1] == 4));
    } else {
        observe(0);
    }
} else {
    this'.tot_packets = 3;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 2));
    } else {
        observe(0);
    }
}
statement: this'.tot_packets = 3
particle-size: 246
statement: if (this'.num_packets == 1) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 2));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 4))
statement: if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 2));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 1))
statement: if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 2));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 2))
statement: this'.Q_in.popFront()
particle-size: 48
particle-size: 48
statement: this'.data = this'.data[1..this'.size()]
particle-size: 48
particle-size: 48
statement: return this'.data.length
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: return ()
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: return ()
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 208
particle-size: 208
statement: return this'.data.length
particle-size: 208
particle-size: 208
particle-size: 208
particle-size: 208
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 208
particle-size: 208
statement: return this'.data.length
particle-size: 208
particle-size: 208
particle-size: 208
particle-size: 208
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 208
particle-size: 208
statement: return this'.data.length
particle-size: 208
particle-size: 208
particle-size: 208
particle-size: 208
statement: this'.__H1.__run()
particle-size: 48
particle-size: 48
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 48
particle-size: 48
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 96
particle-size: 96
statement: this'.Q_in.dupFront()
particle-size: 48
particle-size: 48
statement: this'.pushFront(this'.front())
particle-size: 48
particle-size: 48
statement: return this'.data[0]
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: this'.data = [x] ~ this'.data
particle-size: 48
statement: return ()
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: return ()
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 48
particle-size: 48
statement: r := this'.front()
particle-size: 48
particle-size: 48
statement: return this'.data[0]
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: this'.popFront()
particle-size: 48
particle-size: 48
statement: this'.data = this'.data[1..this'.size()]
particle-size: 48
particle-size: 48
statement: return this'.data.length
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: return ()
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: return r
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: this'.data = this'.data ~ [x]
particle-size: 48
statement: return ()
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: this'.Q_in.popFront()
particle-size: 96
particle-size: 96
statement: this'.data = this'.data[1..this'.size()]
particle-size: 96
particle-size: 96
statement: return this'.data.length
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: return ()
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: return ()
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: return ()
particle-size: 356
particle-size: 356
particle-size: 356
particle-size: 172
repetition: 19
statement: __d.__step()
particle-size: 172
particle-size: 172
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 172
particle-size: 172
statement: return this'.data.length
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
statement: return this'.data.length
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
statement: return this'.data.length
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
statement: return this'.data.length
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
statement: return this'.data.length
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
statement: return this'.data.length
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
statement: return this'.data.length
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
statement: return this'.data.length
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
statement: return this'.data.length
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
statement: return this'.data.length
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
statement: (action,node) := this'.scheduler()
particle-size: 164
particle-size: 164
statement: actions := ([]: (R × R)[])
particle-size: 164
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 164
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 164
particle-size: 164
statement: return this'.data.length
particle-size: 164
particle-size: 164
particle-size: 164
statement: actions ~= [(0,i)]
particle-size: 56
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 164
particle-size: 164
statement: return this'.data.length
particle-size: 164
particle-size: 164
particle-size: 164
loop-index: 1
particle-size: 164
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 164
particle-size: 164
statement: return this'.data.length
particle-size: 164
particle-size: 164
particle-size: 164
statement: actions ~= [(0,i)]
particle-size: 156
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 164
particle-size: 164
statement: return this'.data.length
particle-size: 164
particle-size: 164
particle-size: 164
loop-index: 2
particle-size: 164
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 164
particle-size: 164
statement: return this'.data.length
particle-size: 164
particle-size: 164
particle-size: 164
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 164
particle-size: 164
statement: return this'.data.length
particle-size: 164
particle-size: 164
particle-size: 164
loop-index: 3
particle-size: 164
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 164
particle-size: 164
statement: return this'.data.length
particle-size: 164
particle-size: 164
particle-size: 164
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 164
particle-size: 164
statement: return this'.data.length
particle-size: 164
particle-size: 164
particle-size: 164
statement: actions ~= [(1,i)]
particle-size: 2
loop-index: 4
particle-size: 164
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 164
particle-size: 164
statement: return this'.data.length
particle-size: 164
particle-size: 164
particle-size: 164
statement: actions ~= [(0,i)]
particle-size: 14
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 164
particle-size: 164
statement: return this'.data.length
particle-size: 164
particle-size: 164
particle-size: 164
statement: actions ~= [(1,i)]
particle-size: 48
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 164
particle-size: 164
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 50
particle-size: 50
statement: return this'.data.length
particle-size: 50
particle-size: 50
particle-size: 50
particle-size: 50
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 50
particle-size: 50
statement: return this'.data.length
particle-size: 50
particle-size: 50
particle-size: 50
particle-size: 50
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 50
particle-size: 50
statement: return this'.data.length
particle-size: 50
particle-size: 50
particle-size: 50
particle-size: 50
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 50
particle-size: 50
statement: return this'.data.length
particle-size: 50
particle-size: 50
particle-size: 50
particle-size: 50
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 2
particle-size: 2
statement: r := this'.front()
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.popFront()
particle-size: 2
particle-size: 2
statement: this'.data = this'.data[1..this'.size()]
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return r
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,3));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,2));
}
statement: this'.__H1.Q_in.pushBack((pkt,2))
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = this'.data ~ [x]
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,2));
}
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 50
particle-size: 50
statement: return this'.data.length
particle-size: 50
particle-size: 50
particle-size: 50
particle-size: 50
statement: (pkt,port) := this'.__H1.Q_out.takeFront()
particle-size: 48
particle-size: 48
statement: r := this'.front()
particle-size: 48
particle-size: 48
statement: return this'.data[0]
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: this'.popFront()
particle-size: 48
particle-size: 48
statement: this'.data = this'.data[1..this'.size()]
particle-size: 48
particle-size: 48
statement: return this'.data.length
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: return ()
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: return r
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this'.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,4));
}
statement: this'.__Controller.Q_in.pushBack((pkt,4))
particle-size: 48
particle-size: 48
particle-size: 48
statement: this'.data = this'.data ~ [x]
particle-size: 48
statement: return ()
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 226
particle-size: 226
statement: return this'.data.length
particle-size: 226
particle-size: 226
particle-size: 226
particle-size: 226
statement: this'.__H0.__run()
particle-size: 56
particle-size: 56
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 56
particle-size: 56
statement: this'.data = this'.data[1..this'.size()]
particle-size: 56
particle-size: 56
statement: return this'.data.length
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: return ()
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: return ()
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 226
particle-size: 226
statement: return this'.data.length
particle-size: 226
particle-size: 226
particle-size: 226
particle-size: 226
statement: this'.__Controller.__run()
particle-size: 156
particle-size: 156
statement: this'.num_packets = (this'.num_packets + 1)
particle-size: 156
statement: if 0 {
    this'.tot_packets = 4;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 2));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 4) {
        observe((this'.Q_in.data[0][1] == 4));
    } else {
        observe(0);
    }
} else {
    this'.tot_packets = 3;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 2));
    } else {
        observe(0);
    }
}
statement: this'.tot_packets = 3
particle-size: 156
statement: if (this'.num_packets == 1) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 2));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 4))
statement: if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 2));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 1))
statement: if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 2));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 2))
statement: observe(0)
statement: this'.Q_in.popFront()
particle-size: 30
particle-size: 30
statement: this'.data = this'.data[1..this'.size()]
particle-size: 30
particle-size: 30
statement: return this'.data.length
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
statement: return ()
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
statement: return ()
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 100
particle-size: 100
statement: return this'.data.length
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 100
particle-size: 100
statement: return this'.data.length
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 100
particle-size: 100
statement: return this'.data.length
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: this'.__H1.__run()
particle-size: 14
particle-size: 14
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 14
particle-size: 14
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 28
particle-size: 28
statement: this'.Q_in.dupFront()
particle-size: 14
particle-size: 14
statement: this'.pushFront(this'.front())
particle-size: 14
particle-size: 14
statement: return this'.data[0]
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: this'.data = [x] ~ this'.data
particle-size: 14
statement: return ()
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: return ()
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 14
particle-size: 14
statement: r := this'.front()
particle-size: 14
particle-size: 14
statement: return this'.data[0]
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: this'.popFront()
particle-size: 14
particle-size: 14
statement: this'.data = this'.data[1..this'.size()]
particle-size: 14
particle-size: 14
statement: return this'.data.length
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: return ()
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: return r
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: this'.data = this'.data ~ [x]
particle-size: 14
statement: return ()
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: this'.Q_in.popFront()
particle-size: 28
particle-size: 28
statement: this'.data = this'.data[1..this'.size()]
particle-size: 28
particle-size: 28
statement: return this'.data.length
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
statement: return ()
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
statement: return ()
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
statement: return ()
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 82
repetition: 20
statement: __d.__step()
particle-size: 82
particle-size: 82
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 82
particle-size: 82
statement: return this'.data.length
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
statement: return this'.data.length
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
statement: return this'.data.length
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
statement: return this'.data.length
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
statement: return this'.data.length
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
statement: return this'.data.length
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
statement: return this'.data.length
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
statement: return this'.data.length
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
statement: return this'.data.length
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
statement: return this'.data.length
particle-size: 82
particle-size: 82
particle-size: 82
particle-size: 82
statement: (action,node) := this'.scheduler()
particle-size: 74
particle-size: 74
statement: actions := ([]: (R × R)[])
particle-size: 74
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 74
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 74
particle-size: 74
statement: return this'.data.length
particle-size: 74
particle-size: 74
particle-size: 74
statement: actions ~= [(0,i)]
particle-size: 18
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 74
particle-size: 74
statement: return this'.data.length
particle-size: 74
particle-size: 74
particle-size: 74
loop-index: 1
particle-size: 74
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 74
particle-size: 74
statement: return this'.data.length
particle-size: 74
particle-size: 74
particle-size: 74
statement: actions ~= [(0,i)]
particle-size: 68
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 74
particle-size: 74
statement: return this'.data.length
particle-size: 74
particle-size: 74
particle-size: 74
loop-index: 2
particle-size: 74
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 74
particle-size: 74
statement: return this'.data.length
particle-size: 74
particle-size: 74
particle-size: 74
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 74
particle-size: 74
statement: return this'.data.length
particle-size: 74
particle-size: 74
particle-size: 74
loop-index: 3
particle-size: 74
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 74
particle-size: 74
statement: return this'.data.length
particle-size: 74
particle-size: 74
particle-size: 74
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 74
particle-size: 74
statement: return this'.data.length
particle-size: 74
particle-size: 74
particle-size: 74
loop-index: 4
particle-size: 74
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 74
particle-size: 74
statement: return this'.data.length
particle-size: 74
particle-size: 74
particle-size: 74
statement: actions ~= [(0,i)]
particle-size: 2
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 74
particle-size: 74
statement: return this'.data.length
particle-size: 74
particle-size: 74
particle-size: 74
statement: actions ~= [(1,i)]
particle-size: 14
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 74
particle-size: 74
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 102
particle-size: 102
particle-size: 102
particle-size: 102
particle-size: 102
particle-size: 102
particle-size: 102
particle-size: 102
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 14
particle-size: 14
statement: return this'.data.length
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 14
particle-size: 14
statement: return this'.data.length
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 14
particle-size: 14
statement: return this'.data.length
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 14
particle-size: 14
statement: return this'.data.length
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 14
particle-size: 14
statement: return this'.data.length
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: (pkt,port) := this'.__H1.Q_out.takeFront()
particle-size: 14
particle-size: 14
statement: r := this'.front()
particle-size: 14
particle-size: 14
statement: return this'.data[0]
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: this'.popFront()
particle-size: 14
particle-size: 14
statement: this'.data = this'.data[1..this'.size()]
particle-size: 14
particle-size: 14
statement: return this'.data.length
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: return ()
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: return r
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this'.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,4));
}
statement: this'.__Controller.Q_in.pushBack((pkt,4))
particle-size: 14
particle-size: 14
particle-size: 14
statement: this'.data = this'.data ~ [x]
particle-size: 14
statement: return ()
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 88
particle-size: 88
statement: return this'.data.length
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: this'.__H0.__run()
particle-size: 18
particle-size: 18
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 18
particle-size: 18
statement: this'.data = this'.data[1..this'.size()]
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 88
particle-size: 88
statement: return this'.data.length
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: this'.__Controller.__run()
particle-size: 68
particle-size: 68
statement: this'.num_packets = (this'.num_packets + 1)
particle-size: 68
statement: if 0 {
    this'.tot_packets = 4;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 2));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 4) {
        observe((this'.Q_in.data[0][1] == 4));
    } else {
        observe(0);
    }
} else {
    this'.tot_packets = 3;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 2));
    } else {
        observe(0);
    }
}
statement: this'.tot_packets = 3
particle-size: 68
statement: if (this'.num_packets == 1) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 2));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 4))
statement: if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 2));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 1))
statement: if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 2));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 2))
statement: observe(0)
statement: this'.Q_in.popFront()
particle-size: 14
particle-size: 14
statement: this'.data = this'.data[1..this'.size()]
particle-size: 14
particle-size: 14
statement: return this'.data.length
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: return ()
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: return ()
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 34
particle-size: 34
statement: return this'.data.length
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 34
particle-size: 34
statement: return this'.data.length
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 34
particle-size: 34
statement: return this'.data.length
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: this'.__H1.__run()
particle-size: 2
particle-size: 2
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 2
particle-size: 2
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 4
particle-size: 4
statement: this'.Q_in.dupFront()
particle-size: 2
particle-size: 2
statement: this'.pushFront(this'.front())
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = [x] ~ this'.data
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 2
particle-size: 2
statement: r := this'.front()
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.popFront()
particle-size: 2
particle-size: 2
statement: this'.data = this'.data[1..this'.size()]
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return r
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = this'.data ~ [x]
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.Q_in.popFront()
particle-size: 4
particle-size: 4
statement: this'.data = this'.data[1..this'.size()]
particle-size: 4
particle-size: 4
statement: return this'.data.length
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 58
particle-size: 58
particle-size: 58
particle-size: 26
repetition: 21
statement: __d.__step()
particle-size: 26
particle-size: 26
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 26
particle-size: 26
statement: return this'.data.length
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: return this'.data.length
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: return this'.data.length
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: return this'.data.length
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: return this'.data.length
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: return this'.data.length
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: return this'.data.length
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: return this'.data.length
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: return this'.data.length
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: return this'.data.length
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: (action,node) := this'.scheduler()
particle-size: 18
particle-size: 18
statement: actions := ([]: (R × R)[])
particle-size: 18
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 18
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
statement: actions ~= [(0,i)]
particle-size: 2
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
loop-index: 1
particle-size: 18
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
statement: actions ~= [(0,i)]
particle-size: 16
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
loop-index: 2
particle-size: 18
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
loop-index: 3
particle-size: 18
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
loop-index: 4
particle-size: 18
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
statement: actions ~= [(1,i)]
particle-size: 2
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 18
particle-size: 18
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: (pkt,port) := this'.__H1.Q_out.takeFront()
particle-size: 2
particle-size: 2
statement: r := this'.front()
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.popFront()
particle-size: 2
particle-size: 2
statement: this'.data = this'.data[1..this'.size()]
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return r
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this'.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,4));
}
statement: this'.__Controller.Q_in.pushBack((pkt,4))
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = this'.data ~ [x]
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.__H0.__run()
particle-size: 2
particle-size: 2
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 2
particle-size: 2
statement: this'.data = this'.data[1..this'.size()]
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.__Controller.__run()
particle-size: 16
particle-size: 16
statement: this'.num_packets = (this'.num_packets + 1)
particle-size: 16
statement: if 0 {
    this'.tot_packets = 4;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 2));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 4) {
        observe((this'.Q_in.data[0][1] == 4));
    } else {
        observe(0);
    }
} else {
    this'.tot_packets = 3;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 2));
    } else {
        observe(0);
    }
}
statement: this'.tot_packets = 3
particle-size: 16
statement: if (this'.num_packets == 1) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 2));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 4))
statement: if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 2));
} else {
    observe(0);
}
statement: if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 2));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 2))
statement: observe(0)
statement: this'.Q_in.popFront()
particle-size: 4
particle-size: 4
statement: this'.data = this'.data[1..this'.size()]
particle-size: 4
particle-size: 4
statement: return this'.data.length
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 10
repetition: 22
statement: __d.__step()
particle-size: 10
particle-size: 10
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: (action,node) := this'.scheduler()
particle-size: 2
particle-size: 2
statement: actions := ([]: (R × R)[])
particle-size: 2
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 2
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
loop-index: 1
particle-size: 2
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
statement: actions ~= [(0,i)]
particle-size: 2
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
loop-index: 2
particle-size: 2
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
loop-index: 3
particle-size: 2
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
loop-index: 4
particle-size: 2
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 2
particle-size: 2
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.__Controller.__run()
particle-size: 2
particle-size: 2
statement: this'.num_packets = (this'.num_packets + 1)
particle-size: 2
statement: if 0 {
    this'.tot_packets = 4;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 2));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 4) {
        observe((this'.Q_in.data[0][1] == 4));
    } else {
        observe(0);
    }
} else {
    this'.tot_packets = 3;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 2));
    } else {
        observe(0);
    }
}
statement: this'.tot_packets = 3
particle-size: 2
statement: if (this'.num_packets == 1) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 2));
} else {
    observe(0);
}
statement: if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 2));
} else {
    observe(0);
}
statement: if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 2));
} else {
    observe(0);
}
statement: observe(0)
particle-size: 0
particle-size: 0
particle-size: 0
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
repetition: 23
statement: __d.__step()
particle-size: 8
particle-size: 8
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
repetition: 24
statement: __d.__step()
particle-size: 8
particle-size: 8
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
repetition: 25
statement: __d.__step()
particle-size: 8
particle-size: 8
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
repetition: 26
statement: __d.__step()
particle-size: 8
particle-size: 8
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
repetition: 27
statement: __d.__step()
particle-size: 8
particle-size: 8
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
repetition: 28
statement: __d.__step()
particle-size: 8
particle-size: 8
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
repetition: 29
statement: __d.__step()
particle-size: 8
particle-size: 8
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
repetition: 30
statement: __d.__step()
particle-size: 8
particle-size: 8
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: observe((if 1 == 1 {
    __d.__Controller.num_packets;
} else {
    assert(0);
}) == (if 1 == 1 {
    __d.__Controller.tot_packets;
} else {
    assert(0);
}))
statement: assert(!(__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__Controller.Q_in.size() || __d.__Controller.Q_out.size() || __d.__S1.Q_in.size() || __d.__S1.Q_out.size() || __d.__S2.Q_in.size() || __d.__S2.Q_out.size() || __d.__H1.Q_in.size() || __d.__H1.Q_out.size()))
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: q₁ := Expectation(((if 2 == 2 {
    __d.__S1.bad_hash;
} else {
    assert(0);
})) != 0)
particle-size: 2
statement: return (q₁)
particle-size: 2
E[q1_] = 1504/14383

real	1m20.787s
user	1m20.344s
sys	0m0.392s
