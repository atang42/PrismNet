statement: __d := __D'()
particle-size: 1
particle-size: 1
statement: this.__S0 = __first_ty'() , this.__S1 = __node_ty'() , this.__S2 = __node_ty'() , this.__S3 = __node_ty'()
statement: this.__S0 = __first_ty'() , this.__S1 = __node_ty'() , this.__S2 = __node_ty'()
statement: this.__S0 = __first_ty'() , this.__S1 = __node_ty'()
statement: this.__S0 = __first_ty'()
particle-size: 1
particle-size: 1
statement: this.Q_in = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.Q_out = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.infected = 0
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.__S1 = __node_ty'()
particle-size: 1
particle-size: 1
statement: this.Q_in = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.Q_out = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.infected = 0
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.__S2 = __node_ty'()
particle-size: 1
particle-size: 1
statement: this.Q_in = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.Q_out = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.infected = 0
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.__S3 = __node_ty'()
particle-size: 1
particle-size: 1
statement: this.Q_in = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.Q_out = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.infected = 0
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.phase = 0
particle-size: 1
statement: this.cur_node = 0
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: __d.__S0.Q_in.pushBack((Packet'(),0))
particle-size: 1
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = this'.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: __d.__S0.__run()
particle-size: 1
particle-size: 1
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 1
statement: this'.Q_in.pushFront((Packet'(),0))
particle-size: 1
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = [x] ~ this'.data
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 1
particle-size: 1
statement: r := this'.front()
particle-size: 1
particle-size: 1
statement: return this'.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.popFront()
particle-size: 1
particle-size: 1
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: repeat 15 {
    __d.__step();
}
repetition: 1
statement: __d.__step()
particle-size: 3
particle-size: 3
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: (action,node) := this'.scheduler()
particle-size: 3
particle-size: 3
statement: for p in [0..2){
    if this'.phase == 0 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_in;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_in;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_in;
            } else {
                this'.__S3.Q_in;
            }).size() > 0 {
                return (0,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 1;
        this'.cur_node = 0;
    }
    if this'.phase == 1 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_out;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_out;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_out;
            } else {
                this'.__S3.Q_out;
            }).size() > 0 {
                return (1,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 0;
        this'.cur_node = 0;
    }
}
loop-index: 0
particle-size: 3
statement: if this'.phase == 0 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_in;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_in;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_in;
        } else {
            this'.__S3.Q_in;
        }).size() > 0 {
            return (0,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 1;
    this'.cur_node = 0;
}
statement: for i in [0..4){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_in;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_in;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        return (0,this'.cur_node);
    }
    this'.cur_node = (this'.cur_node + 1) % 4;
}
loop-index: 0
particle-size: 3
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: return (0,this'.cur_node)
particle-size: 3
loop-index: 1
particle-size: 0
loop-index: 2
particle-size: 0
loop-index: 3
particle-size: 0
loop-index: 1
particle-size: 0
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_in.size() {
    this'.__S0.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.__S0.__run()
particle-size: 3
particle-size: 3
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 3
particle-size: 3
statement: this'.data = this'.data[1..this'.size()]
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 1 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 2 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 3 && this'.__S3.Q_in.size() {
    this'.__S3.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
repetition: 2
statement: __d.__step()
particle-size: 3
particle-size: 3
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: (action,node) := this'.scheduler()
particle-size: 3
particle-size: 3
statement: for p in [0..2){
    if this'.phase == 0 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_in;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_in;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_in;
            } else {
                this'.__S3.Q_in;
            }).size() > 0 {
                return (0,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 1;
        this'.cur_node = 0;
    }
    if this'.phase == 1 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_out;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_out;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_out;
            } else {
                this'.__S3.Q_out;
            }).size() > 0 {
                return (1,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 0;
        this'.cur_node = 0;
    }
}
loop-index: 0
particle-size: 3
statement: if this'.phase == 0 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_in;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_in;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_in;
        } else {
            this'.__S3.Q_in;
        }).size() > 0 {
            return (0,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 1;
    this'.cur_node = 0;
}
statement: for i in [0..4){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_in;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_in;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        return (0,this'.cur_node);
    }
    this'.cur_node = (this'.cur_node + 1) % 4;
}
loop-index: 0
particle-size: 3
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 3
loop-index: 1
particle-size: 3
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 3
loop-index: 2
particle-size: 3
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 3
loop-index: 3
particle-size: 3
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 3
statement: this'.phase = 1
particle-size: 3
statement: this'.cur_node = 0
particle-size: 3
statement: if this'.phase == 1 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_out;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_out;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_out;
        } else {
            this'.__S3.Q_out;
        }).size() > 0 {
            return (1,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 0;
    this'.cur_node = 0;
}
statement: for i in [0..4){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_out;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_out;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_out;
    } else {
        this'.__S3.Q_out;
    }).size() > 0 {
        return (1,this'.cur_node);
    }
    this'.cur_node = (this'.cur_node + 1) % 4;
}
loop-index: 0
particle-size: 3
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_out;
} else if this'.cur_node == 1 {
    this'.__S1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    return (1,this'.cur_node);
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: return (1,this'.cur_node)
particle-size: 3
loop-index: 1
particle-size: 0
loop-index: 2
particle-size: 0
loop-index: 3
particle-size: 0
loop-index: 1
particle-size: 0
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_out.size() {
    (pkt,port) := this'.__S0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S3.Q_in.pushBack((pkt,1));
    }
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: (pkt,port) := this'.__S0.Q_out.takeFront()
particle-size: 3
particle-size: 3
statement: r := this'.front()
particle-size: 3
particle-size: 3
statement: return this'.data[0]
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.popFront()
particle-size: 3
particle-size: 3
statement: this'.data = this'.data[1..this'.size()]
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return r
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,3));
}
statement: this'.__S1.Q_in.pushBack((pkt,3))
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = this'.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if port == 2 {
    this'.__S2.Q_in.pushBack((pkt,2));
}
statement: this'.__S2.Q_in.pushBack((pkt,2))
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = this'.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if port == 3 {
    this'.__S3.Q_in.pushBack((pkt,1));
}
statement: this'.__S3.Q_in.pushBack((pkt,1))
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = this'.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 1 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S3.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 2 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S3.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 3 && this'.__S3.Q_out.size() {
    (pkt,port) := this'.__S3.Q_out.takeFront();
    if port == 1 {
        this'.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
repetition: 3
statement: __d.__step()
particle-size: 3
particle-size: 3
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: (action,node) := this'.scheduler()
particle-size: 3
particle-size: 3
statement: for p in [0..2){
    if this'.phase == 0 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_in;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_in;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_in;
            } else {
                this'.__S3.Q_in;
            }).size() > 0 {
                return (0,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 1;
        this'.cur_node = 0;
    }
    if this'.phase == 1 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_out;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_out;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_out;
            } else {
                this'.__S3.Q_out;
            }).size() > 0 {
                return (1,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 0;
        this'.cur_node = 0;
    }
}
loop-index: 0
particle-size: 3
statement: if this'.phase == 0 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_in;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_in;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_in;
        } else {
            this'.__S3.Q_in;
        }).size() > 0 {
            return (0,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 1;
    this'.cur_node = 0;
}
statement: if this'.phase == 1 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_out;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_out;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_out;
        } else {
            this'.__S3.Q_out;
        }).size() > 0 {
            return (1,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 0;
    this'.cur_node = 0;
}
statement: for i in [0..4){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_out;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_out;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_out;
    } else {
        this'.__S3.Q_out;
    }).size() > 0 {
        return (1,this'.cur_node);
    }
    this'.cur_node = (this'.cur_node + 1) % 4;
}
loop-index: 0
particle-size: 3
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_out;
} else if this'.cur_node == 1 {
    this'.__S1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    return (1,this'.cur_node);
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 3
loop-index: 1
particle-size: 3
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_out;
} else if this'.cur_node == 1 {
    this'.__S1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    return (1,this'.cur_node);
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 3
loop-index: 2
particle-size: 3
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_out;
} else if this'.cur_node == 1 {
    this'.__S1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    return (1,this'.cur_node);
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 3
loop-index: 3
particle-size: 3
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_out;
} else if this'.cur_node == 1 {
    this'.__S1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    return (1,this'.cur_node);
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 3
statement: this'.phase = 0
particle-size: 3
statement: this'.cur_node = 0
particle-size: 3
loop-index: 1
particle-size: 3
statement: if this'.phase == 0 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_in;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_in;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_in;
        } else {
            this'.__S3.Q_in;
        }).size() > 0 {
            return (0,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 1;
    this'.cur_node = 0;
}
statement: for i in [0..4){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_in;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_in;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        return (0,this'.cur_node);
    }
    this'.cur_node = (this'.cur_node + 1) % 4;
}
loop-index: 0
particle-size: 3
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 3
loop-index: 1
particle-size: 3
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: return (0,this'.cur_node)
particle-size: 1
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 2
loop-index: 2
particle-size: 2
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
statement: return (0,this'.cur_node)
particle-size: 1
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 1
loop-index: 3
particle-size: 1
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
statement: return (0,this'.cur_node)
particle-size: 1
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_in.size() {
    this'.__S0.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 1 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.__S1.__run()
particle-size: 1
particle-size: 1
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 1
statement: this'.Q_in.dupFront()
particle-size: 1
particle-size: 1
statement: this'.pushFront(this'.front())
particle-size: 1
particle-size: 1
statement: return this'.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = [x] ~ this'.data
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 1
particle-size: 1
statement: r := this'.front()
particle-size: 1
particle-size: 1
statement: return this'.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.popFront()
particle-size: 1
particle-size: 1
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 3
particle-size: 3
statement: r := this'.front()
particle-size: 3
particle-size: 3
statement: return this'.data[0]
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.popFront()
particle-size: 3
particle-size: 3
statement: this'.data = this'.data[1..this'.size()]
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return r
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this'.data = this'.data ~ [x]
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if node == 2 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 11
particle-size: 11
statement: return this'.data.length
particle-size: 11
particle-size: 11
particle-size: 11
particle-size: 11
statement: this'.__S2.__run()
particle-size: 1
particle-size: 1
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 1
statement: this'.Q_in.dupFront()
particle-size: 1
particle-size: 1
statement: this'.pushFront(this'.front())
particle-size: 1
particle-size: 1
statement: return this'.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = [x] ~ this'.data
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 1
particle-size: 1
statement: r := this'.front()
particle-size: 1
particle-size: 1
statement: return this'.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.popFront()
particle-size: 1
particle-size: 1
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 3
particle-size: 3
statement: r := this'.front()
particle-size: 3
particle-size: 3
statement: return this'.data[0]
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.popFront()
particle-size: 3
particle-size: 3
statement: this'.data = this'.data[1..this'.size()]
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return r
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this'.data = this'.data ~ [x]
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if node == 3 && this'.__S3.Q_in.size() {
    this'.__S3.__run();
}
particle-size: 19
particle-size: 19
statement: return this'.data.length
particle-size: 19
particle-size: 19
particle-size: 19
particle-size: 19
statement: this'.__S3.__run()
particle-size: 1
particle-size: 1
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 1
statement: this'.Q_in.dupFront()
particle-size: 1
particle-size: 1
statement: this'.pushFront(this'.front())
particle-size: 1
particle-size: 1
statement: return this'.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = [x] ~ this'.data
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 1
particle-size: 1
statement: r := this'.front()
particle-size: 1
particle-size: 1
statement: return this'.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.popFront()
particle-size: 1
particle-size: 1
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 3
particle-size: 3
statement: r := this'.front()
particle-size: 3
particle-size: 3
statement: return this'.data[0]
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.popFront()
particle-size: 3
particle-size: 3
statement: this'.data = this'.data[1..this'.size()]
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return r
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this'.data = this'.data ~ [x]
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
repetition: 4
statement: __d.__step()
particle-size: 27
particle-size: 27
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: (action,node) := this'.scheduler()
particle-size: 27
particle-size: 27
statement: for p in [0..2){
    if this'.phase == 0 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_in;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_in;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_in;
            } else {
                this'.__S3.Q_in;
            }).size() > 0 {
                return (0,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 1;
        this'.cur_node = 0;
    }
    if this'.phase == 1 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_out;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_out;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_out;
            } else {
                this'.__S3.Q_out;
            }).size() > 0 {
                return (1,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 0;
        this'.cur_node = 0;
    }
}
loop-index: 0
particle-size: 27
statement: if this'.phase == 0 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_in;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_in;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_in;
        } else {
            this'.__S3.Q_in;
        }).size() > 0 {
            return (0,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 1;
    this'.cur_node = 0;
}
statement: for i in [0..4){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_in;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_in;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        return (0,this'.cur_node);
    }
    this'.cur_node = (this'.cur_node + 1) % 4;
}
loop-index: 0
particle-size: 27
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 27
loop-index: 1
particle-size: 27
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 27
loop-index: 2
particle-size: 27
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 27
loop-index: 3
particle-size: 27
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 27
statement: this'.phase = 1
particle-size: 27
statement: this'.cur_node = 0
particle-size: 27
statement: if this'.phase == 1 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_out;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_out;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_out;
        } else {
            this'.__S3.Q_out;
        }).size() > 0 {
            return (1,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 0;
    this'.cur_node = 0;
}
statement: for i in [0..4){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_out;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_out;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_out;
    } else {
        this'.__S3.Q_out;
    }).size() > 0 {
        return (1,this'.cur_node);
    }
    this'.cur_node = (this'.cur_node + 1) % 4;
}
loop-index: 0
particle-size: 27
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_out;
} else if this'.cur_node == 1 {
    this'.__S1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    return (1,this'.cur_node);
}
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 27
loop-index: 1
particle-size: 27
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_out;
} else if this'.cur_node == 1 {
    this'.__S1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    return (1,this'.cur_node);
}
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
statement: return (1,this'.cur_node)
particle-size: 9
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 18
loop-index: 2
particle-size: 18
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_out;
} else if this'.cur_node == 1 {
    this'.__S1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    return (1,this'.cur_node);
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
statement: return (1,this'.cur_node)
particle-size: 9
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 9
loop-index: 3
particle-size: 9
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_out;
} else if this'.cur_node == 1 {
    this'.__S1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    return (1,this'.cur_node);
}
particle-size: 9
particle-size: 9
statement: return this'.data.length
particle-size: 9
particle-size: 9
particle-size: 9
statement: return (1,this'.cur_node)
particle-size: 9
loop-index: 1
particle-size: 0
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_out.size() {
    (pkt,port) := this'.__S0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S3.Q_in.pushBack((pkt,1));
    }
}
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: if node == 1 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S3.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 9
particle-size: 9
statement: r := this'.front()
particle-size: 9
particle-size: 9
statement: return this'.data[0]
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this'.popFront()
particle-size: 9
particle-size: 9
statement: this'.data = this'.data[1..this'.size()]
particle-size: 9
particle-size: 9
statement: return this'.data.length
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return r
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if port == 1 {
    this'.__S2.Q_in.pushBack((pkt,3));
}
statement: this'.__S2.Q_in.pushBack((pkt,3))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 2 {
    this'.__S3.Q_in.pushBack((pkt,2));
}
statement: this'.__S3.Q_in.pushBack((pkt,2))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 3 {
    this'.__S0.Q_in.pushBack((pkt,1));
}
statement: this'.__S0.Q_in.pushBack((pkt,1))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 2 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S3.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 9
particle-size: 9
statement: r := this'.front()
particle-size: 9
particle-size: 9
statement: return this'.data[0]
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this'.popFront()
particle-size: 9
particle-size: 9
statement: this'.data = this'.data[1..this'.size()]
particle-size: 9
particle-size: 9
statement: return this'.data.length
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return r
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if port == 1 {
    this'.__S3.Q_in.pushBack((pkt,3));
}
statement: this'.__S3.Q_in.pushBack((pkt,3))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 2 {
    this'.__S0.Q_in.pushBack((pkt,2));
}
statement: this'.__S0.Q_in.pushBack((pkt,2))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 3 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 3 && this'.__S3.Q_out.size() {
    (pkt,port) := this'.__S3.Q_out.takeFront();
    if port == 1 {
        this'.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: (pkt,port) := this'.__S3.Q_out.takeFront()
particle-size: 9
particle-size: 9
statement: r := this'.front()
particle-size: 9
particle-size: 9
statement: return this'.data[0]
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this'.popFront()
particle-size: 9
particle-size: 9
statement: this'.data = this'.data[1..this'.size()]
particle-size: 9
particle-size: 9
statement: return this'.data.length
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return r
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if port == 1 {
    this'.__S0.Q_in.pushBack((pkt,3));
}
statement: this'.__S0.Q_in.pushBack((pkt,3))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 2 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: this'.__S1.Q_in.pushBack((pkt,2))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
repetition: 5
statement: __d.__step()
particle-size: 27
particle-size: 27
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: (action,node) := this'.scheduler()
particle-size: 27
particle-size: 27
statement: for p in [0..2){
    if this'.phase == 0 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_in;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_in;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_in;
            } else {
                this'.__S3.Q_in;
            }).size() > 0 {
                return (0,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 1;
        this'.cur_node = 0;
    }
    if this'.phase == 1 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_out;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_out;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_out;
            } else {
                this'.__S3.Q_out;
            }).size() > 0 {
                return (1,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 0;
        this'.cur_node = 0;
    }
}
loop-index: 0
particle-size: 27
statement: if this'.phase == 0 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_in;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_in;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_in;
        } else {
            this'.__S3.Q_in;
        }).size() > 0 {
            return (0,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 1;
    this'.cur_node = 0;
}
statement: if this'.phase == 1 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_out;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_out;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_out;
        } else {
            this'.__S3.Q_out;
        }).size() > 0 {
            return (1,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 0;
    this'.cur_node = 0;
}
statement: for i in [0..4){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_out;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_out;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_out;
    } else {
        this'.__S3.Q_out;
    }).size() > 0 {
        return (1,this'.cur_node);
    }
    this'.cur_node = (this'.cur_node + 1) % 4;
}
loop-index: 0
particle-size: 27
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_out;
} else if this'.cur_node == 1 {
    this'.__S1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    return (1,this'.cur_node);
}
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
statement: return (1,this'.cur_node)
particle-size: 27
loop-index: 1
particle-size: 0
loop-index: 2
particle-size: 0
loop-index: 3
particle-size: 0
loop-index: 1
particle-size: 0
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_out.size() {
    (pkt,port) := this'.__S0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S3.Q_in.pushBack((pkt,1));
    }
}
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: if node == 1 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S3.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 9
particle-size: 9
statement: r := this'.front()
particle-size: 9
particle-size: 9
statement: return this'.data[0]
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this'.popFront()
particle-size: 9
particle-size: 9
statement: this'.data = this'.data[1..this'.size()]
particle-size: 9
particle-size: 9
statement: return this'.data.length
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return r
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if port == 1 {
    this'.__S2.Q_in.pushBack((pkt,3));
}
statement: this'.__S2.Q_in.pushBack((pkt,3))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 2 {
    this'.__S3.Q_in.pushBack((pkt,2));
}
statement: this'.__S3.Q_in.pushBack((pkt,2))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 3 {
    this'.__S0.Q_in.pushBack((pkt,1));
}
statement: this'.__S0.Q_in.pushBack((pkt,1))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 2 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S3.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 9
particle-size: 9
statement: r := this'.front()
particle-size: 9
particle-size: 9
statement: return this'.data[0]
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this'.popFront()
particle-size: 9
particle-size: 9
statement: this'.data = this'.data[1..this'.size()]
particle-size: 9
particle-size: 9
statement: return this'.data.length
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return r
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if port == 1 {
    this'.__S3.Q_in.pushBack((pkt,3));
}
statement: this'.__S3.Q_in.pushBack((pkt,3))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 2 {
    this'.__S0.Q_in.pushBack((pkt,2));
}
statement: this'.__S0.Q_in.pushBack((pkt,2))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 3 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 3 && this'.__S3.Q_out.size() {
    (pkt,port) := this'.__S3.Q_out.takeFront();
    if port == 1 {
        this'.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: (pkt,port) := this'.__S3.Q_out.takeFront()
particle-size: 9
particle-size: 9
statement: r := this'.front()
particle-size: 9
particle-size: 9
statement: return this'.data[0]
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this'.popFront()
particle-size: 9
particle-size: 9
statement: this'.data = this'.data[1..this'.size()]
particle-size: 9
particle-size: 9
statement: return this'.data.length
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return r
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if port == 1 {
    this'.__S0.Q_in.pushBack((pkt,3));
}
statement: this'.__S0.Q_in.pushBack((pkt,3))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 2 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: this'.__S1.Q_in.pushBack((pkt,2))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 18
repetition: 6
statement: __d.__step()
particle-size: 18
particle-size: 18
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: (action,node) := this'.scheduler()
particle-size: 18
particle-size: 18
statement: for p in [0..2){
    if this'.phase == 0 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_in;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_in;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_in;
            } else {
                this'.__S3.Q_in;
            }).size() > 0 {
                return (0,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 1;
        this'.cur_node = 0;
    }
    if this'.phase == 1 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_out;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_out;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_out;
            } else {
                this'.__S3.Q_out;
            }).size() > 0 {
                return (1,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 0;
        this'.cur_node = 0;
    }
}
loop-index: 0
particle-size: 18
statement: if this'.phase == 0 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_in;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_in;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_in;
        } else {
            this'.__S3.Q_in;
        }).size() > 0 {
            return (0,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 1;
    this'.cur_node = 0;
}
statement: if this'.phase == 1 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_out;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_out;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_out;
        } else {
            this'.__S3.Q_out;
        }).size() > 0 {
            return (1,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 0;
    this'.cur_node = 0;
}
statement: for i in [0..4){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_out;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_out;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_out;
    } else {
        this'.__S3.Q_out;
    }).size() > 0 {
        return (1,this'.cur_node);
    }
    this'.cur_node = (this'.cur_node + 1) % 4;
}
loop-index: 0
particle-size: 18
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_out;
} else if this'.cur_node == 1 {
    this'.__S1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    return (1,this'.cur_node);
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 18
loop-index: 1
particle-size: 18
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_out;
} else if this'.cur_node == 1 {
    this'.__S1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    return (1,this'.cur_node);
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 18
loop-index: 2
particle-size: 18
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_out;
} else if this'.cur_node == 1 {
    this'.__S1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    return (1,this'.cur_node);
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 18
loop-index: 3
particle-size: 18
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_out;
} else if this'.cur_node == 1 {
    this'.__S1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    return (1,this'.cur_node);
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 18
statement: this'.phase = 0
particle-size: 18
statement: this'.cur_node = 0
particle-size: 18
loop-index: 1
particle-size: 18
statement: if this'.phase == 0 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_in;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_in;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_in;
        } else {
            this'.__S3.Q_in;
        }).size() > 0 {
            return (0,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 1;
    this'.cur_node = 0;
}
statement: for i in [0..4){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_in;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_in;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        return (0,this'.cur_node);
    }
    this'.cur_node = (this'.cur_node + 1) % 4;
}
loop-index: 0
particle-size: 18
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
statement: return (0,this'.cur_node)
particle-size: 9
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 9
loop-index: 1
particle-size: 9
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 9
particle-size: 9
statement: return this'.data.length
particle-size: 9
particle-size: 9
particle-size: 9
statement: return (0,this'.cur_node)
particle-size: 4
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 5
loop-index: 2
particle-size: 5
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 5
particle-size: 5
statement: return this'.data.length
particle-size: 5
particle-size: 5
particle-size: 5
statement: return (0,this'.cur_node)
particle-size: 3
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 2
loop-index: 3
particle-size: 2
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
statement: return (0,this'.cur_node)
particle-size: 2
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_in.size() {
    this'.__S0.__run();
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.__S0.__run()
particle-size: 9
particle-size: 9
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 9
particle-size: 9
statement: this'.data = this'.data[1..this'.size()]
particle-size: 9
particle-size: 9
statement: return this'.data.length
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if node == 1 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.__S1.__run()
particle-size: 4
particle-size: 4
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 4
statement: this'.Q_in.dupFront()
particle-size: 4
particle-size: 4
statement: this'.pushFront(this'.front())
particle-size: 4
particle-size: 4
statement: return this'.data[0]
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.data = [x] ~ this'.data
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 4
particle-size: 4
statement: r := this'.front()
particle-size: 4
particle-size: 4
statement: return this'.data[0]
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.popFront()
particle-size: 4
particle-size: 4
statement: this'.data = this'.data[1..this'.size()]
particle-size: 4
particle-size: 4
statement: return this'.data.length
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return r
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.data = this'.data ~ [x]
particle-size: 12
statement: return ()
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 12
particle-size: 12
statement: r := this'.front()
particle-size: 12
particle-size: 12
statement: return this'.data[0]
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.popFront()
particle-size: 12
particle-size: 12
statement: this'.data = this'.data[1..this'.size()]
particle-size: 12
particle-size: 12
statement: return this'.data.length
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: return ()
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: return r
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: this'.data = this'.data ~ [x]
particle-size: 36
statement: return ()
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: return ()
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: if node == 2 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 50
particle-size: 50
statement: return this'.data.length
particle-size: 50
particle-size: 50
particle-size: 50
particle-size: 50
statement: this'.__S2.__run()
particle-size: 3
particle-size: 3
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 3
statement: this'.Q_in.dupFront()
particle-size: 3
particle-size: 3
statement: this'.pushFront(this'.front())
particle-size: 3
particle-size: 3
statement: return this'.data[0]
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = [x] ~ this'.data
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 3
particle-size: 3
statement: r := this'.front()
particle-size: 3
particle-size: 3
statement: return this'.data[0]
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.popFront()
particle-size: 3
particle-size: 3
statement: this'.data = this'.data[1..this'.size()]
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return r
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this'.data = this'.data ~ [x]
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 9
particle-size: 9
statement: r := this'.front()
particle-size: 9
particle-size: 9
statement: return this'.data[0]
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this'.popFront()
particle-size: 9
particle-size: 9
statement: this'.data = this'.data[1..this'.size()]
particle-size: 9
particle-size: 9
statement: return this'.data.length
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return r
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: this'.data = this'.data ~ [x]
particle-size: 27
statement: return ()
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: return ()
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: if node == 3 && this'.__S3.Q_in.size() {
    this'.__S3.__run();
}
particle-size: 74
particle-size: 74
statement: return this'.data.length
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
statement: this'.__S3.__run()
particle-size: 2
particle-size: 2
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 2
statement: this'.Q_in.dupFront()
particle-size: 2
particle-size: 2
statement: this'.pushFront(this'.front())
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = [x] ~ this'.data
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 2
particle-size: 2
statement: r := this'.front()
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.popFront()
particle-size: 2
particle-size: 2
statement: this'.data = this'.data[1..this'.size()]
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return r
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.data = this'.data ~ [x]
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 6
particle-size: 6
statement: r := this'.front()
particle-size: 6
particle-size: 6
statement: return this'.data[0]
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.popFront()
particle-size: 6
particle-size: 6
statement: this'.data = this'.data[1..this'.size()]
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return r
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.data = this'.data ~ [x]
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return ()
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
repetition: 7
statement: __d.__step()
particle-size: 90
particle-size: 90
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: (action,node) := this'.scheduler()
particle-size: 90
particle-size: 90
statement: for p in [0..2){
    if this'.phase == 0 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_in;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_in;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_in;
            } else {
                this'.__S3.Q_in;
            }).size() > 0 {
                return (0,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 1;
        this'.cur_node = 0;
    }
    if this'.phase == 1 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_out;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_out;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_out;
            } else {
                this'.__S3.Q_out;
            }).size() > 0 {
                return (1,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 0;
        this'.cur_node = 0;
    }
}
loop-index: 0
particle-size: 90
statement: if this'.phase == 0 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_in;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_in;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_in;
        } else {
            this'.__S3.Q_in;
        }).size() > 0 {
            return (0,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 1;
    this'.cur_node = 0;
}
statement: for i in [0..4){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_in;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_in;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        return (0,this'.cur_node);
    }
    this'.cur_node = (this'.cur_node + 1) % 4;
}
loop-index: 0
particle-size: 90
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
statement: return (0,this'.cur_node)
particle-size: 57
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 33
loop-index: 1
particle-size: 33
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 33
particle-size: 33
statement: return this'.data.length
particle-size: 33
particle-size: 33
particle-size: 33
statement: return (0,this'.cur_node)
particle-size: 20
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 13
loop-index: 2
particle-size: 13
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 13
particle-size: 13
statement: return this'.data.length
particle-size: 13
particle-size: 13
particle-size: 13
statement: return (0,this'.cur_node)
particle-size: 11
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 2
loop-index: 3
particle-size: 2
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
statement: return (0,this'.cur_node)
particle-size: 2
loop-index: 1
particle-size: 0
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_in.size() {
    this'.__S0.__run();
}
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: this'.__S0.__run()
particle-size: 3
particle-size: 3
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 3
particle-size: 3
statement: this'.data = this'.data[1..this'.size()]
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 1 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: this'.__S1.__run()
particle-size: 20
particle-size: 20
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 2
statement: this'.Q_in.dupFront()
particle-size: 2
particle-size: 2
statement: this'.pushFront(this'.front())
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = [x] ~ this'.data
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 2
particle-size: 2
statement: r := this'.front()
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.popFront()
particle-size: 2
particle-size: 2
statement: this'.data = this'.data[1..this'.size()]
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return r
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.data = this'.data ~ [x]
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 6
particle-size: 6
statement: r := this'.front()
particle-size: 6
particle-size: 6
statement: return this'.data[0]
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.popFront()
particle-size: 6
particle-size: 6
statement: this'.data = this'.data[1..this'.size()]
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return r
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.data = this'.data ~ [x]
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.Q_in.popFront()
particle-size: 18
particle-size: 18
statement: this'.data = this'.data[1..this'.size()]
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return ()
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: if node == 2 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 106
particle-size: 106
statement: return this'.data.length
particle-size: 106
particle-size: 106
particle-size: 106
particle-size: 106
statement: this'.__S2.__run()
particle-size: 29
particle-size: 29
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 11
statement: this'.Q_in.dupFront()
particle-size: 11
particle-size: 11
statement: this'.pushFront(this'.front())
particle-size: 11
particle-size: 11
statement: return this'.data[0]
particle-size: 11
particle-size: 11
particle-size: 11
particle-size: 11
particle-size: 11
particle-size: 11
particle-size: 11
statement: this'.data = [x] ~ this'.data
particle-size: 11
statement: return ()
particle-size: 11
particle-size: 11
particle-size: 11
particle-size: 11
statement: return ()
particle-size: 11
particle-size: 11
particle-size: 11
particle-size: 11
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 11
particle-size: 11
statement: r := this'.front()
particle-size: 11
particle-size: 11
statement: return this'.data[0]
particle-size: 11
particle-size: 11
particle-size: 11
particle-size: 11
particle-size: 11
statement: this'.popFront()
particle-size: 11
particle-size: 11
statement: this'.data = this'.data[1..this'.size()]
particle-size: 11
particle-size: 11
statement: return this'.data.length
particle-size: 11
particle-size: 11
particle-size: 11
particle-size: 11
particle-size: 11
statement: return ()
particle-size: 11
particle-size: 11
particle-size: 11
particle-size: 11
statement: return r
particle-size: 11
particle-size: 11
particle-size: 11
particle-size: 11
particle-size: 11
particle-size: 11
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
statement: this'.data = this'.data ~ [x]
particle-size: 33
statement: return ()
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 33
particle-size: 33
statement: r := this'.front()
particle-size: 33
particle-size: 33
statement: return this'.data[0]
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
statement: this'.popFront()
particle-size: 33
particle-size: 33
statement: this'.data = this'.data[1..this'.size()]
particle-size: 33
particle-size: 33
statement: return this'.data.length
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
statement: return ()
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
statement: return r
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 99
particle-size: 99
particle-size: 99
particle-size: 99
particle-size: 99
statement: this'.data = this'.data ~ [x]
particle-size: 99
statement: return ()
particle-size: 99
particle-size: 99
particle-size: 99
particle-size: 99
statement: this'.Q_in.popFront()
particle-size: 18
particle-size: 18
statement: this'.data = this'.data[1..this'.size()]
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return ()
particle-size: 117
particle-size: 117
particle-size: 117
particle-size: 117
statement: if node == 3 && this'.__S3.Q_in.size() {
    this'.__S3.__run();
}
particle-size: 194
particle-size: 194
statement: return this'.data.length
particle-size: 194
particle-size: 194
particle-size: 194
particle-size: 194
statement: this'.__S3.__run()
particle-size: 38
particle-size: 38
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 20
statement: this'.Q_in.dupFront()
particle-size: 20
particle-size: 20
statement: this'.pushFront(this'.front())
particle-size: 20
particle-size: 20
statement: return this'.data[0]
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: this'.data = [x] ~ this'.data
particle-size: 20
statement: return ()
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: return ()
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 20
particle-size: 20
statement: r := this'.front()
particle-size: 20
particle-size: 20
statement: return this'.data[0]
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: this'.popFront()
particle-size: 20
particle-size: 20
statement: this'.data = this'.data[1..this'.size()]
particle-size: 20
particle-size: 20
statement: return this'.data.length
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: return ()
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: return r
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 60
particle-size: 60
particle-size: 60
particle-size: 60
particle-size: 60
statement: this'.data = this'.data ~ [x]
particle-size: 60
statement: return ()
particle-size: 60
particle-size: 60
particle-size: 60
particle-size: 60
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 60
particle-size: 60
statement: r := this'.front()
particle-size: 60
particle-size: 60
statement: return this'.data[0]
particle-size: 60
particle-size: 60
particle-size: 60
particle-size: 60
particle-size: 60
statement: this'.popFront()
particle-size: 60
particle-size: 60
statement: this'.data = this'.data[1..this'.size()]
particle-size: 60
particle-size: 60
statement: return this'.data.length
particle-size: 60
particle-size: 60
particle-size: 60
particle-size: 60
particle-size: 60
statement: return ()
particle-size: 60
particle-size: 60
particle-size: 60
particle-size: 60
statement: return r
particle-size: 60
particle-size: 60
particle-size: 60
particle-size: 60
particle-size: 60
particle-size: 60
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 180
particle-size: 180
particle-size: 180
particle-size: 180
particle-size: 180
statement: this'.data = this'.data ~ [x]
particle-size: 180
statement: return ()
particle-size: 180
particle-size: 180
particle-size: 180
particle-size: 180
statement: this'.Q_in.popFront()
particle-size: 18
particle-size: 18
statement: this'.data = this'.data[1..this'.size()]
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return ()
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
statement: return ()
particle-size: 354
particle-size: 354
particle-size: 354
particle-size: 300
repetition: 8
statement: __d.__step()
particle-size: 300
particle-size: 300
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 300
particle-size: 300
statement: return this'.data.length
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: return this'.data.length
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: return this'.data.length
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: return this'.data.length
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: return this'.data.length
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: return this'.data.length
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: return this'.data.length
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: return this'.data.length
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: (action,node) := this'.scheduler()
particle-size: 297
particle-size: 297
statement: for p in [0..2){
    if this'.phase == 0 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_in;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_in;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_in;
            } else {
                this'.__S3.Q_in;
            }).size() > 0 {
                return (0,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 1;
        this'.cur_node = 0;
    }
    if this'.phase == 1 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_out;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_out;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_out;
            } else {
                this'.__S3.Q_out;
            }).size() > 0 {
                return (1,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 0;
        this'.cur_node = 0;
    }
}
loop-index: 0
particle-size: 297
statement: if this'.phase == 0 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_in;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_in;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_in;
        } else {
            this'.__S3.Q_in;
        }).size() > 0 {
            return (0,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 1;
    this'.cur_node = 0;
}
statement: for i in [0..4){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_in;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_in;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        return (0,this'.cur_node);
    }
    this'.cur_node = (this'.cur_node + 1) % 4;
}
loop-index: 0
particle-size: 297
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 297
particle-size: 297
statement: return this'.data.length
particle-size: 297
particle-size: 297
particle-size: 297
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 297
loop-index: 1
particle-size: 297
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 297
particle-size: 297
statement: return this'.data.length
particle-size: 297
particle-size: 297
particle-size: 297
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 297
loop-index: 2
particle-size: 297
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 297
particle-size: 297
statement: return this'.data.length
particle-size: 297
particle-size: 297
particle-size: 297
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 297
loop-index: 3
particle-size: 297
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 297
particle-size: 297
statement: return this'.data.length
particle-size: 297
particle-size: 297
particle-size: 297
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 297
statement: this'.phase = 1
particle-size: 297
statement: this'.cur_node = 0
particle-size: 297
statement: if this'.phase == 1 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_out;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_out;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_out;
        } else {
            this'.__S3.Q_out;
        }).size() > 0 {
            return (1,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 0;
    this'.cur_node = 0;
}
statement: for i in [0..4){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_out;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_out;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_out;
    } else {
        this'.__S3.Q_out;
    }).size() > 0 {
        return (1,this'.cur_node);
    }
    this'.cur_node = (this'.cur_node + 1) % 4;
}
loop-index: 0
particle-size: 297
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_out;
} else if this'.cur_node == 1 {
    this'.__S1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    return (1,this'.cur_node);
}
particle-size: 297
particle-size: 297
statement: return this'.data.length
particle-size: 297
particle-size: 297
particle-size: 297
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 297
loop-index: 1
particle-size: 297
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_out;
} else if this'.cur_node == 1 {
    this'.__S1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    return (1,this'.cur_node);
}
particle-size: 297
particle-size: 297
statement: return this'.data.length
particle-size: 297
particle-size: 297
particle-size: 297
statement: return (1,this'.cur_node)
particle-size: 180
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 117
loop-index: 2
particle-size: 117
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_out;
} else if this'.cur_node == 1 {
    this'.__S1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    return (1,this'.cur_node);
}
particle-size: 117
particle-size: 117
statement: return this'.data.length
particle-size: 117
particle-size: 117
particle-size: 117
statement: return (1,this'.cur_node)
particle-size: 99
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 18
loop-index: 3
particle-size: 18
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_out;
} else if this'.cur_node == 1 {
    this'.__S1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    return (1,this'.cur_node);
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
statement: return (1,this'.cur_node)
particle-size: 18
loop-index: 1
particle-size: 0
particle-size: 297
particle-size: 297
particle-size: 297
particle-size: 297
particle-size: 297
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_out.size() {
    (pkt,port) := this'.__S0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S3.Q_in.pushBack((pkt,1));
    }
}
particle-size: 297
particle-size: 297
statement: return this'.data.length
particle-size: 297
particle-size: 297
particle-size: 297
particle-size: 297
statement: if node == 1 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S3.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 297
particle-size: 297
statement: return this'.data.length
particle-size: 297
particle-size: 297
particle-size: 297
particle-size: 297
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 180
particle-size: 180
statement: r := this'.front()
particle-size: 180
particle-size: 180
statement: return this'.data[0]
particle-size: 180
particle-size: 180
particle-size: 180
particle-size: 180
particle-size: 180
statement: this'.popFront()
particle-size: 180
particle-size: 180
statement: this'.data = this'.data[1..this'.size()]
particle-size: 180
particle-size: 180
statement: return this'.data.length
particle-size: 180
particle-size: 180
particle-size: 180
particle-size: 180
particle-size: 180
statement: return ()
particle-size: 180
particle-size: 180
particle-size: 180
particle-size: 180
statement: return r
particle-size: 180
particle-size: 180
particle-size: 180
particle-size: 180
particle-size: 180
particle-size: 180
statement: if port == 1 {
    this'.__S2.Q_in.pushBack((pkt,3));
}
statement: this'.__S2.Q_in.pushBack((pkt,3))
particle-size: 60
particle-size: 60
particle-size: 60
statement: this'.data = this'.data ~ [x]
particle-size: 60
statement: return ()
particle-size: 60
particle-size: 60
particle-size: 60
particle-size: 60
statement: if port == 2 {
    this'.__S3.Q_in.pushBack((pkt,2));
}
statement: this'.__S3.Q_in.pushBack((pkt,2))
particle-size: 60
particle-size: 60
particle-size: 60
statement: this'.data = this'.data ~ [x]
particle-size: 60
statement: return ()
particle-size: 60
particle-size: 60
particle-size: 60
particle-size: 60
statement: if port == 3 {
    this'.__S0.Q_in.pushBack((pkt,1));
}
statement: this'.__S0.Q_in.pushBack((pkt,1))
particle-size: 60
particle-size: 60
particle-size: 60
statement: this'.data = this'.data ~ [x]
particle-size: 60
statement: return ()
particle-size: 60
particle-size: 60
particle-size: 60
particle-size: 60
statement: if node == 2 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S3.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 297
particle-size: 297
statement: return this'.data.length
particle-size: 297
particle-size: 297
particle-size: 297
particle-size: 297
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 99
particle-size: 99
statement: r := this'.front()
particle-size: 99
particle-size: 99
statement: return this'.data[0]
particle-size: 99
particle-size: 99
particle-size: 99
particle-size: 99
particle-size: 99
statement: this'.popFront()
particle-size: 99
particle-size: 99
statement: this'.data = this'.data[1..this'.size()]
particle-size: 99
particle-size: 99
statement: return this'.data.length
particle-size: 99
particle-size: 99
particle-size: 99
particle-size: 99
particle-size: 99
statement: return ()
particle-size: 99
particle-size: 99
particle-size: 99
particle-size: 99
statement: return r
particle-size: 99
particle-size: 99
particle-size: 99
particle-size: 99
particle-size: 99
particle-size: 99
statement: if port == 1 {
    this'.__S3.Q_in.pushBack((pkt,3));
}
statement: this'.__S3.Q_in.pushBack((pkt,3))
particle-size: 33
particle-size: 33
particle-size: 33
statement: this'.data = this'.data ~ [x]
particle-size: 33
statement: return ()
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
statement: if port == 2 {
    this'.__S0.Q_in.pushBack((pkt,2));
}
statement: this'.__S0.Q_in.pushBack((pkt,2))
particle-size: 33
particle-size: 33
particle-size: 33
statement: this'.data = this'.data ~ [x]
particle-size: 33
statement: return ()
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
statement: if port == 3 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 33
particle-size: 33
particle-size: 33
statement: this'.data = this'.data ~ [x]
particle-size: 33
statement: return ()
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
statement: if node == 3 && this'.__S3.Q_out.size() {
    (pkt,port) := this'.__S3.Q_out.takeFront();
    if port == 1 {
        this'.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 297
particle-size: 297
statement: return this'.data.length
particle-size: 297
particle-size: 297
particle-size: 297
particle-size: 297
statement: (pkt,port) := this'.__S3.Q_out.takeFront()
particle-size: 18
particle-size: 18
statement: r := this'.front()
particle-size: 18
particle-size: 18
statement: return this'.data[0]
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.popFront()
particle-size: 18
particle-size: 18
statement: this'.data = this'.data[1..this'.size()]
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return r
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: if port == 1 {
    this'.__S0.Q_in.pushBack((pkt,3));
}
statement: this'.__S0.Q_in.pushBack((pkt,3))
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.data = this'.data ~ [x]
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: if port == 2 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: this'.__S1.Q_in.pushBack((pkt,2))
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.data = this'.data ~ [x]
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.data = this'.data ~ [x]
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return ()
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
repetition: 9
statement: __d.__step()
particle-size: 300
particle-size: 300
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 300
particle-size: 300
statement: return this'.data.length
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: return this'.data.length
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: return this'.data.length
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: return this'.data.length
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: return this'.data.length
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: return this'.data.length
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: return this'.data.length
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: return this'.data.length
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: (action,node) := this'.scheduler()
particle-size: 297
particle-size: 297
statement: for p in [0..2){
    if this'.phase == 0 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_in;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_in;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_in;
            } else {
                this'.__S3.Q_in;
            }).size() > 0 {
                return (0,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 1;
        this'.cur_node = 0;
    }
    if this'.phase == 1 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_out;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_out;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_out;
            } else {
                this'.__S3.Q_out;
            }).size() > 0 {
                return (1,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 0;
        this'.cur_node = 0;
    }
}
loop-index: 0
particle-size: 297
statement: if this'.phase == 0 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_in;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_in;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_in;
        } else {
            this'.__S3.Q_in;
        }).size() > 0 {
            return (0,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 1;
    this'.cur_node = 0;
}
statement: if this'.phase == 1 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_out;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_out;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_out;
        } else {
            this'.__S3.Q_out;
        }).size() > 0 {
            return (1,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 0;
    this'.cur_node = 0;
}
statement: for i in [0..4){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_out;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_out;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_out;
    } else {
        this'.__S3.Q_out;
    }).size() > 0 {
        return (1,this'.cur_node);
    }
    this'.cur_node = (this'.cur_node + 1) % 4;
}
loop-index: 0
particle-size: 297
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_out;
} else if this'.cur_node == 1 {
    this'.__S1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    return (1,this'.cur_node);
}
particle-size: 297
particle-size: 297
statement: return this'.data.length
particle-size: 297
particle-size: 297
particle-size: 297
statement: return (1,this'.cur_node)
particle-size: 297
loop-index: 1
particle-size: 0
loop-index: 2
particle-size: 0
loop-index: 3
particle-size: 0
loop-index: 1
particle-size: 0
particle-size: 297
particle-size: 297
particle-size: 297
particle-size: 297
particle-size: 297
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_out.size() {
    (pkt,port) := this'.__S0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S3.Q_in.pushBack((pkt,1));
    }
}
particle-size: 297
particle-size: 297
statement: return this'.data.length
particle-size: 297
particle-size: 297
particle-size: 297
particle-size: 297
statement: if node == 1 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S3.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 297
particle-size: 297
statement: return this'.data.length
particle-size: 297
particle-size: 297
particle-size: 297
particle-size: 297
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 180
particle-size: 180
statement: r := this'.front()
particle-size: 180
particle-size: 180
statement: return this'.data[0]
particle-size: 180
particle-size: 180
particle-size: 180
particle-size: 180
particle-size: 180
statement: this'.popFront()
particle-size: 180
particle-size: 180
statement: this'.data = this'.data[1..this'.size()]
particle-size: 180
particle-size: 180
statement: return this'.data.length
particle-size: 180
particle-size: 180
particle-size: 180
particle-size: 180
particle-size: 180
statement: return ()
particle-size: 180
particle-size: 180
particle-size: 180
particle-size: 180
statement: return r
particle-size: 180
particle-size: 180
particle-size: 180
particle-size: 180
particle-size: 180
particle-size: 180
statement: if port == 1 {
    this'.__S2.Q_in.pushBack((pkt,3));
}
statement: this'.__S2.Q_in.pushBack((pkt,3))
particle-size: 60
particle-size: 60
particle-size: 60
statement: this'.data = this'.data ~ [x]
particle-size: 60
statement: return ()
particle-size: 60
particle-size: 60
particle-size: 60
particle-size: 60
statement: if port == 2 {
    this'.__S3.Q_in.pushBack((pkt,2));
}
statement: this'.__S3.Q_in.pushBack((pkt,2))
particle-size: 60
particle-size: 60
particle-size: 60
statement: this'.data = this'.data ~ [x]
particle-size: 60
statement: return ()
particle-size: 60
particle-size: 60
particle-size: 60
particle-size: 60
statement: if port == 3 {
    this'.__S0.Q_in.pushBack((pkt,1));
}
statement: this'.__S0.Q_in.pushBack((pkt,1))
particle-size: 60
particle-size: 60
particle-size: 60
statement: this'.data = this'.data ~ [x]
particle-size: 60
statement: return ()
particle-size: 60
particle-size: 60
particle-size: 60
particle-size: 60
statement: if node == 2 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S3.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 297
particle-size: 297
statement: return this'.data.length
particle-size: 297
particle-size: 297
particle-size: 297
particle-size: 297
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 99
particle-size: 99
statement: r := this'.front()
particle-size: 99
particle-size: 99
statement: return this'.data[0]
particle-size: 99
particle-size: 99
particle-size: 99
particle-size: 99
particle-size: 99
statement: this'.popFront()
particle-size: 99
particle-size: 99
statement: this'.data = this'.data[1..this'.size()]
particle-size: 99
particle-size: 99
statement: return this'.data.length
particle-size: 99
particle-size: 99
particle-size: 99
particle-size: 99
particle-size: 99
statement: return ()
particle-size: 99
particle-size: 99
particle-size: 99
particle-size: 99
statement: return r
particle-size: 99
particle-size: 99
particle-size: 99
particle-size: 99
particle-size: 99
particle-size: 99
statement: if port == 1 {
    this'.__S3.Q_in.pushBack((pkt,3));
}
statement: this'.__S3.Q_in.pushBack((pkt,3))
particle-size: 33
particle-size: 33
particle-size: 33
statement: this'.data = this'.data ~ [x]
particle-size: 33
statement: return ()
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
statement: if port == 2 {
    this'.__S0.Q_in.pushBack((pkt,2));
}
statement: this'.__S0.Q_in.pushBack((pkt,2))
particle-size: 33
particle-size: 33
particle-size: 33
statement: this'.data = this'.data ~ [x]
particle-size: 33
statement: return ()
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
statement: if port == 3 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 33
particle-size: 33
particle-size: 33
statement: this'.data = this'.data ~ [x]
particle-size: 33
statement: return ()
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
statement: if node == 3 && this'.__S3.Q_out.size() {
    (pkt,port) := this'.__S3.Q_out.takeFront();
    if port == 1 {
        this'.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 297
particle-size: 297
statement: return this'.data.length
particle-size: 297
particle-size: 297
particle-size: 297
particle-size: 297
statement: (pkt,port) := this'.__S3.Q_out.takeFront()
particle-size: 18
particle-size: 18
statement: r := this'.front()
particle-size: 18
particle-size: 18
statement: return this'.data[0]
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.popFront()
particle-size: 18
particle-size: 18
statement: this'.data = this'.data[1..this'.size()]
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return r
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: if port == 1 {
    this'.__S0.Q_in.pushBack((pkt,3));
}
statement: this'.__S0.Q_in.pushBack((pkt,3))
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.data = this'.data ~ [x]
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: if port == 2 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: this'.__S1.Q_in.pushBack((pkt,2))
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.data = this'.data ~ [x]
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.data = this'.data ~ [x]
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return ()
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 201
repetition: 10
statement: __d.__step()
particle-size: 201
particle-size: 201
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 201
particle-size: 201
statement: return this'.data.length
particle-size: 201
particle-size: 201
particle-size: 201
particle-size: 201
particle-size: 201
particle-size: 201
statement: return this'.data.length
particle-size: 201
particle-size: 201
particle-size: 201
particle-size: 201
particle-size: 201
particle-size: 201
statement: return this'.data.length
particle-size: 201
particle-size: 201
particle-size: 201
particle-size: 201
particle-size: 201
particle-size: 201
statement: return this'.data.length
particle-size: 201
particle-size: 201
particle-size: 201
particle-size: 201
particle-size: 201
particle-size: 201
statement: return this'.data.length
particle-size: 201
particle-size: 201
particle-size: 201
particle-size: 201
particle-size: 201
particle-size: 201
statement: return this'.data.length
particle-size: 201
particle-size: 201
particle-size: 201
particle-size: 201
particle-size: 201
particle-size: 201
statement: return this'.data.length
particle-size: 201
particle-size: 201
particle-size: 201
particle-size: 201
particle-size: 201
particle-size: 201
statement: return this'.data.length
particle-size: 201
particle-size: 201
particle-size: 201
particle-size: 201
statement: (action,node) := this'.scheduler()
particle-size: 198
particle-size: 198
statement: for p in [0..2){
    if this'.phase == 0 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_in;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_in;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_in;
            } else {
                this'.__S3.Q_in;
            }).size() > 0 {
                return (0,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 1;
        this'.cur_node = 0;
    }
    if this'.phase == 1 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_out;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_out;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_out;
            } else {
                this'.__S3.Q_out;
            }).size() > 0 {
                return (1,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 0;
        this'.cur_node = 0;
    }
}
loop-index: 0
particle-size: 198
statement: if this'.phase == 0 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_in;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_in;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_in;
        } else {
            this'.__S3.Q_in;
        }).size() > 0 {
            return (0,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 1;
    this'.cur_node = 0;
}
statement: if this'.phase == 1 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_out;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_out;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_out;
        } else {
            this'.__S3.Q_out;
        }).size() > 0 {
            return (1,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 0;
    this'.cur_node = 0;
}
statement: for i in [0..4){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_out;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_out;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_out;
    } else {
        this'.__S3.Q_out;
    }).size() > 0 {
        return (1,this'.cur_node);
    }
    this'.cur_node = (this'.cur_node + 1) % 4;
}
loop-index: 0
particle-size: 198
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_out;
} else if this'.cur_node == 1 {
    this'.__S1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    return (1,this'.cur_node);
}
particle-size: 198
particle-size: 198
statement: return this'.data.length
particle-size: 198
particle-size: 198
particle-size: 198
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 198
loop-index: 1
particle-size: 198
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_out;
} else if this'.cur_node == 1 {
    this'.__S1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    return (1,this'.cur_node);
}
particle-size: 198
particle-size: 198
statement: return this'.data.length
particle-size: 198
particle-size: 198
particle-size: 198
statement: return (1,this'.cur_node)
particle-size: 108
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 90
loop-index: 2
particle-size: 90
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_out;
} else if this'.cur_node == 1 {
    this'.__S1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    return (1,this'.cur_node);
}
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
statement: return (1,this'.cur_node)
particle-size: 54
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 36
loop-index: 3
particle-size: 36
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_out;
} else if this'.cur_node == 1 {
    this'.__S1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    return (1,this'.cur_node);
}
particle-size: 36
particle-size: 36
statement: return this'.data.length
particle-size: 36
particle-size: 36
particle-size: 36
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 36
statement: this'.phase = 0
particle-size: 36
statement: this'.cur_node = 0
particle-size: 36
loop-index: 1
particle-size: 36
statement: if this'.phase == 0 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_in;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_in;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_in;
        } else {
            this'.__S3.Q_in;
        }).size() > 0 {
            return (0,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 1;
    this'.cur_node = 0;
}
statement: for i in [0..4){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_in;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_in;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        return (0,this'.cur_node);
    }
    this'.cur_node = (this'.cur_node + 1) % 4;
}
loop-index: 0
particle-size: 36
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 36
particle-size: 36
statement: return this'.data.length
particle-size: 36
particle-size: 36
particle-size: 36
statement: return (0,this'.cur_node)
particle-size: 18
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 18
loop-index: 1
particle-size: 18
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
statement: return (0,this'.cur_node)
particle-size: 8
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 10
loop-index: 2
particle-size: 10
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
statement: return (0,this'.cur_node)
particle-size: 6
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 4
loop-index: 3
particle-size: 4
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 4
particle-size: 4
statement: return this'.data.length
particle-size: 4
particle-size: 4
particle-size: 4
statement: return (0,this'.cur_node)
particle-size: 4
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_out.size() {
    (pkt,port) := this'.__S0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S3.Q_in.pushBack((pkt,1));
    }
}
particle-size: 162
particle-size: 162
statement: return this'.data.length
particle-size: 162
particle-size: 162
particle-size: 162
particle-size: 162
statement: if node == 1 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S3.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 162
particle-size: 162
statement: return this'.data.length
particle-size: 162
particle-size: 162
particle-size: 162
particle-size: 162
statement: if node == 2 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S3.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 162
particle-size: 162
statement: return this'.data.length
particle-size: 162
particle-size: 162
particle-size: 162
particle-size: 162
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 54
particle-size: 54
statement: r := this'.front()
particle-size: 54
particle-size: 54
statement: return this'.data[0]
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: this'.popFront()
particle-size: 54
particle-size: 54
statement: this'.data = this'.data[1..this'.size()]
particle-size: 54
particle-size: 54
statement: return this'.data.length
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: return ()
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: return r
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: if port == 1 {
    this'.__S3.Q_in.pushBack((pkt,3));
}
statement: this'.__S3.Q_in.pushBack((pkt,3))
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.data = this'.data ~ [x]
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: if port == 2 {
    this'.__S0.Q_in.pushBack((pkt,2));
}
statement: this'.__S0.Q_in.pushBack((pkt,2))
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.data = this'.data ~ [x]
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: if port == 3 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.data = this'.data ~ [x]
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: if node == 3 && this'.__S3.Q_out.size() {
    (pkt,port) := this'.__S3.Q_out.takeFront();
    if port == 1 {
        this'.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 162
particle-size: 162
statement: return this'.data.length
particle-size: 162
particle-size: 162
particle-size: 162
particle-size: 162
statement: (pkt,port) := this'.__S3.Q_out.takeFront()
particle-size: 108
particle-size: 108
statement: r := this'.front()
particle-size: 108
particle-size: 108
statement: return this'.data[0]
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
statement: this'.popFront()
particle-size: 108
particle-size: 108
statement: this'.data = this'.data[1..this'.size()]
particle-size: 108
particle-size: 108
statement: return this'.data.length
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
statement: return ()
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
statement: return r
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
statement: if port == 1 {
    this'.__S0.Q_in.pushBack((pkt,3));
}
statement: this'.__S0.Q_in.pushBack((pkt,3))
particle-size: 36
particle-size: 36
particle-size: 36
statement: this'.data = this'.data ~ [x]
particle-size: 36
statement: return ()
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: if port == 2 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: this'.__S1.Q_in.pushBack((pkt,2))
particle-size: 36
particle-size: 36
particle-size: 36
statement: this'.data = this'.data ~ [x]
particle-size: 36
statement: return ()
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 36
particle-size: 36
particle-size: 36
statement: this'.data = this'.data ~ [x]
particle-size: 36
statement: return ()
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: if node == 0 && this'.__S0.Q_in.size() {
    this'.__S0.__run();
}
particle-size: 36
particle-size: 36
statement: return this'.data.length
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: this'.__S0.__run()
particle-size: 18
particle-size: 18
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 18
particle-size: 18
statement: this'.data = this'.data[1..this'.size()]
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: if node == 1 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 36
particle-size: 36
statement: return this'.data.length
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: this'.__S1.__run()
particle-size: 8
particle-size: 8
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 4
statement: this'.Q_in.dupFront()
particle-size: 4
particle-size: 4
statement: this'.pushFront(this'.front())
particle-size: 4
particle-size: 4
statement: return this'.data[0]
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.data = [x] ~ this'.data
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 4
particle-size: 4
statement: r := this'.front()
particle-size: 4
particle-size: 4
statement: return this'.data[0]
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.popFront()
particle-size: 4
particle-size: 4
statement: this'.data = this'.data[1..this'.size()]
particle-size: 4
particle-size: 4
statement: return this'.data.length
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return r
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.data = this'.data ~ [x]
particle-size: 12
statement: return ()
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 12
particle-size: 12
statement: r := this'.front()
particle-size: 12
particle-size: 12
statement: return this'.data[0]
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.popFront()
particle-size: 12
particle-size: 12
statement: this'.data = this'.data[1..this'.size()]
particle-size: 12
particle-size: 12
statement: return this'.data.length
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: return ()
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: return r
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: this'.data = this'.data ~ [x]
particle-size: 36
statement: return ()
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: this'.Q_in.popFront()
particle-size: 4
particle-size: 4
statement: this'.data = this'.data[1..this'.size()]
particle-size: 4
particle-size: 4
statement: return this'.data.length
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: if node == 2 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 68
particle-size: 68
statement: return this'.data.length
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
statement: this'.__S2.__run()
particle-size: 6
particle-size: 6
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 3
statement: this'.Q_in.dupFront()
particle-size: 3
particle-size: 3
statement: this'.pushFront(this'.front())
particle-size: 3
particle-size: 3
statement: return this'.data[0]
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = [x] ~ this'.data
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 3
particle-size: 3
statement: r := this'.front()
particle-size: 3
particle-size: 3
statement: return this'.data[0]
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.popFront()
particle-size: 3
particle-size: 3
statement: this'.data = this'.data[1..this'.size()]
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return r
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this'.data = this'.data ~ [x]
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 9
particle-size: 9
statement: r := this'.front()
particle-size: 9
particle-size: 9
statement: return this'.data[0]
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this'.popFront()
particle-size: 9
particle-size: 9
statement: this'.data = this'.data[1..this'.size()]
particle-size: 9
particle-size: 9
statement: return this'.data.length
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return r
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: this'.data = this'.data ~ [x]
particle-size: 27
statement: return ()
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: this'.Q_in.popFront()
particle-size: 3
particle-size: 3
statement: this'.data = this'.data[1..this'.size()]
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
statement: if node == 3 && this'.__S3.Q_in.size() {
    this'.__S3.__run();
}
particle-size: 92
particle-size: 92
statement: return this'.data.length
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: this'.__S3.__run()
particle-size: 4
particle-size: 4
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 2
statement: this'.Q_in.dupFront()
particle-size: 2
particle-size: 2
statement: this'.pushFront(this'.front())
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = [x] ~ this'.data
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 2
particle-size: 2
statement: r := this'.front()
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.popFront()
particle-size: 2
particle-size: 2
statement: this'.data = this'.data[1..this'.size()]
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return r
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.data = this'.data ~ [x]
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 6
particle-size: 6
statement: r := this'.front()
particle-size: 6
particle-size: 6
statement: return this'.data[0]
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.popFront()
particle-size: 6
particle-size: 6
statement: this'.data = this'.data[1..this'.size()]
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return r
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.data = this'.data ~ [x]
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.Q_in.popFront()
particle-size: 2
particle-size: 2
statement: this'.data = this'.data[1..this'.size()]
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: return ()
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
repetition: 11
statement: __d.__step()
particle-size: 273
particle-size: 273
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 273
particle-size: 273
statement: return this'.data.length
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
statement: return this'.data.length
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
statement: return this'.data.length
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
statement: return this'.data.length
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
statement: return this'.data.length
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
statement: return this'.data.length
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
statement: return this'.data.length
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
statement: return this'.data.length
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
statement: (action,node) := this'.scheduler()
particle-size: 270
particle-size: 270
statement: for p in [0..2){
    if this'.phase == 0 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_in;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_in;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_in;
            } else {
                this'.__S3.Q_in;
            }).size() > 0 {
                return (0,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 1;
        this'.cur_node = 0;
    }
    if this'.phase == 1 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_out;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_out;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_out;
            } else {
                this'.__S3.Q_out;
            }).size() > 0 {
                return (1,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 0;
        this'.cur_node = 0;
    }
}
loop-index: 0
particle-size: 270
statement: if this'.phase == 0 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_in;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_in;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_in;
        } else {
            this'.__S3.Q_in;
        }).size() > 0 {
            return (0,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 1;
    this'.cur_node = 0;
}
statement: for i in [0..4){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_in;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_in;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        return (0,this'.cur_node);
    }
    this'.cur_node = (this'.cur_node + 1) % 4;
}
loop-index: 0
particle-size: 108
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 108
particle-size: 108
statement: return this'.data.length
particle-size: 108
particle-size: 108
particle-size: 108
statement: return (0,this'.cur_node)
particle-size: 66
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 42
loop-index: 1
particle-size: 42
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 42
particle-size: 42
statement: return this'.data.length
particle-size: 42
particle-size: 42
particle-size: 42
statement: return (0,this'.cur_node)
particle-size: 24
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 18
loop-index: 2
particle-size: 18
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
statement: return (0,this'.cur_node)
particle-size: 14
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 4
loop-index: 3
particle-size: 4
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 4
particle-size: 4
statement: return this'.data.length
particle-size: 4
particle-size: 4
particle-size: 4
statement: return (0,this'.cur_node)
particle-size: 4
statement: if this'.phase == 1 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_out;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_out;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_out;
        } else {
            this'.__S3.Q_out;
        }).size() > 0 {
            return (1,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 0;
    this'.cur_node = 0;
}
statement: for i in [0..4){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_out;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_out;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_out;
    } else {
        this'.__S3.Q_out;
    }).size() > 0 {
        return (1,this'.cur_node);
    }
    this'.cur_node = (this'.cur_node + 1) % 4;
}
loop-index: 0
particle-size: 162
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_out;
} else if this'.cur_node == 1 {
    this'.__S1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    return (1,this'.cur_node);
}
particle-size: 162
particle-size: 162
statement: return this'.data.length
particle-size: 162
particle-size: 162
particle-size: 162
statement: return (1,this'.cur_node)
particle-size: 162
loop-index: 1
particle-size: 0
loop-index: 2
particle-size: 0
loop-index: 3
particle-size: 0
loop-index: 1
particle-size: 0
particle-size: 270
particle-size: 270
particle-size: 270
particle-size: 270
particle-size: 270
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_out.size() {
    (pkt,port) := this'.__S0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S3.Q_in.pushBack((pkt,1));
    }
}
particle-size: 162
particle-size: 162
statement: return this'.data.length
particle-size: 162
particle-size: 162
particle-size: 162
particle-size: 162
statement: if node == 1 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S3.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 162
particle-size: 162
statement: return this'.data.length
particle-size: 162
particle-size: 162
particle-size: 162
particle-size: 162
statement: if node == 2 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S3.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 162
particle-size: 162
statement: return this'.data.length
particle-size: 162
particle-size: 162
particle-size: 162
particle-size: 162
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 54
particle-size: 54
statement: r := this'.front()
particle-size: 54
particle-size: 54
statement: return this'.data[0]
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: this'.popFront()
particle-size: 54
particle-size: 54
statement: this'.data = this'.data[1..this'.size()]
particle-size: 54
particle-size: 54
statement: return this'.data.length
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: return ()
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: return r
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: if port == 1 {
    this'.__S3.Q_in.pushBack((pkt,3));
}
statement: this'.__S3.Q_in.pushBack((pkt,3))
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.data = this'.data ~ [x]
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: if port == 2 {
    this'.__S0.Q_in.pushBack((pkt,2));
}
statement: this'.__S0.Q_in.pushBack((pkt,2))
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.data = this'.data ~ [x]
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: if port == 3 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.data = this'.data ~ [x]
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: if node == 3 && this'.__S3.Q_out.size() {
    (pkt,port) := this'.__S3.Q_out.takeFront();
    if port == 1 {
        this'.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 162
particle-size: 162
statement: return this'.data.length
particle-size: 162
particle-size: 162
particle-size: 162
particle-size: 162
statement: (pkt,port) := this'.__S3.Q_out.takeFront()
particle-size: 108
particle-size: 108
statement: r := this'.front()
particle-size: 108
particle-size: 108
statement: return this'.data[0]
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
statement: this'.popFront()
particle-size: 108
particle-size: 108
statement: this'.data = this'.data[1..this'.size()]
particle-size: 108
particle-size: 108
statement: return this'.data.length
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
statement: return ()
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
statement: return r
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
statement: if port == 1 {
    this'.__S0.Q_in.pushBack((pkt,3));
}
statement: this'.__S0.Q_in.pushBack((pkt,3))
particle-size: 36
particle-size: 36
particle-size: 36
statement: this'.data = this'.data ~ [x]
particle-size: 36
statement: return ()
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: if port == 2 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: this'.__S1.Q_in.pushBack((pkt,2))
particle-size: 36
particle-size: 36
particle-size: 36
statement: this'.data = this'.data ~ [x]
particle-size: 36
statement: return ()
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 36
particle-size: 36
particle-size: 36
statement: this'.data = this'.data ~ [x]
particle-size: 36
statement: return ()
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: if node == 0 && this'.__S0.Q_in.size() {
    this'.__S0.__run();
}
particle-size: 108
particle-size: 108
statement: return this'.data.length
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
statement: this'.__S0.__run()
particle-size: 6
particle-size: 6
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 6
particle-size: 6
statement: this'.data = this'.data[1..this'.size()]
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: if node == 1 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 108
particle-size: 108
statement: return this'.data.length
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
statement: this'.__S1.__run()
particle-size: 24
particle-size: 24
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 2
statement: this'.Q_in.dupFront()
particle-size: 2
particle-size: 2
statement: this'.pushFront(this'.front())
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = [x] ~ this'.data
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 2
particle-size: 2
statement: r := this'.front()
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.popFront()
particle-size: 2
particle-size: 2
statement: this'.data = this'.data[1..this'.size()]
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return r
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.data = this'.data ~ [x]
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 6
particle-size: 6
statement: r := this'.front()
particle-size: 6
particle-size: 6
statement: return this'.data[0]
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.popFront()
particle-size: 6
particle-size: 6
statement: this'.data = this'.data[1..this'.size()]
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return r
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.data = this'.data ~ [x]
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.Q_in.popFront()
particle-size: 22
particle-size: 22
statement: this'.data = this'.data[1..this'.size()]
particle-size: 22
particle-size: 22
statement: return this'.data.length
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: return ()
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: return ()
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: if node == 2 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 124
particle-size: 124
statement: return this'.data.length
particle-size: 124
particle-size: 124
particle-size: 124
particle-size: 124
statement: this'.__S2.__run()
particle-size: 34
particle-size: 34
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 3
statement: this'.Q_in.dupFront()
particle-size: 3
particle-size: 3
statement: this'.pushFront(this'.front())
particle-size: 3
particle-size: 3
statement: return this'.data[0]
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = [x] ~ this'.data
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 3
particle-size: 3
statement: r := this'.front()
particle-size: 3
particle-size: 3
statement: return this'.data[0]
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.popFront()
particle-size: 3
particle-size: 3
statement: this'.data = this'.data[1..this'.size()]
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return r
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this'.data = this'.data ~ [x]
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 9
particle-size: 9
statement: r := this'.front()
particle-size: 9
particle-size: 9
statement: return this'.data[0]
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this'.popFront()
particle-size: 9
particle-size: 9
statement: this'.data = this'.data[1..this'.size()]
particle-size: 9
particle-size: 9
statement: return this'.data.length
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return r
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: this'.data = this'.data ~ [x]
particle-size: 27
statement: return ()
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: this'.Q_in.popFront()
particle-size: 31
particle-size: 31
statement: this'.data = this'.data[1..this'.size()]
particle-size: 31
particle-size: 31
statement: return this'.data.length
particle-size: 31
particle-size: 31
particle-size: 31
particle-size: 31
particle-size: 31
statement: return ()
particle-size: 31
particle-size: 31
particle-size: 31
particle-size: 31
statement: return ()
particle-size: 58
particle-size: 58
particle-size: 58
particle-size: 58
statement: if node == 3 && this'.__S3.Q_in.size() {
    this'.__S3.__run();
}
particle-size: 148
particle-size: 148
statement: return this'.data.length
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
statement: this'.__S3.__run()
particle-size: 44
particle-size: 44
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 4
statement: this'.Q_in.dupFront()
particle-size: 4
particle-size: 4
statement: this'.pushFront(this'.front())
particle-size: 4
particle-size: 4
statement: return this'.data[0]
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.data = [x] ~ this'.data
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 4
particle-size: 4
statement: r := this'.front()
particle-size: 4
particle-size: 4
statement: return this'.data[0]
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.popFront()
particle-size: 4
particle-size: 4
statement: this'.data = this'.data[1..this'.size()]
particle-size: 4
particle-size: 4
statement: return this'.data.length
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return r
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.data = this'.data ~ [x]
particle-size: 12
statement: return ()
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 12
particle-size: 12
statement: r := this'.front()
particle-size: 12
particle-size: 12
statement: return this'.data[0]
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.popFront()
particle-size: 12
particle-size: 12
statement: this'.data = this'.data[1..this'.size()]
particle-size: 12
particle-size: 12
statement: return this'.data.length
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: return ()
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: return r
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: this'.data = this'.data ~ [x]
particle-size: 36
statement: return ()
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: this'.Q_in.popFront()
particle-size: 40
particle-size: 40
statement: this'.data = this'.data[1..this'.size()]
particle-size: 40
particle-size: 40
statement: return this'.data.length
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: return ()
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: return ()
particle-size: 76
particle-size: 76
particle-size: 76
particle-size: 76
statement: return ()
particle-size: 345
particle-size: 345
particle-size: 345
particle-size: 174
repetition: 12
statement: __d.__step()
particle-size: 174
particle-size: 174
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 174
particle-size: 174
statement: return this'.data.length
particle-size: 174
particle-size: 174
particle-size: 174
particle-size: 174
particle-size: 174
particle-size: 174
statement: return this'.data.length
particle-size: 174
particle-size: 174
particle-size: 174
particle-size: 174
particle-size: 174
particle-size: 174
statement: return this'.data.length
particle-size: 174
particle-size: 174
particle-size: 174
particle-size: 174
particle-size: 174
particle-size: 174
statement: return this'.data.length
particle-size: 174
particle-size: 174
particle-size: 174
particle-size: 174
particle-size: 174
particle-size: 174
statement: return this'.data.length
particle-size: 174
particle-size: 174
particle-size: 174
particle-size: 174
particle-size: 174
particle-size: 174
statement: return this'.data.length
particle-size: 174
particle-size: 174
particle-size: 174
particle-size: 174
particle-size: 174
particle-size: 174
statement: return this'.data.length
particle-size: 174
particle-size: 174
particle-size: 174
particle-size: 174
particle-size: 174
particle-size: 174
statement: return this'.data.length
particle-size: 174
particle-size: 174
particle-size: 174
particle-size: 174
statement: (action,node) := this'.scheduler()
particle-size: 162
particle-size: 162
statement: for p in [0..2){
    if this'.phase == 0 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_in;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_in;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_in;
            } else {
                this'.__S3.Q_in;
            }).size() > 0 {
                return (0,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 1;
        this'.cur_node = 0;
    }
    if this'.phase == 1 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_out;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_out;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_out;
            } else {
                this'.__S3.Q_out;
            }).size() > 0 {
                return (1,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 0;
        this'.cur_node = 0;
    }
}
loop-index: 0
particle-size: 162
statement: if this'.phase == 0 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_in;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_in;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_in;
        } else {
            this'.__S3.Q_in;
        }).size() > 0 {
            return (0,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 1;
    this'.cur_node = 0;
}
statement: for i in [0..4){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_in;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_in;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        return (0,this'.cur_node);
    }
    this'.cur_node = (this'.cur_node + 1) % 4;
}
loop-index: 0
particle-size: 54
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 54
particle-size: 54
statement: return this'.data.length
particle-size: 54
particle-size: 54
particle-size: 54
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 54
loop-index: 1
particle-size: 54
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 54
particle-size: 54
statement: return this'.data.length
particle-size: 54
particle-size: 54
particle-size: 54
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 54
loop-index: 2
particle-size: 54
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 54
particle-size: 54
statement: return this'.data.length
particle-size: 54
particle-size: 54
particle-size: 54
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 54
loop-index: 3
particle-size: 54
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 54
particle-size: 54
statement: return this'.data.length
particle-size: 54
particle-size: 54
particle-size: 54
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 54
statement: this'.phase = 1
particle-size: 54
statement: this'.cur_node = 0
particle-size: 54
statement: if this'.phase == 1 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_out;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_out;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_out;
        } else {
            this'.__S3.Q_out;
        }).size() > 0 {
            return (1,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 0;
    this'.cur_node = 0;
}
statement: for i in [0..4){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_out;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_out;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_out;
    } else {
        this'.__S3.Q_out;
    }).size() > 0 {
        return (1,this'.cur_node);
    }
    this'.cur_node = (this'.cur_node + 1) % 4;
}
loop-index: 0
particle-size: 162
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_out;
} else if this'.cur_node == 1 {
    this'.__S1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    return (1,this'.cur_node);
}
particle-size: 162
particle-size: 162
statement: return this'.data.length
particle-size: 162
particle-size: 162
particle-size: 162
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 162
loop-index: 1
particle-size: 162
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_out;
} else if this'.cur_node == 1 {
    this'.__S1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    return (1,this'.cur_node);
}
particle-size: 162
particle-size: 162
statement: return this'.data.length
particle-size: 162
particle-size: 162
particle-size: 162
statement: return (1,this'.cur_node)
particle-size: 27
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 135
loop-index: 2
particle-size: 135
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_out;
} else if this'.cur_node == 1 {
    this'.__S1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    return (1,this'.cur_node);
}
particle-size: 135
particle-size: 135
statement: return this'.data.length
particle-size: 135
particle-size: 135
particle-size: 135
statement: return (1,this'.cur_node)
particle-size: 18
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 117
loop-index: 3
particle-size: 117
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_out;
} else if this'.cur_node == 1 {
    this'.__S1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    return (1,this'.cur_node);
}
particle-size: 117
particle-size: 117
statement: return this'.data.length
particle-size: 117
particle-size: 117
particle-size: 117
statement: return (1,this'.cur_node)
particle-size: 9
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 108
statement: this'.phase = 0
particle-size: 108
statement: this'.cur_node = 0
particle-size: 108
loop-index: 1
particle-size: 108
statement: if this'.phase == 0 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_in;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_in;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_in;
        } else {
            this'.__S3.Q_in;
        }).size() > 0 {
            return (0,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 1;
    this'.cur_node = 0;
}
statement: for i in [0..4){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_in;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_in;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        return (0,this'.cur_node);
    }
    this'.cur_node = (this'.cur_node + 1) % 4;
}
loop-index: 0
particle-size: 108
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 108
particle-size: 108
statement: return this'.data.length
particle-size: 108
particle-size: 108
particle-size: 108
statement: return (0,this'.cur_node)
particle-size: 81
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 27
loop-index: 1
particle-size: 27
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
statement: return (0,this'.cur_node)
particle-size: 20
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 7
loop-index: 2
particle-size: 7
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 7
particle-size: 7
statement: return this'.data.length
particle-size: 7
particle-size: 7
particle-size: 7
statement: return (0,this'.cur_node)
particle-size: 6
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 1
loop-index: 3
particle-size: 1
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
statement: return (0,this'.cur_node)
particle-size: 1
particle-size: 162
particle-size: 162
particle-size: 162
particle-size: 162
particle-size: 162
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_out.size() {
    (pkt,port) := this'.__S0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S3.Q_in.pushBack((pkt,1));
    }
}
particle-size: 54
particle-size: 54
statement: return this'.data.length
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: if node == 1 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S3.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 54
particle-size: 54
statement: return this'.data.length
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 27
particle-size: 27
statement: r := this'.front()
particle-size: 27
particle-size: 27
statement: return this'.data[0]
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: this'.popFront()
particle-size: 27
particle-size: 27
statement: this'.data = this'.data[1..this'.size()]
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: return ()
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: return r
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: if port == 1 {
    this'.__S2.Q_in.pushBack((pkt,3));
}
statement: this'.__S2.Q_in.pushBack((pkt,3))
particle-size: 9
particle-size: 9
particle-size: 9
statement: this'.data = this'.data ~ [x]
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if port == 2 {
    this'.__S3.Q_in.pushBack((pkt,2));
}
statement: this'.__S3.Q_in.pushBack((pkt,2))
particle-size: 9
particle-size: 9
particle-size: 9
statement: this'.data = this'.data ~ [x]
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if port == 3 {
    this'.__S0.Q_in.pushBack((pkt,1));
}
statement: this'.__S0.Q_in.pushBack((pkt,1))
particle-size: 9
particle-size: 9
particle-size: 9
statement: this'.data = this'.data ~ [x]
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if node == 2 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S3.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 54
particle-size: 54
statement: return this'.data.length
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 18
particle-size: 18
statement: r := this'.front()
particle-size: 18
particle-size: 18
statement: return this'.data[0]
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.popFront()
particle-size: 18
particle-size: 18
statement: this'.data = this'.data[1..this'.size()]
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return r
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: if port == 1 {
    this'.__S3.Q_in.pushBack((pkt,3));
}
statement: this'.__S3.Q_in.pushBack((pkt,3))
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.data = this'.data ~ [x]
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: if port == 2 {
    this'.__S0.Q_in.pushBack((pkt,2));
}
statement: this'.__S0.Q_in.pushBack((pkt,2))
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.data = this'.data ~ [x]
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: if port == 3 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.data = this'.data ~ [x]
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: if node == 3 && this'.__S3.Q_out.size() {
    (pkt,port) := this'.__S3.Q_out.takeFront();
    if port == 1 {
        this'.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 54
particle-size: 54
statement: return this'.data.length
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: (pkt,port) := this'.__S3.Q_out.takeFront()
particle-size: 9
particle-size: 9
statement: r := this'.front()
particle-size: 9
particle-size: 9
statement: return this'.data[0]
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this'.popFront()
particle-size: 9
particle-size: 9
statement: this'.data = this'.data[1..this'.size()]
particle-size: 9
particle-size: 9
statement: return this'.data.length
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return r
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if port == 1 {
    this'.__S0.Q_in.pushBack((pkt,3));
}
statement: this'.__S0.Q_in.pushBack((pkt,3))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 2 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: this'.__S1.Q_in.pushBack((pkt,2))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 0 && this'.__S0.Q_in.size() {
    this'.__S0.__run();
}
particle-size: 108
particle-size: 108
statement: return this'.data.length
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
statement: this'.__S0.__run()
particle-size: 81
particle-size: 81
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 81
particle-size: 81
statement: this'.data = this'.data[1..this'.size()]
particle-size: 81
particle-size: 81
statement: return this'.data.length
particle-size: 81
particle-size: 81
particle-size: 81
particle-size: 81
particle-size: 81
statement: return ()
particle-size: 81
particle-size: 81
particle-size: 81
particle-size: 81
statement: return ()
particle-size: 81
particle-size: 81
particle-size: 81
particle-size: 81
statement: if node == 1 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 108
particle-size: 108
statement: return this'.data.length
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
statement: this'.__S1.__run()
particle-size: 20
particle-size: 20
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 20
particle-size: 20
statement: this'.data = this'.data[1..this'.size()]
particle-size: 20
particle-size: 20
statement: return this'.data.length
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: return ()
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: return ()
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: if node == 2 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 108
particle-size: 108
statement: return this'.data.length
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
statement: this'.__S2.__run()
particle-size: 6
particle-size: 6
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 6
particle-size: 6
statement: this'.data = this'.data[1..this'.size()]
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: if node == 3 && this'.__S3.Q_in.size() {
    this'.__S3.__run();
}
particle-size: 108
particle-size: 108
statement: return this'.data.length
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
statement: this'.__S3.__run()
particle-size: 1
particle-size: 1
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 1
particle-size: 1
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 174
particle-size: 174
particle-size: 174
particle-size: 147
repetition: 13
statement: __d.__step()
particle-size: 147
particle-size: 147
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 147
particle-size: 147
statement: return this'.data.length
particle-size: 147
particle-size: 147
particle-size: 147
particle-size: 147
particle-size: 147
particle-size: 147
statement: return this'.data.length
particle-size: 147
particle-size: 147
particle-size: 147
particle-size: 147
particle-size: 147
particle-size: 147
statement: return this'.data.length
particle-size: 147
particle-size: 147
particle-size: 147
particle-size: 147
particle-size: 147
particle-size: 147
statement: return this'.data.length
particle-size: 147
particle-size: 147
particle-size: 147
particle-size: 147
particle-size: 147
particle-size: 147
statement: return this'.data.length
particle-size: 147
particle-size: 147
particle-size: 147
particle-size: 147
particle-size: 147
particle-size: 147
statement: return this'.data.length
particle-size: 147
particle-size: 147
particle-size: 147
particle-size: 147
particle-size: 147
particle-size: 147
statement: return this'.data.length
particle-size: 147
particle-size: 147
particle-size: 147
particle-size: 147
particle-size: 147
particle-size: 147
statement: return this'.data.length
particle-size: 147
particle-size: 147
particle-size: 147
particle-size: 147
statement: (action,node) := this'.scheduler()
particle-size: 135
particle-size: 135
statement: for p in [0..2){
    if this'.phase == 0 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_in;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_in;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_in;
            } else {
                this'.__S3.Q_in;
            }).size() > 0 {
                return (0,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 1;
        this'.cur_node = 0;
    }
    if this'.phase == 1 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_out;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_out;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_out;
            } else {
                this'.__S3.Q_out;
            }).size() > 0 {
                return (1,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 0;
        this'.cur_node = 0;
    }
}
loop-index: 0
particle-size: 135
statement: if this'.phase == 0 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_in;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_in;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_in;
        } else {
            this'.__S3.Q_in;
        }).size() > 0 {
            return (0,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 1;
    this'.cur_node = 0;
}
statement: for i in [0..4){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_in;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_in;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        return (0,this'.cur_node);
    }
    this'.cur_node = (this'.cur_node + 1) % 4;
}
loop-index: 0
particle-size: 108
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 108
particle-size: 108
statement: return this'.data.length
particle-size: 108
particle-size: 108
particle-size: 108
statement: return (0,this'.cur_node)
particle-size: 63
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 45
loop-index: 1
particle-size: 45
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 45
particle-size: 45
statement: return this'.data.length
particle-size: 45
particle-size: 45
particle-size: 45
statement: return (0,this'.cur_node)
particle-size: 32
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 13
loop-index: 2
particle-size: 13
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 13
particle-size: 13
statement: return this'.data.length
particle-size: 13
particle-size: 13
particle-size: 13
statement: return (0,this'.cur_node)
particle-size: 11
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 2
loop-index: 3
particle-size: 2
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
statement: return (0,this'.cur_node)
particle-size: 2
statement: if this'.phase == 1 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_out;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_out;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_out;
        } else {
            this'.__S3.Q_out;
        }).size() > 0 {
            return (1,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 0;
    this'.cur_node = 0;
}
statement: for i in [0..4){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_out;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_out;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_out;
    } else {
        this'.__S3.Q_out;
    }).size() > 0 {
        return (1,this'.cur_node);
    }
    this'.cur_node = (this'.cur_node + 1) % 4;
}
loop-index: 0
particle-size: 27
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_out;
} else if this'.cur_node == 1 {
    this'.__S1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    return (1,this'.cur_node);
}
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
statement: return (1,this'.cur_node)
particle-size: 27
loop-index: 1
particle-size: 0
loop-index: 2
particle-size: 0
loop-index: 3
particle-size: 0
loop-index: 1
particle-size: 0
particle-size: 135
particle-size: 135
particle-size: 135
particle-size: 135
particle-size: 135
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_out.size() {
    (pkt,port) := this'.__S0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S3.Q_in.pushBack((pkt,1));
    }
}
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: if node == 1 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S3.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 9
particle-size: 9
statement: r := this'.front()
particle-size: 9
particle-size: 9
statement: return this'.data[0]
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this'.popFront()
particle-size: 9
particle-size: 9
statement: this'.data = this'.data[1..this'.size()]
particle-size: 9
particle-size: 9
statement: return this'.data.length
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return r
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if port == 1 {
    this'.__S2.Q_in.pushBack((pkt,3));
}
statement: this'.__S2.Q_in.pushBack((pkt,3))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 2 {
    this'.__S3.Q_in.pushBack((pkt,2));
}
statement: this'.__S3.Q_in.pushBack((pkt,2))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 3 {
    this'.__S0.Q_in.pushBack((pkt,1));
}
statement: this'.__S0.Q_in.pushBack((pkt,1))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 2 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S3.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 9
particle-size: 9
statement: r := this'.front()
particle-size: 9
particle-size: 9
statement: return this'.data[0]
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this'.popFront()
particle-size: 9
particle-size: 9
statement: this'.data = this'.data[1..this'.size()]
particle-size: 9
particle-size: 9
statement: return this'.data.length
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return r
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if port == 1 {
    this'.__S3.Q_in.pushBack((pkt,3));
}
statement: this'.__S3.Q_in.pushBack((pkt,3))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 2 {
    this'.__S0.Q_in.pushBack((pkt,2));
}
statement: this'.__S0.Q_in.pushBack((pkt,2))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 3 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 3 && this'.__S3.Q_out.size() {
    (pkt,port) := this'.__S3.Q_out.takeFront();
    if port == 1 {
        this'.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: (pkt,port) := this'.__S3.Q_out.takeFront()
particle-size: 9
particle-size: 9
statement: r := this'.front()
particle-size: 9
particle-size: 9
statement: return this'.data[0]
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this'.popFront()
particle-size: 9
particle-size: 9
statement: this'.data = this'.data[1..this'.size()]
particle-size: 9
particle-size: 9
statement: return this'.data.length
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return r
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if port == 1 {
    this'.__S0.Q_in.pushBack((pkt,3));
}
statement: this'.__S0.Q_in.pushBack((pkt,3))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 2 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: this'.__S1.Q_in.pushBack((pkt,2))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 0 && this'.__S0.Q_in.size() {
    this'.__S0.__run();
}
particle-size: 108
particle-size: 108
statement: return this'.data.length
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
statement: this'.__S0.__run()
particle-size: 45
particle-size: 45
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 45
particle-size: 45
statement: this'.data = this'.data[1..this'.size()]
particle-size: 45
particle-size: 45
statement: return this'.data.length
particle-size: 45
particle-size: 45
particle-size: 45
particle-size: 45
particle-size: 45
statement: return ()
particle-size: 45
particle-size: 45
particle-size: 45
particle-size: 45
statement: return ()
particle-size: 45
particle-size: 45
particle-size: 45
particle-size: 45
statement: if node == 1 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 108
particle-size: 108
statement: return this'.data.length
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
statement: this'.__S1.__run()
particle-size: 36
particle-size: 36
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 36
particle-size: 36
statement: this'.data = this'.data[1..this'.size()]
particle-size: 36
particle-size: 36
statement: return this'.data.length
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: return ()
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: return ()
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: if node == 2 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 108
particle-size: 108
statement: return this'.data.length
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
statement: this'.__S2.__run()
particle-size: 22
particle-size: 22
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 22
particle-size: 22
statement: this'.data = this'.data[1..this'.size()]
particle-size: 22
particle-size: 22
statement: return this'.data.length
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: return ()
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: return ()
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: if node == 3 && this'.__S3.Q_in.size() {
    this'.__S3.__run();
}
particle-size: 108
particle-size: 108
statement: return this'.data.length
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
statement: this'.__S3.__run()
particle-size: 5
particle-size: 5
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 5
particle-size: 5
statement: this'.data = this'.data[1..this'.size()]
particle-size: 5
particle-size: 5
statement: return this'.data.length
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
statement: return ()
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
statement: return ()
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
statement: return ()
particle-size: 147
particle-size: 147
particle-size: 147
particle-size: 92
repetition: 14
statement: __d.__step()
particle-size: 92
particle-size: 92
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 92
particle-size: 92
statement: return this'.data.length
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: return this'.data.length
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: return this'.data.length
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: return this'.data.length
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: return this'.data.length
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: return this'.data.length
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: return this'.data.length
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: return this'.data.length
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: (action,node) := this'.scheduler()
particle-size: 80
particle-size: 80
statement: for p in [0..2){
    if this'.phase == 0 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_in;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_in;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_in;
            } else {
                this'.__S3.Q_in;
            }).size() > 0 {
                return (0,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 1;
        this'.cur_node = 0;
    }
    if this'.phase == 1 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_out;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_out;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_out;
            } else {
                this'.__S3.Q_out;
            }).size() > 0 {
                return (1,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 0;
        this'.cur_node = 0;
    }
}
loop-index: 0
particle-size: 80
statement: if this'.phase == 0 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_in;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_in;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_in;
        } else {
            this'.__S3.Q_in;
        }).size() > 0 {
            return (0,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 1;
    this'.cur_node = 0;
}
statement: for i in [0..4){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_in;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_in;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        return (0,this'.cur_node);
    }
    this'.cur_node = (this'.cur_node + 1) % 4;
}
loop-index: 0
particle-size: 62
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 62
particle-size: 62
statement: return this'.data.length
particle-size: 62
particle-size: 62
particle-size: 62
statement: return (0,this'.cur_node)
particle-size: 28
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 34
loop-index: 1
particle-size: 34
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 34
particle-size: 34
statement: return this'.data.length
particle-size: 34
particle-size: 34
particle-size: 34
statement: return (0,this'.cur_node)
particle-size: 21
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 13
loop-index: 2
particle-size: 13
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 13
particle-size: 13
statement: return this'.data.length
particle-size: 13
particle-size: 13
particle-size: 13
statement: return (0,this'.cur_node)
particle-size: 10
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 3
loop-index: 3
particle-size: 3
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: return (0,this'.cur_node)
particle-size: 3
statement: if this'.phase == 1 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_out;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_out;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_out;
        } else {
            this'.__S3.Q_out;
        }).size() > 0 {
            return (1,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 0;
    this'.cur_node = 0;
}
statement: for i in [0..4){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_out;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_out;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_out;
    } else {
        this'.__S3.Q_out;
    }).size() > 0 {
        return (1,this'.cur_node);
    }
    this'.cur_node = (this'.cur_node + 1) % 4;
}
loop-index: 0
particle-size: 18
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_out;
} else if this'.cur_node == 1 {
    this'.__S1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    return (1,this'.cur_node);
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 18
loop-index: 1
particle-size: 18
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_out;
} else if this'.cur_node == 1 {
    this'.__S1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    return (1,this'.cur_node);
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 18
loop-index: 2
particle-size: 18
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_out;
} else if this'.cur_node == 1 {
    this'.__S1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    return (1,this'.cur_node);
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 18
loop-index: 3
particle-size: 18
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_out;
} else if this'.cur_node == 1 {
    this'.__S1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    return (1,this'.cur_node);
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 18
statement: this'.phase = 0
particle-size: 18
statement: this'.cur_node = 0
particle-size: 18
loop-index: 1
particle-size: 18
statement: if this'.phase == 0 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_in;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_in;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_in;
        } else {
            this'.__S3.Q_in;
        }).size() > 0 {
            return (0,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 1;
    this'.cur_node = 0;
}
statement: for i in [0..4){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_in;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_in;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        return (0,this'.cur_node);
    }
    this'.cur_node = (this'.cur_node + 1) % 4;
}
loop-index: 0
particle-size: 18
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
statement: return (0,this'.cur_node)
particle-size: 9
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 9
loop-index: 1
particle-size: 9
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 9
particle-size: 9
statement: return this'.data.length
particle-size: 9
particle-size: 9
particle-size: 9
statement: return (0,this'.cur_node)
particle-size: 4
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 5
loop-index: 2
particle-size: 5
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 5
particle-size: 5
statement: return this'.data.length
particle-size: 5
particle-size: 5
particle-size: 5
statement: return (0,this'.cur_node)
particle-size: 3
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 2
loop-index: 3
particle-size: 2
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
statement: return (0,this'.cur_node)
particle-size: 2
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_in.size() {
    this'.__S0.__run();
}
particle-size: 80
particle-size: 80
statement: return this'.data.length
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: this'.__S0.__run()
particle-size: 21
particle-size: 21
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 21
particle-size: 21
statement: this'.data = this'.data[1..this'.size()]
particle-size: 21
particle-size: 21
statement: return this'.data.length
particle-size: 21
particle-size: 21
particle-size: 21
particle-size: 21
particle-size: 21
statement: return ()
particle-size: 21
particle-size: 21
particle-size: 21
particle-size: 21
statement: return ()
particle-size: 21
particle-size: 21
particle-size: 21
particle-size: 21
statement: if node == 1 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 80
particle-size: 80
statement: return this'.data.length
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: this'.__S1.__run()
particle-size: 24
particle-size: 24
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 24
particle-size: 24
statement: this'.data = this'.data[1..this'.size()]
particle-size: 24
particle-size: 24
statement: return this'.data.length
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: return ()
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: return ()
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: if node == 2 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 80
particle-size: 80
statement: return this'.data.length
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: this'.__S2.__run()
particle-size: 22
particle-size: 22
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 22
particle-size: 22
statement: this'.data = this'.data[1..this'.size()]
particle-size: 22
particle-size: 22
statement: return this'.data.length
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: return ()
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: return ()
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: if node == 3 && this'.__S3.Q_in.size() {
    this'.__S3.__run();
}
particle-size: 80
particle-size: 80
statement: return this'.data.length
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: this'.__S3.__run()
particle-size: 13
particle-size: 13
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 13
particle-size: 13
statement: this'.data = this'.data[1..this'.size()]
particle-size: 13
particle-size: 13
statement: return this'.data.length
particle-size: 13
particle-size: 13
particle-size: 13
particle-size: 13
particle-size: 13
statement: return ()
particle-size: 13
particle-size: 13
particle-size: 13
particle-size: 13
statement: return ()
particle-size: 13
particle-size: 13
particle-size: 13
particle-size: 13
statement: return ()
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 33
repetition: 15
statement: __d.__step()
particle-size: 33
particle-size: 33
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 33
particle-size: 33
statement: return this'.data.length
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
statement: return this'.data.length
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
statement: return this'.data.length
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
statement: return this'.data.length
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
statement: return this'.data.length
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
statement: return this'.data.length
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
statement: return this'.data.length
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
statement: return this'.data.length
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
statement: (action,node) := this'.scheduler()
particle-size: 21
particle-size: 21
statement: for p in [0..2){
    if this'.phase == 0 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_in;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_in;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_in;
            } else {
                this'.__S3.Q_in;
            }).size() > 0 {
                return (0,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 1;
        this'.cur_node = 0;
    }
    if this'.phase == 1 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_out;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_out;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_out;
            } else {
                this'.__S3.Q_out;
            }).size() > 0 {
                return (1,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 0;
        this'.cur_node = 0;
    }
}
loop-index: 0
particle-size: 21
statement: if this'.phase == 0 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_in;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_in;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_in;
        } else {
            this'.__S3.Q_in;
        }).size() > 0 {
            return (0,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 1;
    this'.cur_node = 0;
}
statement: for i in [0..4){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_in;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_in;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        return (0,this'.cur_node);
    }
    this'.cur_node = (this'.cur_node + 1) % 4;
}
loop-index: 0
particle-size: 21
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 21
particle-size: 21
statement: return this'.data.length
particle-size: 21
particle-size: 21
particle-size: 21
statement: return (0,this'.cur_node)
particle-size: 9
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 12
loop-index: 1
particle-size: 12
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 12
particle-size: 12
statement: return this'.data.length
particle-size: 12
particle-size: 12
particle-size: 12
statement: return (0,this'.cur_node)
particle-size: 6
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 6
loop-index: 2
particle-size: 6
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
statement: return (0,this'.cur_node)
particle-size: 4
statement: this'.cur_node = (this'.cur_node + 1) % 4
particle-size: 2
loop-index: 3
particle-size: 2
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
statement: return (0,this'.cur_node)
particle-size: 2
loop-index: 1
particle-size: 0
particle-size: 21
particle-size: 21
particle-size: 21
particle-size: 21
particle-size: 21
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_in.size() {
    this'.__S0.__run();
}
particle-size: 21
particle-size: 21
statement: return this'.data.length
particle-size: 21
particle-size: 21
particle-size: 21
particle-size: 21
statement: this'.__S0.__run()
particle-size: 3
particle-size: 3
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 3
particle-size: 3
statement: this'.data = this'.data[1..this'.size()]
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 1 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 21
particle-size: 21
statement: return this'.data.length
particle-size: 21
particle-size: 21
particle-size: 21
particle-size: 21
statement: this'.__S1.__run()
particle-size: 4
particle-size: 4
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 4
particle-size: 4
statement: this'.data = this'.data[1..this'.size()]
particle-size: 4
particle-size: 4
statement: return this'.data.length
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: if node == 2 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 21
particle-size: 21
statement: return this'.data.length
particle-size: 21
particle-size: 21
particle-size: 21
particle-size: 21
statement: this'.__S2.__run()
particle-size: 6
particle-size: 6
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 6
particle-size: 6
statement: this'.data = this'.data[1..this'.size()]
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: if node == 3 && this'.__S3.Q_in.size() {
    this'.__S3.__run();
}
particle-size: 21
particle-size: 21
statement: return this'.data.length
particle-size: 21
particle-size: 21
particle-size: 21
particle-size: 21
statement: this'.__S3.__run()
particle-size: 8
particle-size: 8
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 8
particle-size: 8
statement: this'.data = this'.data[1..this'.size()]
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 16
statement: assert(!(__d.__S0.Q_in.size() || __d.__S0.Q_out.size() || __d.__S1.Q_in.size() || __d.__S1.Q_out.size() || __d.__S2.Q_in.size() || __d.__S2.Q_out.size() || __d.__S3.Q_in.size() || __d.__S3.Q_out.size()))
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: q₁ := Expectation((if 0 == 0 {
    __d.__S0.infected;
} else if 0 == 1 {
    __d.__S1.infected;
} else if 0 == 2 {
    __d.__S2.infected;
} else if 0 == 3 {
    __d.__S3.infected;
} else {
    assert(0);
}) + (if 1 == 0 {
    __d.__S0.infected;
} else if 1 == 1 {
    __d.__S1.infected;
} else if 1 == 2 {
    __d.__S2.infected;
} else if 1 == 3 {
    __d.__S3.infected;
} else {
    assert(0);
}) + (if 2 == 0 {
    __d.__S0.infected;
} else if 2 == 1 {
    __d.__S1.infected;
} else if 2 == 2 {
    __d.__S2.infected;
} else if 2 == 3 {
    __d.__S3.infected;
} else {
    assert(0);
}) + (if 3 == 0 {
    __d.__S0.infected;
} else if 3 == 1 {
    __d.__S1.infected;
} else if 3 == 2 {
    __d.__S2.infected;
} else if 3 == 3 {
    __d.__S3.infected;
} else {
    assert(0);
}))
particle-size: 16
statement: return (q₁)
particle-size: 16
E[q1_] = 94/27

real	0m11.886s
user	0m11.800s
sys	0m0.076s
