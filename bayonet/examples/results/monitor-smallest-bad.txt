statement: __d := __D'()
particle-size: 1
particle-size: 1
statement: this.__H0 = __h0_ty'() , this.__Controller = __controller_ty'() , this.__S1 = __s1_ty'() , this.__S2 = __s2_ty'() , this.__H1 = __h1_ty'()
statement: this.__H0 = __h0_ty'() , this.__Controller = __controller_ty'() , this.__S1 = __s1_ty'() , this.__S2 = __s2_ty'()
statement: this.__H0 = __h0_ty'() , this.__Controller = __controller_ty'() , this.__S1 = __s1_ty'()
statement: this.__H0 = __h0_ty'() , this.__Controller = __controller_ty'()
statement: this.__H0 = __h0_ty'()
particle-size: 1
particle-size: 1
statement: this.Q_in = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.Q_out = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.num_sent = 0
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.__Controller = __controller_ty'()
particle-size: 1
particle-size: 1
statement: this.Q_in = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.Q_out = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.num_packets = 0
particle-size: 1
statement: this.tot_packets = 1
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.__S1 = __s1_ty'()
particle-size: 1
particle-size: 1
statement: this.Q_in = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.Q_out = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.bad_hash = 2
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.__S2 = __s2_ty'()
particle-size: 1
particle-size: 1
statement: this.Q_in = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.Q_out = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.__H1 = __h1_ty'()
particle-size: 1
particle-size: 1
statement: this.Q_in = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.Q_out = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: __d.__H0.Q_in.pushBack((Packet'(),0))
particle-size: 1
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = this'.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: __d.__H0.__run()
particle-size: 1
particle-size: 1
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.pushFront((Packet'(),0))
particle-size: 1
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = [x] ~ this'.data
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.num_sent = (this'.num_sent + 1)
particle-size: 1
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1))
particle-size: 1
particle-size: 1
statement: r := this'.front()
particle-size: 1
particle-size: 1
statement: return this'.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.popFront()
particle-size: 1
particle-size: 1
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = this'.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: repeat 30 {
    __d.__step();
}
repetition: 1
statement: __d.__step()
particle-size: 1
particle-size: 1
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: (action,node) := this'.scheduler()
particle-size: 1
particle-size: 1
statement: actions := ([]: (R × R)[])
particle-size: 1
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 1
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
statement: actions ~= [(0,i)]
particle-size: 1
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
statement: actions ~= [(1,i)]
particle-size: 1
loop-index: 1
particle-size: 1
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
loop-index: 2
particle-size: 1
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
loop-index: 3
particle-size: 1
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
loop-index: 4
particle-size: 1
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 1
particle-size: 1
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: (pkt,port) := this'.__H0.Q_out.takeFront()
particle-size: 1
particle-size: 1
statement: r := this'.front()
particle-size: 1
particle-size: 1
statement: return this'.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.popFront()
particle-size: 1
particle-size: 1
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = this'.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,3));
}
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.__H0.__run()
particle-size: 1
particle-size: 1
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.pushFront((Packet'(),0))
particle-size: 1
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = [x] ~ this'.data
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.num_sent = (this'.num_sent + 1)
particle-size: 1
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1))
particle-size: 1
particle-size: 1
statement: r := this'.front()
particle-size: 1
particle-size: 1
statement: return this'.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.popFront()
particle-size: 1
particle-size: 1
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = this'.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
repetition: 2
statement: __d.__step()
particle-size: 2
particle-size: 2
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: (action,node) := this'.scheduler()
particle-size: 2
particle-size: 2
statement: actions := ([]: (R × R)[])
particle-size: 2
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 2
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
statement: actions ~= [(0,i)]
particle-size: 2
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
statement: actions ~= [(1,i)]
particle-size: 1
loop-index: 1
particle-size: 2
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
loop-index: 2
particle-size: 2
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
statement: actions ~= [(0,i)]
particle-size: 1
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
loop-index: 3
particle-size: 2
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
loop-index: 4
particle-size: 2
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 2
particle-size: 2
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: (pkt,port) := this'.__H0.Q_out.takeFront()
particle-size: 1
particle-size: 1
statement: r := this'.front()
particle-size: 1
particle-size: 1
statement: return this'.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.popFront()
particle-size: 1
particle-size: 1
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = this'.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,3));
}
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.__H0.__run()
particle-size: 2
particle-size: 2
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.pushFront((Packet'(),0))
particle-size: 1
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = [x] ~ this'.data
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.num_sent = (this'.num_sent + 1)
particle-size: 1
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1))
particle-size: 1
particle-size: 1
statement: r := this'.front()
particle-size: 1
particle-size: 1
statement: return this'.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.popFront()
particle-size: 1
particle-size: 1
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = this'.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.Q_in.popFront()
particle-size: 1
particle-size: 1
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.__S1.__run()
particle-size: 1
particle-size: 1
statement: if (this'.bad_hash == 2) {
    this'.bad_hash = flip((1 / 10));
}
statement: this'.bad_hash = flip((1 / 10))
particle-size: 1
particle-size: 1
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 2
particle-size: 2
particle-size: 2
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 2
particle-size: 2
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 4
particle-size: 4
statement: this'.Q_in.dupFront()
particle-size: 2
particle-size: 2
statement: this'.pushFront(this'.front())
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = [x] ~ this'.data
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 2
particle-size: 2
statement: r := this'.front()
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.popFront()
particle-size: 2
particle-size: 2
statement: this'.data = this'.data[1..this'.size()]
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return r
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = this'.data ~ [x]
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if (((this'.bad_hash == 1) && flip((1 / 3))) || ((this'.bad_hash == 0) && flip((1 / 2)))) {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
} else {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
}
particle-size: 4
particle-size: 4
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 16
particle-size: 16
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 8
particle-size: 8
statement: r := this'.front()
particle-size: 8
particle-size: 8
statement: return this'.data[0]
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.popFront()
particle-size: 8
particle-size: 8
statement: this'.data = this'.data[1..this'.size()]
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return r
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.data = this'.data ~ [x]
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3))
particle-size: 8
particle-size: 8
statement: r := this'.front()
particle-size: 8
particle-size: 8
statement: return this'.data[0]
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.popFront()
particle-size: 8
particle-size: 8
statement: this'.data = this'.data[1..this'.size()]
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return r
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.data = this'.data ~ [x]
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 16
particle-size: 8
particle-size: 8
particle-size: 8
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return ()
particle-size: 11
particle-size: 11
particle-size: 11
particle-size: 10
repetition: 3
statement: __d.__step()
particle-size: 10
particle-size: 10
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: (action,node) := this'.scheduler()
particle-size: 10
particle-size: 10
statement: actions := ([]: (R × R)[])
particle-size: 10
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 10
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
statement: actions ~= [(0,i)]
particle-size: 9
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
statement: actions ~= [(1,i)]
particle-size: 2
loop-index: 1
particle-size: 10
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
loop-index: 2
particle-size: 10
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
statement: actions ~= [(0,i)]
particle-size: 1
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
statement: actions ~= [(1,i)]
particle-size: 8
loop-index: 3
particle-size: 10
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
loop-index: 4
particle-size: 10
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 10
particle-size: 10
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: (pkt,port) := this'.__H0.Q_out.takeFront()
particle-size: 2
particle-size: 2
statement: r := this'.front()
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.popFront()
particle-size: 2
particle-size: 2
statement: this'.data = this'.data[1..this'.size()]
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return r
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = this'.data ~ [x]
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,3));
}
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 8
particle-size: 8
statement: r := this'.front()
particle-size: 8
particle-size: 8
statement: return this'.data[0]
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.popFront()
particle-size: 8
particle-size: 8
statement: this'.data = this'.data[1..this'.size()]
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return r
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: if port == 1 {
    this'.__H0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,1));
}
statement: this'.__H1.Q_in.pushBack((pkt,1))
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = this'.data ~ [x]
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = this'.data ~ [x]
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,1));
}
statement: this'.__Controller.Q_in.pushBack((pkt,1))
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.data = this'.data ~ [x]
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.__H0.__run()
particle-size: 9
particle-size: 9
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.pushFront((Packet'(),0))
particle-size: 8
particle-size: 8
statement: return this
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.data = [x] ~ this'.data
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.num_sent = (this'.num_sent + 1)
particle-size: 8
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1))
particle-size: 8
particle-size: 8
statement: r := this'.front()
particle-size: 8
particle-size: 8
statement: return this'.data[0]
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.popFront()
particle-size: 8
particle-size: 8
statement: this'.data = this'.data[1..this'.size()]
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return r
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.data = this'.data ~ [x]
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.Q_in.popFront()
particle-size: 1
particle-size: 1
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.__S1.__run()
particle-size: 1
particle-size: 1
statement: if (this'.bad_hash == 2) {
    this'.bad_hash = flip((1 / 10));
}
statement: this'.bad_hash = flip((1 / 10))
particle-size: 1
particle-size: 1
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 2
particle-size: 2
particle-size: 2
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 2
particle-size: 2
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 4
particle-size: 4
statement: this'.Q_in.dupFront()
particle-size: 2
particle-size: 2
statement: this'.pushFront(this'.front())
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = [x] ~ this'.data
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 2
particle-size: 2
statement: r := this'.front()
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.popFront()
particle-size: 2
particle-size: 2
statement: this'.data = this'.data[1..this'.size()]
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return r
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = this'.data ~ [x]
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if (((this'.bad_hash == 1) && flip((1 / 3))) || ((this'.bad_hash == 0) && flip((1 / 2)))) {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
} else {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
}
particle-size: 4
particle-size: 4
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 16
particle-size: 16
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 8
particle-size: 8
statement: r := this'.front()
particle-size: 8
particle-size: 8
statement: return this'.data[0]
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.popFront()
particle-size: 8
particle-size: 8
statement: this'.data = this'.data[1..this'.size()]
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return r
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.data = this'.data ~ [x]
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3))
particle-size: 8
particle-size: 8
statement: r := this'.front()
particle-size: 8
particle-size: 8
statement: return this'.data[0]
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.popFront()
particle-size: 8
particle-size: 8
statement: this'.data = this'.data[1..this'.size()]
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return r
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.data = this'.data ~ [x]
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 16
particle-size: 8
particle-size: 8
particle-size: 8
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 17
particle-size: 17
statement: return this'.data.length
particle-size: 17
particle-size: 17
particle-size: 17
particle-size: 17
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 17
particle-size: 17
statement: return this'.data.length
particle-size: 17
particle-size: 17
particle-size: 17
particle-size: 17
statement: return ()
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 18
repetition: 4
statement: __d.__step()
particle-size: 18
particle-size: 18
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: (action,node) := this'.scheduler()
particle-size: 18
particle-size: 18
statement: actions := ([]: (R × R)[])
particle-size: 18
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 18
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
statement: actions ~= [(0,i)]
particle-size: 17
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
statement: actions ~= [(1,i)]
particle-size: 9
loop-index: 1
particle-size: 18
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
statement: actions ~= [(0,i)]
particle-size: 4
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
loop-index: 2
particle-size: 18
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
statement: actions ~= [(0,i)]
particle-size: 2
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
statement: actions ~= [(1,i)]
particle-size: 12
loop-index: 3
particle-size: 18
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
statement: actions ~= [(0,i)]
particle-size: 2
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
loop-index: 4
particle-size: 18
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
statement: actions ~= [(0,i)]
particle-size: 2
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 18
particle-size: 18
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 21
particle-size: 21
statement: return this'.data.length
particle-size: 21
particle-size: 21
particle-size: 21
particle-size: 21
statement: (pkt,port) := this'.__H0.Q_out.takeFront()
particle-size: 9
particle-size: 9
statement: r := this'.front()
particle-size: 9
particle-size: 9
statement: return this'.data[0]
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this'.popFront()
particle-size: 9
particle-size: 9
statement: this'.data = this'.data[1..this'.size()]
particle-size: 9
particle-size: 9
statement: return this'.data.length
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return r
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 9
particle-size: 9
particle-size: 9
statement: this'.data = this'.data ~ [x]
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,3));
}
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 21
particle-size: 21
statement: return this'.data.length
particle-size: 21
particle-size: 21
particle-size: 21
particle-size: 21
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 21
particle-size: 21
statement: return this'.data.length
particle-size: 21
particle-size: 21
particle-size: 21
particle-size: 21
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 12
particle-size: 12
statement: r := this'.front()
particle-size: 12
particle-size: 12
statement: return this'.data[0]
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.popFront()
particle-size: 12
particle-size: 12
statement: this'.data = this'.data[1..this'.size()]
particle-size: 12
particle-size: 12
statement: return this'.data.length
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: return ()
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: return r
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: if port == 1 {
    this'.__H0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,1));
}
statement: this'.__H1.Q_in.pushBack((pkt,1))
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.data = this'.data ~ [x]
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.data = this'.data ~ [x]
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,1));
}
statement: this'.__Controller.Q_in.pushBack((pkt,1))
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.data = this'.data ~ [x]
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 21
particle-size: 21
statement: return this'.data.length
particle-size: 21
particle-size: 21
particle-size: 21
particle-size: 21
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 21
particle-size: 21
statement: return this'.data.length
particle-size: 21
particle-size: 21
particle-size: 21
particle-size: 21
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: this'.__H0.__run()
particle-size: 17
particle-size: 17
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.pushFront((Packet'(),0))
particle-size: 8
particle-size: 8
statement: return this
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.data = [x] ~ this'.data
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.num_sent = (this'.num_sent + 1)
particle-size: 8
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1))
particle-size: 8
particle-size: 8
statement: r := this'.front()
particle-size: 8
particle-size: 8
statement: return this'.data[0]
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.popFront()
particle-size: 8
particle-size: 8
statement: this'.data = this'.data[1..this'.size()]
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return r
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.data = this'.data ~ [x]
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.Q_in.popFront()
particle-size: 9
particle-size: 9
statement: this'.data = this'.data[1..this'.size()]
particle-size: 9
particle-size: 9
statement: return this'.data.length
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 17
particle-size: 17
particle-size: 17
particle-size: 17
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: this'.__Controller.__run()
particle-size: 4
particle-size: 4
statement: this'.num_packets = (this'.num_packets + 1)
particle-size: 4
statement: if 1 {
    this'.tot_packets = 4;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 2));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 4) {
        observe((this'.Q_in.data[0][1] == 4));
    } else {
        observe(0);
    }
} else {
    this'.tot_packets = 3;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 2));
    } else {
        observe(0);
    }
}
statement: this'.tot_packets = 4
particle-size: 4
statement: if (this'.num_packets == 1) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 2));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 1))
statement: this'.Q_in.popFront()
particle-size: 4
particle-size: 4
statement: this'.data = this'.data[1..this'.size()]
particle-size: 4
particle-size: 4
statement: return this'.data.length
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: this'.__S1.__run()
particle-size: 2
particle-size: 2
statement: if (this'.bad_hash == 2) {
    this'.bad_hash = flip((1 / 10));
}
statement: this'.bad_hash = flip((1 / 10))
particle-size: 2
particle-size: 2
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 4
particle-size: 4
particle-size: 4
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 4
particle-size: 4
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 8
particle-size: 8
statement: this'.Q_in.dupFront()
particle-size: 4
particle-size: 4
statement: this'.pushFront(this'.front())
particle-size: 4
particle-size: 4
statement: return this'.data[0]
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.data = [x] ~ this'.data
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 4
particle-size: 4
statement: r := this'.front()
particle-size: 4
particle-size: 4
statement: return this'.data[0]
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.popFront()
particle-size: 4
particle-size: 4
statement: this'.data = this'.data[1..this'.size()]
particle-size: 4
particle-size: 4
statement: return this'.data.length
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return r
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.data = this'.data ~ [x]
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: if (((this'.bad_hash == 1) && flip((1 / 3))) || ((this'.bad_hash == 0) && flip((1 / 2)))) {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
} else {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
}
particle-size: 8
particle-size: 8
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 32
particle-size: 32
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 16
particle-size: 16
statement: r := this'.front()
particle-size: 16
particle-size: 16
statement: return this'.data[0]
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.popFront()
particle-size: 16
particle-size: 16
statement: this'.data = this'.data[1..this'.size()]
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return r
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.data = this'.data ~ [x]
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3))
particle-size: 16
particle-size: 16
statement: r := this'.front()
particle-size: 16
particle-size: 16
statement: return this'.data[0]
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.popFront()
particle-size: 16
particle-size: 16
statement: this'.data = this'.data[1..this'.size()]
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return r
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.data = this'.data ~ [x]
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return ()
particle-size: 32
particle-size: 16
particle-size: 16
particle-size: 16
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 41
particle-size: 41
statement: return this'.data.length
particle-size: 41
particle-size: 41
particle-size: 41
particle-size: 41
statement: this'.__S2.__run()
particle-size: 2
particle-size: 2
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 2
particle-size: 2
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 4
particle-size: 4
statement: this'.Q_in.dupFront()
particle-size: 2
particle-size: 2
statement: this'.pushFront(this'.front())
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = [x] ~ this'.data
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 2
particle-size: 2
statement: r := this'.front()
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.popFront()
particle-size: 2
particle-size: 2
statement: this'.data = this'.data[1..this'.size()]
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return r
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = this'.data ~ [x]
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 4
particle-size: 4
statement: r := this'.front()
particle-size: 4
particle-size: 4
statement: return this'.data[0]
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.popFront()
particle-size: 4
particle-size: 4
statement: this'.data = this'.data[1..this'.size()]
particle-size: 4
particle-size: 4
statement: return this'.data.length
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return r
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.data = this'.data ~ [x]
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 43
particle-size: 43
statement: return this'.data.length
particle-size: 43
particle-size: 43
particle-size: 43
particle-size: 43
statement: this'.__H1.__run()
particle-size: 2
particle-size: 2
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 2
particle-size: 2
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 4
particle-size: 4
statement: this'.Q_in.dupFront()
particle-size: 2
particle-size: 2
statement: this'.pushFront(this'.front())
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = [x] ~ this'.data
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 2
particle-size: 2
statement: r := this'.front()
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.popFront()
particle-size: 2
particle-size: 2
statement: this'.data = this'.data[1..this'.size()]
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return r
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = this'.data ~ [x]
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.Q_in.popFront()
particle-size: 4
particle-size: 4
statement: this'.data = this'.data[1..this'.size()]
particle-size: 4
particle-size: 4
statement: return this'.data.length
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 41
repetition: 5
statement: __d.__step()
particle-size: 41
particle-size: 41
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 41
particle-size: 41
statement: return this'.data.length
particle-size: 41
particle-size: 41
particle-size: 41
particle-size: 41
particle-size: 41
particle-size: 41
statement: return this'.data.length
particle-size: 41
particle-size: 41
particle-size: 41
particle-size: 41
particle-size: 41
particle-size: 41
statement: return this'.data.length
particle-size: 41
particle-size: 41
particle-size: 41
particle-size: 41
particle-size: 41
particle-size: 41
statement: return this'.data.length
particle-size: 41
particle-size: 41
particle-size: 41
particle-size: 41
particle-size: 41
particle-size: 41
statement: return this'.data.length
particle-size: 41
particle-size: 41
particle-size: 41
particle-size: 41
particle-size: 41
particle-size: 41
statement: return this'.data.length
particle-size: 41
particle-size: 41
particle-size: 41
particle-size: 41
particle-size: 41
particle-size: 41
statement: return this'.data.length
particle-size: 41
particle-size: 41
particle-size: 41
particle-size: 41
particle-size: 41
particle-size: 41
statement: return this'.data.length
particle-size: 41
particle-size: 41
particle-size: 41
particle-size: 41
particle-size: 41
particle-size: 41
statement: return this'.data.length
particle-size: 41
particle-size: 41
particle-size: 41
particle-size: 41
particle-size: 41
particle-size: 41
statement: return this'.data.length
particle-size: 41
particle-size: 41
particle-size: 41
particle-size: 41
statement: (action,node) := this'.scheduler()
particle-size: 41
particle-size: 41
statement: actions := ([]: (R × R)[])
particle-size: 41
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 41
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 41
particle-size: 41
statement: return this'.data.length
particle-size: 41
particle-size: 41
particle-size: 41
statement: actions ~= [(0,i)]
particle-size: 32
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 41
particle-size: 41
statement: return this'.data.length
particle-size: 41
particle-size: 41
particle-size: 41
statement: actions ~= [(1,i)]
particle-size: 16
loop-index: 1
particle-size: 41
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 41
particle-size: 41
statement: return this'.data.length
particle-size: 41
particle-size: 41
particle-size: 41
statement: actions ~= [(0,i)]
particle-size: 8
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 41
particle-size: 41
statement: return this'.data.length
particle-size: 41
particle-size: 41
particle-size: 41
loop-index: 2
particle-size: 41
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 41
particle-size: 41
statement: return this'.data.length
particle-size: 41
particle-size: 41
particle-size: 41
statement: actions ~= [(0,i)]
particle-size: 9
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 41
particle-size: 41
statement: return this'.data.length
particle-size: 41
particle-size: 41
particle-size: 41
statement: actions ~= [(1,i)]
particle-size: 24
loop-index: 3
particle-size: 41
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 41
particle-size: 41
statement: return this'.data.length
particle-size: 41
particle-size: 41
particle-size: 41
statement: actions ~= [(0,i)]
particle-size: 4
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 41
particle-size: 41
statement: return this'.data.length
particle-size: 41
particle-size: 41
particle-size: 41
statement: actions ~= [(1,i)]
particle-size: 4
loop-index: 4
particle-size: 41
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 41
particle-size: 41
statement: return this'.data.length
particle-size: 41
particle-size: 41
particle-size: 41
statement: actions ~= [(0,i)]
particle-size: 4
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 41
particle-size: 41
statement: return this'.data.length
particle-size: 41
particle-size: 41
particle-size: 41
statement: actions ~= [(1,i)]
particle-size: 2
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 41
particle-size: 41
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 103
particle-size: 103
particle-size: 103
particle-size: 103
particle-size: 103
particle-size: 103
particle-size: 103
particle-size: 103
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 46
particle-size: 46
statement: return this'.data.length
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
statement: (pkt,port) := this'.__H0.Q_out.takeFront()
particle-size: 16
particle-size: 16
statement: r := this'.front()
particle-size: 16
particle-size: 16
statement: return this'.data[0]
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.popFront()
particle-size: 16
particle-size: 16
statement: this'.data = this'.data[1..this'.size()]
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return r
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.data = this'.data ~ [x]
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,3));
}
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 46
particle-size: 46
statement: return this'.data.length
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 46
particle-size: 46
statement: return this'.data.length
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 24
particle-size: 24
statement: r := this'.front()
particle-size: 24
particle-size: 24
statement: return this'.data[0]
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: this'.popFront()
particle-size: 24
particle-size: 24
statement: this'.data = this'.data[1..this'.size()]
particle-size: 24
particle-size: 24
statement: return this'.data.length
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: return ()
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: return r
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: if port == 1 {
    this'.__H0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,1));
}
statement: this'.__H1.Q_in.pushBack((pkt,1))
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.data = this'.data ~ [x]
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.data = this'.data ~ [x]
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,1));
}
statement: this'.__Controller.Q_in.pushBack((pkt,1))
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.data = this'.data ~ [x]
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 46
particle-size: 46
statement: return this'.data.length
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 4
particle-size: 4
statement: r := this'.front()
particle-size: 4
particle-size: 4
statement: return this'.data[0]
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.popFront()
particle-size: 4
particle-size: 4
statement: this'.data = this'.data[1..this'.size()]
particle-size: 4
particle-size: 4
statement: return this'.data.length
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return r
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,3));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,2));
}
statement: this'.__H1.Q_in.pushBack((pkt,2))
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = this'.data ~ [x]
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,2));
}
statement: this'.__Controller.Q_in.pushBack((pkt,2))
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = this'.data ~ [x]
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 46
particle-size: 46
statement: return this'.data.length
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
statement: (pkt,port) := this'.__H1.Q_out.takeFront()
particle-size: 2
particle-size: 2
statement: r := this'.front()
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.popFront()
particle-size: 2
particle-size: 2
statement: this'.data = this'.data[1..this'.size()]
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return r
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this'.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,4));
}
statement: this'.__Controller.Q_in.pushBack((pkt,4))
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = this'.data ~ [x]
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 57
particle-size: 57
statement: return this'.data.length
particle-size: 57
particle-size: 57
particle-size: 57
particle-size: 57
statement: this'.__H0.__run()
particle-size: 32
particle-size: 32
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.pushFront((Packet'(),0))
particle-size: 16
particle-size: 16
statement: return this
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.data = [x] ~ this'.data
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.num_sent = (this'.num_sent + 1)
particle-size: 16
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1))
particle-size: 16
particle-size: 16
statement: r := this'.front()
particle-size: 16
particle-size: 16
statement: return this'.data[0]
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.popFront()
particle-size: 16
particle-size: 16
statement: this'.data = this'.data[1..this'.size()]
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return r
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.data = this'.data ~ [x]
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.Q_in.popFront()
particle-size: 16
particle-size: 16
statement: this'.data = this'.data[1..this'.size()]
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return ()
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 57
particle-size: 57
statement: return this'.data.length
particle-size: 57
particle-size: 57
particle-size: 57
particle-size: 57
statement: this'.__Controller.__run()
particle-size: 8
particle-size: 8
statement: this'.num_packets = (this'.num_packets + 1)
particle-size: 8
statement: if 1 {
    this'.tot_packets = 4;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 2));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 4) {
        observe((this'.Q_in.data[0][1] == 4));
    } else {
        observe(0);
    }
} else {
    this'.tot_packets = 3;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 2));
    } else {
        observe(0);
    }
}
statement: this'.tot_packets = 4
particle-size: 8
statement: if (this'.num_packets == 1) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 2));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 1))
statement: this'.Q_in.popFront()
particle-size: 8
particle-size: 8
statement: this'.data = this'.data[1..this'.size()]
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 57
particle-size: 57
statement: return this'.data.length
particle-size: 57
particle-size: 57
particle-size: 57
particle-size: 57
statement: this'.__S1.__run()
particle-size: 9
particle-size: 9
statement: if (this'.bad_hash == 2) {
    this'.bad_hash = flip((1 / 10));
}
statement: this'.bad_hash = flip((1 / 10))
particle-size: 1
particle-size: 1
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 2
particle-size: 2
particle-size: 2
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 10
particle-size: 10
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 20
particle-size: 20
statement: this'.Q_in.dupFront()
particle-size: 10
particle-size: 10
statement: this'.pushFront(this'.front())
particle-size: 10
particle-size: 10
statement: return this'.data[0]
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.data = [x] ~ this'.data
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 10
particle-size: 10
statement: r := this'.front()
particle-size: 10
particle-size: 10
statement: return this'.data[0]
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.popFront()
particle-size: 10
particle-size: 10
statement: this'.data = this'.data[1..this'.size()]
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return r
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.data = this'.data ~ [x]
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: if (((this'.bad_hash == 1) && flip((1 / 3))) || ((this'.bad_hash == 0) && flip((1 / 2)))) {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
} else {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
}
particle-size: 20
particle-size: 20
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 80
particle-size: 80
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 40
particle-size: 40
statement: r := this'.front()
particle-size: 40
particle-size: 40
statement: return this'.data[0]
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: this'.popFront()
particle-size: 40
particle-size: 40
statement: this'.data = this'.data[1..this'.size()]
particle-size: 40
particle-size: 40
statement: return this'.data.length
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: return ()
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: return r
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: this'.data = this'.data ~ [x]
particle-size: 40
statement: return ()
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3))
particle-size: 40
particle-size: 40
statement: r := this'.front()
particle-size: 40
particle-size: 40
statement: return this'.data[0]
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: this'.popFront()
particle-size: 40
particle-size: 40
statement: this'.data = this'.data[1..this'.size()]
particle-size: 40
particle-size: 40
statement: return this'.data.length
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: return ()
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: return r
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: this'.data = this'.data ~ [x]
particle-size: 40
statement: return ()
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: return ()
particle-size: 80
particle-size: 40
particle-size: 40
particle-size: 40
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 88
particle-size: 88
statement: return this'.data.length
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: this'.__S2.__run()
particle-size: 4
particle-size: 4
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 4
particle-size: 4
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 8
particle-size: 8
statement: this'.Q_in.dupFront()
particle-size: 4
particle-size: 4
statement: this'.pushFront(this'.front())
particle-size: 4
particle-size: 4
statement: return this'.data[0]
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.data = [x] ~ this'.data
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 4
particle-size: 4
statement: r := this'.front()
particle-size: 4
particle-size: 4
statement: return this'.data[0]
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.popFront()
particle-size: 4
particle-size: 4
statement: this'.data = this'.data[1..this'.size()]
particle-size: 4
particle-size: 4
statement: return this'.data.length
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return r
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.data = this'.data ~ [x]
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 8
particle-size: 8
statement: r := this'.front()
particle-size: 8
particle-size: 8
statement: return this'.data[0]
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.popFront()
particle-size: 8
particle-size: 8
statement: this'.data = this'.data[1..this'.size()]
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return r
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.data = this'.data ~ [x]
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 92
particle-size: 92
statement: return this'.data.length
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: this'.__H1.__run()
particle-size: 4
particle-size: 4
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 4
particle-size: 4
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 8
particle-size: 8
statement: this'.Q_in.dupFront()
particle-size: 4
particle-size: 4
statement: this'.pushFront(this'.front())
particle-size: 4
particle-size: 4
statement: return this'.data[0]
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.data = [x] ~ this'.data
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 4
particle-size: 4
statement: r := this'.front()
particle-size: 4
particle-size: 4
statement: return this'.data[0]
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.popFront()
particle-size: 4
particle-size: 4
statement: this'.data = this'.data[1..this'.size()]
particle-size: 4
particle-size: 4
statement: return this'.data.length
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return r
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.data = this'.data ~ [x]
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.Q_in.popFront()
particle-size: 8
particle-size: 8
statement: this'.data = this'.data[1..this'.size()]
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 142
particle-size: 142
particle-size: 142
particle-size: 90
repetition: 6
statement: __d.__step()
particle-size: 90
particle-size: 90
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: (action,node) := this'.scheduler()
particle-size: 90
particle-size: 90
statement: actions := ([]: (R × R)[])
particle-size: 90
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 90
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
statement: actions ~= [(0,i)]
particle-size: 74
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
statement: actions ~= [(1,i)]
particle-size: 24
loop-index: 1
particle-size: 90
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
statement: actions ~= [(0,i)]
particle-size: 24
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
loop-index: 2
particle-size: 90
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
statement: actions ~= [(0,i)]
particle-size: 16
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
statement: actions ~= [(1,i)]
particle-size: 52
loop-index: 3
particle-size: 90
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
statement: actions ~= [(0,i)]
particle-size: 8
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
statement: actions ~= [(1,i)]
particle-size: 10
loop-index: 4
particle-size: 90
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
statement: actions ~= [(0,i)]
particle-size: 10
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
statement: actions ~= [(1,i)]
particle-size: 4
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 90
particle-size: 90
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 222
particle-size: 222
particle-size: 222
particle-size: 222
particle-size: 222
particle-size: 222
particle-size: 222
particle-size: 222
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: (pkt,port) := this'.__H0.Q_out.takeFront()
particle-size: 24
particle-size: 24
statement: r := this'.front()
particle-size: 24
particle-size: 24
statement: return this'.data[0]
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: this'.popFront()
particle-size: 24
particle-size: 24
statement: this'.data = this'.data[1..this'.size()]
particle-size: 24
particle-size: 24
statement: return this'.data.length
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: return ()
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: return r
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 24
particle-size: 24
particle-size: 24
statement: this'.data = this'.data ~ [x]
particle-size: 24
statement: return ()
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,3));
}
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 52
particle-size: 52
statement: r := this'.front()
particle-size: 52
particle-size: 52
statement: return this'.data[0]
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
statement: this'.popFront()
particle-size: 52
particle-size: 52
statement: this'.data = this'.data[1..this'.size()]
particle-size: 52
particle-size: 52
statement: return this'.data.length
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
statement: return ()
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
statement: return r
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
statement: if port == 1 {
    this'.__H0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,1));
}
statement: this'.__H1.Q_in.pushBack((pkt,1))
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.data = this'.data ~ [x]
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.data = this'.data ~ [x]
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,1));
}
statement: this'.__Controller.Q_in.pushBack((pkt,1))
particle-size: 20
particle-size: 20
particle-size: 20
statement: this'.data = this'.data ~ [x]
particle-size: 20
statement: return ()
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 10
particle-size: 10
statement: r := this'.front()
particle-size: 10
particle-size: 10
statement: return this'.data[0]
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.popFront()
particle-size: 10
particle-size: 10
statement: this'.data = this'.data[1..this'.size()]
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return r
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,3));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,2));
}
statement: this'.__H1.Q_in.pushBack((pkt,2))
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.data = this'.data ~ [x]
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,2));
}
statement: this'.__Controller.Q_in.pushBack((pkt,2))
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.data = this'.data ~ [x]
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: (pkt,port) := this'.__H1.Q_out.takeFront()
particle-size: 4
particle-size: 4
statement: r := this'.front()
particle-size: 4
particle-size: 4
statement: return this'.data[0]
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.popFront()
particle-size: 4
particle-size: 4
statement: this'.data = this'.data[1..this'.size()]
particle-size: 4
particle-size: 4
statement: return this'.data.length
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return r
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this'.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,4));
}
statement: this'.__Controller.Q_in.pushBack((pkt,4))
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.data = this'.data ~ [x]
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 132
particle-size: 132
statement: return this'.data.length
particle-size: 132
particle-size: 132
particle-size: 132
particle-size: 132
statement: this'.__H0.__run()
particle-size: 74
particle-size: 74
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.pushFront((Packet'(),0))
particle-size: 18
particle-size: 18
statement: return this
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.data = [x] ~ this'.data
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.num_sent = (this'.num_sent + 1)
particle-size: 18
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1))
particle-size: 18
particle-size: 18
statement: r := this'.front()
particle-size: 18
particle-size: 18
statement: return this'.data[0]
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.popFront()
particle-size: 18
particle-size: 18
statement: this'.data = this'.data[1..this'.size()]
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return r
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.data = this'.data ~ [x]
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.Q_in.popFront()
particle-size: 56
particle-size: 56
statement: this'.data = this'.data[1..this'.size()]
particle-size: 56
particle-size: 56
statement: return this'.data.length
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: return ()
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: return ()
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 132
particle-size: 132
statement: return this'.data.length
particle-size: 132
particle-size: 132
particle-size: 132
particle-size: 132
statement: this'.__Controller.__run()
particle-size: 24
particle-size: 24
statement: this'.num_packets = (this'.num_packets + 1)
particle-size: 24
statement: if 1 {
    this'.tot_packets = 4;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 2));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 4) {
        observe((this'.Q_in.data[0][1] == 4));
    } else {
        observe(0);
    }
} else {
    this'.tot_packets = 3;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 2));
    } else {
        observe(0);
    }
}
statement: this'.tot_packets = 4
particle-size: 24
statement: if (this'.num_packets == 1) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 2));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 1))
statement: this'.Q_in.popFront()
particle-size: 20
particle-size: 20
statement: this'.data = this'.data[1..this'.size()]
particle-size: 20
particle-size: 20
statement: return this'.data.length
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: return ()
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: return ()
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 128
particle-size: 128
statement: return this'.data.length
particle-size: 128
particle-size: 128
particle-size: 128
particle-size: 128
statement: this'.__S1.__run()
particle-size: 16
particle-size: 16
statement: if (this'.bad_hash == 2) {
    this'.bad_hash = flip((1 / 10));
}
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 16
particle-size: 16
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 32
particle-size: 32
statement: this'.Q_in.dupFront()
particle-size: 16
particle-size: 16
statement: this'.pushFront(this'.front())
particle-size: 16
particle-size: 16
statement: return this'.data[0]
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.data = [x] ~ this'.data
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 16
particle-size: 16
statement: r := this'.front()
particle-size: 16
particle-size: 16
statement: return this'.data[0]
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.popFront()
particle-size: 16
particle-size: 16
statement: this'.data = this'.data[1..this'.size()]
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return r
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.data = this'.data ~ [x]
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: if (((this'.bad_hash == 1) && flip((1 / 3))) || ((this'.bad_hash == 0) && flip((1 / 2)))) {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
} else {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
}
particle-size: 32
particle-size: 32
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 128
particle-size: 128
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 64
particle-size: 64
statement: r := this'.front()
particle-size: 64
particle-size: 64
statement: return this'.data[0]
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: this'.popFront()
particle-size: 64
particle-size: 64
statement: this'.data = this'.data[1..this'.size()]
particle-size: 64
particle-size: 64
statement: return this'.data.length
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: return ()
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: return r
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: this'.data = this'.data ~ [x]
particle-size: 64
statement: return ()
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3))
particle-size: 64
particle-size: 64
statement: r := this'.front()
particle-size: 64
particle-size: 64
statement: return this'.data[0]
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: this'.popFront()
particle-size: 64
particle-size: 64
statement: this'.data = this'.data[1..this'.size()]
particle-size: 64
particle-size: 64
statement: return this'.data.length
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: return ()
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: return r
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: this'.data = this'.data ~ [x]
particle-size: 64
statement: return ()
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: return ()
particle-size: 128
particle-size: 64
particle-size: 64
particle-size: 64
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 176
particle-size: 176
statement: return this'.data.length
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
statement: this'.__S2.__run()
particle-size: 8
particle-size: 8
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 8
particle-size: 8
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 16
particle-size: 16
statement: this'.Q_in.dupFront()
particle-size: 8
particle-size: 8
statement: this'.pushFront(this'.front())
particle-size: 8
particle-size: 8
statement: return this'.data[0]
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.data = [x] ~ this'.data
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 8
particle-size: 8
statement: r := this'.front()
particle-size: 8
particle-size: 8
statement: return this'.data[0]
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.popFront()
particle-size: 8
particle-size: 8
statement: this'.data = this'.data[1..this'.size()]
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return r
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.data = this'.data ~ [x]
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 16
particle-size: 16
statement: r := this'.front()
particle-size: 16
particle-size: 16
statement: return this'.data[0]
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.popFront()
particle-size: 16
particle-size: 16
statement: this'.data = this'.data[1..this'.size()]
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return r
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.data = this'.data ~ [x]
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 184
particle-size: 184
statement: return this'.data.length
particle-size: 184
particle-size: 184
particle-size: 184
particle-size: 184
statement: this'.__H1.__run()
particle-size: 10
particle-size: 10
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 10
particle-size: 10
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 20
particle-size: 20
statement: this'.Q_in.dupFront()
particle-size: 10
particle-size: 10
statement: this'.pushFront(this'.front())
particle-size: 10
particle-size: 10
statement: return this'.data[0]
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.data = [x] ~ this'.data
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 10
particle-size: 10
statement: r := this'.front()
particle-size: 10
particle-size: 10
statement: return this'.data[0]
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.popFront()
particle-size: 10
particle-size: 10
statement: this'.data = this'.data[1..this'.size()]
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return r
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.data = this'.data ~ [x]
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.Q_in.popFront()
particle-size: 20
particle-size: 20
statement: this'.data = this'.data[1..this'.size()]
particle-size: 20
particle-size: 20
statement: return this'.data.length
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: return ()
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: return ()
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: return ()
particle-size: 284
particle-size: 284
particle-size: 284
particle-size: 166
repetition: 7
statement: __d.__step()
particle-size: 166
particle-size: 166
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 166
particle-size: 166
statement: return this'.data.length
particle-size: 166
particle-size: 166
particle-size: 166
particle-size: 166
particle-size: 166
particle-size: 166
statement: return this'.data.length
particle-size: 166
particle-size: 166
particle-size: 166
particle-size: 166
particle-size: 166
particle-size: 166
statement: return this'.data.length
particle-size: 166
particle-size: 166
particle-size: 166
particle-size: 166
particle-size: 166
particle-size: 166
statement: return this'.data.length
particle-size: 166
particle-size: 166
particle-size: 166
particle-size: 166
particle-size: 166
particle-size: 166
statement: return this'.data.length
particle-size: 166
particle-size: 166
particle-size: 166
particle-size: 166
particle-size: 166
particle-size: 166
statement: return this'.data.length
particle-size: 166
particle-size: 166
particle-size: 166
particle-size: 166
particle-size: 166
particle-size: 166
statement: return this'.data.length
particle-size: 166
particle-size: 166
particle-size: 166
particle-size: 166
particle-size: 166
particle-size: 166
statement: return this'.data.length
particle-size: 166
particle-size: 166
particle-size: 166
particle-size: 166
particle-size: 166
particle-size: 166
statement: return this'.data.length
particle-size: 166
particle-size: 166
particle-size: 166
particle-size: 166
particle-size: 166
particle-size: 166
statement: return this'.data.length
particle-size: 166
particle-size: 166
particle-size: 166
particle-size: 166
statement: (action,node) := this'.scheduler()
particle-size: 166
particle-size: 166
statement: actions := ([]: (R × R)[])
particle-size: 166
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 166
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 166
particle-size: 166
statement: return this'.data.length
particle-size: 166
particle-size: 166
particle-size: 166
statement: actions ~= [(0,i)]
particle-size: 110
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 166
particle-size: 166
statement: return this'.data.length
particle-size: 166
particle-size: 166
particle-size: 166
statement: actions ~= [(1,i)]
particle-size: 34
loop-index: 1
particle-size: 166
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 166
particle-size: 166
statement: return this'.data.length
particle-size: 166
particle-size: 166
particle-size: 166
statement: actions ~= [(0,i)]
particle-size: 64
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 166
particle-size: 166
statement: return this'.data.length
particle-size: 166
particle-size: 166
particle-size: 166
loop-index: 2
particle-size: 166
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 166
particle-size: 166
statement: return this'.data.length
particle-size: 166
particle-size: 166
particle-size: 166
statement: actions ~= [(0,i)]
particle-size: 24
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 166
particle-size: 166
statement: return this'.data.length
particle-size: 166
particle-size: 166
particle-size: 166
statement: actions ~= [(1,i)]
particle-size: 100
loop-index: 3
particle-size: 166
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 166
particle-size: 166
statement: return this'.data.length
particle-size: 166
particle-size: 166
particle-size: 166
statement: actions ~= [(0,i)]
particle-size: 20
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 166
particle-size: 166
statement: return this'.data.length
particle-size: 166
particle-size: 166
particle-size: 166
statement: actions ~= [(1,i)]
particle-size: 20
loop-index: 4
particle-size: 166
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 166
particle-size: 166
statement: return this'.data.length
particle-size: 166
particle-size: 166
particle-size: 166
statement: actions ~= [(0,i)]
particle-size: 26
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 166
particle-size: 166
statement: return this'.data.length
particle-size: 166
particle-size: 166
particle-size: 166
statement: actions ~= [(1,i)]
particle-size: 10
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 166
particle-size: 166
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 408
particle-size: 408
particle-size: 408
particle-size: 408
particle-size: 408
particle-size: 408
particle-size: 408
particle-size: 408
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 164
particle-size: 164
statement: return this'.data.length
particle-size: 164
particle-size: 164
particle-size: 164
particle-size: 164
statement: (pkt,port) := this'.__H0.Q_out.takeFront()
particle-size: 34
particle-size: 34
statement: r := this'.front()
particle-size: 34
particle-size: 34
statement: return this'.data[0]
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: this'.popFront()
particle-size: 34
particle-size: 34
statement: this'.data = this'.data[1..this'.size()]
particle-size: 34
particle-size: 34
statement: return this'.data.length
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: return ()
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: return r
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 34
particle-size: 34
particle-size: 34
statement: this'.data = this'.data ~ [x]
particle-size: 34
statement: return ()
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,3));
}
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 164
particle-size: 164
statement: return this'.data.length
particle-size: 164
particle-size: 164
particle-size: 164
particle-size: 164
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 164
particle-size: 164
statement: return this'.data.length
particle-size: 164
particle-size: 164
particle-size: 164
particle-size: 164
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 100
particle-size: 100
statement: r := this'.front()
particle-size: 100
particle-size: 100
statement: return this'.data[0]
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: this'.popFront()
particle-size: 100
particle-size: 100
statement: this'.data = this'.data[1..this'.size()]
particle-size: 100
particle-size: 100
statement: return this'.data.length
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: return ()
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: return r
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: if port == 1 {
    this'.__H0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,1));
}
statement: this'.__H1.Q_in.pushBack((pkt,1))
particle-size: 34
particle-size: 34
particle-size: 34
statement: this'.data = this'.data ~ [x]
particle-size: 34
statement: return ()
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 34
particle-size: 34
particle-size: 34
statement: this'.data = this'.data ~ [x]
particle-size: 34
statement: return ()
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,1));
}
statement: this'.__Controller.Q_in.pushBack((pkt,1))
particle-size: 32
particle-size: 32
particle-size: 32
statement: this'.data = this'.data ~ [x]
particle-size: 32
statement: return ()
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 164
particle-size: 164
statement: return this'.data.length
particle-size: 164
particle-size: 164
particle-size: 164
particle-size: 164
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 20
particle-size: 20
statement: r := this'.front()
particle-size: 20
particle-size: 20
statement: return this'.data[0]
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: this'.popFront()
particle-size: 20
particle-size: 20
statement: this'.data = this'.data[1..this'.size()]
particle-size: 20
particle-size: 20
statement: return this'.data.length
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: return ()
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: return r
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,3));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,2));
}
statement: this'.__H1.Q_in.pushBack((pkt,2))
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.data = this'.data ~ [x]
particle-size: 12
statement: return ()
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,2));
}
statement: this'.__Controller.Q_in.pushBack((pkt,2))
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.data = this'.data ~ [x]
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 164
particle-size: 164
statement: return this'.data.length
particle-size: 164
particle-size: 164
particle-size: 164
particle-size: 164
statement: (pkt,port) := this'.__H1.Q_out.takeFront()
particle-size: 10
particle-size: 10
statement: r := this'.front()
particle-size: 10
particle-size: 10
statement: return this'.data[0]
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.popFront()
particle-size: 10
particle-size: 10
statement: this'.data = this'.data[1..this'.size()]
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return r
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this'.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,4));
}
statement: this'.__Controller.Q_in.pushBack((pkt,4))
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.data = this'.data ~ [x]
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 244
particle-size: 244
statement: return this'.data.length
particle-size: 244
particle-size: 244
particle-size: 244
particle-size: 244
statement: this'.__H0.__run()
particle-size: 110
particle-size: 110
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.pushFront((Packet'(),0))
particle-size: 20
particle-size: 20
statement: return this
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: this'.data = [x] ~ this'.data
particle-size: 20
statement: return ()
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: this'.num_sent = (this'.num_sent + 1)
particle-size: 20
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1))
particle-size: 20
particle-size: 20
statement: r := this'.front()
particle-size: 20
particle-size: 20
statement: return this'.data[0]
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: this'.popFront()
particle-size: 20
particle-size: 20
statement: this'.data = this'.data[1..this'.size()]
particle-size: 20
particle-size: 20
statement: return this'.data.length
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: return ()
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: return r
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: this'.data = this'.data ~ [x]
particle-size: 20
statement: return ()
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: this'.Q_in.popFront()
particle-size: 90
particle-size: 90
statement: this'.data = this'.data[1..this'.size()]
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: return ()
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: return ()
particle-size: 110
particle-size: 110
particle-size: 110
particle-size: 110
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 244
particle-size: 244
statement: return this'.data.length
particle-size: 244
particle-size: 244
particle-size: 244
particle-size: 244
statement: this'.__Controller.__run()
particle-size: 64
particle-size: 64
statement: this'.num_packets = (this'.num_packets + 1)
particle-size: 64
statement: if 1 {
    this'.tot_packets = 4;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 2));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 4) {
        observe((this'.Q_in.data[0][1] == 4));
    } else {
        observe(0);
    }
} else {
    this'.tot_packets = 3;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 2));
    } else {
        observe(0);
    }
}
statement: this'.tot_packets = 4
particle-size: 64
statement: if (this'.num_packets == 1) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 2));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 1))
statement: this'.Q_in.popFront()
particle-size: 58
particle-size: 58
statement: this'.data = this'.data[1..this'.size()]
particle-size: 58
particle-size: 58
statement: return this'.data.length
particle-size: 58
particle-size: 58
particle-size: 58
particle-size: 58
particle-size: 58
statement: return ()
particle-size: 58
particle-size: 58
particle-size: 58
particle-size: 58
statement: return ()
particle-size: 58
particle-size: 58
particle-size: 58
particle-size: 58
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 238
particle-size: 238
statement: return this'.data.length
particle-size: 238
particle-size: 238
particle-size: 238
particle-size: 238
statement: this'.__S1.__run()
particle-size: 24
particle-size: 24
statement: if (this'.bad_hash == 2) {
    this'.bad_hash = flip((1 / 10));
}
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 24
particle-size: 24
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 48
particle-size: 48
statement: this'.Q_in.dupFront()
particle-size: 24
particle-size: 24
statement: this'.pushFront(this'.front())
particle-size: 24
particle-size: 24
statement: return this'.data[0]
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: this'.data = [x] ~ this'.data
particle-size: 24
statement: return ()
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: return ()
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 24
particle-size: 24
statement: r := this'.front()
particle-size: 24
particle-size: 24
statement: return this'.data[0]
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: this'.popFront()
particle-size: 24
particle-size: 24
statement: this'.data = this'.data[1..this'.size()]
particle-size: 24
particle-size: 24
statement: return this'.data.length
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: return ()
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: return r
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: this'.data = this'.data ~ [x]
particle-size: 24
statement: return ()
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: if (((this'.bad_hash == 1) && flip((1 / 3))) || ((this'.bad_hash == 0) && flip((1 / 2)))) {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
} else {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
}
particle-size: 48
particle-size: 48
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 192
particle-size: 192
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 96
particle-size: 96
statement: r := this'.front()
particle-size: 96
particle-size: 96
statement: return this'.data[0]
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: this'.popFront()
particle-size: 96
particle-size: 96
statement: this'.data = this'.data[1..this'.size()]
particle-size: 96
particle-size: 96
statement: return this'.data.length
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: return ()
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: return r
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: this'.data = this'.data ~ [x]
particle-size: 96
statement: return ()
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3))
particle-size: 96
particle-size: 96
statement: r := this'.front()
particle-size: 96
particle-size: 96
statement: return this'.data[0]
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: this'.popFront()
particle-size: 96
particle-size: 96
statement: this'.data = this'.data[1..this'.size()]
particle-size: 96
particle-size: 96
statement: return this'.data.length
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: return ()
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: return r
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: this'.data = this'.data ~ [x]
particle-size: 96
statement: return ()
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: return ()
particle-size: 192
particle-size: 96
particle-size: 96
particle-size: 96
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 310
particle-size: 310
statement: return this'.data.length
particle-size: 310
particle-size: 310
particle-size: 310
particle-size: 310
statement: this'.__S2.__run()
particle-size: 20
particle-size: 20
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 20
particle-size: 20
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 40
particle-size: 40
statement: this'.Q_in.dupFront()
particle-size: 20
particle-size: 20
statement: this'.pushFront(this'.front())
particle-size: 20
particle-size: 20
statement: return this'.data[0]
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: this'.data = [x] ~ this'.data
particle-size: 20
statement: return ()
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: return ()
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 20
particle-size: 20
statement: r := this'.front()
particle-size: 20
particle-size: 20
statement: return this'.data[0]
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: this'.popFront()
particle-size: 20
particle-size: 20
statement: this'.data = this'.data[1..this'.size()]
particle-size: 20
particle-size: 20
statement: return this'.data.length
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: return ()
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: return r
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: this'.data = this'.data ~ [x]
particle-size: 20
statement: return ()
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 40
particle-size: 40
statement: r := this'.front()
particle-size: 40
particle-size: 40
statement: return this'.data[0]
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: this'.popFront()
particle-size: 40
particle-size: 40
statement: this'.data = this'.data[1..this'.size()]
particle-size: 40
particle-size: 40
statement: return this'.data.length
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: return ()
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: return r
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: this'.data = this'.data ~ [x]
particle-size: 40
statement: return ()
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: return ()
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 330
particle-size: 330
statement: return this'.data.length
particle-size: 330
particle-size: 330
particle-size: 330
particle-size: 330
statement: this'.__H1.__run()
particle-size: 26
particle-size: 26
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 26
particle-size: 26
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 52
particle-size: 52
statement: this'.Q_in.dupFront()
particle-size: 26
particle-size: 26
statement: this'.pushFront(this'.front())
particle-size: 26
particle-size: 26
statement: return this'.data[0]
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: this'.data = [x] ~ this'.data
particle-size: 26
statement: return ()
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: return ()
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 26
particle-size: 26
statement: r := this'.front()
particle-size: 26
particle-size: 26
statement: return this'.data[0]
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: this'.popFront()
particle-size: 26
particle-size: 26
statement: this'.data = this'.data[1..this'.size()]
particle-size: 26
particle-size: 26
statement: return this'.data.length
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: return ()
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: return r
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: this'.data = this'.data ~ [x]
particle-size: 26
statement: return ()
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: this'.Q_in.popFront()
particle-size: 52
particle-size: 52
statement: this'.data = this'.data[1..this'.size()]
particle-size: 52
particle-size: 52
statement: return this'.data.length
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
statement: return ()
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
statement: return ()
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
statement: return ()
particle-size: 520
particle-size: 520
particle-size: 520
particle-size: 256
repetition: 8
statement: __d.__step()
particle-size: 256
particle-size: 256
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 256
particle-size: 256
statement: return this'.data.length
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
statement: return this'.data.length
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
statement: return this'.data.length
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
statement: return this'.data.length
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
statement: return this'.data.length
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
statement: return this'.data.length
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
statement: return this'.data.length
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
statement: return this'.data.length
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
statement: return this'.data.length
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
statement: return this'.data.length
particle-size: 256
particle-size: 256
particle-size: 256
particle-size: 256
statement: (action,node) := this'.scheduler()
particle-size: 256
particle-size: 256
statement: actions := ([]: (R × R)[])
particle-size: 256
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 256
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 256
particle-size: 256
statement: return this'.data.length
particle-size: 256
particle-size: 256
particle-size: 256
statement: actions ~= [(0,i)]
particle-size: 166
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 256
particle-size: 256
statement: return this'.data.length
particle-size: 256
particle-size: 256
particle-size: 256
statement: actions ~= [(1,i)]
particle-size: 38
loop-index: 1
particle-size: 256
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 256
particle-size: 256
statement: return this'.data.length
particle-size: 256
particle-size: 256
particle-size: 256
statement: actions ~= [(0,i)]
particle-size: 108
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 256
particle-size: 256
statement: return this'.data.length
particle-size: 256
particle-size: 256
particle-size: 256
loop-index: 2
particle-size: 256
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 256
particle-size: 256
statement: return this'.data.length
particle-size: 256
particle-size: 256
particle-size: 256
statement: actions ~= [(0,i)]
particle-size: 34
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 256
particle-size: 256
statement: return this'.data.length
particle-size: 256
particle-size: 256
particle-size: 256
statement: actions ~= [(1,i)]
particle-size: 164
loop-index: 3
particle-size: 256
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 256
particle-size: 256
statement: return this'.data.length
particle-size: 256
particle-size: 256
particle-size: 256
statement: actions ~= [(0,i)]
particle-size: 34
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 256
particle-size: 256
statement: return this'.data.length
particle-size: 256
particle-size: 256
particle-size: 256
statement: actions ~= [(1,i)]
particle-size: 48
loop-index: 4
particle-size: 256
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 256
particle-size: 256
statement: return this'.data.length
particle-size: 256
particle-size: 256
particle-size: 256
statement: actions ~= [(0,i)]
particle-size: 46
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 256
particle-size: 256
statement: return this'.data.length
particle-size: 256
particle-size: 256
particle-size: 256
statement: actions ~= [(1,i)]
particle-size: 26
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 256
particle-size: 256
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 664
particle-size: 664
particle-size: 664
particle-size: 664
particle-size: 664
particle-size: 664
particle-size: 664
particle-size: 664
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 276
particle-size: 276
statement: return this'.data.length
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
statement: (pkt,port) := this'.__H0.Q_out.takeFront()
particle-size: 38
particle-size: 38
statement: r := this'.front()
particle-size: 38
particle-size: 38
statement: return this'.data[0]
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: this'.popFront()
particle-size: 38
particle-size: 38
statement: this'.data = this'.data[1..this'.size()]
particle-size: 38
particle-size: 38
statement: return this'.data.length
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: return ()
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: return r
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 38
particle-size: 38
particle-size: 38
statement: this'.data = this'.data ~ [x]
particle-size: 38
statement: return ()
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,3));
}
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 276
particle-size: 276
statement: return this'.data.length
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 276
particle-size: 276
statement: return this'.data.length
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 164
particle-size: 164
statement: r := this'.front()
particle-size: 164
particle-size: 164
statement: return this'.data[0]
particle-size: 164
particle-size: 164
particle-size: 164
particle-size: 164
particle-size: 164
statement: this'.popFront()
particle-size: 164
particle-size: 164
statement: this'.data = this'.data[1..this'.size()]
particle-size: 164
particle-size: 164
statement: return this'.data.length
particle-size: 164
particle-size: 164
particle-size: 164
particle-size: 164
particle-size: 164
statement: return ()
particle-size: 164
particle-size: 164
particle-size: 164
particle-size: 164
statement: return r
particle-size: 164
particle-size: 164
particle-size: 164
particle-size: 164
particle-size: 164
particle-size: 164
statement: if port == 1 {
    this'.__H0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,1));
}
statement: this'.__H1.Q_in.pushBack((pkt,1))
particle-size: 50
particle-size: 50
particle-size: 50
statement: this'.data = this'.data ~ [x]
particle-size: 50
statement: return ()
particle-size: 50
particle-size: 50
particle-size: 50
particle-size: 50
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 50
particle-size: 50
particle-size: 50
statement: this'.data = this'.data ~ [x]
particle-size: 50
statement: return ()
particle-size: 50
particle-size: 50
particle-size: 50
particle-size: 50
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,1));
}
statement: this'.__Controller.Q_in.pushBack((pkt,1))
particle-size: 64
particle-size: 64
particle-size: 64
statement: this'.data = this'.data ~ [x]
particle-size: 64
statement: return ()
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 276
particle-size: 276
statement: return this'.data.length
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 48
particle-size: 48
statement: r := this'.front()
particle-size: 48
particle-size: 48
statement: return this'.data[0]
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: this'.popFront()
particle-size: 48
particle-size: 48
statement: this'.data = this'.data[1..this'.size()]
particle-size: 48
particle-size: 48
statement: return this'.data.length
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: return ()
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: return r
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,3));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,2));
}
statement: this'.__H1.Q_in.pushBack((pkt,2))
particle-size: 28
particle-size: 28
particle-size: 28
statement: this'.data = this'.data ~ [x]
particle-size: 28
statement: return ()
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,2));
}
statement: this'.__Controller.Q_in.pushBack((pkt,2))
particle-size: 20
particle-size: 20
particle-size: 20
statement: this'.data = this'.data ~ [x]
particle-size: 20
statement: return ()
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 276
particle-size: 276
statement: return this'.data.length
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
statement: (pkt,port) := this'.__H1.Q_out.takeFront()
particle-size: 26
particle-size: 26
statement: r := this'.front()
particle-size: 26
particle-size: 26
statement: return this'.data[0]
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: this'.popFront()
particle-size: 26
particle-size: 26
statement: this'.data = this'.data[1..this'.size()]
particle-size: 26
particle-size: 26
statement: return this'.data.length
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: return ()
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: return r
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this'.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,4));
}
statement: this'.__Controller.Q_in.pushBack((pkt,4))
particle-size: 26
particle-size: 26
particle-size: 26
statement: this'.data = this'.data ~ [x]
particle-size: 26
statement: return ()
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 388
particle-size: 388
statement: return this'.data.length
particle-size: 388
particle-size: 388
particle-size: 388
particle-size: 388
statement: this'.__H0.__run()
particle-size: 166
particle-size: 166
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.pushFront((Packet'(),0))
particle-size: 18
particle-size: 18
statement: return this
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.data = [x] ~ this'.data
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.num_sent = (this'.num_sent + 1)
particle-size: 18
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1))
particle-size: 18
particle-size: 18
statement: r := this'.front()
particle-size: 18
particle-size: 18
statement: return this'.data[0]
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.popFront()
particle-size: 18
particle-size: 18
statement: this'.data = this'.data[1..this'.size()]
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return r
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.data = this'.data ~ [x]
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.Q_in.popFront()
particle-size: 148
particle-size: 148
statement: this'.data = this'.data[1..this'.size()]
particle-size: 148
particle-size: 148
statement: return this'.data.length
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
statement: return ()
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
statement: return ()
particle-size: 166
particle-size: 166
particle-size: 166
particle-size: 166
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 388
particle-size: 388
statement: return this'.data.length
particle-size: 388
particle-size: 388
particle-size: 388
particle-size: 388
statement: this'.__Controller.__run()
particle-size: 108
particle-size: 108
statement: this'.num_packets = (this'.num_packets + 1)
particle-size: 108
statement: if 1 {
    this'.tot_packets = 4;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 2));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 4) {
        observe((this'.Q_in.data[0][1] == 4));
    } else {
        observe(0);
    }
} else {
    this'.tot_packets = 3;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 2));
    } else {
        observe(0);
    }
}
statement: this'.tot_packets = 4
particle-size: 108
statement: if (this'.num_packets == 1) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 2));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 1))
statement: if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 2));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 2))
statement: this'.Q_in.popFront()
particle-size: 90
particle-size: 90
statement: this'.data = this'.data[1..this'.size()]
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: return ()
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: return ()
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 370
particle-size: 370
statement: return this'.data.length
particle-size: 370
particle-size: 370
particle-size: 370
particle-size: 370
statement: this'.__S1.__run()
particle-size: 34
particle-size: 34
statement: if (this'.bad_hash == 2) {
    this'.bad_hash = flip((1 / 10));
}
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 34
particle-size: 34
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 68
particle-size: 68
statement: this'.Q_in.dupFront()
particle-size: 34
particle-size: 34
statement: this'.pushFront(this'.front())
particle-size: 34
particle-size: 34
statement: return this'.data[0]
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: this'.data = [x] ~ this'.data
particle-size: 34
statement: return ()
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: return ()
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 34
particle-size: 34
statement: r := this'.front()
particle-size: 34
particle-size: 34
statement: return this'.data[0]
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: this'.popFront()
particle-size: 34
particle-size: 34
statement: this'.data = this'.data[1..this'.size()]
particle-size: 34
particle-size: 34
statement: return this'.data.length
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: return ()
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: return r
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: this'.data = this'.data ~ [x]
particle-size: 34
statement: return ()
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: if (((this'.bad_hash == 1) && flip((1 / 3))) || ((this'.bad_hash == 0) && flip((1 / 2)))) {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
} else {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
}
particle-size: 68
particle-size: 68
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 272
particle-size: 272
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 136
particle-size: 136
statement: r := this'.front()
particle-size: 136
particle-size: 136
statement: return this'.data[0]
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
statement: this'.popFront()
particle-size: 136
particle-size: 136
statement: this'.data = this'.data[1..this'.size()]
particle-size: 136
particle-size: 136
statement: return this'.data.length
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
statement: return ()
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
statement: return r
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
statement: this'.data = this'.data ~ [x]
particle-size: 136
statement: return ()
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3))
particle-size: 136
particle-size: 136
statement: r := this'.front()
particle-size: 136
particle-size: 136
statement: return this'.data[0]
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
statement: this'.popFront()
particle-size: 136
particle-size: 136
statement: this'.data = this'.data[1..this'.size()]
particle-size: 136
particle-size: 136
statement: return this'.data.length
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
statement: return ()
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
statement: return r
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
statement: this'.data = this'.data ~ [x]
particle-size: 136
statement: return ()
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
statement: return ()
particle-size: 272
particle-size: 136
particle-size: 136
particle-size: 136
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 472
particle-size: 472
statement: return this'.data.length
particle-size: 472
particle-size: 472
particle-size: 472
particle-size: 472
statement: this'.__S2.__run()
particle-size: 34
particle-size: 34
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 34
particle-size: 34
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 68
particle-size: 68
statement: this'.Q_in.dupFront()
particle-size: 34
particle-size: 34
statement: this'.pushFront(this'.front())
particle-size: 34
particle-size: 34
statement: return this'.data[0]
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: this'.data = [x] ~ this'.data
particle-size: 34
statement: return ()
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: return ()
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 34
particle-size: 34
statement: r := this'.front()
particle-size: 34
particle-size: 34
statement: return this'.data[0]
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: this'.popFront()
particle-size: 34
particle-size: 34
statement: this'.data = this'.data[1..this'.size()]
particle-size: 34
particle-size: 34
statement: return this'.data.length
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: return ()
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: return r
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: this'.data = this'.data ~ [x]
particle-size: 34
statement: return ()
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 68
particle-size: 68
statement: r := this'.front()
particle-size: 68
particle-size: 68
statement: return this'.data[0]
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
statement: this'.popFront()
particle-size: 68
particle-size: 68
statement: this'.data = this'.data[1..this'.size()]
particle-size: 68
particle-size: 68
statement: return this'.data.length
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
statement: return ()
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
statement: return r
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
statement: this'.data = this'.data ~ [x]
particle-size: 68
statement: return ()
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
statement: return ()
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 506
particle-size: 506
statement: return this'.data.length
particle-size: 506
particle-size: 506
particle-size: 506
particle-size: 506
statement: this'.__H1.__run()
particle-size: 46
particle-size: 46
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 46
particle-size: 46
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 92
particle-size: 92
statement: this'.Q_in.dupFront()
particle-size: 46
particle-size: 46
statement: this'.pushFront(this'.front())
particle-size: 46
particle-size: 46
statement: return this'.data[0]
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
statement: this'.data = [x] ~ this'.data
particle-size: 46
statement: return ()
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
statement: return ()
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 46
particle-size: 46
statement: r := this'.front()
particle-size: 46
particle-size: 46
statement: return this'.data[0]
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
statement: this'.popFront()
particle-size: 46
particle-size: 46
statement: this'.data = this'.data[1..this'.size()]
particle-size: 46
particle-size: 46
statement: return this'.data.length
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
statement: return ()
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
statement: return r
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
statement: this'.data = this'.data ~ [x]
particle-size: 46
statement: return ()
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
statement: this'.Q_in.popFront()
particle-size: 92
particle-size: 92
statement: this'.data = this'.data[1..this'.size()]
particle-size: 92
particle-size: 92
statement: return this'.data.length
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: return ()
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: return ()
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: return ()
particle-size: 828
particle-size: 828
particle-size: 828
particle-size: 340
repetition: 9
statement: __d.__step()
particle-size: 340
particle-size: 340
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 340
particle-size: 340
statement: return this'.data.length
particle-size: 340
particle-size: 340
particle-size: 340
particle-size: 340
particle-size: 340
particle-size: 340
statement: return this'.data.length
particle-size: 340
particle-size: 340
particle-size: 340
particle-size: 340
particle-size: 340
particle-size: 340
statement: return this'.data.length
particle-size: 340
particle-size: 340
particle-size: 340
particle-size: 340
particle-size: 340
particle-size: 340
statement: return this'.data.length
particle-size: 340
particle-size: 340
particle-size: 340
particle-size: 340
particle-size: 340
particle-size: 340
statement: return this'.data.length
particle-size: 340
particle-size: 340
particle-size: 340
particle-size: 340
particle-size: 340
particle-size: 340
statement: return this'.data.length
particle-size: 340
particle-size: 340
particle-size: 340
particle-size: 340
particle-size: 340
particle-size: 340
statement: return this'.data.length
particle-size: 340
particle-size: 340
particle-size: 340
particle-size: 340
particle-size: 340
particle-size: 340
statement: return this'.data.length
particle-size: 340
particle-size: 340
particle-size: 340
particle-size: 340
particle-size: 340
particle-size: 340
statement: return this'.data.length
particle-size: 340
particle-size: 340
particle-size: 340
particle-size: 340
particle-size: 340
particle-size: 340
statement: return this'.data.length
particle-size: 340
particle-size: 340
particle-size: 340
particle-size: 340
statement: (action,node) := this'.scheduler()
particle-size: 340
particle-size: 340
statement: actions := ([]: (R × R)[])
particle-size: 340
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 340
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 340
particle-size: 340
statement: return this'.data.length
particle-size: 340
particle-size: 340
particle-size: 340
statement: actions ~= [(0,i)]
particle-size: 192
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 340
particle-size: 340
statement: return this'.data.length
particle-size: 340
particle-size: 340
particle-size: 340
statement: actions ~= [(1,i)]
particle-size: 38
loop-index: 1
particle-size: 340
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 340
particle-size: 340
statement: return this'.data.length
particle-size: 340
particle-size: 340
particle-size: 340
statement: actions ~= [(0,i)]
particle-size: 164
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 340
particle-size: 340
statement: return this'.data.length
particle-size: 340
particle-size: 340
particle-size: 340
loop-index: 2
particle-size: 340
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 340
particle-size: 340
statement: return this'.data.length
particle-size: 340
particle-size: 340
particle-size: 340
statement: actions ~= [(0,i)]
particle-size: 38
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 340
particle-size: 340
statement: return this'.data.length
particle-size: 340
particle-size: 340
particle-size: 340
statement: actions ~= [(1,i)]
particle-size: 220
loop-index: 3
particle-size: 340
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 340
particle-size: 340
statement: return this'.data.length
particle-size: 340
particle-size: 340
particle-size: 340
statement: actions ~= [(0,i)]
particle-size: 46
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 340
particle-size: 340
statement: return this'.data.length
particle-size: 340
particle-size: 340
particle-size: 340
statement: actions ~= [(1,i)]
particle-size: 90
loop-index: 4
particle-size: 340
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 340
particle-size: 340
statement: return this'.data.length
particle-size: 340
particle-size: 340
particle-size: 340
statement: actions ~= [(0,i)]
particle-size: 74
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 340
particle-size: 340
statement: return this'.data.length
particle-size: 340
particle-size: 340
particle-size: 340
statement: actions ~= [(1,i)]
particle-size: 46
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 340
particle-size: 340
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 908
particle-size: 908
particle-size: 908
particle-size: 908
particle-size: 908
particle-size: 908
particle-size: 908
particle-size: 908
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 394
particle-size: 394
statement: return this'.data.length
particle-size: 394
particle-size: 394
particle-size: 394
particle-size: 394
statement: (pkt,port) := this'.__H0.Q_out.takeFront()
particle-size: 38
particle-size: 38
statement: r := this'.front()
particle-size: 38
particle-size: 38
statement: return this'.data[0]
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: this'.popFront()
particle-size: 38
particle-size: 38
statement: this'.data = this'.data[1..this'.size()]
particle-size: 38
particle-size: 38
statement: return this'.data.length
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: return ()
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: return r
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 38
particle-size: 38
particle-size: 38
statement: this'.data = this'.data ~ [x]
particle-size: 38
statement: return ()
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,3));
}
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 394
particle-size: 394
statement: return this'.data.length
particle-size: 394
particle-size: 394
particle-size: 394
particle-size: 394
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 394
particle-size: 394
statement: return this'.data.length
particle-size: 394
particle-size: 394
particle-size: 394
particle-size: 394
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 220
particle-size: 220
statement: r := this'.front()
particle-size: 220
particle-size: 220
statement: return this'.data[0]
particle-size: 220
particle-size: 220
particle-size: 220
particle-size: 220
particle-size: 220
statement: this'.popFront()
particle-size: 220
particle-size: 220
statement: this'.data = this'.data[1..this'.size()]
particle-size: 220
particle-size: 220
statement: return this'.data.length
particle-size: 220
particle-size: 220
particle-size: 220
particle-size: 220
particle-size: 220
statement: return ()
particle-size: 220
particle-size: 220
particle-size: 220
particle-size: 220
statement: return r
particle-size: 220
particle-size: 220
particle-size: 220
particle-size: 220
particle-size: 220
particle-size: 220
statement: if port == 1 {
    this'.__H0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,1));
}
statement: this'.__H1.Q_in.pushBack((pkt,1))
particle-size: 50
particle-size: 50
particle-size: 50
statement: this'.data = this'.data ~ [x]
particle-size: 50
statement: return ()
particle-size: 50
particle-size: 50
particle-size: 50
particle-size: 50
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 50
particle-size: 50
particle-size: 50
statement: this'.data = this'.data ~ [x]
particle-size: 50
statement: return ()
particle-size: 50
particle-size: 50
particle-size: 50
particle-size: 50
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,1));
}
statement: this'.__Controller.Q_in.pushBack((pkt,1))
particle-size: 120
particle-size: 120
particle-size: 120
statement: this'.data = this'.data ~ [x]
particle-size: 120
statement: return ()
particle-size: 120
particle-size: 120
particle-size: 120
particle-size: 120
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 394
particle-size: 394
statement: return this'.data.length
particle-size: 394
particle-size: 394
particle-size: 394
particle-size: 394
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 90
particle-size: 90
statement: r := this'.front()
particle-size: 90
particle-size: 90
statement: return this'.data[0]
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: this'.popFront()
particle-size: 90
particle-size: 90
statement: this'.data = this'.data[1..this'.size()]
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: return ()
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: return r
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,3));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,2));
}
statement: this'.__H1.Q_in.pushBack((pkt,2))
particle-size: 56
particle-size: 56
particle-size: 56
statement: this'.data = this'.data ~ [x]
particle-size: 56
statement: return ()
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,2));
}
statement: this'.__Controller.Q_in.pushBack((pkt,2))
particle-size: 34
particle-size: 34
particle-size: 34
statement: this'.data = this'.data ~ [x]
particle-size: 34
statement: return ()
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 394
particle-size: 394
statement: return this'.data.length
particle-size: 394
particle-size: 394
particle-size: 394
particle-size: 394
statement: (pkt,port) := this'.__H1.Q_out.takeFront()
particle-size: 46
particle-size: 46
statement: r := this'.front()
particle-size: 46
particle-size: 46
statement: return this'.data[0]
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
statement: this'.popFront()
particle-size: 46
particle-size: 46
statement: this'.data = this'.data[1..this'.size()]
particle-size: 46
particle-size: 46
statement: return this'.data.length
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
statement: return ()
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
statement: return r
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this'.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,4));
}
statement: this'.__Controller.Q_in.pushBack((pkt,4))
particle-size: 46
particle-size: 46
particle-size: 46
statement: this'.data = this'.data ~ [x]
particle-size: 46
statement: return ()
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 514
particle-size: 514
statement: return this'.data.length
particle-size: 514
particle-size: 514
particle-size: 514
particle-size: 514
statement: this'.__H0.__run()
particle-size: 192
particle-size: 192
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.pushFront((Packet'(),0))
particle-size: 16
particle-size: 16
statement: return this
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.data = [x] ~ this'.data
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.num_sent = (this'.num_sent + 1)
particle-size: 16
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1))
particle-size: 16
particle-size: 16
statement: r := this'.front()
particle-size: 16
particle-size: 16
statement: return this'.data[0]
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.popFront()
particle-size: 16
particle-size: 16
statement: this'.data = this'.data[1..this'.size()]
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return r
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.data = this'.data ~ [x]
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.Q_in.popFront()
particle-size: 176
particle-size: 176
statement: this'.data = this'.data[1..this'.size()]
particle-size: 176
particle-size: 176
statement: return this'.data.length
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
statement: return ()
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
statement: return ()
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 514
particle-size: 514
statement: return this'.data.length
particle-size: 514
particle-size: 514
particle-size: 514
particle-size: 514
statement: this'.__Controller.__run()
particle-size: 164
particle-size: 164
statement: this'.num_packets = (this'.num_packets + 1)
particle-size: 164
statement: if 1 {
    this'.tot_packets = 4;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 2));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 4) {
        observe((this'.Q_in.data[0][1] == 4));
    } else {
        observe(0);
    }
} else {
    this'.tot_packets = 3;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 2));
    } else {
        observe(0);
    }
}
statement: this'.tot_packets = 4
particle-size: 164
statement: if (this'.num_packets == 1) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 2));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 1))
statement: if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 2));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 2))
statement: this'.Q_in.popFront()
particle-size: 122
particle-size: 122
statement: this'.data = this'.data[1..this'.size()]
particle-size: 122
particle-size: 122
statement: return this'.data.length
particle-size: 122
particle-size: 122
particle-size: 122
particle-size: 122
particle-size: 122
statement: return ()
particle-size: 122
particle-size: 122
particle-size: 122
particle-size: 122
statement: return ()
particle-size: 122
particle-size: 122
particle-size: 122
particle-size: 122
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 472
particle-size: 472
statement: return this'.data.length
particle-size: 472
particle-size: 472
particle-size: 472
particle-size: 472
statement: this'.__S1.__run()
particle-size: 38
particle-size: 38
statement: if (this'.bad_hash == 2) {
    this'.bad_hash = flip((1 / 10));
}
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 38
particle-size: 38
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 76
particle-size: 76
statement: this'.Q_in.dupFront()
particle-size: 38
particle-size: 38
statement: this'.pushFront(this'.front())
particle-size: 38
particle-size: 38
statement: return this'.data[0]
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: this'.data = [x] ~ this'.data
particle-size: 38
statement: return ()
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: return ()
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 38
particle-size: 38
statement: r := this'.front()
particle-size: 38
particle-size: 38
statement: return this'.data[0]
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: this'.popFront()
particle-size: 38
particle-size: 38
statement: this'.data = this'.data[1..this'.size()]
particle-size: 38
particle-size: 38
statement: return this'.data.length
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: return ()
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: return r
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: this'.data = this'.data ~ [x]
particle-size: 38
statement: return ()
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: if (((this'.bad_hash == 1) && flip((1 / 3))) || ((this'.bad_hash == 0) && flip((1 / 2)))) {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
} else {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
}
particle-size: 76
particle-size: 76
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 304
particle-size: 304
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 152
particle-size: 152
statement: r := this'.front()
particle-size: 152
particle-size: 152
statement: return this'.data[0]
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
statement: this'.popFront()
particle-size: 152
particle-size: 152
statement: this'.data = this'.data[1..this'.size()]
particle-size: 152
particle-size: 152
statement: return this'.data.length
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
statement: return ()
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
statement: return r
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
statement: this'.data = this'.data ~ [x]
particle-size: 152
statement: return ()
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3))
particle-size: 152
particle-size: 152
statement: r := this'.front()
particle-size: 152
particle-size: 152
statement: return this'.data[0]
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
statement: this'.popFront()
particle-size: 152
particle-size: 152
statement: this'.data = this'.data[1..this'.size()]
particle-size: 152
particle-size: 152
statement: return this'.data.length
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
statement: return ()
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
statement: return r
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
statement: this'.data = this'.data ~ [x]
particle-size: 152
statement: return ()
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
statement: return ()
particle-size: 304
particle-size: 152
particle-size: 152
particle-size: 152
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 586
particle-size: 586
statement: return this'.data.length
particle-size: 586
particle-size: 586
particle-size: 586
particle-size: 586
statement: this'.__S2.__run()
particle-size: 46
particle-size: 46
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 46
particle-size: 46
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 92
particle-size: 92
statement: this'.Q_in.dupFront()
particle-size: 46
particle-size: 46
statement: this'.pushFront(this'.front())
particle-size: 46
particle-size: 46
statement: return this'.data[0]
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
statement: this'.data = [x] ~ this'.data
particle-size: 46
statement: return ()
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
statement: return ()
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 46
particle-size: 46
statement: r := this'.front()
particle-size: 46
particle-size: 46
statement: return this'.data[0]
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
statement: this'.popFront()
particle-size: 46
particle-size: 46
statement: this'.data = this'.data[1..this'.size()]
particle-size: 46
particle-size: 46
statement: return this'.data.length
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
statement: return ()
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
statement: return r
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
statement: this'.data = this'.data ~ [x]
particle-size: 46
statement: return ()
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 92
particle-size: 92
statement: r := this'.front()
particle-size: 92
particle-size: 92
statement: return this'.data[0]
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: this'.popFront()
particle-size: 92
particle-size: 92
statement: this'.data = this'.data[1..this'.size()]
particle-size: 92
particle-size: 92
statement: return this'.data.length
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: return ()
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: return r
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: this'.data = this'.data ~ [x]
particle-size: 92
statement: return ()
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: return ()
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 632
particle-size: 632
statement: return this'.data.length
particle-size: 632
particle-size: 632
particle-size: 632
particle-size: 632
statement: this'.__H1.__run()
particle-size: 74
particle-size: 74
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 74
particle-size: 74
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 148
particle-size: 148
statement: this'.Q_in.dupFront()
particle-size: 74
particle-size: 74
statement: this'.pushFront(this'.front())
particle-size: 74
particle-size: 74
statement: return this'.data[0]
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
statement: this'.data = [x] ~ this'.data
particle-size: 74
statement: return ()
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
statement: return ()
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 74
particle-size: 74
statement: r := this'.front()
particle-size: 74
particle-size: 74
statement: return this'.data[0]
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
statement: this'.popFront()
particle-size: 74
particle-size: 74
statement: this'.data = this'.data[1..this'.size()]
particle-size: 74
particle-size: 74
statement: return this'.data.length
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
statement: return ()
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
statement: return r
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
statement: this'.data = this'.data ~ [x]
particle-size: 74
statement: return ()
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
statement: this'.Q_in.popFront()
particle-size: 148
particle-size: 148
statement: this'.data = this'.data[1..this'.size()]
particle-size: 148
particle-size: 148
statement: return this'.data.length
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
statement: return ()
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
statement: return ()
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
statement: return ()
particle-size: 1100
particle-size: 1100
particle-size: 1100
particle-size: 436
repetition: 10
statement: __d.__step()
particle-size: 436
particle-size: 436
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 436
particle-size: 436
statement: return this'.data.length
particle-size: 436
particle-size: 436
particle-size: 436
particle-size: 436
particle-size: 436
particle-size: 436
statement: return this'.data.length
particle-size: 436
particle-size: 436
particle-size: 436
particle-size: 436
particle-size: 436
particle-size: 436
statement: return this'.data.length
particle-size: 436
particle-size: 436
particle-size: 436
particle-size: 436
particle-size: 436
particle-size: 436
statement: return this'.data.length
particle-size: 436
particle-size: 436
particle-size: 436
particle-size: 436
particle-size: 436
particle-size: 436
statement: return this'.data.length
particle-size: 436
particle-size: 436
particle-size: 436
particle-size: 436
particle-size: 436
particle-size: 436
statement: return this'.data.length
particle-size: 436
particle-size: 436
particle-size: 436
particle-size: 436
particle-size: 436
particle-size: 436
statement: return this'.data.length
particle-size: 436
particle-size: 436
particle-size: 436
particle-size: 436
particle-size: 436
particle-size: 436
statement: return this'.data.length
particle-size: 436
particle-size: 436
particle-size: 436
particle-size: 436
particle-size: 436
particle-size: 436
statement: return this'.data.length
particle-size: 436
particle-size: 436
particle-size: 436
particle-size: 436
particle-size: 436
particle-size: 436
statement: return this'.data.length
particle-size: 436
particle-size: 436
particle-size: 436
particle-size: 436
statement: (action,node) := this'.scheduler()
particle-size: 436
particle-size: 436
statement: actions := ([]: (R × R)[])
particle-size: 436
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 436
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 436
particle-size: 436
statement: return this'.data.length
particle-size: 436
particle-size: 436
particle-size: 436
statement: actions ~= [(0,i)]
particle-size: 260
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 436
particle-size: 436
statement: return this'.data.length
particle-size: 436
particle-size: 436
particle-size: 436
statement: actions ~= [(1,i)]
particle-size: 34
loop-index: 1
particle-size: 436
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 436
particle-size: 436
statement: return this'.data.length
particle-size: 436
particle-size: 436
particle-size: 436
statement: actions ~= [(0,i)]
particle-size: 254
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 436
particle-size: 436
statement: return this'.data.length
particle-size: 436
particle-size: 436
particle-size: 436
loop-index: 2
particle-size: 436
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 436
particle-size: 436
statement: return this'.data.length
particle-size: 436
particle-size: 436
particle-size: 436
statement: actions ~= [(0,i)]
particle-size: 38
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 436
particle-size: 436
statement: return this'.data.length
particle-size: 436
particle-size: 436
particle-size: 436
statement: actions ~= [(1,i)]
particle-size: 268
loop-index: 3
particle-size: 436
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 436
particle-size: 436
statement: return this'.data.length
particle-size: 436
particle-size: 436
particle-size: 436
statement: actions ~= [(0,i)]
particle-size: 54
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 436
particle-size: 436
statement: return this'.data.length
particle-size: 436
particle-size: 436
particle-size: 436
statement: actions ~= [(1,i)]
particle-size: 132
loop-index: 4
particle-size: 436
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 436
particle-size: 436
statement: return this'.data.length
particle-size: 436
particle-size: 436
particle-size: 436
statement: actions ~= [(0,i)]
particle-size: 110
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 436
particle-size: 436
statement: return this'.data.length
particle-size: 436
particle-size: 436
particle-size: 436
statement: actions ~= [(1,i)]
particle-size: 74
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 436
particle-size: 436
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 1224
particle-size: 1224
particle-size: 1224
particle-size: 1224
particle-size: 1224
particle-size: 1224
particle-size: 1224
particle-size: 1224
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 508
particle-size: 508
statement: return this'.data.length
particle-size: 508
particle-size: 508
particle-size: 508
particle-size: 508
statement: (pkt,port) := this'.__H0.Q_out.takeFront()
particle-size: 34
particle-size: 34
statement: r := this'.front()
particle-size: 34
particle-size: 34
statement: return this'.data[0]
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: this'.popFront()
particle-size: 34
particle-size: 34
statement: this'.data = this'.data[1..this'.size()]
particle-size: 34
particle-size: 34
statement: return this'.data.length
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: return ()
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: return r
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 34
particle-size: 34
particle-size: 34
statement: this'.data = this'.data ~ [x]
particle-size: 34
statement: return ()
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,3));
}
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 508
particle-size: 508
statement: return this'.data.length
particle-size: 508
particle-size: 508
particle-size: 508
particle-size: 508
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 508
particle-size: 508
statement: return this'.data.length
particle-size: 508
particle-size: 508
particle-size: 508
particle-size: 508
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 268
particle-size: 268
statement: r := this'.front()
particle-size: 268
particle-size: 268
statement: return this'.data[0]
particle-size: 268
particle-size: 268
particle-size: 268
particle-size: 268
particle-size: 268
statement: this'.popFront()
particle-size: 268
particle-size: 268
statement: this'.data = this'.data[1..this'.size()]
particle-size: 268
particle-size: 268
statement: return this'.data.length
particle-size: 268
particle-size: 268
particle-size: 268
particle-size: 268
particle-size: 268
statement: return ()
particle-size: 268
particle-size: 268
particle-size: 268
particle-size: 268
statement: return r
particle-size: 268
particle-size: 268
particle-size: 268
particle-size: 268
particle-size: 268
particle-size: 268
statement: if port == 1 {
    this'.__H0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,1));
}
statement: this'.__H1.Q_in.pushBack((pkt,1))
particle-size: 58
particle-size: 58
particle-size: 58
statement: this'.data = this'.data ~ [x]
particle-size: 58
statement: return ()
particle-size: 58
particle-size: 58
particle-size: 58
particle-size: 58
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 58
particle-size: 58
particle-size: 58
statement: this'.data = this'.data ~ [x]
particle-size: 58
statement: return ()
particle-size: 58
particle-size: 58
particle-size: 58
particle-size: 58
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,1));
}
statement: this'.__Controller.Q_in.pushBack((pkt,1))
particle-size: 152
particle-size: 152
particle-size: 152
statement: this'.data = this'.data ~ [x]
particle-size: 152
statement: return ()
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 508
particle-size: 508
statement: return this'.data.length
particle-size: 508
particle-size: 508
particle-size: 508
particle-size: 508
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 132
particle-size: 132
statement: r := this'.front()
particle-size: 132
particle-size: 132
statement: return this'.data[0]
particle-size: 132
particle-size: 132
particle-size: 132
particle-size: 132
particle-size: 132
statement: this'.popFront()
particle-size: 132
particle-size: 132
statement: this'.data = this'.data[1..this'.size()]
particle-size: 132
particle-size: 132
statement: return this'.data.length
particle-size: 132
particle-size: 132
particle-size: 132
particle-size: 132
particle-size: 132
statement: return ()
particle-size: 132
particle-size: 132
particle-size: 132
particle-size: 132
statement: return r
particle-size: 132
particle-size: 132
particle-size: 132
particle-size: 132
particle-size: 132
particle-size: 132
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,3));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,2));
}
statement: this'.__H1.Q_in.pushBack((pkt,2))
particle-size: 86
particle-size: 86
particle-size: 86
statement: this'.data = this'.data ~ [x]
particle-size: 86
statement: return ()
particle-size: 86
particle-size: 86
particle-size: 86
particle-size: 86
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,2));
}
statement: this'.__Controller.Q_in.pushBack((pkt,2))
particle-size: 46
particle-size: 46
particle-size: 46
statement: this'.data = this'.data ~ [x]
particle-size: 46
statement: return ()
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 508
particle-size: 508
statement: return this'.data.length
particle-size: 508
particle-size: 508
particle-size: 508
particle-size: 508
statement: (pkt,port) := this'.__H1.Q_out.takeFront()
particle-size: 74
particle-size: 74
statement: r := this'.front()
particle-size: 74
particle-size: 74
statement: return this'.data[0]
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
statement: this'.popFront()
particle-size: 74
particle-size: 74
statement: this'.data = this'.data[1..this'.size()]
particle-size: 74
particle-size: 74
statement: return this'.data.length
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
statement: return ()
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
statement: return r
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this'.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,4));
}
statement: this'.__Controller.Q_in.pushBack((pkt,4))
particle-size: 74
particle-size: 74
particle-size: 74
statement: this'.data = this'.data ~ [x]
particle-size: 74
statement: return ()
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 716
particle-size: 716
statement: return this'.data.length
particle-size: 716
particle-size: 716
particle-size: 716
particle-size: 716
statement: this'.__H0.__run()
particle-size: 260
particle-size: 260
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.pushFront((Packet'(),0))
particle-size: 10
particle-size: 10
statement: return this
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.data = [x] ~ this'.data
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.num_sent = (this'.num_sent + 1)
particle-size: 10
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1))
particle-size: 10
particle-size: 10
statement: r := this'.front()
particle-size: 10
particle-size: 10
statement: return this'.data[0]
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.popFront()
particle-size: 10
particle-size: 10
statement: this'.data = this'.data[1..this'.size()]
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return r
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.data = this'.data ~ [x]
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.Q_in.popFront()
particle-size: 250
particle-size: 250
statement: this'.data = this'.data[1..this'.size()]
particle-size: 250
particle-size: 250
statement: return this'.data.length
particle-size: 250
particle-size: 250
particle-size: 250
particle-size: 250
particle-size: 250
statement: return ()
particle-size: 250
particle-size: 250
particle-size: 250
particle-size: 250
statement: return ()
particle-size: 260
particle-size: 260
particle-size: 260
particle-size: 260
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 716
particle-size: 716
statement: return this'.data.length
particle-size: 716
particle-size: 716
particle-size: 716
particle-size: 716
statement: this'.__Controller.__run()
particle-size: 254
particle-size: 254
statement: this'.num_packets = (this'.num_packets + 1)
particle-size: 254
statement: if 1 {
    this'.tot_packets = 4;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 2));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 4) {
        observe((this'.Q_in.data[0][1] == 4));
    } else {
        observe(0);
    }
} else {
    this'.tot_packets = 3;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 2));
    } else {
        observe(0);
    }
}
statement: this'.tot_packets = 4
particle-size: 254
statement: if (this'.num_packets == 1) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 2));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 1))
statement: if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 2));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 2))
statement: this'.Q_in.popFront()
particle-size: 172
particle-size: 172
statement: this'.data = this'.data[1..this'.size()]
particle-size: 172
particle-size: 172
statement: return this'.data.length
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
statement: return ()
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
statement: return ()
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 634
particle-size: 634
statement: return this'.data.length
particle-size: 634
particle-size: 634
particle-size: 634
particle-size: 634
statement: this'.__S1.__run()
particle-size: 38
particle-size: 38
statement: if (this'.bad_hash == 2) {
    this'.bad_hash = flip((1 / 10));
}
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 38
particle-size: 38
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 76
particle-size: 76
statement: this'.Q_in.dupFront()
particle-size: 38
particle-size: 38
statement: this'.pushFront(this'.front())
particle-size: 38
particle-size: 38
statement: return this'.data[0]
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: this'.data = [x] ~ this'.data
particle-size: 38
statement: return ()
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: return ()
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 38
particle-size: 38
statement: r := this'.front()
particle-size: 38
particle-size: 38
statement: return this'.data[0]
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: this'.popFront()
particle-size: 38
particle-size: 38
statement: this'.data = this'.data[1..this'.size()]
particle-size: 38
particle-size: 38
statement: return this'.data.length
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: return ()
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: return r
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: this'.data = this'.data ~ [x]
particle-size: 38
statement: return ()
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: if (((this'.bad_hash == 1) && flip((1 / 3))) || ((this'.bad_hash == 0) && flip((1 / 2)))) {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
} else {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
}
particle-size: 76
particle-size: 76
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 304
particle-size: 304
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 152
particle-size: 152
statement: r := this'.front()
particle-size: 152
particle-size: 152
statement: return this'.data[0]
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
statement: this'.popFront()
particle-size: 152
particle-size: 152
statement: this'.data = this'.data[1..this'.size()]
particle-size: 152
particle-size: 152
statement: return this'.data.length
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
statement: return ()
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
statement: return r
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
statement: this'.data = this'.data ~ [x]
particle-size: 152
statement: return ()
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3))
particle-size: 152
particle-size: 152
statement: r := this'.front()
particle-size: 152
particle-size: 152
statement: return this'.data[0]
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
statement: this'.popFront()
particle-size: 152
particle-size: 152
statement: this'.data = this'.data[1..this'.size()]
particle-size: 152
particle-size: 152
statement: return this'.data.length
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
statement: return ()
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
statement: return r
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
statement: this'.data = this'.data ~ [x]
particle-size: 152
statement: return ()
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
statement: return ()
particle-size: 304
particle-size: 152
particle-size: 152
particle-size: 152
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 748
particle-size: 748
statement: return this'.data.length
particle-size: 748
particle-size: 748
particle-size: 748
particle-size: 748
statement: this'.__S2.__run()
particle-size: 54
particle-size: 54
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 54
particle-size: 54
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 108
particle-size: 108
statement: this'.Q_in.dupFront()
particle-size: 54
particle-size: 54
statement: this'.pushFront(this'.front())
particle-size: 54
particle-size: 54
statement: return this'.data[0]
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: this'.data = [x] ~ this'.data
particle-size: 54
statement: return ()
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: return ()
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 54
particle-size: 54
statement: r := this'.front()
particle-size: 54
particle-size: 54
statement: return this'.data[0]
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: this'.popFront()
particle-size: 54
particle-size: 54
statement: this'.data = this'.data[1..this'.size()]
particle-size: 54
particle-size: 54
statement: return this'.data.length
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: return ()
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: return r
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: this'.data = this'.data ~ [x]
particle-size: 54
statement: return ()
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 108
particle-size: 108
statement: r := this'.front()
particle-size: 108
particle-size: 108
statement: return this'.data[0]
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
statement: this'.popFront()
particle-size: 108
particle-size: 108
statement: this'.data = this'.data[1..this'.size()]
particle-size: 108
particle-size: 108
statement: return this'.data.length
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
statement: return ()
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
statement: return r
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
statement: this'.data = this'.data ~ [x]
particle-size: 108
statement: return ()
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
statement: return ()
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 802
particle-size: 802
statement: return this'.data.length
particle-size: 802
particle-size: 802
particle-size: 802
particle-size: 802
statement: this'.__H1.__run()
particle-size: 110
particle-size: 110
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 110
particle-size: 110
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 220
particle-size: 220
statement: this'.Q_in.dupFront()
particle-size: 110
particle-size: 110
statement: this'.pushFront(this'.front())
particle-size: 110
particle-size: 110
statement: return this'.data[0]
particle-size: 110
particle-size: 110
particle-size: 110
particle-size: 110
particle-size: 110
particle-size: 110
particle-size: 110
statement: this'.data = [x] ~ this'.data
particle-size: 110
statement: return ()
particle-size: 110
particle-size: 110
particle-size: 110
particle-size: 110
statement: return ()
particle-size: 110
particle-size: 110
particle-size: 110
particle-size: 110
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 110
particle-size: 110
statement: r := this'.front()
particle-size: 110
particle-size: 110
statement: return this'.data[0]
particle-size: 110
particle-size: 110
particle-size: 110
particle-size: 110
particle-size: 110
statement: this'.popFront()
particle-size: 110
particle-size: 110
statement: this'.data = this'.data[1..this'.size()]
particle-size: 110
particle-size: 110
statement: return this'.data.length
particle-size: 110
particle-size: 110
particle-size: 110
particle-size: 110
particle-size: 110
statement: return ()
particle-size: 110
particle-size: 110
particle-size: 110
particle-size: 110
statement: return r
particle-size: 110
particle-size: 110
particle-size: 110
particle-size: 110
particle-size: 110
particle-size: 110
particle-size: 110
statement: this'.data = this'.data ~ [x]
particle-size: 110
statement: return ()
particle-size: 110
particle-size: 110
particle-size: 110
particle-size: 110
statement: this'.Q_in.popFront()
particle-size: 220
particle-size: 220
statement: this'.data = this'.data[1..this'.size()]
particle-size: 220
particle-size: 220
statement: return this'.data.length
particle-size: 220
particle-size: 220
particle-size: 220
particle-size: 220
particle-size: 220
statement: return ()
particle-size: 220
particle-size: 220
particle-size: 220
particle-size: 220
statement: return ()
particle-size: 220
particle-size: 220
particle-size: 220
particle-size: 220
statement: return ()
particle-size: 1420
particle-size: 1420
particle-size: 1420
particle-size: 558
repetition: 11
statement: __d.__step()
particle-size: 558
particle-size: 558
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 558
particle-size: 558
statement: return this'.data.length
particle-size: 558
particle-size: 558
particle-size: 558
particle-size: 558
particle-size: 558
particle-size: 558
statement: return this'.data.length
particle-size: 558
particle-size: 558
particle-size: 558
particle-size: 558
particle-size: 558
particle-size: 558
statement: return this'.data.length
particle-size: 558
particle-size: 558
particle-size: 558
particle-size: 558
particle-size: 558
particle-size: 558
statement: return this'.data.length
particle-size: 558
particle-size: 558
particle-size: 558
particle-size: 558
particle-size: 558
particle-size: 558
statement: return this'.data.length
particle-size: 558
particle-size: 558
particle-size: 558
particle-size: 558
particle-size: 558
particle-size: 558
statement: return this'.data.length
particle-size: 558
particle-size: 558
particle-size: 558
particle-size: 558
particle-size: 558
particle-size: 558
statement: return this'.data.length
particle-size: 558
particle-size: 558
particle-size: 558
particle-size: 558
particle-size: 558
particle-size: 558
statement: return this'.data.length
particle-size: 558
particle-size: 558
particle-size: 558
particle-size: 558
particle-size: 558
particle-size: 558
statement: return this'.data.length
particle-size: 558
particle-size: 558
particle-size: 558
particle-size: 558
particle-size: 558
particle-size: 558
statement: return this'.data.length
particle-size: 558
particle-size: 558
particle-size: 558
particle-size: 558
statement: (action,node) := this'.scheduler()
particle-size: 556
particle-size: 556
statement: actions := ([]: (R × R)[])
particle-size: 556
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 556
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 556
particle-size: 556
statement: return this'.data.length
particle-size: 556
particle-size: 556
particle-size: 556
statement: actions ~= [(0,i)]
particle-size: 308
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 556
particle-size: 556
statement: return this'.data.length
particle-size: 556
particle-size: 556
particle-size: 556
statement: actions ~= [(1,i)]
particle-size: 26
loop-index: 1
particle-size: 556
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 556
particle-size: 556
statement: return this'.data.length
particle-size: 556
particle-size: 556
particle-size: 556
statement: actions ~= [(0,i)]
particle-size: 386
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 556
particle-size: 556
statement: return this'.data.length
particle-size: 556
particle-size: 556
particle-size: 556
loop-index: 2
particle-size: 556
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 556
particle-size: 556
statement: return this'.data.length
particle-size: 556
particle-size: 556
particle-size: 556
statement: actions ~= [(0,i)]
particle-size: 34
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 556
particle-size: 556
statement: return this'.data.length
particle-size: 556
particle-size: 556
particle-size: 556
statement: actions ~= [(1,i)]
particle-size: 300
loop-index: 3
particle-size: 556
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 556
particle-size: 556
statement: return this'.data.length
particle-size: 556
particle-size: 556
particle-size: 556
statement: actions ~= [(0,i)]
particle-size: 62
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 556
particle-size: 556
statement: return this'.data.length
particle-size: 556
particle-size: 556
particle-size: 556
statement: actions ~= [(1,i)]
particle-size: 172
loop-index: 4
particle-size: 556
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 556
particle-size: 556
statement: return this'.data.length
particle-size: 556
particle-size: 556
particle-size: 556
statement: actions ~= [(0,i)]
particle-size: 150
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 556
particle-size: 556
statement: return this'.data.length
particle-size: 556
particle-size: 556
particle-size: 556
statement: actions ~= [(1,i)]
particle-size: 110
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 556
particle-size: 556
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 1548
particle-size: 1548
particle-size: 1548
particle-size: 1548
particle-size: 1548
particle-size: 1548
particle-size: 1548
particle-size: 1548
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 608
particle-size: 608
statement: return this'.data.length
particle-size: 608
particle-size: 608
particle-size: 608
particle-size: 608
statement: (pkt,port) := this'.__H0.Q_out.takeFront()
particle-size: 26
particle-size: 26
statement: r := this'.front()
particle-size: 26
particle-size: 26
statement: return this'.data[0]
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: this'.popFront()
particle-size: 26
particle-size: 26
statement: this'.data = this'.data[1..this'.size()]
particle-size: 26
particle-size: 26
statement: return this'.data.length
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: return ()
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: return r
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 26
particle-size: 26
particle-size: 26
statement: this'.data = this'.data ~ [x]
particle-size: 26
statement: return ()
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,3));
}
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 608
particle-size: 608
statement: return this'.data.length
particle-size: 608
particle-size: 608
particle-size: 608
particle-size: 608
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 608
particle-size: 608
statement: return this'.data.length
particle-size: 608
particle-size: 608
particle-size: 608
particle-size: 608
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 300
particle-size: 300
statement: r := this'.front()
particle-size: 300
particle-size: 300
statement: return this'.data[0]
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: this'.popFront()
particle-size: 300
particle-size: 300
statement: this'.data = this'.data[1..this'.size()]
particle-size: 300
particle-size: 300
statement: return this'.data.length
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: return ()
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: return r
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: if port == 1 {
    this'.__H0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,1));
}
statement: this'.__H1.Q_in.pushBack((pkt,1))
particle-size: 74
particle-size: 74
particle-size: 74
statement: this'.data = this'.data ~ [x]
particle-size: 74
statement: return ()
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 74
particle-size: 74
particle-size: 74
statement: this'.data = this'.data ~ [x]
particle-size: 74
statement: return ()
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,1));
}
statement: this'.__Controller.Q_in.pushBack((pkt,1))
particle-size: 152
particle-size: 152
particle-size: 152
statement: this'.data = this'.data ~ [x]
particle-size: 152
statement: return ()
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 608
particle-size: 608
statement: return this'.data.length
particle-size: 608
particle-size: 608
particle-size: 608
particle-size: 608
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 172
particle-size: 172
statement: r := this'.front()
particle-size: 172
particle-size: 172
statement: return this'.data[0]
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
statement: this'.popFront()
particle-size: 172
particle-size: 172
statement: this'.data = this'.data[1..this'.size()]
particle-size: 172
particle-size: 172
statement: return this'.data.length
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
statement: return ()
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
statement: return r
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,3));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,2));
}
statement: this'.__H1.Q_in.pushBack((pkt,2))
particle-size: 118
particle-size: 118
particle-size: 118
statement: this'.data = this'.data ~ [x]
particle-size: 118
statement: return ()
particle-size: 118
particle-size: 118
particle-size: 118
particle-size: 118
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,2));
}
statement: this'.__Controller.Q_in.pushBack((pkt,2))
particle-size: 54
particle-size: 54
particle-size: 54
statement: this'.data = this'.data ~ [x]
particle-size: 54
statement: return ()
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 608
particle-size: 608
statement: return this'.data.length
particle-size: 608
particle-size: 608
particle-size: 608
particle-size: 608
statement: (pkt,port) := this'.__H1.Q_out.takeFront()
particle-size: 110
particle-size: 110
statement: r := this'.front()
particle-size: 110
particle-size: 110
statement: return this'.data[0]
particle-size: 110
particle-size: 110
particle-size: 110
particle-size: 110
particle-size: 110
statement: this'.popFront()
particle-size: 110
particle-size: 110
statement: this'.data = this'.data[1..this'.size()]
particle-size: 110
particle-size: 110
statement: return this'.data.length
particle-size: 110
particle-size: 110
particle-size: 110
particle-size: 110
particle-size: 110
statement: return ()
particle-size: 110
particle-size: 110
particle-size: 110
particle-size: 110
statement: return r
particle-size: 110
particle-size: 110
particle-size: 110
particle-size: 110
particle-size: 110
particle-size: 110
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this'.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,4));
}
statement: this'.__Controller.Q_in.pushBack((pkt,4))
particle-size: 110
particle-size: 110
particle-size: 110
statement: this'.data = this'.data ~ [x]
particle-size: 110
statement: return ()
particle-size: 110
particle-size: 110
particle-size: 110
particle-size: 110
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 940
particle-size: 940
statement: return this'.data.length
particle-size: 940
particle-size: 940
particle-size: 940
particle-size: 940
statement: this'.__H0.__run()
particle-size: 308
particle-size: 308
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.pushFront((Packet'(),0))
particle-size: 8
particle-size: 8
statement: return this
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.data = [x] ~ this'.data
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.num_sent = (this'.num_sent + 1)
particle-size: 8
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1))
particle-size: 8
particle-size: 8
statement: r := this'.front()
particle-size: 8
particle-size: 8
statement: return this'.data[0]
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.popFront()
particle-size: 8
particle-size: 8
statement: this'.data = this'.data[1..this'.size()]
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return r
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.data = this'.data ~ [x]
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.Q_in.popFront()
particle-size: 300
particle-size: 300
statement: this'.data = this'.data[1..this'.size()]
particle-size: 300
particle-size: 300
statement: return this'.data.length
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: return ()
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: return ()
particle-size: 308
particle-size: 308
particle-size: 308
particle-size: 308
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 940
particle-size: 940
statement: return this'.data.length
particle-size: 940
particle-size: 940
particle-size: 940
particle-size: 940
statement: this'.__Controller.__run()
particle-size: 386
particle-size: 386
statement: this'.num_packets = (this'.num_packets + 1)
particle-size: 386
statement: if 1 {
    this'.tot_packets = 4;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 2));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 4) {
        observe((this'.Q_in.data[0][1] == 4));
    } else {
        observe(0);
    }
} else {
    this'.tot_packets = 3;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 2));
    } else {
        observe(0);
    }
}
statement: this'.tot_packets = 4
particle-size: 386
statement: if (this'.num_packets == 1) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 2));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 1))
statement: if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 2));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 2))
statement: this'.Q_in.popFront()
particle-size: 228
particle-size: 228
statement: this'.data = this'.data[1..this'.size()]
particle-size: 228
particle-size: 228
statement: return this'.data.length
particle-size: 228
particle-size: 228
particle-size: 228
particle-size: 228
particle-size: 228
statement: return ()
particle-size: 228
particle-size: 228
particle-size: 228
particle-size: 228
statement: return ()
particle-size: 228
particle-size: 228
particle-size: 228
particle-size: 228
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 782
particle-size: 782
statement: return this'.data.length
particle-size: 782
particle-size: 782
particle-size: 782
particle-size: 782
statement: this'.__S1.__run()
particle-size: 34
particle-size: 34
statement: if (this'.bad_hash == 2) {
    this'.bad_hash = flip((1 / 10));
}
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 34
particle-size: 34
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 68
particle-size: 68
statement: this'.Q_in.dupFront()
particle-size: 34
particle-size: 34
statement: this'.pushFront(this'.front())
particle-size: 34
particle-size: 34
statement: return this'.data[0]
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: this'.data = [x] ~ this'.data
particle-size: 34
statement: return ()
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: return ()
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 34
particle-size: 34
statement: r := this'.front()
particle-size: 34
particle-size: 34
statement: return this'.data[0]
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: this'.popFront()
particle-size: 34
particle-size: 34
statement: this'.data = this'.data[1..this'.size()]
particle-size: 34
particle-size: 34
statement: return this'.data.length
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: return ()
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: return r
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: this'.data = this'.data ~ [x]
particle-size: 34
statement: return ()
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: if (((this'.bad_hash == 1) && flip((1 / 3))) || ((this'.bad_hash == 0) && flip((1 / 2)))) {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
} else {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
}
particle-size: 68
particle-size: 68
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 272
particle-size: 272
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 136
particle-size: 136
statement: r := this'.front()
particle-size: 136
particle-size: 136
statement: return this'.data[0]
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
statement: this'.popFront()
particle-size: 136
particle-size: 136
statement: this'.data = this'.data[1..this'.size()]
particle-size: 136
particle-size: 136
statement: return this'.data.length
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
statement: return ()
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
statement: return r
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
statement: this'.data = this'.data ~ [x]
particle-size: 136
statement: return ()
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3))
particle-size: 136
particle-size: 136
statement: r := this'.front()
particle-size: 136
particle-size: 136
statement: return this'.data[0]
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
statement: this'.popFront()
particle-size: 136
particle-size: 136
statement: this'.data = this'.data[1..this'.size()]
particle-size: 136
particle-size: 136
statement: return this'.data.length
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
statement: return ()
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
statement: return r
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
statement: this'.data = this'.data ~ [x]
particle-size: 136
statement: return ()
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
statement: return ()
particle-size: 272
particle-size: 136
particle-size: 136
particle-size: 136
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 884
particle-size: 884
statement: return this'.data.length
particle-size: 884
particle-size: 884
particle-size: 884
particle-size: 884
statement: this'.__S2.__run()
particle-size: 62
particle-size: 62
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 62
particle-size: 62
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 124
particle-size: 124
statement: this'.Q_in.dupFront()
particle-size: 62
particle-size: 62
statement: this'.pushFront(this'.front())
particle-size: 62
particle-size: 62
statement: return this'.data[0]
particle-size: 62
particle-size: 62
particle-size: 62
particle-size: 62
particle-size: 62
particle-size: 62
particle-size: 62
statement: this'.data = [x] ~ this'.data
particle-size: 62
statement: return ()
particle-size: 62
particle-size: 62
particle-size: 62
particle-size: 62
statement: return ()
particle-size: 62
particle-size: 62
particle-size: 62
particle-size: 62
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 62
particle-size: 62
statement: r := this'.front()
particle-size: 62
particle-size: 62
statement: return this'.data[0]
particle-size: 62
particle-size: 62
particle-size: 62
particle-size: 62
particle-size: 62
statement: this'.popFront()
particle-size: 62
particle-size: 62
statement: this'.data = this'.data[1..this'.size()]
particle-size: 62
particle-size: 62
statement: return this'.data.length
particle-size: 62
particle-size: 62
particle-size: 62
particle-size: 62
particle-size: 62
statement: return ()
particle-size: 62
particle-size: 62
particle-size: 62
particle-size: 62
statement: return r
particle-size: 62
particle-size: 62
particle-size: 62
particle-size: 62
particle-size: 62
particle-size: 62
particle-size: 62
statement: this'.data = this'.data ~ [x]
particle-size: 62
statement: return ()
particle-size: 62
particle-size: 62
particle-size: 62
particle-size: 62
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 124
particle-size: 124
statement: r := this'.front()
particle-size: 124
particle-size: 124
statement: return this'.data[0]
particle-size: 124
particle-size: 124
particle-size: 124
particle-size: 124
particle-size: 124
statement: this'.popFront()
particle-size: 124
particle-size: 124
statement: this'.data = this'.data[1..this'.size()]
particle-size: 124
particle-size: 124
statement: return this'.data.length
particle-size: 124
particle-size: 124
particle-size: 124
particle-size: 124
particle-size: 124
statement: return ()
particle-size: 124
particle-size: 124
particle-size: 124
particle-size: 124
statement: return r
particle-size: 124
particle-size: 124
particle-size: 124
particle-size: 124
particle-size: 124
particle-size: 124
particle-size: 124
statement: this'.data = this'.data ~ [x]
particle-size: 124
statement: return ()
particle-size: 124
particle-size: 124
particle-size: 124
particle-size: 124
statement: return ()
particle-size: 124
particle-size: 124
particle-size: 124
particle-size: 124
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 946
particle-size: 946
statement: return this'.data.length
particle-size: 946
particle-size: 946
particle-size: 946
particle-size: 946
statement: this'.__H1.__run()
particle-size: 150
particle-size: 150
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 150
particle-size: 150
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 300
particle-size: 300
statement: this'.Q_in.dupFront()
particle-size: 150
particle-size: 150
statement: this'.pushFront(this'.front())
particle-size: 150
particle-size: 150
statement: return this'.data[0]
particle-size: 150
particle-size: 150
particle-size: 150
particle-size: 150
particle-size: 150
particle-size: 150
particle-size: 150
statement: this'.data = [x] ~ this'.data
particle-size: 150
statement: return ()
particle-size: 150
particle-size: 150
particle-size: 150
particle-size: 150
statement: return ()
particle-size: 150
particle-size: 150
particle-size: 150
particle-size: 150
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 150
particle-size: 150
statement: r := this'.front()
particle-size: 150
particle-size: 150
statement: return this'.data[0]
particle-size: 150
particle-size: 150
particle-size: 150
particle-size: 150
particle-size: 150
statement: this'.popFront()
particle-size: 150
particle-size: 150
statement: this'.data = this'.data[1..this'.size()]
particle-size: 150
particle-size: 150
statement: return this'.data.length
particle-size: 150
particle-size: 150
particle-size: 150
particle-size: 150
particle-size: 150
statement: return ()
particle-size: 150
particle-size: 150
particle-size: 150
particle-size: 150
statement: return r
particle-size: 150
particle-size: 150
particle-size: 150
particle-size: 150
particle-size: 150
particle-size: 150
particle-size: 150
statement: this'.data = this'.data ~ [x]
particle-size: 150
statement: return ()
particle-size: 150
particle-size: 150
particle-size: 150
particle-size: 150
statement: this'.Q_in.popFront()
particle-size: 300
particle-size: 300
statement: this'.data = this'.data[1..this'.size()]
particle-size: 300
particle-size: 300
statement: return this'.data.length
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: return ()
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: return ()
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: return ()
particle-size: 1706
particle-size: 1706
particle-size: 1706
particle-size: 694
repetition: 12
statement: __d.__step()
particle-size: 694
particle-size: 694
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 694
particle-size: 694
statement: return this'.data.length
particle-size: 694
particle-size: 694
particle-size: 694
particle-size: 694
particle-size: 694
particle-size: 694
statement: return this'.data.length
particle-size: 694
particle-size: 694
particle-size: 694
particle-size: 694
particle-size: 694
particle-size: 694
statement: return this'.data.length
particle-size: 694
particle-size: 694
particle-size: 694
particle-size: 694
particle-size: 694
particle-size: 694
statement: return this'.data.length
particle-size: 694
particle-size: 694
particle-size: 694
particle-size: 694
particle-size: 694
particle-size: 694
statement: return this'.data.length
particle-size: 694
particle-size: 694
particle-size: 694
particle-size: 694
particle-size: 694
particle-size: 694
statement: return this'.data.length
particle-size: 694
particle-size: 694
particle-size: 694
particle-size: 694
particle-size: 694
particle-size: 694
statement: return this'.data.length
particle-size: 694
particle-size: 694
particle-size: 694
particle-size: 694
particle-size: 694
particle-size: 694
statement: return this'.data.length
particle-size: 694
particle-size: 694
particle-size: 694
particle-size: 694
particle-size: 694
particle-size: 694
statement: return this'.data.length
particle-size: 694
particle-size: 694
particle-size: 694
particle-size: 694
particle-size: 694
particle-size: 694
statement: return this'.data.length
particle-size: 694
particle-size: 694
particle-size: 694
particle-size: 694
statement: (action,node) := this'.scheduler()
particle-size: 692
particle-size: 692
statement: actions := ([]: (R × R)[])
particle-size: 692
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 692
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 692
particle-size: 692
statement: return this'.data.length
particle-size: 692
particle-size: 692
particle-size: 692
statement: actions ~= [(0,i)]
particle-size: 392
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 692
particle-size: 692
statement: return this'.data.length
particle-size: 692
particle-size: 692
particle-size: 692
statement: actions ~= [(1,i)]
particle-size: 18
loop-index: 1
particle-size: 692
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 692
particle-size: 692
statement: return this'.data.length
particle-size: 692
particle-size: 692
particle-size: 692
statement: actions ~= [(0,i)]
particle-size: 548
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 692
particle-size: 692
statement: return this'.data.length
particle-size: 692
particle-size: 692
particle-size: 692
loop-index: 2
particle-size: 692
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 692
particle-size: 692
statement: return this'.data.length
particle-size: 692
particle-size: 692
particle-size: 692
statement: actions ~= [(0,i)]
particle-size: 26
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 692
particle-size: 692
statement: return this'.data.length
particle-size: 692
particle-size: 692
particle-size: 692
statement: actions ~= [(1,i)]
particle-size: 308
loop-index: 3
particle-size: 692
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 692
particle-size: 692
statement: return this'.data.length
particle-size: 692
particle-size: 692
particle-size: 692
statement: actions ~= [(0,i)]
particle-size: 74
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 692
particle-size: 692
statement: return this'.data.length
particle-size: 692
particle-size: 692
particle-size: 692
statement: actions ~= [(1,i)]
particle-size: 228
loop-index: 4
particle-size: 692
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 692
particle-size: 692
statement: return this'.data.length
particle-size: 692
particle-size: 692
particle-size: 692
statement: actions ~= [(0,i)]
particle-size: 194
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 692
particle-size: 692
statement: return this'.data.length
particle-size: 692
particle-size: 692
particle-size: 692
statement: actions ~= [(1,i)]
particle-size: 146
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 692
particle-size: 692
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 1934
particle-size: 1934
particle-size: 1934
particle-size: 1934
particle-size: 1934
particle-size: 1934
particle-size: 1934
particle-size: 1934
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 700
particle-size: 700
statement: return this'.data.length
particle-size: 700
particle-size: 700
particle-size: 700
particle-size: 700
statement: (pkt,port) := this'.__H0.Q_out.takeFront()
particle-size: 18
particle-size: 18
statement: r := this'.front()
particle-size: 18
particle-size: 18
statement: return this'.data[0]
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.popFront()
particle-size: 18
particle-size: 18
statement: this'.data = this'.data[1..this'.size()]
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return r
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.data = this'.data ~ [x]
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,3));
}
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 700
particle-size: 700
statement: return this'.data.length
particle-size: 700
particle-size: 700
particle-size: 700
particle-size: 700
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 700
particle-size: 700
statement: return this'.data.length
particle-size: 700
particle-size: 700
particle-size: 700
particle-size: 700
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 308
particle-size: 308
statement: r := this'.front()
particle-size: 308
particle-size: 308
statement: return this'.data[0]
particle-size: 308
particle-size: 308
particle-size: 308
particle-size: 308
particle-size: 308
statement: this'.popFront()
particle-size: 308
particle-size: 308
statement: this'.data = this'.data[1..this'.size()]
particle-size: 308
particle-size: 308
statement: return this'.data.length
particle-size: 308
particle-size: 308
particle-size: 308
particle-size: 308
particle-size: 308
statement: return ()
particle-size: 308
particle-size: 308
particle-size: 308
particle-size: 308
statement: return r
particle-size: 308
particle-size: 308
particle-size: 308
particle-size: 308
particle-size: 308
particle-size: 308
statement: if port == 1 {
    this'.__H0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,1));
}
statement: this'.__H1.Q_in.pushBack((pkt,1))
particle-size: 86
particle-size: 86
particle-size: 86
statement: this'.data = this'.data ~ [x]
particle-size: 86
statement: return ()
particle-size: 86
particle-size: 86
particle-size: 86
particle-size: 86
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 86
particle-size: 86
particle-size: 86
statement: this'.data = this'.data ~ [x]
particle-size: 86
statement: return ()
particle-size: 86
particle-size: 86
particle-size: 86
particle-size: 86
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,1));
}
statement: this'.__Controller.Q_in.pushBack((pkt,1))
particle-size: 136
particle-size: 136
particle-size: 136
statement: this'.data = this'.data ~ [x]
particle-size: 136
statement: return ()
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 700
particle-size: 700
statement: return this'.data.length
particle-size: 700
particle-size: 700
particle-size: 700
particle-size: 700
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 228
particle-size: 228
statement: r := this'.front()
particle-size: 228
particle-size: 228
statement: return this'.data[0]
particle-size: 228
particle-size: 228
particle-size: 228
particle-size: 228
particle-size: 228
statement: this'.popFront()
particle-size: 228
particle-size: 228
statement: this'.data = this'.data[1..this'.size()]
particle-size: 228
particle-size: 228
statement: return this'.data.length
particle-size: 228
particle-size: 228
particle-size: 228
particle-size: 228
particle-size: 228
statement: return ()
particle-size: 228
particle-size: 228
particle-size: 228
particle-size: 228
statement: return r
particle-size: 228
particle-size: 228
particle-size: 228
particle-size: 228
particle-size: 228
particle-size: 228
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,3));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,2));
}
statement: this'.__H1.Q_in.pushBack((pkt,2))
particle-size: 162
particle-size: 162
particle-size: 162
statement: this'.data = this'.data ~ [x]
particle-size: 162
statement: return ()
particle-size: 162
particle-size: 162
particle-size: 162
particle-size: 162
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,2));
}
statement: this'.__Controller.Q_in.pushBack((pkt,2))
particle-size: 66
particle-size: 66
particle-size: 66
statement: this'.data = this'.data ~ [x]
particle-size: 66
statement: return ()
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 700
particle-size: 700
statement: return this'.data.length
particle-size: 700
particle-size: 700
particle-size: 700
particle-size: 700
statement: (pkt,port) := this'.__H1.Q_out.takeFront()
particle-size: 146
particle-size: 146
statement: r := this'.front()
particle-size: 146
particle-size: 146
statement: return this'.data[0]
particle-size: 146
particle-size: 146
particle-size: 146
particle-size: 146
particle-size: 146
statement: this'.popFront()
particle-size: 146
particle-size: 146
statement: this'.data = this'.data[1..this'.size()]
particle-size: 146
particle-size: 146
statement: return this'.data.length
particle-size: 146
particle-size: 146
particle-size: 146
particle-size: 146
particle-size: 146
statement: return ()
particle-size: 146
particle-size: 146
particle-size: 146
particle-size: 146
statement: return r
particle-size: 146
particle-size: 146
particle-size: 146
particle-size: 146
particle-size: 146
particle-size: 146
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this'.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,4));
}
statement: this'.__Controller.Q_in.pushBack((pkt,4))
particle-size: 146
particle-size: 146
particle-size: 146
statement: this'.data = this'.data ~ [x]
particle-size: 146
statement: return ()
particle-size: 146
particle-size: 146
particle-size: 146
particle-size: 146
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 1234
particle-size: 1234
statement: return this'.data.length
particle-size: 1234
particle-size: 1234
particle-size: 1234
particle-size: 1234
statement: this'.__H0.__run()
particle-size: 392
particle-size: 392
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.pushFront((Packet'(),0))
particle-size: 2
particle-size: 2
statement: return this
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = [x] ~ this'.data
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.num_sent = (this'.num_sent + 1)
particle-size: 2
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1))
particle-size: 2
particle-size: 2
statement: r := this'.front()
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.popFront()
particle-size: 2
particle-size: 2
statement: this'.data = this'.data[1..this'.size()]
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return r
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = this'.data ~ [x]
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.Q_in.popFront()
particle-size: 390
particle-size: 390
statement: this'.data = this'.data[1..this'.size()]
particle-size: 390
particle-size: 390
statement: return this'.data.length
particle-size: 390
particle-size: 390
particle-size: 390
particle-size: 390
particle-size: 390
statement: return ()
particle-size: 390
particle-size: 390
particle-size: 390
particle-size: 390
statement: return ()
particle-size: 392
particle-size: 392
particle-size: 392
particle-size: 392
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 1234
particle-size: 1234
statement: return this'.data.length
particle-size: 1234
particle-size: 1234
particle-size: 1234
particle-size: 1234
statement: this'.__Controller.__run()
particle-size: 548
particle-size: 548
statement: this'.num_packets = (this'.num_packets + 1)
particle-size: 548
statement: if 1 {
    this'.tot_packets = 4;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 2));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 4) {
        observe((this'.Q_in.data[0][1] == 4));
    } else {
        observe(0);
    }
} else {
    this'.tot_packets = 3;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 2));
    } else {
        observe(0);
    }
}
statement: this'.tot_packets = 4
particle-size: 548
statement: if (this'.num_packets == 1) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 2));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 1))
statement: if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 2));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 2))
statement: if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 4))
statement: this'.Q_in.popFront()
particle-size: 310
particle-size: 310
statement: this'.data = this'.data[1..this'.size()]
particle-size: 310
particle-size: 310
statement: return this'.data.length
particle-size: 310
particle-size: 310
particle-size: 310
particle-size: 310
particle-size: 310
statement: return ()
particle-size: 310
particle-size: 310
particle-size: 310
particle-size: 310
statement: return ()
particle-size: 310
particle-size: 310
particle-size: 310
particle-size: 310
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 996
particle-size: 996
statement: return this'.data.length
particle-size: 996
particle-size: 996
particle-size: 996
particle-size: 996
statement: this'.__S1.__run()
particle-size: 26
particle-size: 26
statement: if (this'.bad_hash == 2) {
    this'.bad_hash = flip((1 / 10));
}
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 26
particle-size: 26
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 52
particle-size: 52
statement: this'.Q_in.dupFront()
particle-size: 26
particle-size: 26
statement: this'.pushFront(this'.front())
particle-size: 26
particle-size: 26
statement: return this'.data[0]
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: this'.data = [x] ~ this'.data
particle-size: 26
statement: return ()
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: return ()
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 26
particle-size: 26
statement: r := this'.front()
particle-size: 26
particle-size: 26
statement: return this'.data[0]
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: this'.popFront()
particle-size: 26
particle-size: 26
statement: this'.data = this'.data[1..this'.size()]
particle-size: 26
particle-size: 26
statement: return this'.data.length
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: return ()
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: return r
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: this'.data = this'.data ~ [x]
particle-size: 26
statement: return ()
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: if (((this'.bad_hash == 1) && flip((1 / 3))) || ((this'.bad_hash == 0) && flip((1 / 2)))) {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
} else {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
}
particle-size: 52
particle-size: 52
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 208
particle-size: 208
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 104
particle-size: 104
statement: r := this'.front()
particle-size: 104
particle-size: 104
statement: return this'.data[0]
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: this'.popFront()
particle-size: 104
particle-size: 104
statement: this'.data = this'.data[1..this'.size()]
particle-size: 104
particle-size: 104
statement: return this'.data.length
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: return ()
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: return r
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: this'.data = this'.data ~ [x]
particle-size: 104
statement: return ()
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3))
particle-size: 104
particle-size: 104
statement: r := this'.front()
particle-size: 104
particle-size: 104
statement: return this'.data[0]
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: this'.popFront()
particle-size: 104
particle-size: 104
statement: this'.data = this'.data[1..this'.size()]
particle-size: 104
particle-size: 104
statement: return this'.data.length
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: return ()
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: return r
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: this'.data = this'.data ~ [x]
particle-size: 104
statement: return ()
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: return ()
particle-size: 208
particle-size: 104
particle-size: 104
particle-size: 104
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 1074
particle-size: 1074
statement: return this'.data.length
particle-size: 1074
particle-size: 1074
particle-size: 1074
particle-size: 1074
statement: this'.__S2.__run()
particle-size: 74
particle-size: 74
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 74
particle-size: 74
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 148
particle-size: 148
statement: this'.Q_in.dupFront()
particle-size: 74
particle-size: 74
statement: this'.pushFront(this'.front())
particle-size: 74
particle-size: 74
statement: return this'.data[0]
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
statement: this'.data = [x] ~ this'.data
particle-size: 74
statement: return ()
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
statement: return ()
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 74
particle-size: 74
statement: r := this'.front()
particle-size: 74
particle-size: 74
statement: return this'.data[0]
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
statement: this'.popFront()
particle-size: 74
particle-size: 74
statement: this'.data = this'.data[1..this'.size()]
particle-size: 74
particle-size: 74
statement: return this'.data.length
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
statement: return ()
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
statement: return r
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
statement: this'.data = this'.data ~ [x]
particle-size: 74
statement: return ()
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 148
particle-size: 148
statement: r := this'.front()
particle-size: 148
particle-size: 148
statement: return this'.data[0]
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
statement: this'.popFront()
particle-size: 148
particle-size: 148
statement: this'.data = this'.data[1..this'.size()]
particle-size: 148
particle-size: 148
statement: return this'.data.length
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
statement: return ()
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
statement: return r
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
statement: this'.data = this'.data ~ [x]
particle-size: 148
statement: return ()
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
statement: return ()
particle-size: 148
particle-size: 148
particle-size: 148
particle-size: 148
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 1148
particle-size: 1148
statement: return this'.data.length
particle-size: 1148
particle-size: 1148
particle-size: 1148
particle-size: 1148
statement: this'.__H1.__run()
particle-size: 194
particle-size: 194
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 194
particle-size: 194
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 388
particle-size: 388
statement: this'.Q_in.dupFront()
particle-size: 194
particle-size: 194
statement: this'.pushFront(this'.front())
particle-size: 194
particle-size: 194
statement: return this'.data[0]
particle-size: 194
particle-size: 194
particle-size: 194
particle-size: 194
particle-size: 194
particle-size: 194
particle-size: 194
statement: this'.data = [x] ~ this'.data
particle-size: 194
statement: return ()
particle-size: 194
particle-size: 194
particle-size: 194
particle-size: 194
statement: return ()
particle-size: 194
particle-size: 194
particle-size: 194
particle-size: 194
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 194
particle-size: 194
statement: r := this'.front()
particle-size: 194
particle-size: 194
statement: return this'.data[0]
particle-size: 194
particle-size: 194
particle-size: 194
particle-size: 194
particle-size: 194
statement: this'.popFront()
particle-size: 194
particle-size: 194
statement: this'.data = this'.data[1..this'.size()]
particle-size: 194
particle-size: 194
statement: return this'.data.length
particle-size: 194
particle-size: 194
particle-size: 194
particle-size: 194
particle-size: 194
statement: return ()
particle-size: 194
particle-size: 194
particle-size: 194
particle-size: 194
statement: return r
particle-size: 194
particle-size: 194
particle-size: 194
particle-size: 194
particle-size: 194
particle-size: 194
particle-size: 194
statement: this'.data = this'.data ~ [x]
particle-size: 194
statement: return ()
particle-size: 194
particle-size: 194
particle-size: 194
particle-size: 194
statement: this'.Q_in.popFront()
particle-size: 388
particle-size: 388
statement: this'.data = this'.data[1..this'.size()]
particle-size: 388
particle-size: 388
statement: return this'.data.length
particle-size: 388
particle-size: 388
particle-size: 388
particle-size: 388
particle-size: 388
statement: return ()
particle-size: 388
particle-size: 388
particle-size: 388
particle-size: 388
statement: return ()
particle-size: 388
particle-size: 388
particle-size: 388
particle-size: 388
statement: return ()
particle-size: 2044
particle-size: 2044
particle-size: 2044
particle-size: 820
repetition: 13
statement: __d.__step()
particle-size: 820
particle-size: 820
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 820
particle-size: 820
statement: return this'.data.length
particle-size: 820
particle-size: 820
particle-size: 820
particle-size: 820
particle-size: 820
particle-size: 820
statement: return this'.data.length
particle-size: 820
particle-size: 820
particle-size: 820
particle-size: 820
particle-size: 820
particle-size: 820
statement: return this'.data.length
particle-size: 820
particle-size: 820
particle-size: 820
particle-size: 820
particle-size: 820
particle-size: 820
statement: return this'.data.length
particle-size: 820
particle-size: 820
particle-size: 820
particle-size: 820
particle-size: 820
particle-size: 820
statement: return this'.data.length
particle-size: 820
particle-size: 820
particle-size: 820
particle-size: 820
particle-size: 820
particle-size: 820
statement: return this'.data.length
particle-size: 820
particle-size: 820
particle-size: 820
particle-size: 820
particle-size: 820
particle-size: 820
statement: return this'.data.length
particle-size: 820
particle-size: 820
particle-size: 820
particle-size: 820
particle-size: 820
particle-size: 820
statement: return this'.data.length
particle-size: 820
particle-size: 820
particle-size: 820
particle-size: 820
particle-size: 820
particle-size: 820
statement: return this'.data.length
particle-size: 820
particle-size: 820
particle-size: 820
particle-size: 820
particle-size: 820
particle-size: 820
statement: return this'.data.length
particle-size: 820
particle-size: 820
particle-size: 820
particle-size: 820
statement: (action,node) := this'.scheduler()
particle-size: 816
particle-size: 816
statement: actions := ([]: (R × R)[])
particle-size: 816
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 816
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 816
particle-size: 816
statement: return this'.data.length
particle-size: 816
particle-size: 816
particle-size: 816
statement: actions ~= [(0,i)]
particle-size: 430
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 816
particle-size: 816
statement: return this'.data.length
particle-size: 816
particle-size: 816
particle-size: 816
statement: actions ~= [(1,i)]
particle-size: 10
loop-index: 1
particle-size: 816
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 816
particle-size: 816
statement: return this'.data.length
particle-size: 816
particle-size: 816
particle-size: 816
statement: actions ~= [(0,i)]
particle-size: 686
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 816
particle-size: 816
statement: return this'.data.length
particle-size: 816
particle-size: 816
particle-size: 816
loop-index: 2
particle-size: 816
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 816
particle-size: 816
statement: return this'.data.length
particle-size: 816
particle-size: 816
particle-size: 816
statement: actions ~= [(0,i)]
particle-size: 18
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 816
particle-size: 816
statement: return this'.data.length
particle-size: 816
particle-size: 816
particle-size: 816
statement: actions ~= [(1,i)]
particle-size: 280
loop-index: 3
particle-size: 816
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 816
particle-size: 816
statement: return this'.data.length
particle-size: 816
particle-size: 816
particle-size: 816
statement: actions ~= [(0,i)]
particle-size: 86
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 816
particle-size: 816
statement: return this'.data.length
particle-size: 816
particle-size: 816
particle-size: 816
statement: actions ~= [(1,i)]
particle-size: 284
loop-index: 4
particle-size: 816
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 816
particle-size: 816
statement: return this'.data.length
particle-size: 816
particle-size: 816
particle-size: 816
statement: actions ~= [(0,i)]
particle-size: 254
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 816
particle-size: 816
statement: return this'.data.length
particle-size: 816
particle-size: 816
particle-size: 816
statement: actions ~= [(1,i)]
particle-size: 180
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 816
particle-size: 816
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 2228
particle-size: 2228
particle-size: 2228
particle-size: 2228
particle-size: 2228
particle-size: 2228
particle-size: 2228
particle-size: 2228
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 754
particle-size: 754
statement: return this'.data.length
particle-size: 754
particle-size: 754
particle-size: 754
particle-size: 754
statement: (pkt,port) := this'.__H0.Q_out.takeFront()
particle-size: 10
particle-size: 10
statement: r := this'.front()
particle-size: 10
particle-size: 10
statement: return this'.data[0]
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.popFront()
particle-size: 10
particle-size: 10
statement: this'.data = this'.data[1..this'.size()]
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return r
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.data = this'.data ~ [x]
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,3));
}
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 754
particle-size: 754
statement: return this'.data.length
particle-size: 754
particle-size: 754
particle-size: 754
particle-size: 754
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 754
particle-size: 754
statement: return this'.data.length
particle-size: 754
particle-size: 754
particle-size: 754
particle-size: 754
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 280
particle-size: 280
statement: r := this'.front()
particle-size: 280
particle-size: 280
statement: return this'.data[0]
particle-size: 280
particle-size: 280
particle-size: 280
particle-size: 280
particle-size: 280
statement: this'.popFront()
particle-size: 280
particle-size: 280
statement: this'.data = this'.data[1..this'.size()]
particle-size: 280
particle-size: 280
statement: return this'.data.length
particle-size: 280
particle-size: 280
particle-size: 280
particle-size: 280
particle-size: 280
statement: return ()
particle-size: 280
particle-size: 280
particle-size: 280
particle-size: 280
statement: return r
particle-size: 280
particle-size: 280
particle-size: 280
particle-size: 280
particle-size: 280
particle-size: 280
statement: if port == 1 {
    this'.__H0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,1));
}
statement: this'.__H1.Q_in.pushBack((pkt,1))
particle-size: 88
particle-size: 88
particle-size: 88
statement: this'.data = this'.data ~ [x]
particle-size: 88
statement: return ()
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 88
particle-size: 88
particle-size: 88
statement: this'.data = this'.data ~ [x]
particle-size: 88
statement: return ()
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,1));
}
statement: this'.__Controller.Q_in.pushBack((pkt,1))
particle-size: 104
particle-size: 104
particle-size: 104
statement: this'.data = this'.data ~ [x]
particle-size: 104
statement: return ()
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 754
particle-size: 754
statement: return this'.data.length
particle-size: 754
particle-size: 754
particle-size: 754
particle-size: 754
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 284
particle-size: 284
statement: r := this'.front()
particle-size: 284
particle-size: 284
statement: return this'.data[0]
particle-size: 284
particle-size: 284
particle-size: 284
particle-size: 284
particle-size: 284
statement: this'.popFront()
particle-size: 284
particle-size: 284
statement: this'.data = this'.data[1..this'.size()]
particle-size: 284
particle-size: 284
statement: return this'.data.length
particle-size: 284
particle-size: 284
particle-size: 284
particle-size: 284
particle-size: 284
statement: return ()
particle-size: 284
particle-size: 284
particle-size: 284
particle-size: 284
statement: return r
particle-size: 284
particle-size: 284
particle-size: 284
particle-size: 284
particle-size: 284
particle-size: 284
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,3));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,2));
}
statement: this'.__H1.Q_in.pushBack((pkt,2))
particle-size: 194
particle-size: 194
particle-size: 194
statement: this'.data = this'.data ~ [x]
particle-size: 194
statement: return ()
particle-size: 194
particle-size: 194
particle-size: 194
particle-size: 194
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,2));
}
statement: this'.__Controller.Q_in.pushBack((pkt,2))
particle-size: 90
particle-size: 90
particle-size: 90
statement: this'.data = this'.data ~ [x]
particle-size: 90
statement: return ()
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 754
particle-size: 754
statement: return this'.data.length
particle-size: 754
particle-size: 754
particle-size: 754
particle-size: 754
statement: (pkt,port) := this'.__H1.Q_out.takeFront()
particle-size: 180
particle-size: 180
statement: r := this'.front()
particle-size: 180
particle-size: 180
statement: return this'.data[0]
particle-size: 180
particle-size: 180
particle-size: 180
particle-size: 180
particle-size: 180
statement: this'.popFront()
particle-size: 180
particle-size: 180
statement: this'.data = this'.data[1..this'.size()]
particle-size: 180
particle-size: 180
statement: return this'.data.length
particle-size: 180
particle-size: 180
particle-size: 180
particle-size: 180
particle-size: 180
statement: return ()
particle-size: 180
particle-size: 180
particle-size: 180
particle-size: 180
statement: return r
particle-size: 180
particle-size: 180
particle-size: 180
particle-size: 180
particle-size: 180
particle-size: 180
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this'.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,4));
}
statement: this'.__Controller.Q_in.pushBack((pkt,4))
particle-size: 180
particle-size: 180
particle-size: 180
statement: this'.data = this'.data ~ [x]
particle-size: 180
statement: return ()
particle-size: 180
particle-size: 180
particle-size: 180
particle-size: 180
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 1474
particle-size: 1474
statement: return this'.data.length
particle-size: 1474
particle-size: 1474
particle-size: 1474
particle-size: 1474
statement: this'.__H0.__run()
particle-size: 430
particle-size: 430
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.pushFront((Packet'(),0))
particle-size: 2
particle-size: 2
statement: return this
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = [x] ~ this'.data
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.num_sent = (this'.num_sent + 1)
particle-size: 2
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1))
particle-size: 2
particle-size: 2
statement: r := this'.front()
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.popFront()
particle-size: 2
particle-size: 2
statement: this'.data = this'.data[1..this'.size()]
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return r
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = this'.data ~ [x]
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.Q_in.popFront()
particle-size: 428
particle-size: 428
statement: this'.data = this'.data[1..this'.size()]
particle-size: 428
particle-size: 428
statement: return this'.data.length
particle-size: 428
particle-size: 428
particle-size: 428
particle-size: 428
particle-size: 428
statement: return ()
particle-size: 428
particle-size: 428
particle-size: 428
particle-size: 428
statement: return ()
particle-size: 430
particle-size: 430
particle-size: 430
particle-size: 430
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 1474
particle-size: 1474
statement: return this'.data.length
particle-size: 1474
particle-size: 1474
particle-size: 1474
particle-size: 1474
statement: this'.__Controller.__run()
particle-size: 686
particle-size: 686
statement: this'.num_packets = (this'.num_packets + 1)
particle-size: 686
statement: if 1 {
    this'.tot_packets = 4;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 2));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 4) {
        observe((this'.Q_in.data[0][1] == 4));
    } else {
        observe(0);
    }
} else {
    this'.tot_packets = 3;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 2));
    } else {
        observe(0);
    }
}
statement: this'.tot_packets = 4
particle-size: 686
statement: if (this'.num_packets == 1) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 2));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 1))
statement: if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 2));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 2))
statement: if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 4))
statement: this'.Q_in.popFront()
particle-size: 390
particle-size: 390
statement: this'.data = this'.data[1..this'.size()]
particle-size: 390
particle-size: 390
statement: return this'.data.length
particle-size: 390
particle-size: 390
particle-size: 390
particle-size: 390
particle-size: 390
statement: return ()
particle-size: 390
particle-size: 390
particle-size: 390
particle-size: 390
statement: return ()
particle-size: 390
particle-size: 390
particle-size: 390
particle-size: 390
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 1178
particle-size: 1178
statement: return this'.data.length
particle-size: 1178
particle-size: 1178
particle-size: 1178
particle-size: 1178
statement: this'.__S1.__run()
particle-size: 18
particle-size: 18
statement: if (this'.bad_hash == 2) {
    this'.bad_hash = flip((1 / 10));
}
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 18
particle-size: 18
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 36
particle-size: 36
statement: this'.Q_in.dupFront()
particle-size: 18
particle-size: 18
statement: this'.pushFront(this'.front())
particle-size: 18
particle-size: 18
statement: return this'.data[0]
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.data = [x] ~ this'.data
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 18
particle-size: 18
statement: r := this'.front()
particle-size: 18
particle-size: 18
statement: return this'.data[0]
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.popFront()
particle-size: 18
particle-size: 18
statement: this'.data = this'.data[1..this'.size()]
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return r
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.data = this'.data ~ [x]
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: if (((this'.bad_hash == 1) && flip((1 / 3))) || ((this'.bad_hash == 0) && flip((1 / 2)))) {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
} else {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
}
particle-size: 36
particle-size: 36
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 144
particle-size: 144
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 72
particle-size: 72
statement: r := this'.front()
particle-size: 72
particle-size: 72
statement: return this'.data[0]
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
statement: this'.popFront()
particle-size: 72
particle-size: 72
statement: this'.data = this'.data[1..this'.size()]
particle-size: 72
particle-size: 72
statement: return this'.data.length
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
statement: return ()
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
statement: return r
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
statement: this'.data = this'.data ~ [x]
particle-size: 72
statement: return ()
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3))
particle-size: 72
particle-size: 72
statement: r := this'.front()
particle-size: 72
particle-size: 72
statement: return this'.data[0]
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
statement: this'.popFront()
particle-size: 72
particle-size: 72
statement: this'.data = this'.data[1..this'.size()]
particle-size: 72
particle-size: 72
statement: return this'.data.length
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
statement: return ()
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
statement: return r
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
statement: this'.data = this'.data ~ [x]
particle-size: 72
statement: return ()
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
statement: return ()
particle-size: 144
particle-size: 72
particle-size: 72
particle-size: 72
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 1232
particle-size: 1232
statement: return this'.data.length
particle-size: 1232
particle-size: 1232
particle-size: 1232
particle-size: 1232
statement: this'.__S2.__run()
particle-size: 86
particle-size: 86
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 86
particle-size: 86
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 172
particle-size: 172
statement: this'.Q_in.dupFront()
particle-size: 86
particle-size: 86
statement: this'.pushFront(this'.front())
particle-size: 86
particle-size: 86
statement: return this'.data[0]
particle-size: 86
particle-size: 86
particle-size: 86
particle-size: 86
particle-size: 86
particle-size: 86
particle-size: 86
statement: this'.data = [x] ~ this'.data
particle-size: 86
statement: return ()
particle-size: 86
particle-size: 86
particle-size: 86
particle-size: 86
statement: return ()
particle-size: 86
particle-size: 86
particle-size: 86
particle-size: 86
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 86
particle-size: 86
statement: r := this'.front()
particle-size: 86
particle-size: 86
statement: return this'.data[0]
particle-size: 86
particle-size: 86
particle-size: 86
particle-size: 86
particle-size: 86
statement: this'.popFront()
particle-size: 86
particle-size: 86
statement: this'.data = this'.data[1..this'.size()]
particle-size: 86
particle-size: 86
statement: return this'.data.length
particle-size: 86
particle-size: 86
particle-size: 86
particle-size: 86
particle-size: 86
statement: return ()
particle-size: 86
particle-size: 86
particle-size: 86
particle-size: 86
statement: return r
particle-size: 86
particle-size: 86
particle-size: 86
particle-size: 86
particle-size: 86
particle-size: 86
particle-size: 86
statement: this'.data = this'.data ~ [x]
particle-size: 86
statement: return ()
particle-size: 86
particle-size: 86
particle-size: 86
particle-size: 86
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 172
particle-size: 172
statement: r := this'.front()
particle-size: 172
particle-size: 172
statement: return this'.data[0]
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
statement: this'.popFront()
particle-size: 172
particle-size: 172
statement: this'.data = this'.data[1..this'.size()]
particle-size: 172
particle-size: 172
statement: return this'.data.length
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
statement: return ()
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
statement: return r
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
statement: this'.data = this'.data ~ [x]
particle-size: 172
statement: return ()
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
statement: return ()
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 1318
particle-size: 1318
statement: return this'.data.length
particle-size: 1318
particle-size: 1318
particle-size: 1318
particle-size: 1318
statement: this'.__H1.__run()
particle-size: 254
particle-size: 254
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 254
particle-size: 254
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 508
particle-size: 508
statement: this'.Q_in.dupFront()
particle-size: 254
particle-size: 254
statement: this'.pushFront(this'.front())
particle-size: 254
particle-size: 254
statement: return this'.data[0]
particle-size: 254
particle-size: 254
particle-size: 254
particle-size: 254
particle-size: 254
particle-size: 254
particle-size: 254
statement: this'.data = [x] ~ this'.data
particle-size: 254
statement: return ()
particle-size: 254
particle-size: 254
particle-size: 254
particle-size: 254
statement: return ()
particle-size: 254
particle-size: 254
particle-size: 254
particle-size: 254
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 254
particle-size: 254
statement: r := this'.front()
particle-size: 254
particle-size: 254
statement: return this'.data[0]
particle-size: 254
particle-size: 254
particle-size: 254
particle-size: 254
particle-size: 254
statement: this'.popFront()
particle-size: 254
particle-size: 254
statement: this'.data = this'.data[1..this'.size()]
particle-size: 254
particle-size: 254
statement: return this'.data.length
particle-size: 254
particle-size: 254
particle-size: 254
particle-size: 254
particle-size: 254
statement: return ()
particle-size: 254
particle-size: 254
particle-size: 254
particle-size: 254
statement: return r
particle-size: 254
particle-size: 254
particle-size: 254
particle-size: 254
particle-size: 254
particle-size: 254
particle-size: 254
statement: this'.data = this'.data ~ [x]
particle-size: 254
statement: return ()
particle-size: 254
particle-size: 254
particle-size: 254
particle-size: 254
statement: this'.Q_in.popFront()
particle-size: 508
particle-size: 508
statement: this'.data = this'.data[1..this'.size()]
particle-size: 508
particle-size: 508
statement: return this'.data.length
particle-size: 508
particle-size: 508
particle-size: 508
particle-size: 508
particle-size: 508
statement: return ()
particle-size: 508
particle-size: 508
particle-size: 508
particle-size: 508
statement: return ()
particle-size: 508
particle-size: 508
particle-size: 508
particle-size: 508
statement: return ()
particle-size: 2330
particle-size: 2330
particle-size: 2330
particle-size: 942
repetition: 14
statement: __d.__step()
particle-size: 942
particle-size: 942
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 942
particle-size: 942
statement: return this'.data.length
particle-size: 942
particle-size: 942
particle-size: 942
particle-size: 942
particle-size: 942
particle-size: 942
statement: return this'.data.length
particle-size: 942
particle-size: 942
particle-size: 942
particle-size: 942
particle-size: 942
particle-size: 942
statement: return this'.data.length
particle-size: 942
particle-size: 942
particle-size: 942
particle-size: 942
particle-size: 942
particle-size: 942
statement: return this'.data.length
particle-size: 942
particle-size: 942
particle-size: 942
particle-size: 942
particle-size: 942
particle-size: 942
statement: return this'.data.length
particle-size: 942
particle-size: 942
particle-size: 942
particle-size: 942
particle-size: 942
particle-size: 942
statement: return this'.data.length
particle-size: 942
particle-size: 942
particle-size: 942
particle-size: 942
particle-size: 942
particle-size: 942
statement: return this'.data.length
particle-size: 942
particle-size: 942
particle-size: 942
particle-size: 942
particle-size: 942
particle-size: 942
statement: return this'.data.length
particle-size: 942
particle-size: 942
particle-size: 942
particle-size: 942
particle-size: 942
particle-size: 942
statement: return this'.data.length
particle-size: 942
particle-size: 942
particle-size: 942
particle-size: 942
particle-size: 942
particle-size: 942
statement: return this'.data.length
particle-size: 942
particle-size: 942
particle-size: 942
particle-size: 942
statement: (action,node) := this'.scheduler()
particle-size: 938
particle-size: 938
statement: actions := ([]: (R × R)[])
particle-size: 938
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 938
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 938
particle-size: 938
statement: return this'.data.length
particle-size: 938
particle-size: 938
particle-size: 938
statement: actions ~= [(0,i)]
particle-size: 510
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 938
particle-size: 938
statement: return this'.data.length
particle-size: 938
particle-size: 938
particle-size: 938
statement: actions ~= [(1,i)]
particle-size: 4
loop-index: 1
particle-size: 938
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 938
particle-size: 938
statement: return this'.data.length
particle-size: 938
particle-size: 938
particle-size: 938
statement: actions ~= [(0,i)]
particle-size: 826
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 938
particle-size: 938
statement: return this'.data.length
particle-size: 938
particle-size: 938
particle-size: 938
loop-index: 2
particle-size: 938
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 938
particle-size: 938
statement: return this'.data.length
particle-size: 938
particle-size: 938
particle-size: 938
statement: actions ~= [(0,i)]
particle-size: 10
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 938
particle-size: 938
statement: return this'.data.length
particle-size: 938
particle-size: 938
particle-size: 938
statement: actions ~= [(1,i)]
particle-size: 232
loop-index: 3
particle-size: 938
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 938
particle-size: 938
statement: return this'.data.length
particle-size: 938
particle-size: 938
particle-size: 938
statement: actions ~= [(0,i)]
particle-size: 88
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 938
particle-size: 938
statement: return this'.data.length
particle-size: 938
particle-size: 938
particle-size: 938
statement: actions ~= [(1,i)]
particle-size: 334
loop-index: 4
particle-size: 938
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 938
particle-size: 938
statement: return this'.data.length
particle-size: 938
particle-size: 938
particle-size: 938
statement: actions ~= [(0,i)]
particle-size: 292
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 938
particle-size: 938
statement: return this'.data.length
particle-size: 938
particle-size: 938
particle-size: 938
statement: actions ~= [(1,i)]
particle-size: 222
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 938
particle-size: 938
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 2518
particle-size: 2518
particle-size: 2518
particle-size: 2518
particle-size: 2518
particle-size: 2518
particle-size: 2518
particle-size: 2518
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 792
particle-size: 792
statement: return this'.data.length
particle-size: 792
particle-size: 792
particle-size: 792
particle-size: 792
statement: (pkt,port) := this'.__H0.Q_out.takeFront()
particle-size: 4
particle-size: 4
statement: r := this'.front()
particle-size: 4
particle-size: 4
statement: return this'.data[0]
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.popFront()
particle-size: 4
particle-size: 4
statement: this'.data = this'.data[1..this'.size()]
particle-size: 4
particle-size: 4
statement: return this'.data.length
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return r
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.data = this'.data ~ [x]
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,3));
}
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 792
particle-size: 792
statement: return this'.data.length
particle-size: 792
particle-size: 792
particle-size: 792
particle-size: 792
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 792
particle-size: 792
statement: return this'.data.length
particle-size: 792
particle-size: 792
particle-size: 792
particle-size: 792
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 232
particle-size: 232
statement: r := this'.front()
particle-size: 232
particle-size: 232
statement: return this'.data[0]
particle-size: 232
particle-size: 232
particle-size: 232
particle-size: 232
particle-size: 232
statement: this'.popFront()
particle-size: 232
particle-size: 232
statement: this'.data = this'.data[1..this'.size()]
particle-size: 232
particle-size: 232
statement: return this'.data.length
particle-size: 232
particle-size: 232
particle-size: 232
particle-size: 232
particle-size: 232
statement: return ()
particle-size: 232
particle-size: 232
particle-size: 232
particle-size: 232
statement: return r
particle-size: 232
particle-size: 232
particle-size: 232
particle-size: 232
particle-size: 232
particle-size: 232
statement: if port == 1 {
    this'.__H0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,1));
}
statement: this'.__H1.Q_in.pushBack((pkt,1))
particle-size: 80
particle-size: 80
particle-size: 80
statement: this'.data = this'.data ~ [x]
particle-size: 80
statement: return ()
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 80
particle-size: 80
particle-size: 80
statement: this'.data = this'.data ~ [x]
particle-size: 80
statement: return ()
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,1));
}
statement: this'.__Controller.Q_in.pushBack((pkt,1))
particle-size: 72
particle-size: 72
particle-size: 72
statement: this'.data = this'.data ~ [x]
particle-size: 72
statement: return ()
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 792
particle-size: 792
statement: return this'.data.length
particle-size: 792
particle-size: 792
particle-size: 792
particle-size: 792
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 334
particle-size: 334
statement: r := this'.front()
particle-size: 334
particle-size: 334
statement: return this'.data[0]
particle-size: 334
particle-size: 334
particle-size: 334
particle-size: 334
particle-size: 334
statement: this'.popFront()
particle-size: 334
particle-size: 334
statement: this'.data = this'.data[1..this'.size()]
particle-size: 334
particle-size: 334
statement: return this'.data.length
particle-size: 334
particle-size: 334
particle-size: 334
particle-size: 334
particle-size: 334
statement: return ()
particle-size: 334
particle-size: 334
particle-size: 334
particle-size: 334
statement: return r
particle-size: 334
particle-size: 334
particle-size: 334
particle-size: 334
particle-size: 334
particle-size: 334
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,3));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,2));
}
statement: this'.__H1.Q_in.pushBack((pkt,2))
particle-size: 218
particle-size: 218
particle-size: 218
statement: this'.data = this'.data ~ [x]
particle-size: 218
statement: return ()
particle-size: 218
particle-size: 218
particle-size: 218
particle-size: 218
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,2));
}
statement: this'.__Controller.Q_in.pushBack((pkt,2))
particle-size: 116
particle-size: 116
particle-size: 116
statement: this'.data = this'.data ~ [x]
particle-size: 116
statement: return ()
particle-size: 116
particle-size: 116
particle-size: 116
particle-size: 116
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 792
particle-size: 792
statement: return this'.data.length
particle-size: 792
particle-size: 792
particle-size: 792
particle-size: 792
statement: (pkt,port) := this'.__H1.Q_out.takeFront()
particle-size: 222
particle-size: 222
statement: r := this'.front()
particle-size: 222
particle-size: 222
statement: return this'.data[0]
particle-size: 222
particle-size: 222
particle-size: 222
particle-size: 222
particle-size: 222
statement: this'.popFront()
particle-size: 222
particle-size: 222
statement: this'.data = this'.data[1..this'.size()]
particle-size: 222
particle-size: 222
statement: return this'.data.length
particle-size: 222
particle-size: 222
particle-size: 222
particle-size: 222
particle-size: 222
statement: return ()
particle-size: 222
particle-size: 222
particle-size: 222
particle-size: 222
statement: return r
particle-size: 222
particle-size: 222
particle-size: 222
particle-size: 222
particle-size: 222
particle-size: 222
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this'.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,4));
}
statement: this'.__Controller.Q_in.pushBack((pkt,4))
particle-size: 222
particle-size: 222
particle-size: 222
statement: this'.data = this'.data ~ [x]
particle-size: 222
statement: return ()
particle-size: 222
particle-size: 222
particle-size: 222
particle-size: 222
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 1726
particle-size: 1726
statement: return this'.data.length
particle-size: 1726
particle-size: 1726
particle-size: 1726
particle-size: 1726
statement: this'.__H0.__run()
particle-size: 510
particle-size: 510
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 510
particle-size: 510
statement: this'.data = this'.data[1..this'.size()]
particle-size: 510
particle-size: 510
statement: return this'.data.length
particle-size: 510
particle-size: 510
particle-size: 510
particle-size: 510
particle-size: 510
statement: return ()
particle-size: 510
particle-size: 510
particle-size: 510
particle-size: 510
statement: return ()
particle-size: 510
particle-size: 510
particle-size: 510
particle-size: 510
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 1726
particle-size: 1726
statement: return this'.data.length
particle-size: 1726
particle-size: 1726
particle-size: 1726
particle-size: 1726
statement: this'.__Controller.__run()
particle-size: 826
particle-size: 826
statement: this'.num_packets = (this'.num_packets + 1)
particle-size: 826
statement: if 1 {
    this'.tot_packets = 4;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 2));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 4) {
        observe((this'.Q_in.data[0][1] == 4));
    } else {
        observe(0);
    }
} else {
    this'.tot_packets = 3;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 2));
    } else {
        observe(0);
    }
}
statement: this'.tot_packets = 4
particle-size: 826
statement: if (this'.num_packets == 1) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 2));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 1))
statement: if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 2));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 2))
statement: if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 4))
statement: this'.Q_in.popFront()
particle-size: 444
particle-size: 444
statement: this'.data = this'.data[1..this'.size()]
particle-size: 444
particle-size: 444
statement: return this'.data.length
particle-size: 444
particle-size: 444
particle-size: 444
particle-size: 444
particle-size: 444
statement: return ()
particle-size: 444
particle-size: 444
particle-size: 444
particle-size: 444
statement: return ()
particle-size: 444
particle-size: 444
particle-size: 444
particle-size: 444
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 1344
particle-size: 1344
statement: return this'.data.length
particle-size: 1344
particle-size: 1344
particle-size: 1344
particle-size: 1344
statement: this'.__S1.__run()
particle-size: 10
particle-size: 10
statement: if (this'.bad_hash == 2) {
    this'.bad_hash = flip((1 / 10));
}
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 10
particle-size: 10
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 20
particle-size: 20
statement: this'.Q_in.dupFront()
particle-size: 10
particle-size: 10
statement: this'.pushFront(this'.front())
particle-size: 10
particle-size: 10
statement: return this'.data[0]
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.data = [x] ~ this'.data
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 10
particle-size: 10
statement: r := this'.front()
particle-size: 10
particle-size: 10
statement: return this'.data[0]
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.popFront()
particle-size: 10
particle-size: 10
statement: this'.data = this'.data[1..this'.size()]
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return r
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.data = this'.data ~ [x]
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: if (((this'.bad_hash == 1) && flip((1 / 3))) || ((this'.bad_hash == 0) && flip((1 / 2)))) {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
} else {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
}
particle-size: 20
particle-size: 20
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 80
particle-size: 80
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 40
particle-size: 40
statement: r := this'.front()
particle-size: 40
particle-size: 40
statement: return this'.data[0]
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: this'.popFront()
particle-size: 40
particle-size: 40
statement: this'.data = this'.data[1..this'.size()]
particle-size: 40
particle-size: 40
statement: return this'.data.length
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: return ()
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: return r
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: this'.data = this'.data ~ [x]
particle-size: 40
statement: return ()
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3))
particle-size: 40
particle-size: 40
statement: r := this'.front()
particle-size: 40
particle-size: 40
statement: return this'.data[0]
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: this'.popFront()
particle-size: 40
particle-size: 40
statement: this'.data = this'.data[1..this'.size()]
particle-size: 40
particle-size: 40
statement: return this'.data.length
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: return ()
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: return r
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: this'.data = this'.data ~ [x]
particle-size: 40
statement: return ()
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: return ()
particle-size: 80
particle-size: 40
particle-size: 40
particle-size: 40
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 1374
particle-size: 1374
statement: return this'.data.length
particle-size: 1374
particle-size: 1374
particle-size: 1374
particle-size: 1374
statement: this'.__S2.__run()
particle-size: 88
particle-size: 88
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 88
particle-size: 88
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 176
particle-size: 176
statement: this'.Q_in.dupFront()
particle-size: 88
particle-size: 88
statement: this'.pushFront(this'.front())
particle-size: 88
particle-size: 88
statement: return this'.data[0]
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: this'.data = [x] ~ this'.data
particle-size: 88
statement: return ()
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: return ()
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 88
particle-size: 88
statement: r := this'.front()
particle-size: 88
particle-size: 88
statement: return this'.data[0]
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: this'.popFront()
particle-size: 88
particle-size: 88
statement: this'.data = this'.data[1..this'.size()]
particle-size: 88
particle-size: 88
statement: return this'.data.length
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: return ()
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: return r
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: this'.data = this'.data ~ [x]
particle-size: 88
statement: return ()
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 176
particle-size: 176
statement: r := this'.front()
particle-size: 176
particle-size: 176
statement: return this'.data[0]
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
statement: this'.popFront()
particle-size: 176
particle-size: 176
statement: this'.data = this'.data[1..this'.size()]
particle-size: 176
particle-size: 176
statement: return this'.data.length
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
statement: return ()
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
statement: return r
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
statement: this'.data = this'.data ~ [x]
particle-size: 176
statement: return ()
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
statement: return ()
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 1462
particle-size: 1462
statement: return this'.data.length
particle-size: 1462
particle-size: 1462
particle-size: 1462
particle-size: 1462
statement: this'.__H1.__run()
particle-size: 292
particle-size: 292
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 292
particle-size: 292
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 584
particle-size: 584
statement: this'.Q_in.dupFront()
particle-size: 292
particle-size: 292
statement: this'.pushFront(this'.front())
particle-size: 292
particle-size: 292
statement: return this'.data[0]
particle-size: 292
particle-size: 292
particle-size: 292
particle-size: 292
particle-size: 292
particle-size: 292
particle-size: 292
statement: this'.data = [x] ~ this'.data
particle-size: 292
statement: return ()
particle-size: 292
particle-size: 292
particle-size: 292
particle-size: 292
statement: return ()
particle-size: 292
particle-size: 292
particle-size: 292
particle-size: 292
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 292
particle-size: 292
statement: r := this'.front()
particle-size: 292
particle-size: 292
statement: return this'.data[0]
particle-size: 292
particle-size: 292
particle-size: 292
particle-size: 292
particle-size: 292
statement: this'.popFront()
particle-size: 292
particle-size: 292
statement: this'.data = this'.data[1..this'.size()]
particle-size: 292
particle-size: 292
statement: return this'.data.length
particle-size: 292
particle-size: 292
particle-size: 292
particle-size: 292
particle-size: 292
statement: return ()
particle-size: 292
particle-size: 292
particle-size: 292
particle-size: 292
statement: return r
particle-size: 292
particle-size: 292
particle-size: 292
particle-size: 292
particle-size: 292
particle-size: 292
particle-size: 292
statement: this'.data = this'.data ~ [x]
particle-size: 292
statement: return ()
particle-size: 292
particle-size: 292
particle-size: 292
particle-size: 292
statement: this'.Q_in.popFront()
particle-size: 584
particle-size: 584
statement: this'.data = this'.data[1..this'.size()]
particle-size: 584
particle-size: 584
statement: return this'.data.length
particle-size: 584
particle-size: 584
particle-size: 584
particle-size: 584
particle-size: 584
statement: return ()
particle-size: 584
particle-size: 584
particle-size: 584
particle-size: 584
statement: return ()
particle-size: 584
particle-size: 584
particle-size: 584
particle-size: 584
statement: return ()
particle-size: 2550
particle-size: 2550
particle-size: 2550
particle-size: 994
repetition: 15
statement: __d.__step()
particle-size: 994
particle-size: 994
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 994
particle-size: 994
statement: return this'.data.length
particle-size: 994
particle-size: 994
particle-size: 994
particle-size: 994
particle-size: 994
particle-size: 994
statement: return this'.data.length
particle-size: 994
particle-size: 994
particle-size: 994
particle-size: 994
particle-size: 994
particle-size: 994
statement: return this'.data.length
particle-size: 994
particle-size: 994
particle-size: 994
particle-size: 994
particle-size: 994
particle-size: 994
statement: return this'.data.length
particle-size: 994
particle-size: 994
particle-size: 994
particle-size: 994
particle-size: 994
particle-size: 994
statement: return this'.data.length
particle-size: 994
particle-size: 994
particle-size: 994
particle-size: 994
particle-size: 994
particle-size: 994
statement: return this'.data.length
particle-size: 994
particle-size: 994
particle-size: 994
particle-size: 994
particle-size: 994
particle-size: 994
statement: return this'.data.length
particle-size: 994
particle-size: 994
particle-size: 994
particle-size: 994
particle-size: 994
particle-size: 994
statement: return this'.data.length
particle-size: 994
particle-size: 994
particle-size: 994
particle-size: 994
particle-size: 994
particle-size: 994
statement: return this'.data.length
particle-size: 994
particle-size: 994
particle-size: 994
particle-size: 994
particle-size: 994
particle-size: 994
statement: return this'.data.length
particle-size: 994
particle-size: 994
particle-size: 994
particle-size: 994
statement: (action,node) := this'.scheduler()
particle-size: 990
particle-size: 990
statement: actions := ([]: (R × R)[])
particle-size: 990
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 990
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 990
particle-size: 990
statement: return this'.data.length
particle-size: 990
particle-size: 990
particle-size: 990
statement: actions ~= [(0,i)]
particle-size: 484
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 990
particle-size: 990
statement: return this'.data.length
particle-size: 990
particle-size: 990
particle-size: 990
statement: actions ~= [(1,i)]
particle-size: 2
loop-index: 1
particle-size: 990
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 990
particle-size: 990
statement: return this'.data.length
particle-size: 990
particle-size: 990
particle-size: 990
statement: actions ~= [(0,i)]
particle-size: 900
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 990
particle-size: 990
statement: return this'.data.length
particle-size: 990
particle-size: 990
particle-size: 990
loop-index: 2
particle-size: 990
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 990
particle-size: 990
statement: return this'.data.length
particle-size: 990
particle-size: 990
particle-size: 990
statement: actions ~= [(0,i)]
particle-size: 4
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 990
particle-size: 990
statement: return this'.data.length
particle-size: 990
particle-size: 990
particle-size: 990
statement: actions ~= [(1,i)]
particle-size: 168
loop-index: 3
particle-size: 990
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 990
particle-size: 990
statement: return this'.data.length
particle-size: 990
particle-size: 990
particle-size: 990
statement: actions ~= [(0,i)]
particle-size: 80
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 990
particle-size: 990
statement: return this'.data.length
particle-size: 990
particle-size: 990
particle-size: 990
statement: actions ~= [(1,i)]
particle-size: 354
loop-index: 4
particle-size: 990
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 990
particle-size: 990
statement: return this'.data.length
particle-size: 990
particle-size: 990
particle-size: 990
statement: actions ~= [(0,i)]
particle-size: 308
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 990
particle-size: 990
statement: return this'.data.length
particle-size: 990
particle-size: 990
particle-size: 990
statement: actions ~= [(1,i)]
particle-size: 244
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 990
particle-size: 990
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 2544
particle-size: 2544
particle-size: 2544
particle-size: 2544
particle-size: 2544
particle-size: 2544
particle-size: 2544
particle-size: 2544
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 768
particle-size: 768
statement: return this'.data.length
particle-size: 768
particle-size: 768
particle-size: 768
particle-size: 768
statement: (pkt,port) := this'.__H0.Q_out.takeFront()
particle-size: 2
particle-size: 2
statement: r := this'.front()
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.popFront()
particle-size: 2
particle-size: 2
statement: this'.data = this'.data[1..this'.size()]
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return r
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = this'.data ~ [x]
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,3));
}
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 768
particle-size: 768
statement: return this'.data.length
particle-size: 768
particle-size: 768
particle-size: 768
particle-size: 768
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 768
particle-size: 768
statement: return this'.data.length
particle-size: 768
particle-size: 768
particle-size: 768
particle-size: 768
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 168
particle-size: 168
statement: r := this'.front()
particle-size: 168
particle-size: 168
statement: return this'.data[0]
particle-size: 168
particle-size: 168
particle-size: 168
particle-size: 168
particle-size: 168
statement: this'.popFront()
particle-size: 168
particle-size: 168
statement: this'.data = this'.data[1..this'.size()]
particle-size: 168
particle-size: 168
statement: return this'.data.length
particle-size: 168
particle-size: 168
particle-size: 168
particle-size: 168
particle-size: 168
statement: return ()
particle-size: 168
particle-size: 168
particle-size: 168
particle-size: 168
statement: return r
particle-size: 168
particle-size: 168
particle-size: 168
particle-size: 168
particle-size: 168
particle-size: 168
statement: if port == 1 {
    this'.__H0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,1));
}
statement: this'.__H1.Q_in.pushBack((pkt,1))
particle-size: 64
particle-size: 64
particle-size: 64
statement: this'.data = this'.data ~ [x]
particle-size: 64
statement: return ()
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 64
particle-size: 64
particle-size: 64
statement: this'.data = this'.data ~ [x]
particle-size: 64
statement: return ()
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,1));
}
statement: this'.__Controller.Q_in.pushBack((pkt,1))
particle-size: 40
particle-size: 40
particle-size: 40
statement: this'.data = this'.data ~ [x]
particle-size: 40
statement: return ()
particle-size: 40
particle-size: 40
particle-size: 40
particle-size: 40
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 768
particle-size: 768
statement: return this'.data.length
particle-size: 768
particle-size: 768
particle-size: 768
particle-size: 768
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 354
particle-size: 354
statement: r := this'.front()
particle-size: 354
particle-size: 354
statement: return this'.data[0]
particle-size: 354
particle-size: 354
particle-size: 354
particle-size: 354
particle-size: 354
statement: this'.popFront()
particle-size: 354
particle-size: 354
statement: this'.data = this'.data[1..this'.size()]
particle-size: 354
particle-size: 354
statement: return this'.data.length
particle-size: 354
particle-size: 354
particle-size: 354
particle-size: 354
particle-size: 354
statement: return ()
particle-size: 354
particle-size: 354
particle-size: 354
particle-size: 354
statement: return r
particle-size: 354
particle-size: 354
particle-size: 354
particle-size: 354
particle-size: 354
particle-size: 354
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,3));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,2));
}
statement: this'.__H1.Q_in.pushBack((pkt,2))
particle-size: 216
particle-size: 216
particle-size: 216
statement: this'.data = this'.data ~ [x]
particle-size: 216
statement: return ()
particle-size: 216
particle-size: 216
particle-size: 216
particle-size: 216
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,2));
}
statement: this'.__Controller.Q_in.pushBack((pkt,2))
particle-size: 138
particle-size: 138
particle-size: 138
statement: this'.data = this'.data ~ [x]
particle-size: 138
statement: return ()
particle-size: 138
particle-size: 138
particle-size: 138
particle-size: 138
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 768
particle-size: 768
statement: return this'.data.length
particle-size: 768
particle-size: 768
particle-size: 768
particle-size: 768
statement: (pkt,port) := this'.__H1.Q_out.takeFront()
particle-size: 244
particle-size: 244
statement: r := this'.front()
particle-size: 244
particle-size: 244
statement: return this'.data[0]
particle-size: 244
particle-size: 244
particle-size: 244
particle-size: 244
particle-size: 244
statement: this'.popFront()
particle-size: 244
particle-size: 244
statement: this'.data = this'.data[1..this'.size()]
particle-size: 244
particle-size: 244
statement: return this'.data.length
particle-size: 244
particle-size: 244
particle-size: 244
particle-size: 244
particle-size: 244
statement: return ()
particle-size: 244
particle-size: 244
particle-size: 244
particle-size: 244
statement: return r
particle-size: 244
particle-size: 244
particle-size: 244
particle-size: 244
particle-size: 244
particle-size: 244
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this'.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,4));
}
statement: this'.__Controller.Q_in.pushBack((pkt,4))
particle-size: 244
particle-size: 244
particle-size: 244
statement: this'.data = this'.data ~ [x]
particle-size: 244
statement: return ()
particle-size: 244
particle-size: 244
particle-size: 244
particle-size: 244
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 1776
particle-size: 1776
statement: return this'.data.length
particle-size: 1776
particle-size: 1776
particle-size: 1776
particle-size: 1776
statement: this'.__H0.__run()
particle-size: 484
particle-size: 484
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 484
particle-size: 484
statement: this'.data = this'.data[1..this'.size()]
particle-size: 484
particle-size: 484
statement: return this'.data.length
particle-size: 484
particle-size: 484
particle-size: 484
particle-size: 484
particle-size: 484
statement: return ()
particle-size: 484
particle-size: 484
particle-size: 484
particle-size: 484
statement: return ()
particle-size: 484
particle-size: 484
particle-size: 484
particle-size: 484
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 1776
particle-size: 1776
statement: return this'.data.length
particle-size: 1776
particle-size: 1776
particle-size: 1776
particle-size: 1776
statement: this'.__Controller.__run()
particle-size: 900
particle-size: 900
statement: this'.num_packets = (this'.num_packets + 1)
particle-size: 900
statement: if 1 {
    this'.tot_packets = 4;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 2));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 4) {
        observe((this'.Q_in.data[0][1] == 4));
    } else {
        observe(0);
    }
} else {
    this'.tot_packets = 3;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 2));
    } else {
        observe(0);
    }
}
statement: this'.tot_packets = 4
particle-size: 900
statement: if (this'.num_packets == 1) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 2));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 1))
statement: if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 2));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 2))
statement: if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 4))
statement: this'.Q_in.popFront()
particle-size: 466
particle-size: 466
statement: this'.data = this'.data[1..this'.size()]
particle-size: 466
particle-size: 466
statement: return this'.data.length
particle-size: 466
particle-size: 466
particle-size: 466
particle-size: 466
particle-size: 466
statement: return ()
particle-size: 466
particle-size: 466
particle-size: 466
particle-size: 466
statement: return ()
particle-size: 466
particle-size: 466
particle-size: 466
particle-size: 466
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 1342
particle-size: 1342
statement: return this'.data.length
particle-size: 1342
particle-size: 1342
particle-size: 1342
particle-size: 1342
statement: this'.__S1.__run()
particle-size: 4
particle-size: 4
statement: if (this'.bad_hash == 2) {
    this'.bad_hash = flip((1 / 10));
}
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 4
particle-size: 4
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 8
particle-size: 8
statement: this'.Q_in.dupFront()
particle-size: 4
particle-size: 4
statement: this'.pushFront(this'.front())
particle-size: 4
particle-size: 4
statement: return this'.data[0]
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.data = [x] ~ this'.data
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 4
particle-size: 4
statement: r := this'.front()
particle-size: 4
particle-size: 4
statement: return this'.data[0]
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.popFront()
particle-size: 4
particle-size: 4
statement: this'.data = this'.data[1..this'.size()]
particle-size: 4
particle-size: 4
statement: return this'.data.length
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return r
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.data = this'.data ~ [x]
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: if (((this'.bad_hash == 1) && flip((1 / 3))) || ((this'.bad_hash == 0) && flip((1 / 2)))) {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
} else {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
}
particle-size: 8
particle-size: 8
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 32
particle-size: 32
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 16
particle-size: 16
statement: r := this'.front()
particle-size: 16
particle-size: 16
statement: return this'.data[0]
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.popFront()
particle-size: 16
particle-size: 16
statement: this'.data = this'.data[1..this'.size()]
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return r
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.data = this'.data ~ [x]
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3))
particle-size: 16
particle-size: 16
statement: r := this'.front()
particle-size: 16
particle-size: 16
statement: return this'.data[0]
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.popFront()
particle-size: 16
particle-size: 16
statement: this'.data = this'.data[1..this'.size()]
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return r
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.data = this'.data ~ [x]
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return ()
particle-size: 32
particle-size: 16
particle-size: 16
particle-size: 16
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 1354
particle-size: 1354
statement: return this'.data.length
particle-size: 1354
particle-size: 1354
particle-size: 1354
particle-size: 1354
statement: this'.__S2.__run()
particle-size: 80
particle-size: 80
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 80
particle-size: 80
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 160
particle-size: 160
statement: this'.Q_in.dupFront()
particle-size: 80
particle-size: 80
statement: this'.pushFront(this'.front())
particle-size: 80
particle-size: 80
statement: return this'.data[0]
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: this'.data = [x] ~ this'.data
particle-size: 80
statement: return ()
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: return ()
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 80
particle-size: 80
statement: r := this'.front()
particle-size: 80
particle-size: 80
statement: return this'.data[0]
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: this'.popFront()
particle-size: 80
particle-size: 80
statement: this'.data = this'.data[1..this'.size()]
particle-size: 80
particle-size: 80
statement: return this'.data.length
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: return ()
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: return r
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: this'.data = this'.data ~ [x]
particle-size: 80
statement: return ()
particle-size: 80
particle-size: 80
particle-size: 80
particle-size: 80
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 160
particle-size: 160
statement: r := this'.front()
particle-size: 160
particle-size: 160
statement: return this'.data[0]
particle-size: 160
particle-size: 160
particle-size: 160
particle-size: 160
particle-size: 160
statement: this'.popFront()
particle-size: 160
particle-size: 160
statement: this'.data = this'.data[1..this'.size()]
particle-size: 160
particle-size: 160
statement: return this'.data.length
particle-size: 160
particle-size: 160
particle-size: 160
particle-size: 160
particle-size: 160
statement: return ()
particle-size: 160
particle-size: 160
particle-size: 160
particle-size: 160
statement: return r
particle-size: 160
particle-size: 160
particle-size: 160
particle-size: 160
particle-size: 160
particle-size: 160
particle-size: 160
statement: this'.data = this'.data ~ [x]
particle-size: 160
statement: return ()
particle-size: 160
particle-size: 160
particle-size: 160
particle-size: 160
statement: return ()
particle-size: 160
particle-size: 160
particle-size: 160
particle-size: 160
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 1434
particle-size: 1434
statement: return this'.data.length
particle-size: 1434
particle-size: 1434
particle-size: 1434
particle-size: 1434
statement: this'.__H1.__run()
particle-size: 308
particle-size: 308
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 308
particle-size: 308
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 616
particle-size: 616
statement: this'.Q_in.dupFront()
particle-size: 308
particle-size: 308
statement: this'.pushFront(this'.front())
particle-size: 308
particle-size: 308
statement: return this'.data[0]
particle-size: 308
particle-size: 308
particle-size: 308
particle-size: 308
particle-size: 308
particle-size: 308
particle-size: 308
statement: this'.data = [x] ~ this'.data
particle-size: 308
statement: return ()
particle-size: 308
particle-size: 308
particle-size: 308
particle-size: 308
statement: return ()
particle-size: 308
particle-size: 308
particle-size: 308
particle-size: 308
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 308
particle-size: 308
statement: r := this'.front()
particle-size: 308
particle-size: 308
statement: return this'.data[0]
particle-size: 308
particle-size: 308
particle-size: 308
particle-size: 308
particle-size: 308
statement: this'.popFront()
particle-size: 308
particle-size: 308
statement: this'.data = this'.data[1..this'.size()]
particle-size: 308
particle-size: 308
statement: return this'.data.length
particle-size: 308
particle-size: 308
particle-size: 308
particle-size: 308
particle-size: 308
statement: return ()
particle-size: 308
particle-size: 308
particle-size: 308
particle-size: 308
statement: return r
particle-size: 308
particle-size: 308
particle-size: 308
particle-size: 308
particle-size: 308
particle-size: 308
particle-size: 308
statement: this'.data = this'.data ~ [x]
particle-size: 308
statement: return ()
particle-size: 308
particle-size: 308
particle-size: 308
particle-size: 308
statement: this'.Q_in.popFront()
particle-size: 616
particle-size: 616
statement: this'.data = this'.data[1..this'.size()]
particle-size: 616
particle-size: 616
statement: return this'.data.length
particle-size: 616
particle-size: 616
particle-size: 616
particle-size: 616
particle-size: 616
statement: return ()
particle-size: 616
particle-size: 616
particle-size: 616
particle-size: 616
statement: return ()
particle-size: 616
particle-size: 616
particle-size: 616
particle-size: 616
statement: return ()
particle-size: 2514
particle-size: 2514
particle-size: 2514
particle-size: 972
repetition: 16
statement: __d.__step()
particle-size: 972
particle-size: 972
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 972
particle-size: 972
statement: return this'.data.length
particle-size: 972
particle-size: 972
particle-size: 972
particle-size: 972
particle-size: 972
particle-size: 972
statement: return this'.data.length
particle-size: 972
particle-size: 972
particle-size: 972
particle-size: 972
particle-size: 972
particle-size: 972
statement: return this'.data.length
particle-size: 972
particle-size: 972
particle-size: 972
particle-size: 972
particle-size: 972
particle-size: 972
statement: return this'.data.length
particle-size: 972
particle-size: 972
particle-size: 972
particle-size: 972
particle-size: 972
particle-size: 972
statement: return this'.data.length
particle-size: 972
particle-size: 972
particle-size: 972
particle-size: 972
particle-size: 972
particle-size: 972
statement: return this'.data.length
particle-size: 972
particle-size: 972
particle-size: 972
particle-size: 972
particle-size: 972
particle-size: 972
statement: return this'.data.length
particle-size: 972
particle-size: 972
particle-size: 972
particle-size: 972
particle-size: 972
particle-size: 972
statement: return this'.data.length
particle-size: 972
particle-size: 972
particle-size: 972
particle-size: 972
particle-size: 972
particle-size: 972
statement: return this'.data.length
particle-size: 972
particle-size: 972
particle-size: 972
particle-size: 972
particle-size: 972
particle-size: 972
statement: return this'.data.length
particle-size: 972
particle-size: 972
particle-size: 972
particle-size: 972
statement: (action,node) := this'.scheduler()
particle-size: 968
particle-size: 968
statement: actions := ([]: (R × R)[])
particle-size: 968
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 968
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 968
particle-size: 968
statement: return this'.data.length
particle-size: 968
particle-size: 968
particle-size: 968
statement: actions ~= [(0,i)]
particle-size: 484
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 968
particle-size: 968
statement: return this'.data.length
particle-size: 968
particle-size: 968
particle-size: 968
loop-index: 1
particle-size: 968
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 968
particle-size: 968
statement: return this'.data.length
particle-size: 968
particle-size: 968
particle-size: 968
statement: actions ~= [(0,i)]
particle-size: 904
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 968
particle-size: 968
statement: return this'.data.length
particle-size: 968
particle-size: 968
particle-size: 968
loop-index: 2
particle-size: 968
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 968
particle-size: 968
statement: return this'.data.length
particle-size: 968
particle-size: 968
particle-size: 968
statement: actions ~= [(0,i)]
particle-size: 2
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 968
particle-size: 968
statement: return this'.data.length
particle-size: 968
particle-size: 968
particle-size: 968
statement: actions ~= [(1,i)]
particle-size: 84
loop-index: 3
particle-size: 968
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 968
particle-size: 968
statement: return this'.data.length
particle-size: 968
particle-size: 968
particle-size: 968
statement: actions ~= [(0,i)]
particle-size: 64
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 968
particle-size: 968
statement: return this'.data.length
particle-size: 968
particle-size: 968
particle-size: 968
statement: actions ~= [(1,i)]
particle-size: 336
loop-index: 4
particle-size: 968
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 968
particle-size: 968
statement: return this'.data.length
particle-size: 968
particle-size: 968
particle-size: 968
statement: actions ~= [(0,i)]
particle-size: 302
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 968
particle-size: 968
statement: return this'.data.length
particle-size: 968
particle-size: 968
particle-size: 968
statement: actions ~= [(1,i)]
particle-size: 246
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 968
particle-size: 968
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 2422
particle-size: 2422
particle-size: 2422
particle-size: 2422
particle-size: 2422
particle-size: 2422
particle-size: 2422
particle-size: 2422
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 666
particle-size: 666
statement: return this'.data.length
particle-size: 666
particle-size: 666
particle-size: 666
particle-size: 666
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 666
particle-size: 666
statement: return this'.data.length
particle-size: 666
particle-size: 666
particle-size: 666
particle-size: 666
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 666
particle-size: 666
statement: return this'.data.length
particle-size: 666
particle-size: 666
particle-size: 666
particle-size: 666
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 84
particle-size: 84
statement: r := this'.front()
particle-size: 84
particle-size: 84
statement: return this'.data[0]
particle-size: 84
particle-size: 84
particle-size: 84
particle-size: 84
particle-size: 84
statement: this'.popFront()
particle-size: 84
particle-size: 84
statement: this'.data = this'.data[1..this'.size()]
particle-size: 84
particle-size: 84
statement: return this'.data.length
particle-size: 84
particle-size: 84
particle-size: 84
particle-size: 84
particle-size: 84
statement: return ()
particle-size: 84
particle-size: 84
particle-size: 84
particle-size: 84
statement: return r
particle-size: 84
particle-size: 84
particle-size: 84
particle-size: 84
particle-size: 84
particle-size: 84
statement: if port == 1 {
    this'.__H0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,1));
}
statement: this'.__H1.Q_in.pushBack((pkt,1))
particle-size: 34
particle-size: 34
particle-size: 34
statement: this'.data = this'.data ~ [x]
particle-size: 34
statement: return ()
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 34
particle-size: 34
particle-size: 34
statement: this'.data = this'.data ~ [x]
particle-size: 34
statement: return ()
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,1));
}
statement: this'.__Controller.Q_in.pushBack((pkt,1))
particle-size: 16
particle-size: 16
particle-size: 16
statement: this'.data = this'.data ~ [x]
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 666
particle-size: 666
statement: return this'.data.length
particle-size: 666
particle-size: 666
particle-size: 666
particle-size: 666
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 336
particle-size: 336
statement: r := this'.front()
particle-size: 336
particle-size: 336
statement: return this'.data[0]
particle-size: 336
particle-size: 336
particle-size: 336
particle-size: 336
particle-size: 336
statement: this'.popFront()
particle-size: 336
particle-size: 336
statement: this'.data = this'.data[1..this'.size()]
particle-size: 336
particle-size: 336
statement: return this'.data.length
particle-size: 336
particle-size: 336
particle-size: 336
particle-size: 336
particle-size: 336
statement: return ()
particle-size: 336
particle-size: 336
particle-size: 336
particle-size: 336
statement: return r
particle-size: 336
particle-size: 336
particle-size: 336
particle-size: 336
particle-size: 336
particle-size: 336
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,3));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,2));
}
statement: this'.__H1.Q_in.pushBack((pkt,2))
particle-size: 190
particle-size: 190
particle-size: 190
statement: this'.data = this'.data ~ [x]
particle-size: 190
statement: return ()
particle-size: 190
particle-size: 190
particle-size: 190
particle-size: 190
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,2));
}
statement: this'.__Controller.Q_in.pushBack((pkt,2))
particle-size: 146
particle-size: 146
particle-size: 146
statement: this'.data = this'.data ~ [x]
particle-size: 146
statement: return ()
particle-size: 146
particle-size: 146
particle-size: 146
particle-size: 146
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 666
particle-size: 666
statement: return this'.data.length
particle-size: 666
particle-size: 666
particle-size: 666
particle-size: 666
statement: (pkt,port) := this'.__H1.Q_out.takeFront()
particle-size: 246
particle-size: 246
statement: r := this'.front()
particle-size: 246
particle-size: 246
statement: return this'.data[0]
particle-size: 246
particle-size: 246
particle-size: 246
particle-size: 246
particle-size: 246
statement: this'.popFront()
particle-size: 246
particle-size: 246
statement: this'.data = this'.data[1..this'.size()]
particle-size: 246
particle-size: 246
statement: return this'.data.length
particle-size: 246
particle-size: 246
particle-size: 246
particle-size: 246
particle-size: 246
statement: return ()
particle-size: 246
particle-size: 246
particle-size: 246
particle-size: 246
statement: return r
particle-size: 246
particle-size: 246
particle-size: 246
particle-size: 246
particle-size: 246
particle-size: 246
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this'.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,4));
}
statement: this'.__Controller.Q_in.pushBack((pkt,4))
particle-size: 246
particle-size: 246
particle-size: 246
statement: this'.data = this'.data ~ [x]
particle-size: 246
statement: return ()
particle-size: 246
particle-size: 246
particle-size: 246
particle-size: 246
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 1756
particle-size: 1756
statement: return this'.data.length
particle-size: 1756
particle-size: 1756
particle-size: 1756
particle-size: 1756
statement: this'.__H0.__run()
particle-size: 484
particle-size: 484
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 484
particle-size: 484
statement: this'.data = this'.data[1..this'.size()]
particle-size: 484
particle-size: 484
statement: return this'.data.length
particle-size: 484
particle-size: 484
particle-size: 484
particle-size: 484
particle-size: 484
statement: return ()
particle-size: 484
particle-size: 484
particle-size: 484
particle-size: 484
statement: return ()
particle-size: 484
particle-size: 484
particle-size: 484
particle-size: 484
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 1756
particle-size: 1756
statement: return this'.data.length
particle-size: 1756
particle-size: 1756
particle-size: 1756
particle-size: 1756
statement: this'.__Controller.__run()
particle-size: 904
particle-size: 904
statement: this'.num_packets = (this'.num_packets + 1)
particle-size: 904
statement: if 1 {
    this'.tot_packets = 4;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 2));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 4) {
        observe((this'.Q_in.data[0][1] == 4));
    } else {
        observe(0);
    }
} else {
    this'.tot_packets = 3;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 2));
    } else {
        observe(0);
    }
}
statement: this'.tot_packets = 4
particle-size: 904
statement: if (this'.num_packets == 1) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 2));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 1))
statement: if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 2));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 2))
statement: if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 4))
statement: this'.Q_in.popFront()
particle-size: 464
particle-size: 464
statement: this'.data = this'.data[1..this'.size()]
particle-size: 464
particle-size: 464
statement: return this'.data.length
particle-size: 464
particle-size: 464
particle-size: 464
particle-size: 464
particle-size: 464
statement: return ()
particle-size: 464
particle-size: 464
particle-size: 464
particle-size: 464
statement: return ()
particle-size: 464
particle-size: 464
particle-size: 464
particle-size: 464
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 1316
particle-size: 1316
statement: return this'.data.length
particle-size: 1316
particle-size: 1316
particle-size: 1316
particle-size: 1316
statement: this'.__S1.__run()
particle-size: 2
particle-size: 2
statement: if (this'.bad_hash == 2) {
    this'.bad_hash = flip((1 / 10));
}
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 2
particle-size: 2
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 4
particle-size: 4
statement: this'.Q_in.dupFront()
particle-size: 2
particle-size: 2
statement: this'.pushFront(this'.front())
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = [x] ~ this'.data
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 2
particle-size: 2
statement: r := this'.front()
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.popFront()
particle-size: 2
particle-size: 2
statement: this'.data = this'.data[1..this'.size()]
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return r
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = this'.data ~ [x]
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if (((this'.bad_hash == 1) && flip((1 / 3))) || ((this'.bad_hash == 0) && flip((1 / 2)))) {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
} else {
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
}
particle-size: 4
particle-size: 4
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 16
particle-size: 16
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 8
particle-size: 8
statement: r := this'.front()
particle-size: 8
particle-size: 8
statement: return this'.data[0]
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.popFront()
particle-size: 8
particle-size: 8
statement: this'.data = this'.data[1..this'.size()]
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return r
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.data = this'.data ~ [x]
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3))
particle-size: 8
particle-size: 8
statement: r := this'.front()
particle-size: 8
particle-size: 8
statement: return this'.data[0]
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.popFront()
particle-size: 8
particle-size: 8
statement: this'.data = this'.data[1..this'.size()]
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return r
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.data = this'.data ~ [x]
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 16
particle-size: 8
particle-size: 8
particle-size: 8
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 1322
particle-size: 1322
statement: return this'.data.length
particle-size: 1322
particle-size: 1322
particle-size: 1322
particle-size: 1322
statement: this'.__S2.__run()
particle-size: 64
particle-size: 64
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 64
particle-size: 64
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 128
particle-size: 128
statement: this'.Q_in.dupFront()
particle-size: 64
particle-size: 64
statement: this'.pushFront(this'.front())
particle-size: 64
particle-size: 64
statement: return this'.data[0]
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: this'.data = [x] ~ this'.data
particle-size: 64
statement: return ()
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: return ()
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 64
particle-size: 64
statement: r := this'.front()
particle-size: 64
particle-size: 64
statement: return this'.data[0]
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: this'.popFront()
particle-size: 64
particle-size: 64
statement: this'.data = this'.data[1..this'.size()]
particle-size: 64
particle-size: 64
statement: return this'.data.length
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: return ()
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: return r
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: this'.data = this'.data ~ [x]
particle-size: 64
statement: return ()
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 128
particle-size: 128
statement: r := this'.front()
particle-size: 128
particle-size: 128
statement: return this'.data[0]
particle-size: 128
particle-size: 128
particle-size: 128
particle-size: 128
particle-size: 128
statement: this'.popFront()
particle-size: 128
particle-size: 128
statement: this'.data = this'.data[1..this'.size()]
particle-size: 128
particle-size: 128
statement: return this'.data.length
particle-size: 128
particle-size: 128
particle-size: 128
particle-size: 128
particle-size: 128
statement: return ()
particle-size: 128
particle-size: 128
particle-size: 128
particle-size: 128
statement: return r
particle-size: 128
particle-size: 128
particle-size: 128
particle-size: 128
particle-size: 128
particle-size: 128
particle-size: 128
statement: this'.data = this'.data ~ [x]
particle-size: 128
statement: return ()
particle-size: 128
particle-size: 128
particle-size: 128
particle-size: 128
statement: return ()
particle-size: 128
particle-size: 128
particle-size: 128
particle-size: 128
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 1386
particle-size: 1386
statement: return this'.data.length
particle-size: 1386
particle-size: 1386
particle-size: 1386
particle-size: 1386
statement: this'.__H1.__run()
particle-size: 302
particle-size: 302
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 302
particle-size: 302
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 604
particle-size: 604
statement: this'.Q_in.dupFront()
particle-size: 302
particle-size: 302
statement: this'.pushFront(this'.front())
particle-size: 302
particle-size: 302
statement: return this'.data[0]
particle-size: 302
particle-size: 302
particle-size: 302
particle-size: 302
particle-size: 302
particle-size: 302
particle-size: 302
statement: this'.data = [x] ~ this'.data
particle-size: 302
statement: return ()
particle-size: 302
particle-size: 302
particle-size: 302
particle-size: 302
statement: return ()
particle-size: 302
particle-size: 302
particle-size: 302
particle-size: 302
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 302
particle-size: 302
statement: r := this'.front()
particle-size: 302
particle-size: 302
statement: return this'.data[0]
particle-size: 302
particle-size: 302
particle-size: 302
particle-size: 302
particle-size: 302
statement: this'.popFront()
particle-size: 302
particle-size: 302
statement: this'.data = this'.data[1..this'.size()]
particle-size: 302
particle-size: 302
statement: return this'.data.length
particle-size: 302
particle-size: 302
particle-size: 302
particle-size: 302
particle-size: 302
statement: return ()
particle-size: 302
particle-size: 302
particle-size: 302
particle-size: 302
statement: return r
particle-size: 302
particle-size: 302
particle-size: 302
particle-size: 302
particle-size: 302
particle-size: 302
particle-size: 302
statement: this'.data = this'.data ~ [x]
particle-size: 302
statement: return ()
particle-size: 302
particle-size: 302
particle-size: 302
particle-size: 302
statement: this'.Q_in.popFront()
particle-size: 604
particle-size: 604
statement: this'.data = this'.data[1..this'.size()]
particle-size: 604
particle-size: 604
statement: return this'.data.length
particle-size: 604
particle-size: 604
particle-size: 604
particle-size: 604
particle-size: 604
statement: return ()
particle-size: 604
particle-size: 604
particle-size: 604
particle-size: 604
statement: return ()
particle-size: 604
particle-size: 604
particle-size: 604
particle-size: 604
statement: return ()
particle-size: 2358
particle-size: 2358
particle-size: 2358
particle-size: 924
repetition: 17
statement: __d.__step()
particle-size: 924
particle-size: 924
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 924
particle-size: 924
statement: return this'.data.length
particle-size: 924
particle-size: 924
particle-size: 924
particle-size: 924
particle-size: 924
particle-size: 924
statement: return this'.data.length
particle-size: 924
particle-size: 924
particle-size: 924
particle-size: 924
particle-size: 924
particle-size: 924
statement: return this'.data.length
particle-size: 924
particle-size: 924
particle-size: 924
particle-size: 924
particle-size: 924
particle-size: 924
statement: return this'.data.length
particle-size: 924
particle-size: 924
particle-size: 924
particle-size: 924
particle-size: 924
particle-size: 924
statement: return this'.data.length
particle-size: 924
particle-size: 924
particle-size: 924
particle-size: 924
particle-size: 924
particle-size: 924
statement: return this'.data.length
particle-size: 924
particle-size: 924
particle-size: 924
particle-size: 924
particle-size: 924
particle-size: 924
statement: return this'.data.length
particle-size: 924
particle-size: 924
particle-size: 924
particle-size: 924
particle-size: 924
particle-size: 924
statement: return this'.data.length
particle-size: 924
particle-size: 924
particle-size: 924
particle-size: 924
particle-size: 924
particle-size: 924
statement: return this'.data.length
particle-size: 924
particle-size: 924
particle-size: 924
particle-size: 924
particle-size: 924
particle-size: 924
statement: return this'.data.length
particle-size: 924
particle-size: 924
particle-size: 924
particle-size: 924
statement: (action,node) := this'.scheduler()
particle-size: 918
particle-size: 918
statement: actions := ([]: (R × R)[])
particle-size: 918
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 918
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 918
particle-size: 918
statement: return this'.data.length
particle-size: 918
particle-size: 918
particle-size: 918
statement: actions ~= [(0,i)]
particle-size: 438
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 918
particle-size: 918
statement: return this'.data.length
particle-size: 918
particle-size: 918
particle-size: 918
loop-index: 1
particle-size: 918
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 918
particle-size: 918
statement: return this'.data.length
particle-size: 918
particle-size: 918
particle-size: 918
statement: actions ~= [(0,i)]
particle-size: 872
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 918
particle-size: 918
statement: return this'.data.length
particle-size: 918
particle-size: 918
particle-size: 918
loop-index: 2
particle-size: 918
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 918
particle-size: 918
statement: return this'.data.length
particle-size: 918
particle-size: 918
particle-size: 918
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 918
particle-size: 918
statement: return this'.data.length
particle-size: 918
particle-size: 918
particle-size: 918
statement: actions ~= [(1,i)]
particle-size: 32
loop-index: 3
particle-size: 918
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 918
particle-size: 918
statement: return this'.data.length
particle-size: 918
particle-size: 918
particle-size: 918
statement: actions ~= [(0,i)]
particle-size: 34
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 918
particle-size: 918
statement: return this'.data.length
particle-size: 918
particle-size: 918
particle-size: 918
statement: actions ~= [(1,i)]
particle-size: 300
loop-index: 4
particle-size: 918
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 918
particle-size: 918
statement: return this'.data.length
particle-size: 918
particle-size: 918
particle-size: 918
statement: actions ~= [(0,i)]
particle-size: 244
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 918
particle-size: 918
statement: return this'.data.length
particle-size: 918
particle-size: 918
particle-size: 918
statement: actions ~= [(1,i)]
particle-size: 248
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 918
particle-size: 918
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 2168
particle-size: 2168
particle-size: 2168
particle-size: 2168
particle-size: 2168
particle-size: 2168
particle-size: 2168
particle-size: 2168
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 580
particle-size: 580
statement: return this'.data.length
particle-size: 580
particle-size: 580
particle-size: 580
particle-size: 580
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 580
particle-size: 580
statement: return this'.data.length
particle-size: 580
particle-size: 580
particle-size: 580
particle-size: 580
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 580
particle-size: 580
statement: return this'.data.length
particle-size: 580
particle-size: 580
particle-size: 580
particle-size: 580
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 32
particle-size: 32
statement: r := this'.front()
particle-size: 32
particle-size: 32
statement: return this'.data[0]
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: this'.popFront()
particle-size: 32
particle-size: 32
statement: this'.data = this'.data[1..this'.size()]
particle-size: 32
particle-size: 32
statement: return this'.data.length
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: return ()
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: return r
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: if port == 1 {
    this'.__H0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,1));
}
statement: this'.__H1.Q_in.pushBack((pkt,1))
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.data = this'.data ~ [x]
particle-size: 12
statement: return ()
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.data = this'.data ~ [x]
particle-size: 12
statement: return ()
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,1));
}
statement: this'.__Controller.Q_in.pushBack((pkt,1))
particle-size: 8
particle-size: 8
particle-size: 8
statement: this'.data = this'.data ~ [x]
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 580
particle-size: 580
statement: return this'.data.length
particle-size: 580
particle-size: 580
particle-size: 580
particle-size: 580
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 300
particle-size: 300
statement: r := this'.front()
particle-size: 300
particle-size: 300
statement: return this'.data[0]
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: this'.popFront()
particle-size: 300
particle-size: 300
statement: this'.data = this'.data[1..this'.size()]
particle-size: 300
particle-size: 300
statement: return this'.data.length
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: return ()
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: return r
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,3));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,2));
}
statement: this'.__H1.Q_in.pushBack((pkt,2))
particle-size: 184
particle-size: 184
particle-size: 184
statement: this'.data = this'.data ~ [x]
particle-size: 184
statement: return ()
particle-size: 184
particle-size: 184
particle-size: 184
particle-size: 184
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,2));
}
statement: this'.__Controller.Q_in.pushBack((pkt,2))
particle-size: 116
particle-size: 116
particle-size: 116
statement: this'.data = this'.data ~ [x]
particle-size: 116
statement: return ()
particle-size: 116
particle-size: 116
particle-size: 116
particle-size: 116
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 580
particle-size: 580
statement: return this'.data.length
particle-size: 580
particle-size: 580
particle-size: 580
particle-size: 580
statement: (pkt,port) := this'.__H1.Q_out.takeFront()
particle-size: 248
particle-size: 248
statement: r := this'.front()
particle-size: 248
particle-size: 248
statement: return this'.data[0]
particle-size: 248
particle-size: 248
particle-size: 248
particle-size: 248
particle-size: 248
statement: this'.popFront()
particle-size: 248
particle-size: 248
statement: this'.data = this'.data[1..this'.size()]
particle-size: 248
particle-size: 248
statement: return this'.data.length
particle-size: 248
particle-size: 248
particle-size: 248
particle-size: 248
particle-size: 248
statement: return ()
particle-size: 248
particle-size: 248
particle-size: 248
particle-size: 248
statement: return r
particle-size: 248
particle-size: 248
particle-size: 248
particle-size: 248
particle-size: 248
particle-size: 248
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this'.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,4));
}
statement: this'.__Controller.Q_in.pushBack((pkt,4))
particle-size: 248
particle-size: 248
particle-size: 248
statement: this'.data = this'.data ~ [x]
particle-size: 248
statement: return ()
particle-size: 248
particle-size: 248
particle-size: 248
particle-size: 248
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 1588
particle-size: 1588
statement: return this'.data.length
particle-size: 1588
particle-size: 1588
particle-size: 1588
particle-size: 1588
statement: this'.__H0.__run()
particle-size: 438
particle-size: 438
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 438
particle-size: 438
statement: this'.data = this'.data[1..this'.size()]
particle-size: 438
particle-size: 438
statement: return this'.data.length
particle-size: 438
particle-size: 438
particle-size: 438
particle-size: 438
particle-size: 438
statement: return ()
particle-size: 438
particle-size: 438
particle-size: 438
particle-size: 438
statement: return ()
particle-size: 438
particle-size: 438
particle-size: 438
particle-size: 438
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 1588
particle-size: 1588
statement: return this'.data.length
particle-size: 1588
particle-size: 1588
particle-size: 1588
particle-size: 1588
statement: this'.__Controller.__run()
particle-size: 872
particle-size: 872
statement: this'.num_packets = (this'.num_packets + 1)
particle-size: 872
statement: if 1 {
    this'.tot_packets = 4;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 2));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 4) {
        observe((this'.Q_in.data[0][1] == 4));
    } else {
        observe(0);
    }
} else {
    this'.tot_packets = 3;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 2));
    } else {
        observe(0);
    }
}
statement: this'.tot_packets = 4
particle-size: 872
statement: if (this'.num_packets == 1) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 2));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 1))
statement: if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 2));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 2))
statement: if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 4))
statement: if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 4))
statement: this'.Q_in.popFront()
particle-size: 438
particle-size: 438
statement: this'.data = this'.data[1..this'.size()]
particle-size: 438
particle-size: 438
statement: return this'.data.length
particle-size: 438
particle-size: 438
particle-size: 438
particle-size: 438
particle-size: 438
statement: return ()
particle-size: 438
particle-size: 438
particle-size: 438
particle-size: 438
statement: return ()
particle-size: 438
particle-size: 438
particle-size: 438
particle-size: 438
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 1154
particle-size: 1154
statement: return this'.data.length
particle-size: 1154
particle-size: 1154
particle-size: 1154
particle-size: 1154
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 1154
particle-size: 1154
statement: return this'.data.length
particle-size: 1154
particle-size: 1154
particle-size: 1154
particle-size: 1154
statement: this'.__S2.__run()
particle-size: 34
particle-size: 34
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 34
particle-size: 34
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 68
particle-size: 68
statement: this'.Q_in.dupFront()
particle-size: 34
particle-size: 34
statement: this'.pushFront(this'.front())
particle-size: 34
particle-size: 34
statement: return this'.data[0]
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: this'.data = [x] ~ this'.data
particle-size: 34
statement: return ()
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: return ()
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 34
particle-size: 34
statement: r := this'.front()
particle-size: 34
particle-size: 34
statement: return this'.data[0]
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: this'.popFront()
particle-size: 34
particle-size: 34
statement: this'.data = this'.data[1..this'.size()]
particle-size: 34
particle-size: 34
statement: return this'.data.length
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: return ()
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: return r
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: this'.data = this'.data ~ [x]
particle-size: 34
statement: return ()
particle-size: 34
particle-size: 34
particle-size: 34
particle-size: 34
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 68
particle-size: 68
statement: r := this'.front()
particle-size: 68
particle-size: 68
statement: return this'.data[0]
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
statement: this'.popFront()
particle-size: 68
particle-size: 68
statement: this'.data = this'.data[1..this'.size()]
particle-size: 68
particle-size: 68
statement: return this'.data.length
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
statement: return ()
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
statement: return r
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
statement: this'.data = this'.data ~ [x]
particle-size: 68
statement: return ()
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
statement: return ()
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 1188
particle-size: 1188
statement: return this'.data.length
particle-size: 1188
particle-size: 1188
particle-size: 1188
particle-size: 1188
statement: this'.__H1.__run()
particle-size: 244
particle-size: 244
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 244
particle-size: 244
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 488
particle-size: 488
statement: this'.Q_in.dupFront()
particle-size: 244
particle-size: 244
statement: this'.pushFront(this'.front())
particle-size: 244
particle-size: 244
statement: return this'.data[0]
particle-size: 244
particle-size: 244
particle-size: 244
particle-size: 244
particle-size: 244
particle-size: 244
particle-size: 244
statement: this'.data = [x] ~ this'.data
particle-size: 244
statement: return ()
particle-size: 244
particle-size: 244
particle-size: 244
particle-size: 244
statement: return ()
particle-size: 244
particle-size: 244
particle-size: 244
particle-size: 244
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 244
particle-size: 244
statement: r := this'.front()
particle-size: 244
particle-size: 244
statement: return this'.data[0]
particle-size: 244
particle-size: 244
particle-size: 244
particle-size: 244
particle-size: 244
statement: this'.popFront()
particle-size: 244
particle-size: 244
statement: this'.data = this'.data[1..this'.size()]
particle-size: 244
particle-size: 244
statement: return this'.data.length
particle-size: 244
particle-size: 244
particle-size: 244
particle-size: 244
particle-size: 244
statement: return ()
particle-size: 244
particle-size: 244
particle-size: 244
particle-size: 244
statement: return r
particle-size: 244
particle-size: 244
particle-size: 244
particle-size: 244
particle-size: 244
particle-size: 244
particle-size: 244
statement: this'.data = this'.data ~ [x]
particle-size: 244
statement: return ()
particle-size: 244
particle-size: 244
particle-size: 244
particle-size: 244
statement: this'.Q_in.popFront()
particle-size: 488
particle-size: 488
statement: this'.data = this'.data[1..this'.size()]
particle-size: 488
particle-size: 488
statement: return this'.data.length
particle-size: 488
particle-size: 488
particle-size: 488
particle-size: 488
particle-size: 488
statement: return ()
particle-size: 488
particle-size: 488
particle-size: 488
particle-size: 488
statement: return ()
particle-size: 488
particle-size: 488
particle-size: 488
particle-size: 488
statement: return ()
particle-size: 2018
particle-size: 2018
particle-size: 2018
particle-size: 832
repetition: 18
statement: __d.__step()
particle-size: 832
particle-size: 832
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 832
particle-size: 832
statement: return this'.data.length
particle-size: 832
particle-size: 832
particle-size: 832
particle-size: 832
particle-size: 832
particle-size: 832
statement: return this'.data.length
particle-size: 832
particle-size: 832
particle-size: 832
particle-size: 832
particle-size: 832
particle-size: 832
statement: return this'.data.length
particle-size: 832
particle-size: 832
particle-size: 832
particle-size: 832
particle-size: 832
particle-size: 832
statement: return this'.data.length
particle-size: 832
particle-size: 832
particle-size: 832
particle-size: 832
particle-size: 832
particle-size: 832
statement: return this'.data.length
particle-size: 832
particle-size: 832
particle-size: 832
particle-size: 832
particle-size: 832
particle-size: 832
statement: return this'.data.length
particle-size: 832
particle-size: 832
particle-size: 832
particle-size: 832
particle-size: 832
particle-size: 832
statement: return this'.data.length
particle-size: 832
particle-size: 832
particle-size: 832
particle-size: 832
particle-size: 832
particle-size: 832
statement: return this'.data.length
particle-size: 832
particle-size: 832
particle-size: 832
particle-size: 832
particle-size: 832
particle-size: 832
statement: return this'.data.length
particle-size: 832
particle-size: 832
particle-size: 832
particle-size: 832
particle-size: 832
particle-size: 832
statement: return this'.data.length
particle-size: 832
particle-size: 832
particle-size: 832
particle-size: 832
statement: (action,node) := this'.scheduler()
particle-size: 826
particle-size: 826
statement: actions := ([]: (R × R)[])
particle-size: 826
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 826
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 826
particle-size: 826
statement: return this'.data.length
particle-size: 826
particle-size: 826
particle-size: 826
statement: actions ~= [(0,i)]
particle-size: 388
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 826
particle-size: 826
statement: return this'.data.length
particle-size: 826
particle-size: 826
particle-size: 826
loop-index: 1
particle-size: 826
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 826
particle-size: 826
statement: return this'.data.length
particle-size: 826
particle-size: 826
particle-size: 826
statement: actions ~= [(0,i)]
particle-size: 800
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 826
particle-size: 826
statement: return this'.data.length
particle-size: 826
particle-size: 826
particle-size: 826
loop-index: 2
particle-size: 826
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 826
particle-size: 826
statement: return this'.data.length
particle-size: 826
particle-size: 826
particle-size: 826
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 826
particle-size: 826
statement: return this'.data.length
particle-size: 826
particle-size: 826
particle-size: 826
statement: actions ~= [(1,i)]
particle-size: 4
loop-index: 3
particle-size: 826
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 826
particle-size: 826
statement: return this'.data.length
particle-size: 826
particle-size: 826
particle-size: 826
statement: actions ~= [(0,i)]
particle-size: 12
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 826
particle-size: 826
statement: return this'.data.length
particle-size: 826
particle-size: 826
particle-size: 826
statement: actions ~= [(1,i)]
particle-size: 214
loop-index: 4
particle-size: 826
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 826
particle-size: 826
statement: return this'.data.length
particle-size: 826
particle-size: 826
particle-size: 826
statement: actions ~= [(0,i)]
particle-size: 200
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 826
particle-size: 826
statement: return this'.data.length
particle-size: 826
particle-size: 826
particle-size: 826
statement: actions ~= [(1,i)]
particle-size: 220
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 826
particle-size: 826
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 1838
particle-size: 1838
particle-size: 1838
particle-size: 1838
particle-size: 1838
particle-size: 1838
particle-size: 1838
particle-size: 1838
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 438
particle-size: 438
statement: return this'.data.length
particle-size: 438
particle-size: 438
particle-size: 438
particle-size: 438
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 438
particle-size: 438
statement: return this'.data.length
particle-size: 438
particle-size: 438
particle-size: 438
particle-size: 438
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 438
particle-size: 438
statement: return this'.data.length
particle-size: 438
particle-size: 438
particle-size: 438
particle-size: 438
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 4
particle-size: 4
statement: r := this'.front()
particle-size: 4
particle-size: 4
statement: return this'.data[0]
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.popFront()
particle-size: 4
particle-size: 4
statement: this'.data = this'.data[1..this'.size()]
particle-size: 4
particle-size: 4
statement: return this'.data.length
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return r
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: if port == 1 {
    this'.__H0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,1));
}
statement: this'.__H1.Q_in.pushBack((pkt,1))
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = this'.data ~ [x]
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = this'.data ~ [x]
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,1));
}
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 438
particle-size: 438
statement: return this'.data.length
particle-size: 438
particle-size: 438
particle-size: 438
particle-size: 438
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 214
particle-size: 214
statement: r := this'.front()
particle-size: 214
particle-size: 214
statement: return this'.data[0]
particle-size: 214
particle-size: 214
particle-size: 214
particle-size: 214
particle-size: 214
statement: this'.popFront()
particle-size: 214
particle-size: 214
statement: this'.data = this'.data[1..this'.size()]
particle-size: 214
particle-size: 214
statement: return this'.data.length
particle-size: 214
particle-size: 214
particle-size: 214
particle-size: 214
particle-size: 214
statement: return ()
particle-size: 214
particle-size: 214
particle-size: 214
particle-size: 214
statement: return r
particle-size: 214
particle-size: 214
particle-size: 214
particle-size: 214
particle-size: 214
particle-size: 214
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,3));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,2));
}
statement: this'.__H1.Q_in.pushBack((pkt,2))
particle-size: 156
particle-size: 156
particle-size: 156
statement: this'.data = this'.data ~ [x]
particle-size: 156
statement: return ()
particle-size: 156
particle-size: 156
particle-size: 156
particle-size: 156
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,2));
}
statement: this'.__Controller.Q_in.pushBack((pkt,2))
particle-size: 58
particle-size: 58
particle-size: 58
statement: this'.data = this'.data ~ [x]
particle-size: 58
statement: return ()
particle-size: 58
particle-size: 58
particle-size: 58
particle-size: 58
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 438
particle-size: 438
statement: return this'.data.length
particle-size: 438
particle-size: 438
particle-size: 438
particle-size: 438
statement: (pkt,port) := this'.__H1.Q_out.takeFront()
particle-size: 220
particle-size: 220
statement: r := this'.front()
particle-size: 220
particle-size: 220
statement: return this'.data[0]
particle-size: 220
particle-size: 220
particle-size: 220
particle-size: 220
particle-size: 220
statement: this'.popFront()
particle-size: 220
particle-size: 220
statement: this'.data = this'.data[1..this'.size()]
particle-size: 220
particle-size: 220
statement: return this'.data.length
particle-size: 220
particle-size: 220
particle-size: 220
particle-size: 220
particle-size: 220
statement: return ()
particle-size: 220
particle-size: 220
particle-size: 220
particle-size: 220
statement: return r
particle-size: 220
particle-size: 220
particle-size: 220
particle-size: 220
particle-size: 220
particle-size: 220
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this'.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,4));
}
statement: this'.__Controller.Q_in.pushBack((pkt,4))
particle-size: 220
particle-size: 220
particle-size: 220
statement: this'.data = this'.data ~ [x]
particle-size: 220
statement: return ()
particle-size: 220
particle-size: 220
particle-size: 220
particle-size: 220
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 1400
particle-size: 1400
statement: return this'.data.length
particle-size: 1400
particle-size: 1400
particle-size: 1400
particle-size: 1400
statement: this'.__H0.__run()
particle-size: 388
particle-size: 388
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 388
particle-size: 388
statement: this'.data = this'.data[1..this'.size()]
particle-size: 388
particle-size: 388
statement: return this'.data.length
particle-size: 388
particle-size: 388
particle-size: 388
particle-size: 388
particle-size: 388
statement: return ()
particle-size: 388
particle-size: 388
particle-size: 388
particle-size: 388
statement: return ()
particle-size: 388
particle-size: 388
particle-size: 388
particle-size: 388
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 1400
particle-size: 1400
statement: return this'.data.length
particle-size: 1400
particle-size: 1400
particle-size: 1400
particle-size: 1400
statement: this'.__Controller.__run()
particle-size: 800
particle-size: 800
statement: this'.num_packets = (this'.num_packets + 1)
particle-size: 800
statement: if 1 {
    this'.tot_packets = 4;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 2));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 4) {
        observe((this'.Q_in.data[0][1] == 4));
    } else {
        observe(0);
    }
} else {
    this'.tot_packets = 3;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 2));
    } else {
        observe(0);
    }
}
statement: this'.tot_packets = 4
particle-size: 800
statement: if (this'.num_packets == 1) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 2));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 1))
statement: if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 2));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 2))
statement: if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 4))
statement: if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 4))
statement: this'.Q_in.popFront()
particle-size: 404
particle-size: 404
statement: this'.data = this'.data[1..this'.size()]
particle-size: 404
particle-size: 404
statement: return this'.data.length
particle-size: 404
particle-size: 404
particle-size: 404
particle-size: 404
particle-size: 404
statement: return ()
particle-size: 404
particle-size: 404
particle-size: 404
particle-size: 404
statement: return ()
particle-size: 404
particle-size: 404
particle-size: 404
particle-size: 404
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 1004
particle-size: 1004
statement: return this'.data.length
particle-size: 1004
particle-size: 1004
particle-size: 1004
particle-size: 1004
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 1004
particle-size: 1004
statement: return this'.data.length
particle-size: 1004
particle-size: 1004
particle-size: 1004
particle-size: 1004
statement: this'.__S2.__run()
particle-size: 12
particle-size: 12
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 12
particle-size: 12
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 24
particle-size: 24
statement: this'.Q_in.dupFront()
particle-size: 12
particle-size: 12
statement: this'.pushFront(this'.front())
particle-size: 12
particle-size: 12
statement: return this'.data[0]
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.data = [x] ~ this'.data
particle-size: 12
statement: return ()
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: return ()
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 12
particle-size: 12
statement: r := this'.front()
particle-size: 12
particle-size: 12
statement: return this'.data[0]
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.popFront()
particle-size: 12
particle-size: 12
statement: this'.data = this'.data[1..this'.size()]
particle-size: 12
particle-size: 12
statement: return this'.data.length
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: return ()
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: return r
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.data = this'.data ~ [x]
particle-size: 12
statement: return ()
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 24
particle-size: 24
statement: r := this'.front()
particle-size: 24
particle-size: 24
statement: return this'.data[0]
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: this'.popFront()
particle-size: 24
particle-size: 24
statement: this'.data = this'.data[1..this'.size()]
particle-size: 24
particle-size: 24
statement: return this'.data.length
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: return ()
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: return r
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: this'.data = this'.data ~ [x]
particle-size: 24
statement: return ()
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: return ()
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 1016
particle-size: 1016
statement: return this'.data.length
particle-size: 1016
particle-size: 1016
particle-size: 1016
particle-size: 1016
statement: this'.__H1.__run()
particle-size: 200
particle-size: 200
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 200
particle-size: 200
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 400
particle-size: 400
statement: this'.Q_in.dupFront()
particle-size: 200
particle-size: 200
statement: this'.pushFront(this'.front())
particle-size: 200
particle-size: 200
statement: return this'.data[0]
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
statement: this'.data = [x] ~ this'.data
particle-size: 200
statement: return ()
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
statement: return ()
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 200
particle-size: 200
statement: r := this'.front()
particle-size: 200
particle-size: 200
statement: return this'.data[0]
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
statement: this'.popFront()
particle-size: 200
particle-size: 200
statement: this'.data = this'.data[1..this'.size()]
particle-size: 200
particle-size: 200
statement: return this'.data.length
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
statement: return ()
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
statement: return r
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
statement: this'.data = this'.data ~ [x]
particle-size: 200
statement: return ()
particle-size: 200
particle-size: 200
particle-size: 200
particle-size: 200
statement: this'.Q_in.popFront()
particle-size: 400
particle-size: 400
statement: this'.data = this'.data[1..this'.size()]
particle-size: 400
particle-size: 400
statement: return this'.data.length
particle-size: 400
particle-size: 400
particle-size: 400
particle-size: 400
particle-size: 400
statement: return ()
particle-size: 400
particle-size: 400
particle-size: 400
particle-size: 400
statement: return ()
particle-size: 400
particle-size: 400
particle-size: 400
particle-size: 400
statement: return ()
particle-size: 1660
particle-size: 1660
particle-size: 1660
particle-size: 700
repetition: 19
statement: __d.__step()
particle-size: 700
particle-size: 700
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 700
particle-size: 700
statement: return this'.data.length
particle-size: 700
particle-size: 700
particle-size: 700
particle-size: 700
particle-size: 700
particle-size: 700
statement: return this'.data.length
particle-size: 700
particle-size: 700
particle-size: 700
particle-size: 700
particle-size: 700
particle-size: 700
statement: return this'.data.length
particle-size: 700
particle-size: 700
particle-size: 700
particle-size: 700
particle-size: 700
particle-size: 700
statement: return this'.data.length
particle-size: 700
particle-size: 700
particle-size: 700
particle-size: 700
particle-size: 700
particle-size: 700
statement: return this'.data.length
particle-size: 700
particle-size: 700
particle-size: 700
particle-size: 700
particle-size: 700
particle-size: 700
statement: return this'.data.length
particle-size: 700
particle-size: 700
particle-size: 700
particle-size: 700
particle-size: 700
particle-size: 700
statement: return this'.data.length
particle-size: 700
particle-size: 700
particle-size: 700
particle-size: 700
particle-size: 700
particle-size: 700
statement: return this'.data.length
particle-size: 700
particle-size: 700
particle-size: 700
particle-size: 700
particle-size: 700
particle-size: 700
statement: return this'.data.length
particle-size: 700
particle-size: 700
particle-size: 700
particle-size: 700
particle-size: 700
particle-size: 700
statement: return this'.data.length
particle-size: 700
particle-size: 700
particle-size: 700
particle-size: 700
statement: (action,node) := this'.scheduler()
particle-size: 692
particle-size: 692
statement: actions := ([]: (R × R)[])
particle-size: 692
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 692
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 692
particle-size: 692
statement: return this'.data.length
particle-size: 692
particle-size: 692
particle-size: 692
statement: actions ~= [(0,i)]
particle-size: 308
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 692
particle-size: 692
statement: return this'.data.length
particle-size: 692
particle-size: 692
particle-size: 692
loop-index: 1
particle-size: 692
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 692
particle-size: 692
statement: return this'.data.length
particle-size: 692
particle-size: 692
particle-size: 692
statement: actions ~= [(0,i)]
particle-size: 678
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 692
particle-size: 692
statement: return this'.data.length
particle-size: 692
particle-size: 692
particle-size: 692
loop-index: 2
particle-size: 692
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 692
particle-size: 692
statement: return this'.data.length
particle-size: 692
particle-size: 692
particle-size: 692
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 692
particle-size: 692
statement: return this'.data.length
particle-size: 692
particle-size: 692
particle-size: 692
loop-index: 3
particle-size: 692
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 692
particle-size: 692
statement: return this'.data.length
particle-size: 692
particle-size: 692
particle-size: 692
statement: actions ~= [(0,i)]
particle-size: 2
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 692
particle-size: 692
statement: return this'.data.length
particle-size: 692
particle-size: 692
particle-size: 692
statement: actions ~= [(1,i)]
particle-size: 106
loop-index: 4
particle-size: 692
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 692
particle-size: 692
statement: return this'.data.length
particle-size: 692
particle-size: 692
particle-size: 692
statement: actions ~= [(0,i)]
particle-size: 158
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 692
particle-size: 692
statement: return this'.data.length
particle-size: 692
particle-size: 692
particle-size: 692
statement: actions ~= [(1,i)]
particle-size: 194
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 692
particle-size: 692
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 1446
particle-size: 1446
particle-size: 1446
particle-size: 1446
particle-size: 1446
particle-size: 1446
particle-size: 1446
particle-size: 1446
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 300
particle-size: 300
statement: return this'.data.length
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 300
particle-size: 300
statement: return this'.data.length
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 300
particle-size: 300
statement: return this'.data.length
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 300
particle-size: 300
statement: return this'.data.length
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 106
particle-size: 106
statement: r := this'.front()
particle-size: 106
particle-size: 106
statement: return this'.data[0]
particle-size: 106
particle-size: 106
particle-size: 106
particle-size: 106
particle-size: 106
statement: this'.popFront()
particle-size: 106
particle-size: 106
statement: this'.data = this'.data[1..this'.size()]
particle-size: 106
particle-size: 106
statement: return this'.data.length
particle-size: 106
particle-size: 106
particle-size: 106
particle-size: 106
particle-size: 106
statement: return ()
particle-size: 106
particle-size: 106
particle-size: 106
particle-size: 106
statement: return r
particle-size: 106
particle-size: 106
particle-size: 106
particle-size: 106
particle-size: 106
particle-size: 106
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,3));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,2));
}
statement: this'.__H1.Q_in.pushBack((pkt,2))
particle-size: 88
particle-size: 88
particle-size: 88
statement: this'.data = this'.data ~ [x]
particle-size: 88
statement: return ()
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,2));
}
statement: this'.__Controller.Q_in.pushBack((pkt,2))
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.data = this'.data ~ [x]
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 300
particle-size: 300
statement: return this'.data.length
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: (pkt,port) := this'.__H1.Q_out.takeFront()
particle-size: 194
particle-size: 194
statement: r := this'.front()
particle-size: 194
particle-size: 194
statement: return this'.data[0]
particle-size: 194
particle-size: 194
particle-size: 194
particle-size: 194
particle-size: 194
statement: this'.popFront()
particle-size: 194
particle-size: 194
statement: this'.data = this'.data[1..this'.size()]
particle-size: 194
particle-size: 194
statement: return this'.data.length
particle-size: 194
particle-size: 194
particle-size: 194
particle-size: 194
particle-size: 194
statement: return ()
particle-size: 194
particle-size: 194
particle-size: 194
particle-size: 194
statement: return r
particle-size: 194
particle-size: 194
particle-size: 194
particle-size: 194
particle-size: 194
particle-size: 194
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this'.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,4));
}
statement: this'.__Controller.Q_in.pushBack((pkt,4))
particle-size: 194
particle-size: 194
particle-size: 194
statement: this'.data = this'.data ~ [x]
particle-size: 194
statement: return ()
particle-size: 194
particle-size: 194
particle-size: 194
particle-size: 194
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 1146
particle-size: 1146
statement: return this'.data.length
particle-size: 1146
particle-size: 1146
particle-size: 1146
particle-size: 1146
statement: this'.__H0.__run()
particle-size: 308
particle-size: 308
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 308
particle-size: 308
statement: this'.data = this'.data[1..this'.size()]
particle-size: 308
particle-size: 308
statement: return this'.data.length
particle-size: 308
particle-size: 308
particle-size: 308
particle-size: 308
particle-size: 308
statement: return ()
particle-size: 308
particle-size: 308
particle-size: 308
particle-size: 308
statement: return ()
particle-size: 308
particle-size: 308
particle-size: 308
particle-size: 308
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 1146
particle-size: 1146
statement: return this'.data.length
particle-size: 1146
particle-size: 1146
particle-size: 1146
particle-size: 1146
statement: this'.__Controller.__run()
particle-size: 678
particle-size: 678
statement: this'.num_packets = (this'.num_packets + 1)
particle-size: 678
statement: if 1 {
    this'.tot_packets = 4;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 2));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 4) {
        observe((this'.Q_in.data[0][1] == 4));
    } else {
        observe(0);
    }
} else {
    this'.tot_packets = 3;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 2));
    } else {
        observe(0);
    }
}
statement: this'.tot_packets = 4
particle-size: 678
statement: if (this'.num_packets == 1) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 2));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 1))
statement: if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 2));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 2))
statement: if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 4))
statement: if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 4))
statement: this'.Q_in.popFront()
particle-size: 348
particle-size: 348
statement: this'.data = this'.data[1..this'.size()]
particle-size: 348
particle-size: 348
statement: return this'.data.length
particle-size: 348
particle-size: 348
particle-size: 348
particle-size: 348
particle-size: 348
statement: return ()
particle-size: 348
particle-size: 348
particle-size: 348
particle-size: 348
statement: return ()
particle-size: 348
particle-size: 348
particle-size: 348
particle-size: 348
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 816
particle-size: 816
statement: return this'.data.length
particle-size: 816
particle-size: 816
particle-size: 816
particle-size: 816
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 816
particle-size: 816
statement: return this'.data.length
particle-size: 816
particle-size: 816
particle-size: 816
particle-size: 816
statement: this'.__S2.__run()
particle-size: 2
particle-size: 2
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 2
particle-size: 2
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 4
particle-size: 4
statement: this'.Q_in.dupFront()
particle-size: 2
particle-size: 2
statement: this'.pushFront(this'.front())
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = [x] ~ this'.data
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 2
particle-size: 2
statement: r := this'.front()
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.popFront()
particle-size: 2
particle-size: 2
statement: this'.data = this'.data[1..this'.size()]
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return r
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = this'.data ~ [x]
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
particle-size: 4
particle-size: 4
statement: r := this'.front()
particle-size: 4
particle-size: 4
statement: return this'.data[0]
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.popFront()
particle-size: 4
particle-size: 4
statement: this'.data = this'.data[1..this'.size()]
particle-size: 4
particle-size: 4
statement: return this'.data.length
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return r
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.data = this'.data ~ [x]
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 818
particle-size: 818
statement: return this'.data.length
particle-size: 818
particle-size: 818
particle-size: 818
particle-size: 818
statement: this'.__H1.__run()
particle-size: 158
particle-size: 158
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 158
particle-size: 158
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 316
particle-size: 316
statement: this'.Q_in.dupFront()
particle-size: 158
particle-size: 158
statement: this'.pushFront(this'.front())
particle-size: 158
particle-size: 158
statement: return this'.data[0]
particle-size: 158
particle-size: 158
particle-size: 158
particle-size: 158
particle-size: 158
particle-size: 158
particle-size: 158
statement: this'.data = [x] ~ this'.data
particle-size: 158
statement: return ()
particle-size: 158
particle-size: 158
particle-size: 158
particle-size: 158
statement: return ()
particle-size: 158
particle-size: 158
particle-size: 158
particle-size: 158
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 158
particle-size: 158
statement: r := this'.front()
particle-size: 158
particle-size: 158
statement: return this'.data[0]
particle-size: 158
particle-size: 158
particle-size: 158
particle-size: 158
particle-size: 158
statement: this'.popFront()
particle-size: 158
particle-size: 158
statement: this'.data = this'.data[1..this'.size()]
particle-size: 158
particle-size: 158
statement: return this'.data.length
particle-size: 158
particle-size: 158
particle-size: 158
particle-size: 158
particle-size: 158
statement: return ()
particle-size: 158
particle-size: 158
particle-size: 158
particle-size: 158
statement: return r
particle-size: 158
particle-size: 158
particle-size: 158
particle-size: 158
particle-size: 158
particle-size: 158
particle-size: 158
statement: this'.data = this'.data ~ [x]
particle-size: 158
statement: return ()
particle-size: 158
particle-size: 158
particle-size: 158
particle-size: 158
statement: this'.Q_in.popFront()
particle-size: 316
particle-size: 316
statement: this'.data = this'.data[1..this'.size()]
particle-size: 316
particle-size: 316
statement: return this'.data.length
particle-size: 316
particle-size: 316
particle-size: 316
particle-size: 316
particle-size: 316
statement: return ()
particle-size: 316
particle-size: 316
particle-size: 316
particle-size: 316
statement: return ()
particle-size: 316
particle-size: 316
particle-size: 316
particle-size: 316
statement: return ()
particle-size: 1284
particle-size: 1284
particle-size: 1284
particle-size: 546
repetition: 20
statement: __d.__step()
particle-size: 546
particle-size: 546
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 546
particle-size: 546
statement: return this'.data.length
particle-size: 546
particle-size: 546
particle-size: 546
particle-size: 546
particle-size: 546
particle-size: 546
statement: return this'.data.length
particle-size: 546
particle-size: 546
particle-size: 546
particle-size: 546
particle-size: 546
particle-size: 546
statement: return this'.data.length
particle-size: 546
particle-size: 546
particle-size: 546
particle-size: 546
particle-size: 546
particle-size: 546
statement: return this'.data.length
particle-size: 546
particle-size: 546
particle-size: 546
particle-size: 546
particle-size: 546
particle-size: 546
statement: return this'.data.length
particle-size: 546
particle-size: 546
particle-size: 546
particle-size: 546
particle-size: 546
particle-size: 546
statement: return this'.data.length
particle-size: 546
particle-size: 546
particle-size: 546
particle-size: 546
particle-size: 546
particle-size: 546
statement: return this'.data.length
particle-size: 546
particle-size: 546
particle-size: 546
particle-size: 546
particle-size: 546
particle-size: 546
statement: return this'.data.length
particle-size: 546
particle-size: 546
particle-size: 546
particle-size: 546
particle-size: 546
particle-size: 546
statement: return this'.data.length
particle-size: 546
particle-size: 546
particle-size: 546
particle-size: 546
particle-size: 546
particle-size: 546
statement: return this'.data.length
particle-size: 546
particle-size: 546
particle-size: 546
particle-size: 546
statement: (action,node) := this'.scheduler()
particle-size: 538
particle-size: 538
statement: actions := ([]: (R × R)[])
particle-size: 538
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 538
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 538
particle-size: 538
statement: return this'.data.length
particle-size: 538
particle-size: 538
particle-size: 538
statement: actions ~= [(0,i)]
particle-size: 230
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 538
particle-size: 538
statement: return this'.data.length
particle-size: 538
particle-size: 538
particle-size: 538
loop-index: 1
particle-size: 538
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 538
particle-size: 538
statement: return this'.data.length
particle-size: 538
particle-size: 538
particle-size: 538
statement: actions ~= [(0,i)]
particle-size: 530
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 538
particle-size: 538
statement: return this'.data.length
particle-size: 538
particle-size: 538
particle-size: 538
loop-index: 2
particle-size: 538
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 538
particle-size: 538
statement: return this'.data.length
particle-size: 538
particle-size: 538
particle-size: 538
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 538
particle-size: 538
statement: return this'.data.length
particle-size: 538
particle-size: 538
particle-size: 538
loop-index: 3
particle-size: 538
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 538
particle-size: 538
statement: return this'.data.length
particle-size: 538
particle-size: 538
particle-size: 538
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 538
particle-size: 538
statement: return this'.data.length
particle-size: 538
particle-size: 538
particle-size: 538
statement: actions ~= [(1,i)]
particle-size: 28
loop-index: 4
particle-size: 538
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 538
particle-size: 538
statement: return this'.data.length
particle-size: 538
particle-size: 538
particle-size: 538
statement: actions ~= [(0,i)]
particle-size: 88
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 538
particle-size: 538
statement: return this'.data.length
particle-size: 538
particle-size: 538
particle-size: 538
statement: actions ~= [(1,i)]
particle-size: 158
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 538
particle-size: 538
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 1034
particle-size: 1034
particle-size: 1034
particle-size: 1034
particle-size: 1034
particle-size: 1034
particle-size: 1034
particle-size: 1034
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 186
particle-size: 186
statement: return this'.data.length
particle-size: 186
particle-size: 186
particle-size: 186
particle-size: 186
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 186
particle-size: 186
statement: return this'.data.length
particle-size: 186
particle-size: 186
particle-size: 186
particle-size: 186
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 186
particle-size: 186
statement: return this'.data.length
particle-size: 186
particle-size: 186
particle-size: 186
particle-size: 186
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 186
particle-size: 186
statement: return this'.data.length
particle-size: 186
particle-size: 186
particle-size: 186
particle-size: 186
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 28
particle-size: 28
statement: r := this'.front()
particle-size: 28
particle-size: 28
statement: return this'.data[0]
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
statement: this'.popFront()
particle-size: 28
particle-size: 28
statement: this'.data = this'.data[1..this'.size()]
particle-size: 28
particle-size: 28
statement: return this'.data.length
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
statement: return ()
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
statement: return r
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 28
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,3));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,2));
}
statement: this'.__H1.Q_in.pushBack((pkt,2))
particle-size: 26
particle-size: 26
particle-size: 26
statement: this'.data = this'.data ~ [x]
particle-size: 26
statement: return ()
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,2));
}
statement: this'.__Controller.Q_in.pushBack((pkt,2))
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = this'.data ~ [x]
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 186
particle-size: 186
statement: return this'.data.length
particle-size: 186
particle-size: 186
particle-size: 186
particle-size: 186
statement: (pkt,port) := this'.__H1.Q_out.takeFront()
particle-size: 158
particle-size: 158
statement: r := this'.front()
particle-size: 158
particle-size: 158
statement: return this'.data[0]
particle-size: 158
particle-size: 158
particle-size: 158
particle-size: 158
particle-size: 158
statement: this'.popFront()
particle-size: 158
particle-size: 158
statement: this'.data = this'.data[1..this'.size()]
particle-size: 158
particle-size: 158
statement: return this'.data.length
particle-size: 158
particle-size: 158
particle-size: 158
particle-size: 158
particle-size: 158
statement: return ()
particle-size: 158
particle-size: 158
particle-size: 158
particle-size: 158
statement: return r
particle-size: 158
particle-size: 158
particle-size: 158
particle-size: 158
particle-size: 158
particle-size: 158
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this'.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,4));
}
statement: this'.__Controller.Q_in.pushBack((pkt,4))
particle-size: 158
particle-size: 158
particle-size: 158
statement: this'.data = this'.data ~ [x]
particle-size: 158
statement: return ()
particle-size: 158
particle-size: 158
particle-size: 158
particle-size: 158
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 848
particle-size: 848
statement: return this'.data.length
particle-size: 848
particle-size: 848
particle-size: 848
particle-size: 848
statement: this'.__H0.__run()
particle-size: 230
particle-size: 230
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 230
particle-size: 230
statement: this'.data = this'.data[1..this'.size()]
particle-size: 230
particle-size: 230
statement: return this'.data.length
particle-size: 230
particle-size: 230
particle-size: 230
particle-size: 230
particle-size: 230
statement: return ()
particle-size: 230
particle-size: 230
particle-size: 230
particle-size: 230
statement: return ()
particle-size: 230
particle-size: 230
particle-size: 230
particle-size: 230
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 848
particle-size: 848
statement: return this'.data.length
particle-size: 848
particle-size: 848
particle-size: 848
particle-size: 848
statement: this'.__Controller.__run()
particle-size: 530
particle-size: 530
statement: this'.num_packets = (this'.num_packets + 1)
particle-size: 530
statement: if 1 {
    this'.tot_packets = 4;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 2));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 4) {
        observe((this'.Q_in.data[0][1] == 4));
    } else {
        observe(0);
    }
} else {
    this'.tot_packets = 3;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 2));
    } else {
        observe(0);
    }
}
statement: this'.tot_packets = 4
particle-size: 530
statement: if (this'.num_packets == 1) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 2));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 1))
statement: if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 2));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 2))
statement: if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 4))
statement: if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 4))
statement: this'.Q_in.popFront()
particle-size: 272
particle-size: 272
statement: this'.data = this'.data[1..this'.size()]
particle-size: 272
particle-size: 272
statement: return this'.data.length
particle-size: 272
particle-size: 272
particle-size: 272
particle-size: 272
particle-size: 272
statement: return ()
particle-size: 272
particle-size: 272
particle-size: 272
particle-size: 272
statement: return ()
particle-size: 272
particle-size: 272
particle-size: 272
particle-size: 272
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 590
particle-size: 590
statement: return this'.data.length
particle-size: 590
particle-size: 590
particle-size: 590
particle-size: 590
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 590
particle-size: 590
statement: return this'.data.length
particle-size: 590
particle-size: 590
particle-size: 590
particle-size: 590
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 590
particle-size: 590
statement: return this'.data.length
particle-size: 590
particle-size: 590
particle-size: 590
particle-size: 590
statement: this'.__H1.__run()
particle-size: 88
particle-size: 88
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 88
particle-size: 88
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 176
particle-size: 176
statement: this'.Q_in.dupFront()
particle-size: 88
particle-size: 88
statement: this'.pushFront(this'.front())
particle-size: 88
particle-size: 88
statement: return this'.data[0]
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: this'.data = [x] ~ this'.data
particle-size: 88
statement: return ()
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: return ()
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 88
particle-size: 88
statement: r := this'.front()
particle-size: 88
particle-size: 88
statement: return this'.data[0]
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: this'.popFront()
particle-size: 88
particle-size: 88
statement: this'.data = this'.data[1..this'.size()]
particle-size: 88
particle-size: 88
statement: return this'.data.length
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: return ()
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: return r
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: this'.data = this'.data ~ [x]
particle-size: 88
statement: return ()
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: this'.Q_in.popFront()
particle-size: 176
particle-size: 176
statement: this'.data = this'.data[1..this'.size()]
particle-size: 176
particle-size: 176
statement: return this'.data.length
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
statement: return ()
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
statement: return ()
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
statement: return ()
particle-size: 872
particle-size: 872
particle-size: 872
particle-size: 360
repetition: 21
statement: __d.__step()
particle-size: 360
particle-size: 360
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 360
particle-size: 360
statement: return this'.data.length
particle-size: 360
particle-size: 360
particle-size: 360
particle-size: 360
particle-size: 360
particle-size: 360
statement: return this'.data.length
particle-size: 360
particle-size: 360
particle-size: 360
particle-size: 360
particle-size: 360
particle-size: 360
statement: return this'.data.length
particle-size: 360
particle-size: 360
particle-size: 360
particle-size: 360
particle-size: 360
particle-size: 360
statement: return this'.data.length
particle-size: 360
particle-size: 360
particle-size: 360
particle-size: 360
particle-size: 360
particle-size: 360
statement: return this'.data.length
particle-size: 360
particle-size: 360
particle-size: 360
particle-size: 360
particle-size: 360
particle-size: 360
statement: return this'.data.length
particle-size: 360
particle-size: 360
particle-size: 360
particle-size: 360
particle-size: 360
particle-size: 360
statement: return this'.data.length
particle-size: 360
particle-size: 360
particle-size: 360
particle-size: 360
particle-size: 360
particle-size: 360
statement: return this'.data.length
particle-size: 360
particle-size: 360
particle-size: 360
particle-size: 360
particle-size: 360
particle-size: 360
statement: return this'.data.length
particle-size: 360
particle-size: 360
particle-size: 360
particle-size: 360
particle-size: 360
particle-size: 360
statement: return this'.data.length
particle-size: 360
particle-size: 360
particle-size: 360
particle-size: 360
statement: (action,node) := this'.scheduler()
particle-size: 350
particle-size: 350
statement: actions := ([]: (R × R)[])
particle-size: 350
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 350
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 350
particle-size: 350
statement: return this'.data.length
particle-size: 350
particle-size: 350
particle-size: 350
statement: actions ~= [(0,i)]
particle-size: 124
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 350
particle-size: 350
statement: return this'.data.length
particle-size: 350
particle-size: 350
particle-size: 350
loop-index: 1
particle-size: 350
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 350
particle-size: 350
statement: return this'.data.length
particle-size: 350
particle-size: 350
particle-size: 350
statement: actions ~= [(0,i)]
particle-size: 348
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 350
particle-size: 350
statement: return this'.data.length
particle-size: 350
particle-size: 350
particle-size: 350
loop-index: 2
particle-size: 350
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 350
particle-size: 350
statement: return this'.data.length
particle-size: 350
particle-size: 350
particle-size: 350
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 350
particle-size: 350
statement: return this'.data.length
particle-size: 350
particle-size: 350
particle-size: 350
loop-index: 3
particle-size: 350
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 350
particle-size: 350
statement: return this'.data.length
particle-size: 350
particle-size: 350
particle-size: 350
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 350
particle-size: 350
statement: return this'.data.length
particle-size: 350
particle-size: 350
particle-size: 350
statement: actions ~= [(1,i)]
particle-size: 4
loop-index: 4
particle-size: 350
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 350
particle-size: 350
statement: return this'.data.length
particle-size: 350
particle-size: 350
particle-size: 350
statement: actions ~= [(0,i)]
particle-size: 26
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 350
particle-size: 350
statement: return this'.data.length
particle-size: 350
particle-size: 350
particle-size: 350
statement: actions ~= [(1,i)]
particle-size: 88
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 350
particle-size: 350
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 590
particle-size: 590
particle-size: 590
particle-size: 590
particle-size: 590
particle-size: 590
particle-size: 590
particle-size: 590
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 92
particle-size: 92
statement: return this'.data.length
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 92
particle-size: 92
statement: return this'.data.length
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 92
particle-size: 92
statement: return this'.data.length
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 92
particle-size: 92
statement: return this'.data.length
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 4
particle-size: 4
statement: r := this'.front()
particle-size: 4
particle-size: 4
statement: return this'.data[0]
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.popFront()
particle-size: 4
particle-size: 4
statement: this'.data = this'.data[1..this'.size()]
particle-size: 4
particle-size: 4
statement: return this'.data.length
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return r
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,3));
}
statement: if port == 2 {
    this'.__H1.Q_in.pushBack((pkt,2));
}
statement: this'.__H1.Q_in.pushBack((pkt,2))
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.data = this'.data ~ [x]
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,2));
}
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 92
particle-size: 92
statement: return this'.data.length
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: (pkt,port) := this'.__H1.Q_out.takeFront()
particle-size: 88
particle-size: 88
statement: r := this'.front()
particle-size: 88
particle-size: 88
statement: return this'.data[0]
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: this'.popFront()
particle-size: 88
particle-size: 88
statement: this'.data = this'.data[1..this'.size()]
particle-size: 88
particle-size: 88
statement: return this'.data.length
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: return ()
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: return r
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this'.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,4));
}
statement: this'.__Controller.Q_in.pushBack((pkt,4))
particle-size: 88
particle-size: 88
particle-size: 88
statement: this'.data = this'.data ~ [x]
particle-size: 88
statement: return ()
particle-size: 88
particle-size: 88
particle-size: 88
particle-size: 88
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 498
particle-size: 498
statement: return this'.data.length
particle-size: 498
particle-size: 498
particle-size: 498
particle-size: 498
statement: this'.__H0.__run()
particle-size: 124
particle-size: 124
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 124
particle-size: 124
statement: this'.data = this'.data[1..this'.size()]
particle-size: 124
particle-size: 124
statement: return this'.data.length
particle-size: 124
particle-size: 124
particle-size: 124
particle-size: 124
particle-size: 124
statement: return ()
particle-size: 124
particle-size: 124
particle-size: 124
particle-size: 124
statement: return ()
particle-size: 124
particle-size: 124
particle-size: 124
particle-size: 124
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 498
particle-size: 498
statement: return this'.data.length
particle-size: 498
particle-size: 498
particle-size: 498
particle-size: 498
statement: this'.__Controller.__run()
particle-size: 348
particle-size: 348
statement: this'.num_packets = (this'.num_packets + 1)
particle-size: 348
statement: if 1 {
    this'.tot_packets = 4;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 2));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 4) {
        observe((this'.Q_in.data[0][1] == 4));
    } else {
        observe(0);
    }
} else {
    this'.tot_packets = 3;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 2));
    } else {
        observe(0);
    }
}
statement: this'.tot_packets = 4
particle-size: 348
statement: if (this'.num_packets == 1) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 2));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 1))
statement: if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 2));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 2))
statement: if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 4))
statement: if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 4))
statement: this'.Q_in.popFront()
particle-size: 172
particle-size: 172
statement: this'.data = this'.data[1..this'.size()]
particle-size: 172
particle-size: 172
statement: return this'.data.length
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
statement: return ()
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
statement: return ()
particle-size: 172
particle-size: 172
particle-size: 172
particle-size: 172
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 322
particle-size: 322
statement: return this'.data.length
particle-size: 322
particle-size: 322
particle-size: 322
particle-size: 322
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 322
particle-size: 322
statement: return this'.data.length
particle-size: 322
particle-size: 322
particle-size: 322
particle-size: 322
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 322
particle-size: 322
statement: return this'.data.length
particle-size: 322
particle-size: 322
particle-size: 322
particle-size: 322
statement: this'.__H1.__run()
particle-size: 26
particle-size: 26
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 26
particle-size: 26
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 52
particle-size: 52
statement: this'.Q_in.dupFront()
particle-size: 26
particle-size: 26
statement: this'.pushFront(this'.front())
particle-size: 26
particle-size: 26
statement: return this'.data[0]
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: this'.data = [x] ~ this'.data
particle-size: 26
statement: return ()
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: return ()
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 26
particle-size: 26
statement: r := this'.front()
particle-size: 26
particle-size: 26
statement: return this'.data[0]
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: this'.popFront()
particle-size: 26
particle-size: 26
statement: this'.data = this'.data[1..this'.size()]
particle-size: 26
particle-size: 26
statement: return this'.data.length
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: return ()
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: return r
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: this'.data = this'.data ~ [x]
particle-size: 26
statement: return ()
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: this'.Q_in.popFront()
particle-size: 52
particle-size: 52
statement: this'.data = this'.data[1..this'.size()]
particle-size: 52
particle-size: 52
statement: return this'.data.length
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
statement: return ()
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
statement: return ()
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
statement: return ()
particle-size: 450
particle-size: 450
particle-size: 450
particle-size: 176
repetition: 22
statement: __d.__step()
particle-size: 176
particle-size: 176
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 176
particle-size: 176
statement: return this'.data.length
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
statement: return this'.data.length
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
statement: return this'.data.length
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
statement: return this'.data.length
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
statement: return this'.data.length
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
statement: return this'.data.length
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
statement: return this'.data.length
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
statement: return this'.data.length
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
statement: return this'.data.length
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
statement: return this'.data.length
particle-size: 176
particle-size: 176
particle-size: 176
particle-size: 176
statement: (action,node) := this'.scheduler()
particle-size: 166
particle-size: 166
statement: actions := ([]: (R × R)[])
particle-size: 166
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 166
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 166
particle-size: 166
statement: return this'.data.length
particle-size: 166
particle-size: 166
particle-size: 166
statement: actions ~= [(0,i)]
particle-size: 42
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 166
particle-size: 166
statement: return this'.data.length
particle-size: 166
particle-size: 166
particle-size: 166
loop-index: 1
particle-size: 166
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 166
particle-size: 166
statement: return this'.data.length
particle-size: 166
particle-size: 166
particle-size: 166
statement: actions ~= [(0,i)]
particle-size: 164
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 166
particle-size: 166
statement: return this'.data.length
particle-size: 166
particle-size: 166
particle-size: 166
loop-index: 2
particle-size: 166
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 166
particle-size: 166
statement: return this'.data.length
particle-size: 166
particle-size: 166
particle-size: 166
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 166
particle-size: 166
statement: return this'.data.length
particle-size: 166
particle-size: 166
particle-size: 166
loop-index: 3
particle-size: 166
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 166
particle-size: 166
statement: return this'.data.length
particle-size: 166
particle-size: 166
particle-size: 166
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 166
particle-size: 166
statement: return this'.data.length
particle-size: 166
particle-size: 166
particle-size: 166
loop-index: 4
particle-size: 166
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 166
particle-size: 166
statement: return this'.data.length
particle-size: 166
particle-size: 166
particle-size: 166
statement: actions ~= [(0,i)]
particle-size: 4
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 166
particle-size: 166
statement: return this'.data.length
particle-size: 166
particle-size: 166
particle-size: 166
statement: actions ~= [(1,i)]
particle-size: 26
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 166
particle-size: 166
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 236
particle-size: 236
particle-size: 236
particle-size: 236
particle-size: 236
particle-size: 236
particle-size: 236
particle-size: 236
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 26
particle-size: 26
statement: return this'.data.length
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 26
particle-size: 26
statement: return this'.data.length
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 26
particle-size: 26
statement: return this'.data.length
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 26
particle-size: 26
statement: return this'.data.length
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 26
particle-size: 26
statement: return this'.data.length
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: (pkt,port) := this'.__H1.Q_out.takeFront()
particle-size: 26
particle-size: 26
statement: r := this'.front()
particle-size: 26
particle-size: 26
statement: return this'.data[0]
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: this'.popFront()
particle-size: 26
particle-size: 26
statement: this'.data = this'.data[1..this'.size()]
particle-size: 26
particle-size: 26
statement: return this'.data.length
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: return ()
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: return r
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this'.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,4));
}
statement: this'.__Controller.Q_in.pushBack((pkt,4))
particle-size: 26
particle-size: 26
particle-size: 26
statement: this'.data = this'.data ~ [x]
particle-size: 26
statement: return ()
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 210
particle-size: 210
statement: return this'.data.length
particle-size: 210
particle-size: 210
particle-size: 210
particle-size: 210
statement: this'.__H0.__run()
particle-size: 42
particle-size: 42
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 42
particle-size: 42
statement: this'.data = this'.data[1..this'.size()]
particle-size: 42
particle-size: 42
statement: return this'.data.length
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: return ()
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: return ()
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 210
particle-size: 210
statement: return this'.data.length
particle-size: 210
particle-size: 210
particle-size: 210
particle-size: 210
statement: this'.__Controller.__run()
particle-size: 164
particle-size: 164
statement: this'.num_packets = (this'.num_packets + 1)
particle-size: 164
statement: if 1 {
    this'.tot_packets = 4;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 2));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 4) {
        observe((this'.Q_in.data[0][1] == 4));
    } else {
        observe(0);
    }
} else {
    this'.tot_packets = 3;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 2));
    } else {
        observe(0);
    }
}
statement: this'.tot_packets = 4
particle-size: 164
statement: if (this'.num_packets == 1) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 2));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 2));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 2))
statement: if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 4))
statement: if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 4))
statement: this'.Q_in.popFront()
particle-size: 64
particle-size: 64
statement: this'.data = this'.data[1..this'.size()]
particle-size: 64
particle-size: 64
statement: return this'.data.length
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: return ()
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: return ()
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 110
particle-size: 110
statement: return this'.data.length
particle-size: 110
particle-size: 110
particle-size: 110
particle-size: 110
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 110
particle-size: 110
statement: return this'.data.length
particle-size: 110
particle-size: 110
particle-size: 110
particle-size: 110
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 110
particle-size: 110
statement: return this'.data.length
particle-size: 110
particle-size: 110
particle-size: 110
particle-size: 110
statement: this'.__H1.__run()
particle-size: 4
particle-size: 4
statement: if flip(1 / 2) {
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100));
}
particle-size: 4
particle-size: 4
statement: assert(0 <= p & p <= 1)
statement: return sampleFrom("(x;p)=>(1-p)·δ(0)[x]+p·δ(0)[1-x]",p): ℝ
particle-size: 8
particle-size: 8
statement: this'.Q_in.dupFront()
particle-size: 4
particle-size: 4
statement: this'.pushFront(this'.front())
particle-size: 4
particle-size: 4
statement: return this'.data[0]
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.data = [x] ~ this'.data
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],100))
particle-size: 4
particle-size: 4
statement: r := this'.front()
particle-size: 4
particle-size: 4
statement: return this'.data[0]
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.popFront()
particle-size: 4
particle-size: 4
statement: this'.data = this'.data[1..this'.size()]
particle-size: 4
particle-size: 4
statement: return this'.data.length
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return r
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.data = this'.data ~ [x]
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.Q_in.popFront()
particle-size: 8
particle-size: 8
statement: this'.data = this'.data[1..this'.size()]
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 150
particle-size: 150
particle-size: 150
particle-size: 56
repetition: 23
statement: __d.__step()
particle-size: 56
particle-size: 56
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 56
particle-size: 56
statement: return this'.data.length
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: return this'.data.length
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: return this'.data.length
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: return this'.data.length
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: return this'.data.length
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: return this'.data.length
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: return this'.data.length
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: return this'.data.length
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: return this'.data.length
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: return this'.data.length
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: (action,node) := this'.scheduler()
particle-size: 46
particle-size: 46
statement: actions := ([]: (R × R)[])
particle-size: 46
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 46
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 46
particle-size: 46
statement: return this'.data.length
particle-size: 46
particle-size: 46
particle-size: 46
statement: actions ~= [(0,i)]
particle-size: 6
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 46
particle-size: 46
statement: return this'.data.length
particle-size: 46
particle-size: 46
particle-size: 46
loop-index: 1
particle-size: 46
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 46
particle-size: 46
statement: return this'.data.length
particle-size: 46
particle-size: 46
particle-size: 46
statement: actions ~= [(0,i)]
particle-size: 46
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 46
particle-size: 46
statement: return this'.data.length
particle-size: 46
particle-size: 46
particle-size: 46
loop-index: 2
particle-size: 46
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 46
particle-size: 46
statement: return this'.data.length
particle-size: 46
particle-size: 46
particle-size: 46
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 46
particle-size: 46
statement: return this'.data.length
particle-size: 46
particle-size: 46
particle-size: 46
loop-index: 3
particle-size: 46
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 46
particle-size: 46
statement: return this'.data.length
particle-size: 46
particle-size: 46
particle-size: 46
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 46
particle-size: 46
statement: return this'.data.length
particle-size: 46
particle-size: 46
particle-size: 46
loop-index: 4
particle-size: 46
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 46
particle-size: 46
statement: return this'.data.length
particle-size: 46
particle-size: 46
particle-size: 46
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 46
particle-size: 46
statement: return this'.data.length
particle-size: 46
particle-size: 46
particle-size: 46
statement: actions ~= [(1,i)]
particle-size: 4
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 46
particle-size: 46
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_out.size() {
    (pkt,port) := this'.__H0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,3));
    }
}
particle-size: 4
particle-size: 4
statement: return this'.data.length
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: if node == 1 && this'.__Controller.Q_out.size() {
    (pkt,port) := this'.__Controller.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,100));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,100));
    }
    if port == 3 {
        this'.__H0.Q_in.pushBack((pkt,100));
    }
    if port == 4 {
        this'.__H1.Q_in.pushBack((pkt,100));
    }
}
particle-size: 4
particle-size: 4
statement: return this'.data.length
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: if node == 2 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,1));
    }
}
particle-size: 4
particle-size: 4
statement: return this'.data.length
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: if node == 3 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__H1.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,2));
    }
}
particle-size: 4
particle-size: 4
statement: return this'.data.length
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: if node == 4 && this'.__H1.Q_out.size() {
    (pkt,port) := this'.__H1.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 100 {
        this'.__Controller.Q_in.pushBack((pkt,4));
    }
}
particle-size: 4
particle-size: 4
statement: return this'.data.length
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: (pkt,port) := this'.__H1.Q_out.takeFront()
particle-size: 4
particle-size: 4
statement: r := this'.front()
particle-size: 4
particle-size: 4
statement: return this'.data[0]
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.popFront()
particle-size: 4
particle-size: 4
statement: this'.data = this'.data[1..this'.size()]
particle-size: 4
particle-size: 4
statement: return this'.data.length
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return r
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this'.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 100 {
    this'.__Controller.Q_in.pushBack((pkt,4));
}
statement: this'.__Controller.Q_in.pushBack((pkt,4))
particle-size: 4
particle-size: 4
particle-size: 4
statement: this'.data = this'.data ~ [x]
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 52
particle-size: 52
statement: return this'.data.length
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
statement: this'.__H0.__run()
particle-size: 6
particle-size: 6
statement: if (this'.num_sent < 2) {
    this'.Q_in.pushFront((Packet'(),0));
    this'.num_sent = (this'.num_sent + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 6
particle-size: 6
statement: this'.data = this'.data[1..this'.size()]
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 52
particle-size: 52
statement: return this'.data.length
particle-size: 52
particle-size: 52
particle-size: 52
particle-size: 52
statement: this'.__Controller.__run()
particle-size: 46
particle-size: 46
statement: this'.num_packets = (this'.num_packets + 1)
particle-size: 46
statement: if 1 {
    this'.tot_packets = 4;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 2));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 4) {
        observe((this'.Q_in.data[0][1] == 4));
    } else {
        observe(0);
    }
} else {
    this'.tot_packets = 3;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 2));
    } else {
        observe(0);
    }
}
statement: this'.tot_packets = 4
particle-size: 46
statement: if (this'.num_packets == 1) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 2));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 2));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 4))
statement: if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 4))
statement: this'.Q_in.popFront()
particle-size: 8
particle-size: 8
statement: this'.data = this'.data[1..this'.size()]
particle-size: 8
particle-size: 8
statement: return this'.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: if node == 2 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 14
particle-size: 14
statement: return this'.data.length
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: if node == 3 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 14
particle-size: 14
statement: return this'.data.length
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: if node == 4 && this'.__H1.Q_in.size() {
    this'.__H1.__run();
}
particle-size: 14
particle-size: 14
statement: return this'.data.length
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: return ()
particle-size: 28
particle-size: 28
particle-size: 28
particle-size: 16
repetition: 24
statement: __d.__step()
particle-size: 16
particle-size: 16
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: (action,node) := this'.scheduler()
particle-size: 6
particle-size: 6
statement: actions := ([]: (R × R)[])
particle-size: 6
statement: for i in [0..5){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__Controller.Q_in;
    } else if i == 2 {
        this'.__S1.Q_in;
    } else if i == 3 {
        this'.__S2.Q_in;
    } else {
        this'.__H1.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__Controller.Q_out;
    } else if i == 2 {
        this'.__S1.Q_out;
    } else if i == 3 {
        this'.__S2.Q_out;
    } else {
        this'.__H1.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 6
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
loop-index: 1
particle-size: 6
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
statement: actions ~= [(0,i)]
particle-size: 6
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
loop-index: 2
particle-size: 6
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
loop-index: 3
particle-size: 6
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
loop-index: 4
particle-size: 6
statement: if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__Controller.Q_in;
} else if i == 2 {
    this'.__S1.Q_in;
} else if i == 3 {
    this'.__S2.Q_in;
} else {
    this'.__H1.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
statement: if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__Controller.Q_out;
} else if i == 2 {
    this'.__S1.Q_out;
} else if i == 3 {
    this'.__S2.Q_out;
} else {
    this'.__H1.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 6
particle-size: 6
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: if action {
    if node == 0 && this'.__H0.Q_out.size() {
        (pkt,port) := this'.__H0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this'.__Controller.Q_out.size() {
        (pkt,port) := this'.__Controller.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,100));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,100));
        }
        if port == 3 {
            this'.__H0.Q_in.pushBack((pkt,100));
        }
        if port == 4 {
            this'.__H1.Q_in.pushBack((pkt,100));
        }
    }
    if node == 2 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__H1.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this'.__H1.Q_out.size() {
        (pkt,port) := this'.__H1.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 100 {
            this'.__Controller.Q_in.pushBack((pkt,4));
        }
    }
} else {
    if node == 0 && this'.__H0.Q_in.size() {
        this'.__H0.__run();
    }
    if node == 1 && this'.__Controller.Q_in.size() {
        this'.__Controller.__run();
    }
    if node == 2 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 3 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 4 && this'.__H1.Q_in.size() {
        this'.__H1.__run();
    }
}
statement: if node == 0 && this'.__H0.Q_in.size() {
    this'.__H0.__run();
}
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: if node == 1 && this'.__Controller.Q_in.size() {
    this'.__Controller.__run();
}
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.__Controller.__run()
particle-size: 6
particle-size: 6
statement: this'.num_packets = (this'.num_packets + 1)
particle-size: 6
statement: if 1 {
    this'.tot_packets = 4;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 2));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 4) {
        observe((this'.Q_in.data[0][1] == 4));
    } else {
        observe(0);
    }
} else {
    this'.tot_packets = 3;
    if (this'.num_packets == 1) {
        observe((this'.Q_in.data[0][1] == 4));
    } else if (this'.num_packets == 2) {
        observe((this'.Q_in.data[0][1] == 1));
    } else if (this'.num_packets == 3) {
        observe((this'.Q_in.data[0][1] == 2));
    } else {
        observe(0);
    }
}
statement: this'.tot_packets = 4
particle-size: 6
statement: if (this'.num_packets == 1) {
    observe((this'.Q_in.data[0][1] == 1));
} else if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 2));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: if (this'.num_packets == 2) {
    observe((this'.Q_in.data[0][1] == 2));
} else if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: if (this'.num_packets == 3) {
    observe((this'.Q_in.data[0][1] == 4));
} else if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: if (this'.num_packets == 4) {
    observe((this'.Q_in.data[0][1] == 4));
} else {
    observe(0);
}
statement: observe((this'.Q_in.data[0][1] == 4))
particle-size: 0
particle-size: 0
particle-size: 0
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
repetition: 25
statement: __d.__step()
particle-size: 10
particle-size: 10
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
repetition: 26
statement: __d.__step()
particle-size: 10
particle-size: 10
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
repetition: 27
statement: __d.__step()
particle-size: 10
particle-size: 10
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
repetition: 28
statement: __d.__step()
particle-size: 10
particle-size: 10
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
repetition: 29
statement: __d.__step()
particle-size: 10
particle-size: 10
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
repetition: 30
statement: __d.__step()
particle-size: 10
particle-size: 10
statement: if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__Controller.Q_in.size() || this'.__Controller.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__H0.Q_out.size() {
            (pkt,port) := this'.__H0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this'.__Controller.Q_out.size() {
            (pkt,port) := this'.__Controller.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,100));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,100));
            }
            if port == 3 {
                this'.__H0.Q_in.pushBack((pkt,100));
            }
            if port == 4 {
                this'.__H1.Q_in.pushBack((pkt,100));
            }
        }
        if node == 2 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__H1.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this'.__H1.Q_out.size() {
            (pkt,port) := this'.__H1.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 100 {
                this'.__Controller.Q_in.pushBack((pkt,4));
            }
        }
    } else {
        if node == 0 && this'.__H0.Q_in.size() {
            this'.__H0.__run();
        }
        if node == 1 && this'.__Controller.Q_in.size() {
            this'.__Controller.__run();
        }
        if node == 2 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 3 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 4 && this'.__H1.Q_in.size() {
            this'.__H1.__run();
        }
    }
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: observe((if 1 == 1 {
    __d.__Controller.num_packets;
} else {
    assert(0);
}) == (if 1 == 1 {
    __d.__Controller.tot_packets;
} else {
    assert(0);
}))
statement: assert(!(__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__Controller.Q_in.size() || __d.__Controller.Q_out.size() || __d.__S1.Q_in.size() || __d.__S1.Q_out.size() || __d.__S2.Q_in.size() || __d.__S2.Q_out.size() || __d.__H1.Q_in.size() || __d.__H1.Q_out.size()))
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: q₁ := Expectation(((if 2 == 2 {
    __d.__S1.bad_hash;
} else {
    assert(0);
})) != 0)
particle-size: 2
statement: return (q₁)
particle-size: 2
E[q1_] = 494128/3985795

real	3m22.378s
user	3m20.712s
sys	0m1.536s
