statement: __d := __D'()
particle-size: 1
particle-size: 1
statement: this.__S0 = __first_ty'() , this.__S1 = __node_ty'() , this.__S2 = __node_ty'() , this.__S3 = __node_ty'()
statement: this.__S0 = __first_ty'() , this.__S1 = __node_ty'() , this.__S2 = __node_ty'()
statement: this.__S0 = __first_ty'() , this.__S1 = __node_ty'()
statement: this.__S0 = __first_ty'()
particle-size: 1
particle-size: 1
statement: this.Q_in = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.Q_out = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.infected = 0
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.__S1 = __node_ty'()
particle-size: 1
particle-size: 1
statement: this.Q_in = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.Q_out = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.infected = 0
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.__S2 = __node_ty'()
particle-size: 1
particle-size: 1
statement: this.Q_in = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.Q_out = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.infected = 0
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.__S3 = __node_ty'()
particle-size: 1
particle-size: 1
statement: this.Q_in = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.Q_out = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.infected = 0
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: __d.__S0.Q_in.pushBack((Packet'(),0))
particle-size: 1
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = this'.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: __d.__S0.__run()
particle-size: 1
particle-size: 1
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 1
statement: this'.Q_in.pushFront((Packet'(),0))
particle-size: 1
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = [x] ~ this'.data
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 1
particle-size: 1
statement: r := this'.front()
particle-size: 1
particle-size: 1
statement: return this'.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.popFront()
particle-size: 1
particle-size: 1
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: repeat 15 {
    __d.__step();
}
repetition: 1
statement: __d.__step()
particle-size: 3
particle-size: 3
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: (action,node) := this'.scheduler()
particle-size: 3
particle-size: 3
statement: actions := ([]: (R × R)[])
particle-size: 3
statement: for i in [0..4){
    if (if i == 0 {
        this'.__S0.Q_in;
    } else if i == 1 {
        this'.__S1.Q_in;
    } else if i == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__S0.Q_out;
    } else if i == 1 {
        this'.__S1.Q_out;
    } else if i == 2 {
        this'.__S2.Q_out;
    } else {
        this'.__S3.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 3
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: actions ~= [(0,i)]
particle-size: 3
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: actions ~= [(1,i)]
particle-size: 3
loop-index: 1
particle-size: 3
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
loop-index: 2
particle-size: 3
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
loop-index: 3
particle-size: 3
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 3
particle-size: 3
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_out.size() {
    (pkt,port) := this'.__S0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S3.Q_in.pushBack((pkt,1));
    }
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: (pkt,port) := this'.__S0.Q_out.takeFront()
particle-size: 3
particle-size: 3
statement: r := this'.front()
particle-size: 3
particle-size: 3
statement: return this'.data[0]
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.popFront()
particle-size: 3
particle-size: 3
statement: this'.data = this'.data[1..this'.size()]
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return r
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,3));
}
statement: this'.__S1.Q_in.pushBack((pkt,3))
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = this'.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if port == 2 {
    this'.__S2.Q_in.pushBack((pkt,2));
}
statement: this'.__S2.Q_in.pushBack((pkt,2))
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = this'.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if port == 3 {
    this'.__S3.Q_in.pushBack((pkt,1));
}
statement: this'.__S3.Q_in.pushBack((pkt,1))
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = this'.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 1 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S3.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 2 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S3.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 3 && this'.__S3.Q_out.size() {
    (pkt,port) := this'.__S3.Q_out.takeFront();
    if port == 1 {
        this'.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 0 && this'.__S0.Q_in.size() {
    this'.__S0.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.__S0.__run()
particle-size: 3
particle-size: 3
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 3
particle-size: 3
statement: this'.data = this'.data[1..this'.size()]
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 1 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 2 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 3 && this'.__S3.Q_in.size() {
    this'.__S3.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
repetition: 2
statement: __d.__step()
particle-size: 6
particle-size: 6
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: (action,node) := this'.scheduler()
particle-size: 6
particle-size: 6
statement: actions := ([]: (R × R)[])
particle-size: 6
statement: for i in [0..4){
    if (if i == 0 {
        this'.__S0.Q_in;
    } else if i == 1 {
        this'.__S1.Q_in;
    } else if i == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__S0.Q_out;
    } else if i == 1 {
        this'.__S1.Q_out;
    } else if i == 2 {
        this'.__S2.Q_out;
    } else {
        this'.__S3.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 6
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
statement: actions ~= [(0,i)]
particle-size: 3
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
statement: actions ~= [(1,i)]
particle-size: 3
loop-index: 1
particle-size: 6
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
statement: actions ~= [(0,i)]
particle-size: 1
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
loop-index: 2
particle-size: 6
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
statement: actions ~= [(0,i)]
particle-size: 1
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
loop-index: 3
particle-size: 6
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
statement: actions ~= [(0,i)]
particle-size: 1
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 6
particle-size: 6
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_out.size() {
    (pkt,port) := this'.__S0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S3.Q_in.pushBack((pkt,1));
    }
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: (pkt,port) := this'.__S0.Q_out.takeFront()
particle-size: 3
particle-size: 3
statement: r := this'.front()
particle-size: 3
particle-size: 3
statement: return this'.data[0]
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.popFront()
particle-size: 3
particle-size: 3
statement: this'.data = this'.data[1..this'.size()]
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return r
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 1 {
    this'.__S1.Q_in.pushBack((pkt,3));
}
statement: this'.__S1.Q_in.pushBack((pkt,3))
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = this'.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if port == 2 {
    this'.__S2.Q_in.pushBack((pkt,2));
}
statement: this'.__S2.Q_in.pushBack((pkt,2))
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = this'.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if port == 3 {
    this'.__S3.Q_in.pushBack((pkt,1));
}
statement: this'.__S3.Q_in.pushBack((pkt,1))
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = this'.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 1 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S3.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 2 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S3.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 3 && this'.__S3.Q_out.size() {
    (pkt,port) := this'.__S3.Q_out.takeFront();
    if port == 1 {
        this'.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 0 && this'.__S0.Q_in.size() {
    this'.__S0.__run();
}
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.__S0.__run()
particle-size: 3
particle-size: 3
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 3
particle-size: 3
statement: this'.data = this'.data[1..this'.size()]
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 1 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.__S1.__run()
particle-size: 1
particle-size: 1
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 1
statement: this'.Q_in.dupFront()
particle-size: 1
particle-size: 1
statement: this'.pushFront(this'.front())
particle-size: 1
particle-size: 1
statement: return this'.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = [x] ~ this'.data
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 1
particle-size: 1
statement: r := this'.front()
particle-size: 1
particle-size: 1
statement: return this'.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.popFront()
particle-size: 1
particle-size: 1
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 3
particle-size: 3
statement: r := this'.front()
particle-size: 3
particle-size: 3
statement: return this'.data[0]
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.popFront()
particle-size: 3
particle-size: 3
statement: this'.data = this'.data[1..this'.size()]
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return r
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this'.data = this'.data ~ [x]
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if node == 2 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 14
particle-size: 14
statement: return this'.data.length
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: this'.__S2.__run()
particle-size: 1
particle-size: 1
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 1
statement: this'.Q_in.dupFront()
particle-size: 1
particle-size: 1
statement: this'.pushFront(this'.front())
particle-size: 1
particle-size: 1
statement: return this'.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = [x] ~ this'.data
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 1
particle-size: 1
statement: r := this'.front()
particle-size: 1
particle-size: 1
statement: return this'.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.popFront()
particle-size: 1
particle-size: 1
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 3
particle-size: 3
statement: r := this'.front()
particle-size: 3
particle-size: 3
statement: return this'.data[0]
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.popFront()
particle-size: 3
particle-size: 3
statement: this'.data = this'.data[1..this'.size()]
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return r
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this'.data = this'.data ~ [x]
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if node == 3 && this'.__S3.Q_in.size() {
    this'.__S3.__run();
}
particle-size: 22
particle-size: 22
statement: return this'.data.length
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: this'.__S3.__run()
particle-size: 1
particle-size: 1
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 1
statement: this'.Q_in.dupFront()
particle-size: 1
particle-size: 1
statement: this'.pushFront(this'.front())
particle-size: 1
particle-size: 1
statement: return this'.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = [x] ~ this'.data
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 1
particle-size: 1
statement: r := this'.front()
particle-size: 1
particle-size: 1
statement: return this'.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.popFront()
particle-size: 1
particle-size: 1
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 3
particle-size: 3
statement: r := this'.front()
particle-size: 3
particle-size: 3
statement: return this'.data[0]
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.popFront()
particle-size: 3
particle-size: 3
statement: this'.data = this'.data[1..this'.size()]
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return r
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this'.data = this'.data ~ [x]
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 30
repetition: 3
statement: __d.__step()
particle-size: 30
particle-size: 30
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 30
particle-size: 30
statement: return this'.data.length
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
statement: return this'.data.length
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
statement: return this'.data.length
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
statement: return this'.data.length
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
statement: return this'.data.length
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
statement: return this'.data.length
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
statement: return this'.data.length
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
statement: return this'.data.length
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
statement: (action,node) := this'.scheduler()
particle-size: 30
particle-size: 30
statement: actions := ([]: (R × R)[])
particle-size: 30
statement: for i in [0..4){
    if (if i == 0 {
        this'.__S0.Q_in;
    } else if i == 1 {
        this'.__S1.Q_in;
    } else if i == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__S0.Q_out;
    } else if i == 1 {
        this'.__S1.Q_out;
    } else if i == 2 {
        this'.__S2.Q_out;
    } else {
        this'.__S3.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 30
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 30
particle-size: 30
statement: return this'.data.length
particle-size: 30
particle-size: 30
particle-size: 30
statement: actions ~= [(0,i)]
particle-size: 27
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 30
particle-size: 30
statement: return this'.data.length
particle-size: 30
particle-size: 30
particle-size: 30
loop-index: 1
particle-size: 30
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 30
particle-size: 30
statement: return this'.data.length
particle-size: 30
particle-size: 30
particle-size: 30
statement: actions ~= [(0,i)]
particle-size: 1
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 30
particle-size: 30
statement: return this'.data.length
particle-size: 30
particle-size: 30
particle-size: 30
statement: actions ~= [(1,i)]
particle-size: 9
loop-index: 2
particle-size: 30
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 30
particle-size: 30
statement: return this'.data.length
particle-size: 30
particle-size: 30
particle-size: 30
statement: actions ~= [(0,i)]
particle-size: 1
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 30
particle-size: 30
statement: return this'.data.length
particle-size: 30
particle-size: 30
particle-size: 30
statement: actions ~= [(1,i)]
particle-size: 9
loop-index: 3
particle-size: 30
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 30
particle-size: 30
statement: return this'.data.length
particle-size: 30
particle-size: 30
particle-size: 30
statement: actions ~= [(0,i)]
particle-size: 1
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 30
particle-size: 30
statement: return this'.data.length
particle-size: 30
particle-size: 30
particle-size: 30
statement: actions ~= [(1,i)]
particle-size: 9
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 30
particle-size: 30
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 57
particle-size: 57
particle-size: 57
particle-size: 57
particle-size: 57
particle-size: 57
particle-size: 57
particle-size: 57
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_out.size() {
    (pkt,port) := this'.__S0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S3.Q_in.pushBack((pkt,1));
    }
}
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: if node == 1 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S3.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 9
particle-size: 9
statement: r := this'.front()
particle-size: 9
particle-size: 9
statement: return this'.data[0]
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this'.popFront()
particle-size: 9
particle-size: 9
statement: this'.data = this'.data[1..this'.size()]
particle-size: 9
particle-size: 9
statement: return this'.data.length
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return r
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if port == 1 {
    this'.__S2.Q_in.pushBack((pkt,3));
}
statement: this'.__S2.Q_in.pushBack((pkt,3))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 2 {
    this'.__S3.Q_in.pushBack((pkt,2));
}
statement: this'.__S3.Q_in.pushBack((pkt,2))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 3 {
    this'.__S0.Q_in.pushBack((pkt,1));
}
statement: this'.__S0.Q_in.pushBack((pkt,1))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 2 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S3.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 9
particle-size: 9
statement: r := this'.front()
particle-size: 9
particle-size: 9
statement: return this'.data[0]
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this'.popFront()
particle-size: 9
particle-size: 9
statement: this'.data = this'.data[1..this'.size()]
particle-size: 9
particle-size: 9
statement: return this'.data.length
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return r
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if port == 1 {
    this'.__S3.Q_in.pushBack((pkt,3));
}
statement: this'.__S3.Q_in.pushBack((pkt,3))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 2 {
    this'.__S0.Q_in.pushBack((pkt,2));
}
statement: this'.__S0.Q_in.pushBack((pkt,2))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 3 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 3 && this'.__S3.Q_out.size() {
    (pkt,port) := this'.__S3.Q_out.takeFront();
    if port == 1 {
        this'.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: (pkt,port) := this'.__S3.Q_out.takeFront()
particle-size: 9
particle-size: 9
statement: r := this'.front()
particle-size: 9
particle-size: 9
statement: return this'.data[0]
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this'.popFront()
particle-size: 9
particle-size: 9
statement: this'.data = this'.data[1..this'.size()]
particle-size: 9
particle-size: 9
statement: return this'.data.length
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return r
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if port == 1 {
    this'.__S0.Q_in.pushBack((pkt,3));
}
statement: this'.__S0.Q_in.pushBack((pkt,3))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 2 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: this'.__S1.Q_in.pushBack((pkt,2))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 0 && this'.__S0.Q_in.size() {
    this'.__S0.__run();
}
particle-size: 30
particle-size: 30
statement: return this'.data.length
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
statement: this'.__S0.__run()
particle-size: 27
particle-size: 27
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 27
particle-size: 27
statement: this'.data = this'.data[1..this'.size()]
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: return ()
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: return ()
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: if node == 1 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 30
particle-size: 30
statement: return this'.data.length
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
statement: this'.__S1.__run()
particle-size: 1
particle-size: 1
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 1
statement: this'.Q_in.dupFront()
particle-size: 1
particle-size: 1
statement: this'.pushFront(this'.front())
particle-size: 1
particle-size: 1
statement: return this'.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = [x] ~ this'.data
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 1
particle-size: 1
statement: r := this'.front()
particle-size: 1
particle-size: 1
statement: return this'.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.popFront()
particle-size: 1
particle-size: 1
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 3
particle-size: 3
statement: r := this'.front()
particle-size: 3
particle-size: 3
statement: return this'.data[0]
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.popFront()
particle-size: 3
particle-size: 3
statement: this'.data = this'.data[1..this'.size()]
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return r
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this'.data = this'.data ~ [x]
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if node == 2 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 38
particle-size: 38
statement: return this'.data.length
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: this'.__S2.__run()
particle-size: 1
particle-size: 1
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 1
statement: this'.Q_in.dupFront()
particle-size: 1
particle-size: 1
statement: this'.pushFront(this'.front())
particle-size: 1
particle-size: 1
statement: return this'.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = [x] ~ this'.data
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 1
particle-size: 1
statement: r := this'.front()
particle-size: 1
particle-size: 1
statement: return this'.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.popFront()
particle-size: 1
particle-size: 1
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 3
particle-size: 3
statement: r := this'.front()
particle-size: 3
particle-size: 3
statement: return this'.data[0]
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.popFront()
particle-size: 3
particle-size: 3
statement: this'.data = this'.data[1..this'.size()]
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return r
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this'.data = this'.data ~ [x]
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if node == 3 && this'.__S3.Q_in.size() {
    this'.__S3.__run();
}
particle-size: 46
particle-size: 46
statement: return this'.data.length
particle-size: 46
particle-size: 46
particle-size: 46
particle-size: 46
statement: this'.__S3.__run()
particle-size: 1
particle-size: 1
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 1
statement: this'.Q_in.dupFront()
particle-size: 1
particle-size: 1
statement: this'.pushFront(this'.front())
particle-size: 1
particle-size: 1
statement: return this'.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = [x] ~ this'.data
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 1
particle-size: 1
statement: r := this'.front()
particle-size: 1
particle-size: 1
statement: return this'.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.popFront()
particle-size: 1
particle-size: 1
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 3
particle-size: 3
statement: r := this'.front()
particle-size: 3
particle-size: 3
statement: return this'.data[0]
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.popFront()
particle-size: 3
particle-size: 3
statement: this'.data = this'.data[1..this'.size()]
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return r
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this'.data = this'.data ~ [x]
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 81
particle-size: 81
particle-size: 81
particle-size: 54
repetition: 4
statement: __d.__step()
particle-size: 54
particle-size: 54
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 54
particle-size: 54
statement: return this'.data.length
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: return this'.data.length
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: return this'.data.length
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: return this'.data.length
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: return this'.data.length
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: return this'.data.length
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: return this'.data.length
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: return this'.data.length
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: (action,node) := this'.scheduler()
particle-size: 54
particle-size: 54
statement: actions := ([]: (R × R)[])
particle-size: 54
statement: for i in [0..4){
    if (if i == 0 {
        this'.__S0.Q_in;
    } else if i == 1 {
        this'.__S1.Q_in;
    } else if i == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__S0.Q_out;
    } else if i == 1 {
        this'.__S1.Q_out;
    } else if i == 2 {
        this'.__S2.Q_out;
    } else {
        this'.__S3.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 54
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 54
particle-size: 54
statement: return this'.data.length
particle-size: 54
particle-size: 54
particle-size: 54
statement: actions ~= [(0,i)]
particle-size: 27
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 54
particle-size: 54
statement: return this'.data.length
particle-size: 54
particle-size: 54
particle-size: 54
loop-index: 1
particle-size: 54
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 54
particle-size: 54
statement: return this'.data.length
particle-size: 54
particle-size: 54
particle-size: 54
statement: actions ~= [(0,i)]
particle-size: 6
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 54
particle-size: 54
statement: return this'.data.length
particle-size: 54
particle-size: 54
particle-size: 54
statement: actions ~= [(1,i)]
particle-size: 18
loop-index: 2
particle-size: 54
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 54
particle-size: 54
statement: return this'.data.length
particle-size: 54
particle-size: 54
particle-size: 54
statement: actions ~= [(0,i)]
particle-size: 6
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 54
particle-size: 54
statement: return this'.data.length
particle-size: 54
particle-size: 54
particle-size: 54
statement: actions ~= [(1,i)]
particle-size: 18
loop-index: 3
particle-size: 54
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 54
particle-size: 54
statement: return this'.data.length
particle-size: 54
particle-size: 54
particle-size: 54
statement: actions ~= [(0,i)]
particle-size: 6
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 54
particle-size: 54
statement: return this'.data.length
particle-size: 54
particle-size: 54
particle-size: 54
statement: actions ~= [(1,i)]
particle-size: 18
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 54
particle-size: 54
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 99
particle-size: 99
particle-size: 99
particle-size: 99
particle-size: 99
particle-size: 99
particle-size: 99
particle-size: 99
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_out.size() {
    (pkt,port) := this'.__S0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S3.Q_in.pushBack((pkt,1));
    }
}
particle-size: 54
particle-size: 54
statement: return this'.data.length
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: if node == 1 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S3.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 54
particle-size: 54
statement: return this'.data.length
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 18
particle-size: 18
statement: r := this'.front()
particle-size: 18
particle-size: 18
statement: return this'.data[0]
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.popFront()
particle-size: 18
particle-size: 18
statement: this'.data = this'.data[1..this'.size()]
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return r
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: if port == 1 {
    this'.__S2.Q_in.pushBack((pkt,3));
}
statement: this'.__S2.Q_in.pushBack((pkt,3))
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.data = this'.data ~ [x]
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: if port == 2 {
    this'.__S3.Q_in.pushBack((pkt,2));
}
statement: this'.__S3.Q_in.pushBack((pkt,2))
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.data = this'.data ~ [x]
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: if port == 3 {
    this'.__S0.Q_in.pushBack((pkt,1));
}
statement: this'.__S0.Q_in.pushBack((pkt,1))
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.data = this'.data ~ [x]
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: if node == 2 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S3.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 54
particle-size: 54
statement: return this'.data.length
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 18
particle-size: 18
statement: r := this'.front()
particle-size: 18
particle-size: 18
statement: return this'.data[0]
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.popFront()
particle-size: 18
particle-size: 18
statement: this'.data = this'.data[1..this'.size()]
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return r
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: if port == 1 {
    this'.__S3.Q_in.pushBack((pkt,3));
}
statement: this'.__S3.Q_in.pushBack((pkt,3))
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.data = this'.data ~ [x]
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: if port == 2 {
    this'.__S0.Q_in.pushBack((pkt,2));
}
statement: this'.__S0.Q_in.pushBack((pkt,2))
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.data = this'.data ~ [x]
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: if port == 3 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.data = this'.data ~ [x]
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: if node == 3 && this'.__S3.Q_out.size() {
    (pkt,port) := this'.__S3.Q_out.takeFront();
    if port == 1 {
        this'.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 54
particle-size: 54
statement: return this'.data.length
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: (pkt,port) := this'.__S3.Q_out.takeFront()
particle-size: 18
particle-size: 18
statement: r := this'.front()
particle-size: 18
particle-size: 18
statement: return this'.data[0]
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.popFront()
particle-size: 18
particle-size: 18
statement: this'.data = this'.data[1..this'.size()]
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return r
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: if port == 1 {
    this'.__S0.Q_in.pushBack((pkt,3));
}
statement: this'.__S0.Q_in.pushBack((pkt,3))
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.data = this'.data ~ [x]
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: if port == 2 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: this'.__S1.Q_in.pushBack((pkt,2))
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.data = this'.data ~ [x]
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.data = this'.data ~ [x]
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: if node == 0 && this'.__S0.Q_in.size() {
    this'.__S0.__run();
}
particle-size: 45
particle-size: 45
statement: return this'.data.length
particle-size: 45
particle-size: 45
particle-size: 45
particle-size: 45
statement: this'.__S0.__run()
particle-size: 27
particle-size: 27
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 27
particle-size: 27
statement: this'.data = this'.data[1..this'.size()]
particle-size: 27
particle-size: 27
statement: return this'.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: return ()
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: return ()
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: if node == 1 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 45
particle-size: 45
statement: return this'.data.length
particle-size: 45
particle-size: 45
particle-size: 45
particle-size: 45
statement: this'.__S1.__run()
particle-size: 6
particle-size: 6
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 6
statement: this'.Q_in.dupFront()
particle-size: 6
particle-size: 6
statement: this'.pushFront(this'.front())
particle-size: 6
particle-size: 6
statement: return this'.data[0]
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.data = [x] ~ this'.data
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 6
particle-size: 6
statement: r := this'.front()
particle-size: 6
particle-size: 6
statement: return this'.data[0]
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.popFront()
particle-size: 6
particle-size: 6
statement: this'.data = this'.data[1..this'.size()]
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return r
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.data = this'.data ~ [x]
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 18
particle-size: 18
statement: r := this'.front()
particle-size: 18
particle-size: 18
statement: return this'.data[0]
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.popFront()
particle-size: 18
particle-size: 18
statement: this'.data = this'.data[1..this'.size()]
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return r
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: this'.data = this'.data ~ [x]
particle-size: 54
statement: return ()
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: return ()
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: if node == 2 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 93
particle-size: 93
statement: return this'.data.length
particle-size: 93
particle-size: 93
particle-size: 93
particle-size: 93
statement: this'.__S2.__run()
particle-size: 6
particle-size: 6
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 6
statement: this'.Q_in.dupFront()
particle-size: 6
particle-size: 6
statement: this'.pushFront(this'.front())
particle-size: 6
particle-size: 6
statement: return this'.data[0]
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.data = [x] ~ this'.data
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 6
particle-size: 6
statement: r := this'.front()
particle-size: 6
particle-size: 6
statement: return this'.data[0]
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.popFront()
particle-size: 6
particle-size: 6
statement: this'.data = this'.data[1..this'.size()]
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return r
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.data = this'.data ~ [x]
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 18
particle-size: 18
statement: r := this'.front()
particle-size: 18
particle-size: 18
statement: return this'.data[0]
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.popFront()
particle-size: 18
particle-size: 18
statement: this'.data = this'.data[1..this'.size()]
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return r
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: this'.data = this'.data ~ [x]
particle-size: 54
statement: return ()
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: return ()
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: if node == 3 && this'.__S3.Q_in.size() {
    this'.__S3.__run();
}
particle-size: 141
particle-size: 141
statement: return this'.data.length
particle-size: 141
particle-size: 141
particle-size: 141
particle-size: 141
statement: this'.__S3.__run()
particle-size: 6
particle-size: 6
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 6
statement: this'.Q_in.dupFront()
particle-size: 6
particle-size: 6
statement: this'.pushFront(this'.front())
particle-size: 6
particle-size: 6
statement: return this'.data[0]
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.data = [x] ~ this'.data
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 6
particle-size: 6
statement: r := this'.front()
particle-size: 6
particle-size: 6
statement: return this'.data[0]
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.popFront()
particle-size: 6
particle-size: 6
statement: this'.data = this'.data[1..this'.size()]
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return r
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.data = this'.data ~ [x]
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 18
particle-size: 18
statement: r := this'.front()
particle-size: 18
particle-size: 18
statement: return this'.data[0]
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.popFront()
particle-size: 18
particle-size: 18
statement: this'.data = this'.data[1..this'.size()]
particle-size: 18
particle-size: 18
statement: return this'.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return r
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: this'.data = this'.data ~ [x]
particle-size: 54
statement: return ()
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: return ()
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: return ()
particle-size: 243
particle-size: 243
particle-size: 243
particle-size: 207
repetition: 5
statement: __d.__step()
particle-size: 207
particle-size: 207
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 207
particle-size: 207
statement: return this'.data.length
particle-size: 207
particle-size: 207
particle-size: 207
particle-size: 207
particle-size: 207
particle-size: 207
statement: return this'.data.length
particle-size: 207
particle-size: 207
particle-size: 207
particle-size: 207
particle-size: 207
particle-size: 207
statement: return this'.data.length
particle-size: 207
particle-size: 207
particle-size: 207
particle-size: 207
particle-size: 207
particle-size: 207
statement: return this'.data.length
particle-size: 207
particle-size: 207
particle-size: 207
particle-size: 207
particle-size: 207
particle-size: 207
statement: return this'.data.length
particle-size: 207
particle-size: 207
particle-size: 207
particle-size: 207
particle-size: 207
particle-size: 207
statement: return this'.data.length
particle-size: 207
particle-size: 207
particle-size: 207
particle-size: 207
particle-size: 207
particle-size: 207
statement: return this'.data.length
particle-size: 207
particle-size: 207
particle-size: 207
particle-size: 207
particle-size: 207
particle-size: 207
statement: return this'.data.length
particle-size: 207
particle-size: 207
particle-size: 207
particle-size: 207
statement: (action,node) := this'.scheduler()
particle-size: 207
particle-size: 207
statement: actions := ([]: (R × R)[])
particle-size: 207
statement: for i in [0..4){
    if (if i == 0 {
        this'.__S0.Q_in;
    } else if i == 1 {
        this'.__S1.Q_in;
    } else if i == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__S0.Q_out;
    } else if i == 1 {
        this'.__S1.Q_out;
    } else if i == 2 {
        this'.__S2.Q_out;
    } else {
        this'.__S3.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 207
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 207
particle-size: 207
statement: return this'.data.length
particle-size: 207
particle-size: 207
particle-size: 207
statement: actions ~= [(0,i)]
particle-size: 189
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 207
particle-size: 207
statement: return this'.data.length
particle-size: 207
particle-size: 207
particle-size: 207
loop-index: 1
particle-size: 207
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 207
particle-size: 207
statement: return this'.data.length
particle-size: 207
particle-size: 207
particle-size: 207
statement: actions ~= [(0,i)]
particle-size: 12
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 207
particle-size: 207
statement: return this'.data.length
particle-size: 207
particle-size: 207
particle-size: 207
statement: actions ~= [(1,i)]
particle-size: 117
loop-index: 2
particle-size: 207
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 207
particle-size: 207
statement: return this'.data.length
particle-size: 207
particle-size: 207
particle-size: 207
statement: actions ~= [(0,i)]
particle-size: 12
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 207
particle-size: 207
statement: return this'.data.length
particle-size: 207
particle-size: 207
particle-size: 207
statement: actions ~= [(1,i)]
particle-size: 117
loop-index: 3
particle-size: 207
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 207
particle-size: 207
statement: return this'.data.length
particle-size: 207
particle-size: 207
particle-size: 207
statement: actions ~= [(0,i)]
particle-size: 12
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 207
particle-size: 207
statement: return this'.data.length
particle-size: 207
particle-size: 207
particle-size: 207
statement: actions ~= [(1,i)]
particle-size: 117
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 207
particle-size: 207
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 576
particle-size: 576
particle-size: 576
particle-size: 576
particle-size: 576
particle-size: 576
particle-size: 576
particle-size: 576
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_out.size() {
    (pkt,port) := this'.__S0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S3.Q_in.pushBack((pkt,1));
    }
}
particle-size: 351
particle-size: 351
statement: return this'.data.length
particle-size: 351
particle-size: 351
particle-size: 351
particle-size: 351
statement: if node == 1 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S3.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 351
particle-size: 351
statement: return this'.data.length
particle-size: 351
particle-size: 351
particle-size: 351
particle-size: 351
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 117
particle-size: 117
statement: r := this'.front()
particle-size: 117
particle-size: 117
statement: return this'.data[0]
particle-size: 117
particle-size: 117
particle-size: 117
particle-size: 117
particle-size: 117
statement: this'.popFront()
particle-size: 117
particle-size: 117
statement: this'.data = this'.data[1..this'.size()]
particle-size: 117
particle-size: 117
statement: return this'.data.length
particle-size: 117
particle-size: 117
particle-size: 117
particle-size: 117
particle-size: 117
statement: return ()
particle-size: 117
particle-size: 117
particle-size: 117
particle-size: 117
statement: return r
particle-size: 117
particle-size: 117
particle-size: 117
particle-size: 117
particle-size: 117
particle-size: 117
statement: if port == 1 {
    this'.__S2.Q_in.pushBack((pkt,3));
}
statement: this'.__S2.Q_in.pushBack((pkt,3))
particle-size: 39
particle-size: 39
particle-size: 39
statement: this'.data = this'.data ~ [x]
particle-size: 39
statement: return ()
particle-size: 39
particle-size: 39
particle-size: 39
particle-size: 39
statement: if port == 2 {
    this'.__S3.Q_in.pushBack((pkt,2));
}
statement: this'.__S3.Q_in.pushBack((pkt,2))
particle-size: 39
particle-size: 39
particle-size: 39
statement: this'.data = this'.data ~ [x]
particle-size: 39
statement: return ()
particle-size: 39
particle-size: 39
particle-size: 39
particle-size: 39
statement: if port == 3 {
    this'.__S0.Q_in.pushBack((pkt,1));
}
statement: this'.__S0.Q_in.pushBack((pkt,1))
particle-size: 39
particle-size: 39
particle-size: 39
statement: this'.data = this'.data ~ [x]
particle-size: 39
statement: return ()
particle-size: 39
particle-size: 39
particle-size: 39
particle-size: 39
statement: if node == 2 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S3.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 351
particle-size: 351
statement: return this'.data.length
particle-size: 351
particle-size: 351
particle-size: 351
particle-size: 351
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 117
particle-size: 117
statement: r := this'.front()
particle-size: 117
particle-size: 117
statement: return this'.data[0]
particle-size: 117
particle-size: 117
particle-size: 117
particle-size: 117
particle-size: 117
statement: this'.popFront()
particle-size: 117
particle-size: 117
statement: this'.data = this'.data[1..this'.size()]
particle-size: 117
particle-size: 117
statement: return this'.data.length
particle-size: 117
particle-size: 117
particle-size: 117
particle-size: 117
particle-size: 117
statement: return ()
particle-size: 117
particle-size: 117
particle-size: 117
particle-size: 117
statement: return r
particle-size: 117
particle-size: 117
particle-size: 117
particle-size: 117
particle-size: 117
particle-size: 117
statement: if port == 1 {
    this'.__S3.Q_in.pushBack((pkt,3));
}
statement: this'.__S3.Q_in.pushBack((pkt,3))
particle-size: 39
particle-size: 39
particle-size: 39
statement: this'.data = this'.data ~ [x]
particle-size: 39
statement: return ()
particle-size: 39
particle-size: 39
particle-size: 39
particle-size: 39
statement: if port == 2 {
    this'.__S0.Q_in.pushBack((pkt,2));
}
statement: this'.__S0.Q_in.pushBack((pkt,2))
particle-size: 39
particle-size: 39
particle-size: 39
statement: this'.data = this'.data ~ [x]
particle-size: 39
statement: return ()
particle-size: 39
particle-size: 39
particle-size: 39
particle-size: 39
statement: if port == 3 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 39
particle-size: 39
particle-size: 39
statement: this'.data = this'.data ~ [x]
particle-size: 39
statement: return ()
particle-size: 39
particle-size: 39
particle-size: 39
particle-size: 39
statement: if node == 3 && this'.__S3.Q_out.size() {
    (pkt,port) := this'.__S3.Q_out.takeFront();
    if port == 1 {
        this'.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 351
particle-size: 351
statement: return this'.data.length
particle-size: 351
particle-size: 351
particle-size: 351
particle-size: 351
statement: (pkt,port) := this'.__S3.Q_out.takeFront()
particle-size: 117
particle-size: 117
statement: r := this'.front()
particle-size: 117
particle-size: 117
statement: return this'.data[0]
particle-size: 117
particle-size: 117
particle-size: 117
particle-size: 117
particle-size: 117
statement: this'.popFront()
particle-size: 117
particle-size: 117
statement: this'.data = this'.data[1..this'.size()]
particle-size: 117
particle-size: 117
statement: return this'.data.length
particle-size: 117
particle-size: 117
particle-size: 117
particle-size: 117
particle-size: 117
statement: return ()
particle-size: 117
particle-size: 117
particle-size: 117
particle-size: 117
statement: return r
particle-size: 117
particle-size: 117
particle-size: 117
particle-size: 117
particle-size: 117
particle-size: 117
statement: if port == 1 {
    this'.__S0.Q_in.pushBack((pkt,3));
}
statement: this'.__S0.Q_in.pushBack((pkt,3))
particle-size: 39
particle-size: 39
particle-size: 39
statement: this'.data = this'.data ~ [x]
particle-size: 39
statement: return ()
particle-size: 39
particle-size: 39
particle-size: 39
particle-size: 39
statement: if port == 2 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: this'.__S1.Q_in.pushBack((pkt,2))
particle-size: 39
particle-size: 39
particle-size: 39
statement: this'.data = this'.data ~ [x]
particle-size: 39
statement: return ()
particle-size: 39
particle-size: 39
particle-size: 39
particle-size: 39
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 39
particle-size: 39
particle-size: 39
statement: this'.data = this'.data ~ [x]
particle-size: 39
statement: return ()
particle-size: 39
particle-size: 39
particle-size: 39
particle-size: 39
statement: if node == 0 && this'.__S0.Q_in.size() {
    this'.__S0.__run();
}
particle-size: 225
particle-size: 225
statement: return this'.data.length
particle-size: 225
particle-size: 225
particle-size: 225
particle-size: 225
statement: this'.__S0.__run()
particle-size: 189
particle-size: 189
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 189
particle-size: 189
statement: this'.data = this'.data[1..this'.size()]
particle-size: 189
particle-size: 189
statement: return this'.data.length
particle-size: 189
particle-size: 189
particle-size: 189
particle-size: 189
particle-size: 189
statement: return ()
particle-size: 189
particle-size: 189
particle-size: 189
particle-size: 189
statement: return ()
particle-size: 189
particle-size: 189
particle-size: 189
particle-size: 189
statement: if node == 1 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 225
particle-size: 225
statement: return this'.data.length
particle-size: 225
particle-size: 225
particle-size: 225
particle-size: 225
statement: this'.__S1.__run()
particle-size: 12
particle-size: 12
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 12
statement: this'.Q_in.dupFront()
particle-size: 12
particle-size: 12
statement: this'.pushFront(this'.front())
particle-size: 12
particle-size: 12
statement: return this'.data[0]
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.data = [x] ~ this'.data
particle-size: 12
statement: return ()
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: return ()
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 12
particle-size: 12
statement: r := this'.front()
particle-size: 12
particle-size: 12
statement: return this'.data[0]
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.popFront()
particle-size: 12
particle-size: 12
statement: this'.data = this'.data[1..this'.size()]
particle-size: 12
particle-size: 12
statement: return this'.data.length
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: return ()
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: return r
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: this'.data = this'.data ~ [x]
particle-size: 36
statement: return ()
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 36
particle-size: 36
statement: r := this'.front()
particle-size: 36
particle-size: 36
statement: return this'.data[0]
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: this'.popFront()
particle-size: 36
particle-size: 36
statement: this'.data = this'.data[1..this'.size()]
particle-size: 36
particle-size: 36
statement: return this'.data.length
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: return ()
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: return r
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
statement: this'.data = this'.data ~ [x]
particle-size: 108
statement: return ()
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
statement: return ()
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
statement: if node == 2 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 321
particle-size: 321
statement: return this'.data.length
particle-size: 321
particle-size: 321
particle-size: 321
particle-size: 321
statement: this'.__S2.__run()
particle-size: 12
particle-size: 12
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 12
statement: this'.Q_in.dupFront()
particle-size: 12
particle-size: 12
statement: this'.pushFront(this'.front())
particle-size: 12
particle-size: 12
statement: return this'.data[0]
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.data = [x] ~ this'.data
particle-size: 12
statement: return ()
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: return ()
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 12
particle-size: 12
statement: r := this'.front()
particle-size: 12
particle-size: 12
statement: return this'.data[0]
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.popFront()
particle-size: 12
particle-size: 12
statement: this'.data = this'.data[1..this'.size()]
particle-size: 12
particle-size: 12
statement: return this'.data.length
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: return ()
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: return r
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: this'.data = this'.data ~ [x]
particle-size: 36
statement: return ()
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 36
particle-size: 36
statement: r := this'.front()
particle-size: 36
particle-size: 36
statement: return this'.data[0]
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: this'.popFront()
particle-size: 36
particle-size: 36
statement: this'.data = this'.data[1..this'.size()]
particle-size: 36
particle-size: 36
statement: return this'.data.length
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: return ()
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: return r
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
statement: this'.data = this'.data ~ [x]
particle-size: 108
statement: return ()
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
statement: return ()
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
statement: if node == 3 && this'.__S3.Q_in.size() {
    this'.__S3.__run();
}
particle-size: 417
particle-size: 417
statement: return this'.data.length
particle-size: 417
particle-size: 417
particle-size: 417
particle-size: 417
statement: this'.__S3.__run()
particle-size: 12
particle-size: 12
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 12
statement: this'.Q_in.dupFront()
particle-size: 12
particle-size: 12
statement: this'.pushFront(this'.front())
particle-size: 12
particle-size: 12
statement: return this'.data[0]
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.data = [x] ~ this'.data
particle-size: 12
statement: return ()
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: return ()
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 12
particle-size: 12
statement: r := this'.front()
particle-size: 12
particle-size: 12
statement: return this'.data[0]
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: this'.popFront()
particle-size: 12
particle-size: 12
statement: this'.data = this'.data[1..this'.size()]
particle-size: 12
particle-size: 12
statement: return this'.data.length
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: return ()
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: return r
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
particle-size: 12
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: this'.data = this'.data ~ [x]
particle-size: 36
statement: return ()
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 36
particle-size: 36
statement: r := this'.front()
particle-size: 36
particle-size: 36
statement: return this'.data[0]
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: this'.popFront()
particle-size: 36
particle-size: 36
statement: this'.data = this'.data[1..this'.size()]
particle-size: 36
particle-size: 36
statement: return this'.data.length
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: return ()
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: return r
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
statement: this'.data = this'.data ~ [x]
particle-size: 108
statement: return ()
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
statement: return ()
particle-size: 108
particle-size: 108
particle-size: 108
particle-size: 108
statement: return ()
particle-size: 864
particle-size: 864
particle-size: 864
particle-size: 516
repetition: 6
statement: __d.__step()
particle-size: 516
particle-size: 516
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 516
particle-size: 516
statement: return this'.data.length
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
statement: return this'.data.length
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
statement: return this'.data.length
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
statement: return this'.data.length
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
statement: return this'.data.length
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
statement: return this'.data.length
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
statement: return this'.data.length
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
statement: return this'.data.length
particle-size: 516
particle-size: 516
particle-size: 516
particle-size: 516
statement: (action,node) := this'.scheduler()
particle-size: 516
particle-size: 516
statement: actions := ([]: (R × R)[])
particle-size: 516
statement: for i in [0..4){
    if (if i == 0 {
        this'.__S0.Q_in;
    } else if i == 1 {
        this'.__S1.Q_in;
    } else if i == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__S0.Q_out;
    } else if i == 1 {
        this'.__S1.Q_out;
    } else if i == 2 {
        this'.__S2.Q_out;
    } else {
        this'.__S3.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 516
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 516
particle-size: 516
statement: return this'.data.length
particle-size: 516
particle-size: 516
particle-size: 516
statement: actions ~= [(0,i)]
particle-size: 336
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 516
particle-size: 516
statement: return this'.data.length
particle-size: 516
particle-size: 516
particle-size: 516
loop-index: 1
particle-size: 516
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 516
particle-size: 516
statement: return this'.data.length
particle-size: 516
particle-size: 516
particle-size: 516
statement: actions ~= [(0,i)]
particle-size: 78
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 516
particle-size: 516
statement: return this'.data.length
particle-size: 516
particle-size: 516
particle-size: 516
statement: actions ~= [(1,i)]
particle-size: 273
loop-index: 2
particle-size: 516
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 516
particle-size: 516
statement: return this'.data.length
particle-size: 516
particle-size: 516
particle-size: 516
statement: actions ~= [(0,i)]
particle-size: 78
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 516
particle-size: 516
statement: return this'.data.length
particle-size: 516
particle-size: 516
particle-size: 516
statement: actions ~= [(1,i)]
particle-size: 273
loop-index: 3
particle-size: 516
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 516
particle-size: 516
statement: return this'.data.length
particle-size: 516
particle-size: 516
particle-size: 516
statement: actions ~= [(0,i)]
particle-size: 78
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 516
particle-size: 516
statement: return this'.data.length
particle-size: 516
particle-size: 516
particle-size: 516
statement: actions ~= [(1,i)]
particle-size: 273
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 516
particle-size: 516
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 1389
particle-size: 1389
particle-size: 1389
particle-size: 1389
particle-size: 1389
particle-size: 1389
particle-size: 1389
particle-size: 1389
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_out.size() {
    (pkt,port) := this'.__S0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S3.Q_in.pushBack((pkt,1));
    }
}
particle-size: 819
particle-size: 819
statement: return this'.data.length
particle-size: 819
particle-size: 819
particle-size: 819
particle-size: 819
statement: if node == 1 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S3.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 819
particle-size: 819
statement: return this'.data.length
particle-size: 819
particle-size: 819
particle-size: 819
particle-size: 819
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 273
particle-size: 273
statement: r := this'.front()
particle-size: 273
particle-size: 273
statement: return this'.data[0]
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
statement: this'.popFront()
particle-size: 273
particle-size: 273
statement: this'.data = this'.data[1..this'.size()]
particle-size: 273
particle-size: 273
statement: return this'.data.length
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
statement: return ()
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
statement: return r
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
statement: if port == 1 {
    this'.__S2.Q_in.pushBack((pkt,3));
}
statement: this'.__S2.Q_in.pushBack((pkt,3))
particle-size: 91
particle-size: 91
particle-size: 91
statement: this'.data = this'.data ~ [x]
particle-size: 91
statement: return ()
particle-size: 91
particle-size: 91
particle-size: 91
particle-size: 91
statement: if port == 2 {
    this'.__S3.Q_in.pushBack((pkt,2));
}
statement: this'.__S3.Q_in.pushBack((pkt,2))
particle-size: 91
particle-size: 91
particle-size: 91
statement: this'.data = this'.data ~ [x]
particle-size: 91
statement: return ()
particle-size: 91
particle-size: 91
particle-size: 91
particle-size: 91
statement: if port == 3 {
    this'.__S0.Q_in.pushBack((pkt,1));
}
statement: this'.__S0.Q_in.pushBack((pkt,1))
particle-size: 91
particle-size: 91
particle-size: 91
statement: this'.data = this'.data ~ [x]
particle-size: 91
statement: return ()
particle-size: 91
particle-size: 91
particle-size: 91
particle-size: 91
statement: if node == 2 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S3.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 819
particle-size: 819
statement: return this'.data.length
particle-size: 819
particle-size: 819
particle-size: 819
particle-size: 819
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 273
particle-size: 273
statement: r := this'.front()
particle-size: 273
particle-size: 273
statement: return this'.data[0]
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
statement: this'.popFront()
particle-size: 273
particle-size: 273
statement: this'.data = this'.data[1..this'.size()]
particle-size: 273
particle-size: 273
statement: return this'.data.length
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
statement: return ()
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
statement: return r
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
statement: if port == 1 {
    this'.__S3.Q_in.pushBack((pkt,3));
}
statement: this'.__S3.Q_in.pushBack((pkt,3))
particle-size: 91
particle-size: 91
particle-size: 91
statement: this'.data = this'.data ~ [x]
particle-size: 91
statement: return ()
particle-size: 91
particle-size: 91
particle-size: 91
particle-size: 91
statement: if port == 2 {
    this'.__S0.Q_in.pushBack((pkt,2));
}
statement: this'.__S0.Q_in.pushBack((pkt,2))
particle-size: 91
particle-size: 91
particle-size: 91
statement: this'.data = this'.data ~ [x]
particle-size: 91
statement: return ()
particle-size: 91
particle-size: 91
particle-size: 91
particle-size: 91
statement: if port == 3 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 91
particle-size: 91
particle-size: 91
statement: this'.data = this'.data ~ [x]
particle-size: 91
statement: return ()
particle-size: 91
particle-size: 91
particle-size: 91
particle-size: 91
statement: if node == 3 && this'.__S3.Q_out.size() {
    (pkt,port) := this'.__S3.Q_out.takeFront();
    if port == 1 {
        this'.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 819
particle-size: 819
statement: return this'.data.length
particle-size: 819
particle-size: 819
particle-size: 819
particle-size: 819
statement: (pkt,port) := this'.__S3.Q_out.takeFront()
particle-size: 273
particle-size: 273
statement: r := this'.front()
particle-size: 273
particle-size: 273
statement: return this'.data[0]
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
statement: this'.popFront()
particle-size: 273
particle-size: 273
statement: this'.data = this'.data[1..this'.size()]
particle-size: 273
particle-size: 273
statement: return this'.data.length
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
statement: return ()
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
statement: return r
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
particle-size: 273
statement: if port == 1 {
    this'.__S0.Q_in.pushBack((pkt,3));
}
statement: this'.__S0.Q_in.pushBack((pkt,3))
particle-size: 91
particle-size: 91
particle-size: 91
statement: this'.data = this'.data ~ [x]
particle-size: 91
statement: return ()
particle-size: 91
particle-size: 91
particle-size: 91
particle-size: 91
statement: if port == 2 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: this'.__S1.Q_in.pushBack((pkt,2))
particle-size: 91
particle-size: 91
particle-size: 91
statement: this'.data = this'.data ~ [x]
particle-size: 91
statement: return ()
particle-size: 91
particle-size: 91
particle-size: 91
particle-size: 91
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 91
particle-size: 91
particle-size: 91
statement: this'.data = this'.data ~ [x]
particle-size: 91
statement: return ()
particle-size: 91
particle-size: 91
particle-size: 91
particle-size: 91
statement: if node == 0 && this'.__S0.Q_in.size() {
    this'.__S0.__run();
}
particle-size: 570
particle-size: 570
statement: return this'.data.length
particle-size: 570
particle-size: 570
particle-size: 570
particle-size: 570
statement: this'.__S0.__run()
particle-size: 336
particle-size: 336
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 336
particle-size: 336
statement: this'.data = this'.data[1..this'.size()]
particle-size: 336
particle-size: 336
statement: return this'.data.length
particle-size: 336
particle-size: 336
particle-size: 336
particle-size: 336
particle-size: 336
statement: return ()
particle-size: 336
particle-size: 336
particle-size: 336
particle-size: 336
statement: return ()
particle-size: 336
particle-size: 336
particle-size: 336
particle-size: 336
statement: if node == 1 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 570
particle-size: 570
statement: return this'.data.length
particle-size: 570
particle-size: 570
particle-size: 570
particle-size: 570
statement: this'.__S1.__run()
particle-size: 78
particle-size: 78
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 42
statement: this'.Q_in.dupFront()
particle-size: 42
particle-size: 42
statement: this'.pushFront(this'.front())
particle-size: 42
particle-size: 42
statement: return this'.data[0]
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: this'.data = [x] ~ this'.data
particle-size: 42
statement: return ()
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: return ()
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 42
particle-size: 42
statement: r := this'.front()
particle-size: 42
particle-size: 42
statement: return this'.data[0]
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: this'.popFront()
particle-size: 42
particle-size: 42
statement: this'.data = this'.data[1..this'.size()]
particle-size: 42
particle-size: 42
statement: return this'.data.length
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: return ()
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: return r
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
statement: this'.data = this'.data ~ [x]
particle-size: 126
statement: return ()
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 126
particle-size: 126
statement: r := this'.front()
particle-size: 126
particle-size: 126
statement: return this'.data[0]
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
statement: this'.popFront()
particle-size: 126
particle-size: 126
statement: this'.data = this'.data[1..this'.size()]
particle-size: 126
particle-size: 126
statement: return this'.data.length
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
statement: return ()
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
statement: return r
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 378
particle-size: 378
particle-size: 378
particle-size: 378
particle-size: 378
statement: this'.data = this'.data ~ [x]
particle-size: 378
statement: return ()
particle-size: 378
particle-size: 378
particle-size: 378
particle-size: 378
statement: this'.Q_in.popFront()
particle-size: 36
particle-size: 36
statement: this'.data = this'.data[1..this'.size()]
particle-size: 36
particle-size: 36
statement: return this'.data.length
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: return ()
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: return ()
particle-size: 414
particle-size: 414
particle-size: 414
particle-size: 414
statement: if node == 2 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 906
particle-size: 906
statement: return this'.data.length
particle-size: 906
particle-size: 906
particle-size: 906
particle-size: 906
statement: this'.__S2.__run()
particle-size: 78
particle-size: 78
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 42
statement: this'.Q_in.dupFront()
particle-size: 42
particle-size: 42
statement: this'.pushFront(this'.front())
particle-size: 42
particle-size: 42
statement: return this'.data[0]
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: this'.data = [x] ~ this'.data
particle-size: 42
statement: return ()
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: return ()
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 42
particle-size: 42
statement: r := this'.front()
particle-size: 42
particle-size: 42
statement: return this'.data[0]
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: this'.popFront()
particle-size: 42
particle-size: 42
statement: this'.data = this'.data[1..this'.size()]
particle-size: 42
particle-size: 42
statement: return this'.data.length
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: return ()
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: return r
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
statement: this'.data = this'.data ~ [x]
particle-size: 126
statement: return ()
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 126
particle-size: 126
statement: r := this'.front()
particle-size: 126
particle-size: 126
statement: return this'.data[0]
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
statement: this'.popFront()
particle-size: 126
particle-size: 126
statement: this'.data = this'.data[1..this'.size()]
particle-size: 126
particle-size: 126
statement: return this'.data.length
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
statement: return ()
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
statement: return r
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 378
particle-size: 378
particle-size: 378
particle-size: 378
particle-size: 378
statement: this'.data = this'.data ~ [x]
particle-size: 378
statement: return ()
particle-size: 378
particle-size: 378
particle-size: 378
particle-size: 378
statement: this'.Q_in.popFront()
particle-size: 36
particle-size: 36
statement: this'.data = this'.data[1..this'.size()]
particle-size: 36
particle-size: 36
statement: return this'.data.length
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: return ()
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: return ()
particle-size: 414
particle-size: 414
particle-size: 414
particle-size: 414
statement: if node == 3 && this'.__S3.Q_in.size() {
    this'.__S3.__run();
}
particle-size: 1242
particle-size: 1242
statement: return this'.data.length
particle-size: 1242
particle-size: 1242
particle-size: 1242
particle-size: 1242
statement: this'.__S3.__run()
particle-size: 78
particle-size: 78
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 42
statement: this'.Q_in.dupFront()
particle-size: 42
particle-size: 42
statement: this'.pushFront(this'.front())
particle-size: 42
particle-size: 42
statement: return this'.data[0]
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: this'.data = [x] ~ this'.data
particle-size: 42
statement: return ()
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: return ()
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 42
particle-size: 42
statement: r := this'.front()
particle-size: 42
particle-size: 42
statement: return this'.data[0]
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: this'.popFront()
particle-size: 42
particle-size: 42
statement: this'.data = this'.data[1..this'.size()]
particle-size: 42
particle-size: 42
statement: return this'.data.length
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: return ()
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: return r
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
statement: this'.data = this'.data ~ [x]
particle-size: 126
statement: return ()
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 126
particle-size: 126
statement: r := this'.front()
particle-size: 126
particle-size: 126
statement: return this'.data[0]
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
statement: this'.popFront()
particle-size: 126
particle-size: 126
statement: this'.data = this'.data[1..this'.size()]
particle-size: 126
particle-size: 126
statement: return this'.data.length
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
statement: return ()
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
statement: return r
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 378
particle-size: 378
particle-size: 378
particle-size: 378
particle-size: 378
statement: this'.data = this'.data ~ [x]
particle-size: 378
statement: return ()
particle-size: 378
particle-size: 378
particle-size: 378
particle-size: 378
statement: this'.Q_in.popFront()
particle-size: 36
particle-size: 36
statement: this'.data = this'.data[1..this'.size()]
particle-size: 36
particle-size: 36
statement: return this'.data.length
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: return ()
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: return ()
particle-size: 414
particle-size: 414
particle-size: 414
particle-size: 414
statement: return ()
particle-size: 2397
particle-size: 2397
particle-size: 2397
particle-size: 1206
repetition: 7
statement: __d.__step()
particle-size: 1206
particle-size: 1206
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 1206
particle-size: 1206
statement: return this'.data.length
particle-size: 1206
particle-size: 1206
particle-size: 1206
particle-size: 1206
particle-size: 1206
particle-size: 1206
statement: return this'.data.length
particle-size: 1206
particle-size: 1206
particle-size: 1206
particle-size: 1206
particle-size: 1206
particle-size: 1206
statement: return this'.data.length
particle-size: 1206
particle-size: 1206
particle-size: 1206
particle-size: 1206
particle-size: 1206
particle-size: 1206
statement: return this'.data.length
particle-size: 1206
particle-size: 1206
particle-size: 1206
particle-size: 1206
particle-size: 1206
particle-size: 1206
statement: return this'.data.length
particle-size: 1206
particle-size: 1206
particle-size: 1206
particle-size: 1206
particle-size: 1206
particle-size: 1206
statement: return this'.data.length
particle-size: 1206
particle-size: 1206
particle-size: 1206
particle-size: 1206
particle-size: 1206
particle-size: 1206
statement: return this'.data.length
particle-size: 1206
particle-size: 1206
particle-size: 1206
particle-size: 1206
particle-size: 1206
particle-size: 1206
statement: return this'.data.length
particle-size: 1206
particle-size: 1206
particle-size: 1206
particle-size: 1206
statement: (action,node) := this'.scheduler()
particle-size: 1206
particle-size: 1206
statement: actions := ([]: (R × R)[])
particle-size: 1206
statement: for i in [0..4){
    if (if i == 0 {
        this'.__S0.Q_in;
    } else if i == 1 {
        this'.__S1.Q_in;
    } else if i == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__S0.Q_out;
    } else if i == 1 {
        this'.__S1.Q_out;
    } else if i == 2 {
        this'.__S2.Q_out;
    } else {
        this'.__S3.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 1206
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 1206
particle-size: 1206
statement: return this'.data.length
particle-size: 1206
particle-size: 1206
particle-size: 1206
statement: actions ~= [(0,i)]
particle-size: 984
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 1206
particle-size: 1206
statement: return this'.data.length
particle-size: 1206
particle-size: 1206
particle-size: 1206
loop-index: 1
particle-size: 1206
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 1206
particle-size: 1206
statement: return this'.data.length
particle-size: 1206
particle-size: 1206
particle-size: 1206
statement: actions ~= [(0,i)]
particle-size: 182
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 1206
particle-size: 1206
statement: return this'.data.length
particle-size: 1206
particle-size: 1206
particle-size: 1206
statement: actions ~= [(1,i)]
particle-size: 705
loop-index: 2
particle-size: 1206
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 1206
particle-size: 1206
statement: return this'.data.length
particle-size: 1206
particle-size: 1206
particle-size: 1206
statement: actions ~= [(0,i)]
particle-size: 182
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 1206
particle-size: 1206
statement: return this'.data.length
particle-size: 1206
particle-size: 1206
particle-size: 1206
statement: actions ~= [(1,i)]
particle-size: 705
loop-index: 3
particle-size: 1206
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 1206
particle-size: 1206
statement: return this'.data.length
particle-size: 1206
particle-size: 1206
particle-size: 1206
statement: actions ~= [(0,i)]
particle-size: 182
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 1206
particle-size: 1206
statement: return this'.data.length
particle-size: 1206
particle-size: 1206
particle-size: 1206
statement: actions ~= [(1,i)]
particle-size: 705
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 1206
particle-size: 1206
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 3645
particle-size: 3645
particle-size: 3645
particle-size: 3645
particle-size: 3645
particle-size: 3645
particle-size: 3645
particle-size: 3645
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_out.size() {
    (pkt,port) := this'.__S0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S3.Q_in.pushBack((pkt,1));
    }
}
particle-size: 2115
particle-size: 2115
statement: return this'.data.length
particle-size: 2115
particle-size: 2115
particle-size: 2115
particle-size: 2115
statement: if node == 1 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S3.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 2115
particle-size: 2115
statement: return this'.data.length
particle-size: 2115
particle-size: 2115
particle-size: 2115
particle-size: 2115
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 705
particle-size: 705
statement: r := this'.front()
particle-size: 705
particle-size: 705
statement: return this'.data[0]
particle-size: 705
particle-size: 705
particle-size: 705
particle-size: 705
particle-size: 705
statement: this'.popFront()
particle-size: 705
particle-size: 705
statement: this'.data = this'.data[1..this'.size()]
particle-size: 705
particle-size: 705
statement: return this'.data.length
particle-size: 705
particle-size: 705
particle-size: 705
particle-size: 705
particle-size: 705
statement: return ()
particle-size: 705
particle-size: 705
particle-size: 705
particle-size: 705
statement: return r
particle-size: 705
particle-size: 705
particle-size: 705
particle-size: 705
particle-size: 705
particle-size: 705
statement: if port == 1 {
    this'.__S2.Q_in.pushBack((pkt,3));
}
statement: this'.__S2.Q_in.pushBack((pkt,3))
particle-size: 235
particle-size: 235
particle-size: 235
statement: this'.data = this'.data ~ [x]
particle-size: 235
statement: return ()
particle-size: 235
particle-size: 235
particle-size: 235
particle-size: 235
statement: if port == 2 {
    this'.__S3.Q_in.pushBack((pkt,2));
}
statement: this'.__S3.Q_in.pushBack((pkt,2))
particle-size: 235
particle-size: 235
particle-size: 235
statement: this'.data = this'.data ~ [x]
particle-size: 235
statement: return ()
particle-size: 235
particle-size: 235
particle-size: 235
particle-size: 235
statement: if port == 3 {
    this'.__S0.Q_in.pushBack((pkt,1));
}
statement: this'.__S0.Q_in.pushBack((pkt,1))
particle-size: 235
particle-size: 235
particle-size: 235
statement: this'.data = this'.data ~ [x]
particle-size: 235
statement: return ()
particle-size: 235
particle-size: 235
particle-size: 235
particle-size: 235
statement: if node == 2 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S3.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 2115
particle-size: 2115
statement: return this'.data.length
particle-size: 2115
particle-size: 2115
particle-size: 2115
particle-size: 2115
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 705
particle-size: 705
statement: r := this'.front()
particle-size: 705
particle-size: 705
statement: return this'.data[0]
particle-size: 705
particle-size: 705
particle-size: 705
particle-size: 705
particle-size: 705
statement: this'.popFront()
particle-size: 705
particle-size: 705
statement: this'.data = this'.data[1..this'.size()]
particle-size: 705
particle-size: 705
statement: return this'.data.length
particle-size: 705
particle-size: 705
particle-size: 705
particle-size: 705
particle-size: 705
statement: return ()
particle-size: 705
particle-size: 705
particle-size: 705
particle-size: 705
statement: return r
particle-size: 705
particle-size: 705
particle-size: 705
particle-size: 705
particle-size: 705
particle-size: 705
statement: if port == 1 {
    this'.__S3.Q_in.pushBack((pkt,3));
}
statement: this'.__S3.Q_in.pushBack((pkt,3))
particle-size: 235
particle-size: 235
particle-size: 235
statement: this'.data = this'.data ~ [x]
particle-size: 235
statement: return ()
particle-size: 235
particle-size: 235
particle-size: 235
particle-size: 235
statement: if port == 2 {
    this'.__S0.Q_in.pushBack((pkt,2));
}
statement: this'.__S0.Q_in.pushBack((pkt,2))
particle-size: 235
particle-size: 235
particle-size: 235
statement: this'.data = this'.data ~ [x]
particle-size: 235
statement: return ()
particle-size: 235
particle-size: 235
particle-size: 235
particle-size: 235
statement: if port == 3 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 235
particle-size: 235
particle-size: 235
statement: this'.data = this'.data ~ [x]
particle-size: 235
statement: return ()
particle-size: 235
particle-size: 235
particle-size: 235
particle-size: 235
statement: if node == 3 && this'.__S3.Q_out.size() {
    (pkt,port) := this'.__S3.Q_out.takeFront();
    if port == 1 {
        this'.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 2115
particle-size: 2115
statement: return this'.data.length
particle-size: 2115
particle-size: 2115
particle-size: 2115
particle-size: 2115
statement: (pkt,port) := this'.__S3.Q_out.takeFront()
particle-size: 705
particle-size: 705
statement: r := this'.front()
particle-size: 705
particle-size: 705
statement: return this'.data[0]
particle-size: 705
particle-size: 705
particle-size: 705
particle-size: 705
particle-size: 705
statement: this'.popFront()
particle-size: 705
particle-size: 705
statement: this'.data = this'.data[1..this'.size()]
particle-size: 705
particle-size: 705
statement: return this'.data.length
particle-size: 705
particle-size: 705
particle-size: 705
particle-size: 705
particle-size: 705
statement: return ()
particle-size: 705
particle-size: 705
particle-size: 705
particle-size: 705
statement: return r
particle-size: 705
particle-size: 705
particle-size: 705
particle-size: 705
particle-size: 705
particle-size: 705
statement: if port == 1 {
    this'.__S0.Q_in.pushBack((pkt,3));
}
statement: this'.__S0.Q_in.pushBack((pkt,3))
particle-size: 235
particle-size: 235
particle-size: 235
statement: this'.data = this'.data ~ [x]
particle-size: 235
statement: return ()
particle-size: 235
particle-size: 235
particle-size: 235
particle-size: 235
statement: if port == 2 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: this'.__S1.Q_in.pushBack((pkt,2))
particle-size: 235
particle-size: 235
particle-size: 235
statement: this'.data = this'.data ~ [x]
particle-size: 235
statement: return ()
particle-size: 235
particle-size: 235
particle-size: 235
particle-size: 235
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 235
particle-size: 235
particle-size: 235
statement: this'.data = this'.data ~ [x]
particle-size: 235
statement: return ()
particle-size: 235
particle-size: 235
particle-size: 235
particle-size: 235
statement: if node == 0 && this'.__S0.Q_in.size() {
    this'.__S0.__run();
}
particle-size: 1530
particle-size: 1530
statement: return this'.data.length
particle-size: 1530
particle-size: 1530
particle-size: 1530
particle-size: 1530
statement: this'.__S0.__run()
particle-size: 984
particle-size: 984
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 984
particle-size: 984
statement: this'.data = this'.data[1..this'.size()]
particle-size: 984
particle-size: 984
statement: return this'.data.length
particle-size: 984
particle-size: 984
particle-size: 984
particle-size: 984
particle-size: 984
statement: return ()
particle-size: 984
particle-size: 984
particle-size: 984
particle-size: 984
statement: return ()
particle-size: 984
particle-size: 984
particle-size: 984
particle-size: 984
statement: if node == 1 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 1530
particle-size: 1530
statement: return this'.data.length
particle-size: 1530
particle-size: 1530
particle-size: 1530
particle-size: 1530
statement: this'.__S1.__run()
particle-size: 182
particle-size: 182
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 92
statement: this'.Q_in.dupFront()
particle-size: 92
particle-size: 92
statement: this'.pushFront(this'.front())
particle-size: 92
particle-size: 92
statement: return this'.data[0]
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: this'.data = [x] ~ this'.data
particle-size: 92
statement: return ()
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: return ()
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 92
particle-size: 92
statement: r := this'.front()
particle-size: 92
particle-size: 92
statement: return this'.data[0]
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: this'.popFront()
particle-size: 92
particle-size: 92
statement: this'.data = this'.data[1..this'.size()]
particle-size: 92
particle-size: 92
statement: return this'.data.length
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: return ()
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: return r
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
statement: this'.data = this'.data ~ [x]
particle-size: 276
statement: return ()
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 276
particle-size: 276
statement: r := this'.front()
particle-size: 276
particle-size: 276
statement: return this'.data[0]
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
statement: this'.popFront()
particle-size: 276
particle-size: 276
statement: this'.data = this'.data[1..this'.size()]
particle-size: 276
particle-size: 276
statement: return this'.data.length
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
statement: return ()
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
statement: return r
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 828
particle-size: 828
particle-size: 828
particle-size: 828
particle-size: 828
statement: this'.data = this'.data ~ [x]
particle-size: 828
statement: return ()
particle-size: 828
particle-size: 828
particle-size: 828
particle-size: 828
statement: this'.Q_in.popFront()
particle-size: 90
particle-size: 90
statement: this'.data = this'.data[1..this'.size()]
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: return ()
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: return ()
particle-size: 918
particle-size: 918
particle-size: 918
particle-size: 918
statement: if node == 2 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 2266
particle-size: 2266
statement: return this'.data.length
particle-size: 2266
particle-size: 2266
particle-size: 2266
particle-size: 2266
statement: this'.__S2.__run()
particle-size: 182
particle-size: 182
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 92
statement: this'.Q_in.dupFront()
particle-size: 92
particle-size: 92
statement: this'.pushFront(this'.front())
particle-size: 92
particle-size: 92
statement: return this'.data[0]
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: this'.data = [x] ~ this'.data
particle-size: 92
statement: return ()
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: return ()
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 92
particle-size: 92
statement: r := this'.front()
particle-size: 92
particle-size: 92
statement: return this'.data[0]
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: this'.popFront()
particle-size: 92
particle-size: 92
statement: this'.data = this'.data[1..this'.size()]
particle-size: 92
particle-size: 92
statement: return this'.data.length
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: return ()
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: return r
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
statement: this'.data = this'.data ~ [x]
particle-size: 276
statement: return ()
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 276
particle-size: 276
statement: r := this'.front()
particle-size: 276
particle-size: 276
statement: return this'.data[0]
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
statement: this'.popFront()
particle-size: 276
particle-size: 276
statement: this'.data = this'.data[1..this'.size()]
particle-size: 276
particle-size: 276
statement: return this'.data.length
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
statement: return ()
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
statement: return r
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 828
particle-size: 828
particle-size: 828
particle-size: 828
particle-size: 828
statement: this'.data = this'.data ~ [x]
particle-size: 828
statement: return ()
particle-size: 828
particle-size: 828
particle-size: 828
particle-size: 828
statement: this'.Q_in.popFront()
particle-size: 90
particle-size: 90
statement: this'.data = this'.data[1..this'.size()]
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: return ()
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: return ()
particle-size: 918
particle-size: 918
particle-size: 918
particle-size: 918
statement: if node == 3 && this'.__S3.Q_in.size() {
    this'.__S3.__run();
}
particle-size: 3002
particle-size: 3002
statement: return this'.data.length
particle-size: 3002
particle-size: 3002
particle-size: 3002
particle-size: 3002
statement: this'.__S3.__run()
particle-size: 182
particle-size: 182
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 92
statement: this'.Q_in.dupFront()
particle-size: 92
particle-size: 92
statement: this'.pushFront(this'.front())
particle-size: 92
particle-size: 92
statement: return this'.data[0]
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: this'.data = [x] ~ this'.data
particle-size: 92
statement: return ()
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: return ()
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 92
particle-size: 92
statement: r := this'.front()
particle-size: 92
particle-size: 92
statement: return this'.data[0]
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: this'.popFront()
particle-size: 92
particle-size: 92
statement: this'.data = this'.data[1..this'.size()]
particle-size: 92
particle-size: 92
statement: return this'.data.length
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: return ()
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: return r
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
particle-size: 92
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
statement: this'.data = this'.data ~ [x]
particle-size: 276
statement: return ()
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 276
particle-size: 276
statement: r := this'.front()
particle-size: 276
particle-size: 276
statement: return this'.data[0]
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
statement: this'.popFront()
particle-size: 276
particle-size: 276
statement: this'.data = this'.data[1..this'.size()]
particle-size: 276
particle-size: 276
statement: return this'.data.length
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
statement: return ()
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
statement: return r
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
particle-size: 276
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 828
particle-size: 828
particle-size: 828
particle-size: 828
particle-size: 828
statement: this'.data = this'.data ~ [x]
particle-size: 828
statement: return ()
particle-size: 828
particle-size: 828
particle-size: 828
particle-size: 828
statement: this'.Q_in.popFront()
particle-size: 90
particle-size: 90
statement: this'.data = this'.data[1..this'.size()]
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: return ()
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: return ()
particle-size: 918
particle-size: 918
particle-size: 918
particle-size: 918
statement: return ()
particle-size: 5853
particle-size: 5853
particle-size: 5853
particle-size: 2409
repetition: 8
statement: __d.__step()
particle-size: 2409
particle-size: 2409
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 2409
particle-size: 2409
statement: return this'.data.length
particle-size: 2409
particle-size: 2409
particle-size: 2409
particle-size: 2409
particle-size: 2409
particle-size: 2409
statement: return this'.data.length
particle-size: 2409
particle-size: 2409
particle-size: 2409
particle-size: 2409
particle-size: 2409
particle-size: 2409
statement: return this'.data.length
particle-size: 2409
particle-size: 2409
particle-size: 2409
particle-size: 2409
particle-size: 2409
particle-size: 2409
statement: return this'.data.length
particle-size: 2409
particle-size: 2409
particle-size: 2409
particle-size: 2409
particle-size: 2409
particle-size: 2409
statement: return this'.data.length
particle-size: 2409
particle-size: 2409
particle-size: 2409
particle-size: 2409
particle-size: 2409
particle-size: 2409
statement: return this'.data.length
particle-size: 2409
particle-size: 2409
particle-size: 2409
particle-size: 2409
particle-size: 2409
particle-size: 2409
statement: return this'.data.length
particle-size: 2409
particle-size: 2409
particle-size: 2409
particle-size: 2409
particle-size: 2409
particle-size: 2409
statement: return this'.data.length
particle-size: 2409
particle-size: 2409
particle-size: 2409
particle-size: 2409
statement: (action,node) := this'.scheduler()
particle-size: 2406
particle-size: 2406
statement: actions := ([]: (R × R)[])
particle-size: 2406
statement: for i in [0..4){
    if (if i == 0 {
        this'.__S0.Q_in;
    } else if i == 1 {
        this'.__S1.Q_in;
    } else if i == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__S0.Q_out;
    } else if i == 1 {
        this'.__S1.Q_out;
    } else if i == 2 {
        this'.__S2.Q_out;
    } else {
        this'.__S3.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 2406
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 2406
particle-size: 2406
statement: return this'.data.length
particle-size: 2406
particle-size: 2406
particle-size: 2406
statement: actions ~= [(0,i)]
particle-size: 1695
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 2406
particle-size: 2406
statement: return this'.data.length
particle-size: 2406
particle-size: 2406
particle-size: 2406
loop-index: 1
particle-size: 2406
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 2406
particle-size: 2406
statement: return this'.data.length
particle-size: 2406
particle-size: 2406
particle-size: 2406
statement: actions ~= [(0,i)]
particle-size: 470
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 2406
particle-size: 2406
statement: return this'.data.length
particle-size: 2406
particle-size: 2406
particle-size: 2406
statement: actions ~= [(1,i)]
particle-size: 1488
loop-index: 2
particle-size: 2406
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 2406
particle-size: 2406
statement: return this'.data.length
particle-size: 2406
particle-size: 2406
particle-size: 2406
statement: actions ~= [(0,i)]
particle-size: 470
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 2406
particle-size: 2406
statement: return this'.data.length
particle-size: 2406
particle-size: 2406
particle-size: 2406
statement: actions ~= [(1,i)]
particle-size: 1488
loop-index: 3
particle-size: 2406
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 2406
particle-size: 2406
statement: return this'.data.length
particle-size: 2406
particle-size: 2406
particle-size: 2406
statement: actions ~= [(0,i)]
particle-size: 470
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 2406
particle-size: 2406
statement: return this'.data.length
particle-size: 2406
particle-size: 2406
particle-size: 2406
statement: actions ~= [(1,i)]
particle-size: 1488
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 2406
particle-size: 2406
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 7569
particle-size: 7569
particle-size: 7569
particle-size: 7569
particle-size: 7569
particle-size: 7569
particle-size: 7569
particle-size: 7569
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_out.size() {
    (pkt,port) := this'.__S0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S3.Q_in.pushBack((pkt,1));
    }
}
particle-size: 4464
particle-size: 4464
statement: return this'.data.length
particle-size: 4464
particle-size: 4464
particle-size: 4464
particle-size: 4464
statement: if node == 1 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S3.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 4464
particle-size: 4464
statement: return this'.data.length
particle-size: 4464
particle-size: 4464
particle-size: 4464
particle-size: 4464
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 1488
particle-size: 1488
statement: r := this'.front()
particle-size: 1488
particle-size: 1488
statement: return this'.data[0]
particle-size: 1488
particle-size: 1488
particle-size: 1488
particle-size: 1488
particle-size: 1488
statement: this'.popFront()
particle-size: 1488
particle-size: 1488
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1488
particle-size: 1488
statement: return this'.data.length
particle-size: 1488
particle-size: 1488
particle-size: 1488
particle-size: 1488
particle-size: 1488
statement: return ()
particle-size: 1488
particle-size: 1488
particle-size: 1488
particle-size: 1488
statement: return r
particle-size: 1488
particle-size: 1488
particle-size: 1488
particle-size: 1488
particle-size: 1488
particle-size: 1488
statement: if port == 1 {
    this'.__S2.Q_in.pushBack((pkt,3));
}
statement: this'.__S2.Q_in.pushBack((pkt,3))
particle-size: 496
particle-size: 496
particle-size: 496
statement: this'.data = this'.data ~ [x]
particle-size: 496
statement: return ()
particle-size: 496
particle-size: 496
particle-size: 496
particle-size: 496
statement: if port == 2 {
    this'.__S3.Q_in.pushBack((pkt,2));
}
statement: this'.__S3.Q_in.pushBack((pkt,2))
particle-size: 496
particle-size: 496
particle-size: 496
statement: this'.data = this'.data ~ [x]
particle-size: 496
statement: return ()
particle-size: 496
particle-size: 496
particle-size: 496
particle-size: 496
statement: if port == 3 {
    this'.__S0.Q_in.pushBack((pkt,1));
}
statement: this'.__S0.Q_in.pushBack((pkt,1))
particle-size: 496
particle-size: 496
particle-size: 496
statement: this'.data = this'.data ~ [x]
particle-size: 496
statement: return ()
particle-size: 496
particle-size: 496
particle-size: 496
particle-size: 496
statement: if node == 2 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S3.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 4464
particle-size: 4464
statement: return this'.data.length
particle-size: 4464
particle-size: 4464
particle-size: 4464
particle-size: 4464
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 1488
particle-size: 1488
statement: r := this'.front()
particle-size: 1488
particle-size: 1488
statement: return this'.data[0]
particle-size: 1488
particle-size: 1488
particle-size: 1488
particle-size: 1488
particle-size: 1488
statement: this'.popFront()
particle-size: 1488
particle-size: 1488
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1488
particle-size: 1488
statement: return this'.data.length
particle-size: 1488
particle-size: 1488
particle-size: 1488
particle-size: 1488
particle-size: 1488
statement: return ()
particle-size: 1488
particle-size: 1488
particle-size: 1488
particle-size: 1488
statement: return r
particle-size: 1488
particle-size: 1488
particle-size: 1488
particle-size: 1488
particle-size: 1488
particle-size: 1488
statement: if port == 1 {
    this'.__S3.Q_in.pushBack((pkt,3));
}
statement: this'.__S3.Q_in.pushBack((pkt,3))
particle-size: 496
particle-size: 496
particle-size: 496
statement: this'.data = this'.data ~ [x]
particle-size: 496
statement: return ()
particle-size: 496
particle-size: 496
particle-size: 496
particle-size: 496
statement: if port == 2 {
    this'.__S0.Q_in.pushBack((pkt,2));
}
statement: this'.__S0.Q_in.pushBack((pkt,2))
particle-size: 496
particle-size: 496
particle-size: 496
statement: this'.data = this'.data ~ [x]
particle-size: 496
statement: return ()
particle-size: 496
particle-size: 496
particle-size: 496
particle-size: 496
statement: if port == 3 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 496
particle-size: 496
particle-size: 496
statement: this'.data = this'.data ~ [x]
particle-size: 496
statement: return ()
particle-size: 496
particle-size: 496
particle-size: 496
particle-size: 496
statement: if node == 3 && this'.__S3.Q_out.size() {
    (pkt,port) := this'.__S3.Q_out.takeFront();
    if port == 1 {
        this'.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 4464
particle-size: 4464
statement: return this'.data.length
particle-size: 4464
particle-size: 4464
particle-size: 4464
particle-size: 4464
statement: (pkt,port) := this'.__S3.Q_out.takeFront()
particle-size: 1488
particle-size: 1488
statement: r := this'.front()
particle-size: 1488
particle-size: 1488
statement: return this'.data[0]
particle-size: 1488
particle-size: 1488
particle-size: 1488
particle-size: 1488
particle-size: 1488
statement: this'.popFront()
particle-size: 1488
particle-size: 1488
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1488
particle-size: 1488
statement: return this'.data.length
particle-size: 1488
particle-size: 1488
particle-size: 1488
particle-size: 1488
particle-size: 1488
statement: return ()
particle-size: 1488
particle-size: 1488
particle-size: 1488
particle-size: 1488
statement: return r
particle-size: 1488
particle-size: 1488
particle-size: 1488
particle-size: 1488
particle-size: 1488
particle-size: 1488
statement: if port == 1 {
    this'.__S0.Q_in.pushBack((pkt,3));
}
statement: this'.__S0.Q_in.pushBack((pkt,3))
particle-size: 496
particle-size: 496
particle-size: 496
statement: this'.data = this'.data ~ [x]
particle-size: 496
statement: return ()
particle-size: 496
particle-size: 496
particle-size: 496
particle-size: 496
statement: if port == 2 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: this'.__S1.Q_in.pushBack((pkt,2))
particle-size: 496
particle-size: 496
particle-size: 496
statement: this'.data = this'.data ~ [x]
particle-size: 496
statement: return ()
particle-size: 496
particle-size: 496
particle-size: 496
particle-size: 496
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 496
particle-size: 496
particle-size: 496
statement: this'.data = this'.data ~ [x]
particle-size: 496
statement: return ()
particle-size: 496
particle-size: 496
particle-size: 496
particle-size: 496
statement: if node == 0 && this'.__S0.Q_in.size() {
    this'.__S0.__run();
}
particle-size: 3105
particle-size: 3105
statement: return this'.data.length
particle-size: 3105
particle-size: 3105
particle-size: 3105
particle-size: 3105
statement: this'.__S0.__run()
particle-size: 1695
particle-size: 1695
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 1695
particle-size: 1695
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1695
particle-size: 1695
statement: return this'.data.length
particle-size: 1695
particle-size: 1695
particle-size: 1695
particle-size: 1695
particle-size: 1695
statement: return ()
particle-size: 1695
particle-size: 1695
particle-size: 1695
particle-size: 1695
statement: return ()
particle-size: 1695
particle-size: 1695
particle-size: 1695
particle-size: 1695
statement: if node == 1 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 3105
particle-size: 3105
statement: return this'.data.length
particle-size: 3105
particle-size: 3105
particle-size: 3105
particle-size: 3105
statement: this'.__S1.__run()
particle-size: 470
particle-size: 470
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 100
statement: this'.Q_in.dupFront()
particle-size: 100
particle-size: 100
statement: this'.pushFront(this'.front())
particle-size: 100
particle-size: 100
statement: return this'.data[0]
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: this'.data = [x] ~ this'.data
particle-size: 100
statement: return ()
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: return ()
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 100
particle-size: 100
statement: r := this'.front()
particle-size: 100
particle-size: 100
statement: return this'.data[0]
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: this'.popFront()
particle-size: 100
particle-size: 100
statement: this'.data = this'.data[1..this'.size()]
particle-size: 100
particle-size: 100
statement: return this'.data.length
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: return ()
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: return r
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: this'.data = this'.data ~ [x]
particle-size: 300
statement: return ()
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 300
particle-size: 300
statement: r := this'.front()
particle-size: 300
particle-size: 300
statement: return this'.data[0]
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: this'.popFront()
particle-size: 300
particle-size: 300
statement: this'.data = this'.data[1..this'.size()]
particle-size: 300
particle-size: 300
statement: return this'.data.length
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: return ()
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: return r
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 900
particle-size: 900
particle-size: 900
particle-size: 900
particle-size: 900
statement: this'.data = this'.data ~ [x]
particle-size: 900
statement: return ()
particle-size: 900
particle-size: 900
particle-size: 900
particle-size: 900
statement: this'.Q_in.popFront()
particle-size: 370
particle-size: 370
statement: this'.data = this'.data[1..this'.size()]
particle-size: 370
particle-size: 370
statement: return this'.data.length
particle-size: 370
particle-size: 370
particle-size: 370
particle-size: 370
particle-size: 370
statement: return ()
particle-size: 370
particle-size: 370
particle-size: 370
particle-size: 370
statement: return ()
particle-size: 1270
particle-size: 1270
particle-size: 1270
particle-size: 1270
statement: if node == 2 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 3905
particle-size: 3905
statement: return this'.data.length
particle-size: 3905
particle-size: 3905
particle-size: 3905
particle-size: 3905
statement: this'.__S2.__run()
particle-size: 470
particle-size: 470
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 100
statement: this'.Q_in.dupFront()
particle-size: 100
particle-size: 100
statement: this'.pushFront(this'.front())
particle-size: 100
particle-size: 100
statement: return this'.data[0]
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: this'.data = [x] ~ this'.data
particle-size: 100
statement: return ()
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: return ()
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 100
particle-size: 100
statement: r := this'.front()
particle-size: 100
particle-size: 100
statement: return this'.data[0]
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: this'.popFront()
particle-size: 100
particle-size: 100
statement: this'.data = this'.data[1..this'.size()]
particle-size: 100
particle-size: 100
statement: return this'.data.length
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: return ()
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: return r
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: this'.data = this'.data ~ [x]
particle-size: 300
statement: return ()
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 300
particle-size: 300
statement: r := this'.front()
particle-size: 300
particle-size: 300
statement: return this'.data[0]
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: this'.popFront()
particle-size: 300
particle-size: 300
statement: this'.data = this'.data[1..this'.size()]
particle-size: 300
particle-size: 300
statement: return this'.data.length
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: return ()
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: return r
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 900
particle-size: 900
particle-size: 900
particle-size: 900
particle-size: 900
statement: this'.data = this'.data ~ [x]
particle-size: 900
statement: return ()
particle-size: 900
particle-size: 900
particle-size: 900
particle-size: 900
statement: this'.Q_in.popFront()
particle-size: 370
particle-size: 370
statement: this'.data = this'.data[1..this'.size()]
particle-size: 370
particle-size: 370
statement: return this'.data.length
particle-size: 370
particle-size: 370
particle-size: 370
particle-size: 370
particle-size: 370
statement: return ()
particle-size: 370
particle-size: 370
particle-size: 370
particle-size: 370
statement: return ()
particle-size: 1270
particle-size: 1270
particle-size: 1270
particle-size: 1270
statement: if node == 3 && this'.__S3.Q_in.size() {
    this'.__S3.__run();
}
particle-size: 4705
particle-size: 4705
statement: return this'.data.length
particle-size: 4705
particle-size: 4705
particle-size: 4705
particle-size: 4705
statement: this'.__S3.__run()
particle-size: 470
particle-size: 470
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 100
statement: this'.Q_in.dupFront()
particle-size: 100
particle-size: 100
statement: this'.pushFront(this'.front())
particle-size: 100
particle-size: 100
statement: return this'.data[0]
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: this'.data = [x] ~ this'.data
particle-size: 100
statement: return ()
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: return ()
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 100
particle-size: 100
statement: r := this'.front()
particle-size: 100
particle-size: 100
statement: return this'.data[0]
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: this'.popFront()
particle-size: 100
particle-size: 100
statement: this'.data = this'.data[1..this'.size()]
particle-size: 100
particle-size: 100
statement: return this'.data.length
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: return ()
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: return r
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: this'.data = this'.data ~ [x]
particle-size: 300
statement: return ()
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 300
particle-size: 300
statement: r := this'.front()
particle-size: 300
particle-size: 300
statement: return this'.data[0]
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: this'.popFront()
particle-size: 300
particle-size: 300
statement: this'.data = this'.data[1..this'.size()]
particle-size: 300
particle-size: 300
statement: return this'.data.length
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: return ()
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: return r
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
particle-size: 300
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 900
particle-size: 900
particle-size: 900
particle-size: 900
particle-size: 900
statement: this'.data = this'.data ~ [x]
particle-size: 900
statement: return ()
particle-size: 900
particle-size: 900
particle-size: 900
particle-size: 900
statement: this'.Q_in.popFront()
particle-size: 370
particle-size: 370
statement: this'.data = this'.data[1..this'.size()]
particle-size: 370
particle-size: 370
statement: return this'.data.length
particle-size: 370
particle-size: 370
particle-size: 370
particle-size: 370
particle-size: 370
statement: return ()
particle-size: 370
particle-size: 370
particle-size: 370
particle-size: 370
statement: return ()
particle-size: 1270
particle-size: 1270
particle-size: 1270
particle-size: 1270
statement: return ()
particle-size: 9972
particle-size: 9972
particle-size: 9972
particle-size: 3612
repetition: 9
statement: __d.__step()
particle-size: 3612
particle-size: 3612
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 3612
particle-size: 3612
statement: return this'.data.length
particle-size: 3612
particle-size: 3612
particle-size: 3612
particle-size: 3612
particle-size: 3612
particle-size: 3612
statement: return this'.data.length
particle-size: 3612
particle-size: 3612
particle-size: 3612
particle-size: 3612
particle-size: 3612
particle-size: 3612
statement: return this'.data.length
particle-size: 3612
particle-size: 3612
particle-size: 3612
particle-size: 3612
particle-size: 3612
particle-size: 3612
statement: return this'.data.length
particle-size: 3612
particle-size: 3612
particle-size: 3612
particle-size: 3612
particle-size: 3612
particle-size: 3612
statement: return this'.data.length
particle-size: 3612
particle-size: 3612
particle-size: 3612
particle-size: 3612
particle-size: 3612
particle-size: 3612
statement: return this'.data.length
particle-size: 3612
particle-size: 3612
particle-size: 3612
particle-size: 3612
particle-size: 3612
particle-size: 3612
statement: return this'.data.length
particle-size: 3612
particle-size: 3612
particle-size: 3612
particle-size: 3612
particle-size: 3612
particle-size: 3612
statement: return this'.data.length
particle-size: 3612
particle-size: 3612
particle-size: 3612
particle-size: 3612
statement: (action,node) := this'.scheduler()
particle-size: 3609
particle-size: 3609
statement: actions := ([]: (R × R)[])
particle-size: 3609
statement: for i in [0..4){
    if (if i == 0 {
        this'.__S0.Q_in;
    } else if i == 1 {
        this'.__S1.Q_in;
    } else if i == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__S0.Q_out;
    } else if i == 1 {
        this'.__S1.Q_out;
    } else if i == 2 {
        this'.__S2.Q_out;
    } else {
        this'.__S3.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 3609
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 3609
particle-size: 3609
statement: return this'.data.length
particle-size: 3609
particle-size: 3609
particle-size: 3609
statement: actions ~= [(0,i)]
particle-size: 2673
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 3609
particle-size: 3609
statement: return this'.data.length
particle-size: 3609
particle-size: 3609
particle-size: 3609
loop-index: 1
particle-size: 3609
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 3609
particle-size: 3609
statement: return this'.data.length
particle-size: 3609
particle-size: 3609
particle-size: 3609
statement: actions ~= [(0,i)]
particle-size: 1028
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 3609
particle-size: 3609
statement: return this'.data.length
particle-size: 3609
particle-size: 3609
particle-size: 3609
statement: actions ~= [(1,i)]
particle-size: 2013
loop-index: 2
particle-size: 3609
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 3609
particle-size: 3609
statement: return this'.data.length
particle-size: 3609
particle-size: 3609
particle-size: 3609
statement: actions ~= [(0,i)]
particle-size: 1028
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 3609
particle-size: 3609
statement: return this'.data.length
particle-size: 3609
particle-size: 3609
particle-size: 3609
statement: actions ~= [(1,i)]
particle-size: 2013
loop-index: 3
particle-size: 3609
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 3609
particle-size: 3609
statement: return this'.data.length
particle-size: 3609
particle-size: 3609
particle-size: 3609
statement: actions ~= [(0,i)]
particle-size: 1028
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 3609
particle-size: 3609
statement: return this'.data.length
particle-size: 3609
particle-size: 3609
particle-size: 3609
statement: actions ~= [(1,i)]
particle-size: 2013
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 3609
particle-size: 3609
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 11796
particle-size: 11796
particle-size: 11796
particle-size: 11796
particle-size: 11796
particle-size: 11796
particle-size: 11796
particle-size: 11796
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_out.size() {
    (pkt,port) := this'.__S0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S3.Q_in.pushBack((pkt,1));
    }
}
particle-size: 6039
particle-size: 6039
statement: return this'.data.length
particle-size: 6039
particle-size: 6039
particle-size: 6039
particle-size: 6039
statement: if node == 1 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S3.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 6039
particle-size: 6039
statement: return this'.data.length
particle-size: 6039
particle-size: 6039
particle-size: 6039
particle-size: 6039
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 2013
particle-size: 2013
statement: r := this'.front()
particle-size: 2013
particle-size: 2013
statement: return this'.data[0]
particle-size: 2013
particle-size: 2013
particle-size: 2013
particle-size: 2013
particle-size: 2013
statement: this'.popFront()
particle-size: 2013
particle-size: 2013
statement: this'.data = this'.data[1..this'.size()]
particle-size: 2013
particle-size: 2013
statement: return this'.data.length
particle-size: 2013
particle-size: 2013
particle-size: 2013
particle-size: 2013
particle-size: 2013
statement: return ()
particle-size: 2013
particle-size: 2013
particle-size: 2013
particle-size: 2013
statement: return r
particle-size: 2013
particle-size: 2013
particle-size: 2013
particle-size: 2013
particle-size: 2013
particle-size: 2013
statement: if port == 1 {
    this'.__S2.Q_in.pushBack((pkt,3));
}
statement: this'.__S2.Q_in.pushBack((pkt,3))
particle-size: 671
particle-size: 671
particle-size: 671
statement: this'.data = this'.data ~ [x]
particle-size: 671
statement: return ()
particle-size: 671
particle-size: 671
particle-size: 671
particle-size: 671
statement: if port == 2 {
    this'.__S3.Q_in.pushBack((pkt,2));
}
statement: this'.__S3.Q_in.pushBack((pkt,2))
particle-size: 671
particle-size: 671
particle-size: 671
statement: this'.data = this'.data ~ [x]
particle-size: 671
statement: return ()
particle-size: 671
particle-size: 671
particle-size: 671
particle-size: 671
statement: if port == 3 {
    this'.__S0.Q_in.pushBack((pkt,1));
}
statement: this'.__S0.Q_in.pushBack((pkt,1))
particle-size: 671
particle-size: 671
particle-size: 671
statement: this'.data = this'.data ~ [x]
particle-size: 671
statement: return ()
particle-size: 671
particle-size: 671
particle-size: 671
particle-size: 671
statement: if node == 2 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S3.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 6039
particle-size: 6039
statement: return this'.data.length
particle-size: 6039
particle-size: 6039
particle-size: 6039
particle-size: 6039
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 2013
particle-size: 2013
statement: r := this'.front()
particle-size: 2013
particle-size: 2013
statement: return this'.data[0]
particle-size: 2013
particle-size: 2013
particle-size: 2013
particle-size: 2013
particle-size: 2013
statement: this'.popFront()
particle-size: 2013
particle-size: 2013
statement: this'.data = this'.data[1..this'.size()]
particle-size: 2013
particle-size: 2013
statement: return this'.data.length
particle-size: 2013
particle-size: 2013
particle-size: 2013
particle-size: 2013
particle-size: 2013
statement: return ()
particle-size: 2013
particle-size: 2013
particle-size: 2013
particle-size: 2013
statement: return r
particle-size: 2013
particle-size: 2013
particle-size: 2013
particle-size: 2013
particle-size: 2013
particle-size: 2013
statement: if port == 1 {
    this'.__S3.Q_in.pushBack((pkt,3));
}
statement: this'.__S3.Q_in.pushBack((pkt,3))
particle-size: 671
particle-size: 671
particle-size: 671
statement: this'.data = this'.data ~ [x]
particle-size: 671
statement: return ()
particle-size: 671
particle-size: 671
particle-size: 671
particle-size: 671
statement: if port == 2 {
    this'.__S0.Q_in.pushBack((pkt,2));
}
statement: this'.__S0.Q_in.pushBack((pkt,2))
particle-size: 671
particle-size: 671
particle-size: 671
statement: this'.data = this'.data ~ [x]
particle-size: 671
statement: return ()
particle-size: 671
particle-size: 671
particle-size: 671
particle-size: 671
statement: if port == 3 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 671
particle-size: 671
particle-size: 671
statement: this'.data = this'.data ~ [x]
particle-size: 671
statement: return ()
particle-size: 671
particle-size: 671
particle-size: 671
particle-size: 671
statement: if node == 3 && this'.__S3.Q_out.size() {
    (pkt,port) := this'.__S3.Q_out.takeFront();
    if port == 1 {
        this'.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 6039
particle-size: 6039
statement: return this'.data.length
particle-size: 6039
particle-size: 6039
particle-size: 6039
particle-size: 6039
statement: (pkt,port) := this'.__S3.Q_out.takeFront()
particle-size: 2013
particle-size: 2013
statement: r := this'.front()
particle-size: 2013
particle-size: 2013
statement: return this'.data[0]
particle-size: 2013
particle-size: 2013
particle-size: 2013
particle-size: 2013
particle-size: 2013
statement: this'.popFront()
particle-size: 2013
particle-size: 2013
statement: this'.data = this'.data[1..this'.size()]
particle-size: 2013
particle-size: 2013
statement: return this'.data.length
particle-size: 2013
particle-size: 2013
particle-size: 2013
particle-size: 2013
particle-size: 2013
statement: return ()
particle-size: 2013
particle-size: 2013
particle-size: 2013
particle-size: 2013
statement: return r
particle-size: 2013
particle-size: 2013
particle-size: 2013
particle-size: 2013
particle-size: 2013
particle-size: 2013
statement: if port == 1 {
    this'.__S0.Q_in.pushBack((pkt,3));
}
statement: this'.__S0.Q_in.pushBack((pkt,3))
particle-size: 671
particle-size: 671
particle-size: 671
statement: this'.data = this'.data ~ [x]
particle-size: 671
statement: return ()
particle-size: 671
particle-size: 671
particle-size: 671
particle-size: 671
statement: if port == 2 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: this'.__S1.Q_in.pushBack((pkt,2))
particle-size: 671
particle-size: 671
particle-size: 671
statement: this'.data = this'.data ~ [x]
particle-size: 671
statement: return ()
particle-size: 671
particle-size: 671
particle-size: 671
particle-size: 671
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 671
particle-size: 671
particle-size: 671
statement: this'.data = this'.data ~ [x]
particle-size: 671
statement: return ()
particle-size: 671
particle-size: 671
particle-size: 671
particle-size: 671
statement: if node == 0 && this'.__S0.Q_in.size() {
    this'.__S0.__run();
}
particle-size: 5757
particle-size: 5757
statement: return this'.data.length
particle-size: 5757
particle-size: 5757
particle-size: 5757
particle-size: 5757
statement: this'.__S0.__run()
particle-size: 2673
particle-size: 2673
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 2673
particle-size: 2673
statement: this'.data = this'.data[1..this'.size()]
particle-size: 2673
particle-size: 2673
statement: return this'.data.length
particle-size: 2673
particle-size: 2673
particle-size: 2673
particle-size: 2673
particle-size: 2673
statement: return ()
particle-size: 2673
particle-size: 2673
particle-size: 2673
particle-size: 2673
statement: return ()
particle-size: 2673
particle-size: 2673
particle-size: 2673
particle-size: 2673
statement: if node == 1 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 5757
particle-size: 5757
statement: return this'.data.length
particle-size: 5757
particle-size: 5757
particle-size: 5757
particle-size: 5757
statement: this'.__S1.__run()
particle-size: 1028
particle-size: 1028
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 64
statement: this'.Q_in.dupFront()
particle-size: 64
particle-size: 64
statement: this'.pushFront(this'.front())
particle-size: 64
particle-size: 64
statement: return this'.data[0]
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: this'.data = [x] ~ this'.data
particle-size: 64
statement: return ()
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: return ()
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 64
particle-size: 64
statement: r := this'.front()
particle-size: 64
particle-size: 64
statement: return this'.data[0]
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: this'.popFront()
particle-size: 64
particle-size: 64
statement: this'.data = this'.data[1..this'.size()]
particle-size: 64
particle-size: 64
statement: return this'.data.length
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: return ()
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: return r
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
statement: this'.data = this'.data ~ [x]
particle-size: 192
statement: return ()
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 192
particle-size: 192
statement: r := this'.front()
particle-size: 192
particle-size: 192
statement: return this'.data[0]
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
statement: this'.popFront()
particle-size: 192
particle-size: 192
statement: this'.data = this'.data[1..this'.size()]
particle-size: 192
particle-size: 192
statement: return this'.data.length
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
statement: return ()
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
statement: return r
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 576
particle-size: 576
particle-size: 576
particle-size: 576
particle-size: 576
statement: this'.data = this'.data ~ [x]
particle-size: 576
statement: return ()
particle-size: 576
particle-size: 576
particle-size: 576
particle-size: 576
statement: this'.Q_in.popFront()
particle-size: 964
particle-size: 964
statement: this'.data = this'.data[1..this'.size()]
particle-size: 964
particle-size: 964
statement: return this'.data.length
particle-size: 964
particle-size: 964
particle-size: 964
particle-size: 964
particle-size: 964
statement: return ()
particle-size: 964
particle-size: 964
particle-size: 964
particle-size: 964
statement: return ()
particle-size: 1540
particle-size: 1540
particle-size: 1540
particle-size: 1540
statement: if node == 2 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 6269
particle-size: 6269
statement: return this'.data.length
particle-size: 6269
particle-size: 6269
particle-size: 6269
particle-size: 6269
statement: this'.__S2.__run()
particle-size: 1028
particle-size: 1028
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 64
statement: this'.Q_in.dupFront()
particle-size: 64
particle-size: 64
statement: this'.pushFront(this'.front())
particle-size: 64
particle-size: 64
statement: return this'.data[0]
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: this'.data = [x] ~ this'.data
particle-size: 64
statement: return ()
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: return ()
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 64
particle-size: 64
statement: r := this'.front()
particle-size: 64
particle-size: 64
statement: return this'.data[0]
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: this'.popFront()
particle-size: 64
particle-size: 64
statement: this'.data = this'.data[1..this'.size()]
particle-size: 64
particle-size: 64
statement: return this'.data.length
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: return ()
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: return r
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
statement: this'.data = this'.data ~ [x]
particle-size: 192
statement: return ()
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 192
particle-size: 192
statement: r := this'.front()
particle-size: 192
particle-size: 192
statement: return this'.data[0]
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
statement: this'.popFront()
particle-size: 192
particle-size: 192
statement: this'.data = this'.data[1..this'.size()]
particle-size: 192
particle-size: 192
statement: return this'.data.length
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
statement: return ()
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
statement: return r
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 576
particle-size: 576
particle-size: 576
particle-size: 576
particle-size: 576
statement: this'.data = this'.data ~ [x]
particle-size: 576
statement: return ()
particle-size: 576
particle-size: 576
particle-size: 576
particle-size: 576
statement: this'.Q_in.popFront()
particle-size: 964
particle-size: 964
statement: this'.data = this'.data[1..this'.size()]
particle-size: 964
particle-size: 964
statement: return this'.data.length
particle-size: 964
particle-size: 964
particle-size: 964
particle-size: 964
particle-size: 964
statement: return ()
particle-size: 964
particle-size: 964
particle-size: 964
particle-size: 964
statement: return ()
particle-size: 1540
particle-size: 1540
particle-size: 1540
particle-size: 1540
statement: if node == 3 && this'.__S3.Q_in.size() {
    this'.__S3.__run();
}
particle-size: 6781
particle-size: 6781
statement: return this'.data.length
particle-size: 6781
particle-size: 6781
particle-size: 6781
particle-size: 6781
statement: this'.__S3.__run()
particle-size: 1028
particle-size: 1028
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 64
statement: this'.Q_in.dupFront()
particle-size: 64
particle-size: 64
statement: this'.pushFront(this'.front())
particle-size: 64
particle-size: 64
statement: return this'.data[0]
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: this'.data = [x] ~ this'.data
particle-size: 64
statement: return ()
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: return ()
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 64
particle-size: 64
statement: r := this'.front()
particle-size: 64
particle-size: 64
statement: return this'.data[0]
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: this'.popFront()
particle-size: 64
particle-size: 64
statement: this'.data = this'.data[1..this'.size()]
particle-size: 64
particle-size: 64
statement: return this'.data.length
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: return ()
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: return r
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
statement: this'.data = this'.data ~ [x]
particle-size: 192
statement: return ()
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 192
particle-size: 192
statement: r := this'.front()
particle-size: 192
particle-size: 192
statement: return this'.data[0]
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
statement: this'.popFront()
particle-size: 192
particle-size: 192
statement: this'.data = this'.data[1..this'.size()]
particle-size: 192
particle-size: 192
statement: return this'.data.length
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
statement: return ()
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
statement: return r
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 576
particle-size: 576
particle-size: 576
particle-size: 576
particle-size: 576
statement: this'.data = this'.data ~ [x]
particle-size: 576
statement: return ()
particle-size: 576
particle-size: 576
particle-size: 576
particle-size: 576
statement: this'.Q_in.popFront()
particle-size: 964
particle-size: 964
statement: this'.data = this'.data[1..this'.size()]
particle-size: 964
particle-size: 964
statement: return this'.data.length
particle-size: 964
particle-size: 964
particle-size: 964
particle-size: 964
particle-size: 964
statement: return ()
particle-size: 964
particle-size: 964
particle-size: 964
particle-size: 964
statement: return ()
particle-size: 1540
particle-size: 1540
particle-size: 1540
particle-size: 1540
statement: return ()
particle-size: 13335
particle-size: 13335
particle-size: 13335
particle-size: 4260
repetition: 10
statement: __d.__step()
particle-size: 4260
particle-size: 4260
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 4260
particle-size: 4260
statement: return this'.data.length
particle-size: 4260
particle-size: 4260
particle-size: 4260
particle-size: 4260
particle-size: 4260
particle-size: 4260
statement: return this'.data.length
particle-size: 4260
particle-size: 4260
particle-size: 4260
particle-size: 4260
particle-size: 4260
particle-size: 4260
statement: return this'.data.length
particle-size: 4260
particle-size: 4260
particle-size: 4260
particle-size: 4260
particle-size: 4260
particle-size: 4260
statement: return this'.data.length
particle-size: 4260
particle-size: 4260
particle-size: 4260
particle-size: 4260
particle-size: 4260
particle-size: 4260
statement: return this'.data.length
particle-size: 4260
particle-size: 4260
particle-size: 4260
particle-size: 4260
particle-size: 4260
particle-size: 4260
statement: return this'.data.length
particle-size: 4260
particle-size: 4260
particle-size: 4260
particle-size: 4260
particle-size: 4260
particle-size: 4260
statement: return this'.data.length
particle-size: 4260
particle-size: 4260
particle-size: 4260
particle-size: 4260
particle-size: 4260
particle-size: 4260
statement: return this'.data.length
particle-size: 4260
particle-size: 4260
particle-size: 4260
particle-size: 4260
statement: (action,node) := this'.scheduler()
particle-size: 4257
particle-size: 4257
statement: actions := ([]: (R × R)[])
particle-size: 4257
statement: for i in [0..4){
    if (if i == 0 {
        this'.__S0.Q_in;
    } else if i == 1 {
        this'.__S1.Q_in;
    } else if i == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__S0.Q_out;
    } else if i == 1 {
        this'.__S1.Q_out;
    } else if i == 2 {
        this'.__S2.Q_out;
    } else {
        this'.__S3.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 4257
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 4257
particle-size: 4257
statement: return this'.data.length
particle-size: 4257
particle-size: 4257
particle-size: 4257
statement: actions ~= [(0,i)]
particle-size: 3126
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 4257
particle-size: 4257
statement: return this'.data.length
particle-size: 4257
particle-size: 4257
particle-size: 4257
loop-index: 1
particle-size: 4257
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 4257
particle-size: 4257
statement: return this'.data.length
particle-size: 4257
particle-size: 4257
particle-size: 4257
statement: actions ~= [(0,i)]
particle-size: 1414
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 4257
particle-size: 4257
statement: return this'.data.length
particle-size: 4257
particle-size: 4257
particle-size: 4257
statement: actions ~= [(1,i)]
particle-size: 1953
loop-index: 2
particle-size: 4257
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 4257
particle-size: 4257
statement: return this'.data.length
particle-size: 4257
particle-size: 4257
particle-size: 4257
statement: actions ~= [(0,i)]
particle-size: 1414
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 4257
particle-size: 4257
statement: return this'.data.length
particle-size: 4257
particle-size: 4257
particle-size: 4257
statement: actions ~= [(1,i)]
particle-size: 1953
loop-index: 3
particle-size: 4257
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 4257
particle-size: 4257
statement: return this'.data.length
particle-size: 4257
particle-size: 4257
particle-size: 4257
statement: actions ~= [(0,i)]
particle-size: 1414
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 4257
particle-size: 4257
statement: return this'.data.length
particle-size: 4257
particle-size: 4257
particle-size: 4257
statement: actions ~= [(1,i)]
particle-size: 1953
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 4257
particle-size: 4257
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 13227
particle-size: 13227
particle-size: 13227
particle-size: 13227
particle-size: 13227
particle-size: 13227
particle-size: 13227
particle-size: 13227
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_out.size() {
    (pkt,port) := this'.__S0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S3.Q_in.pushBack((pkt,1));
    }
}
particle-size: 5859
particle-size: 5859
statement: return this'.data.length
particle-size: 5859
particle-size: 5859
particle-size: 5859
particle-size: 5859
statement: if node == 1 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S3.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 5859
particle-size: 5859
statement: return this'.data.length
particle-size: 5859
particle-size: 5859
particle-size: 5859
particle-size: 5859
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 1953
particle-size: 1953
statement: r := this'.front()
particle-size: 1953
particle-size: 1953
statement: return this'.data[0]
particle-size: 1953
particle-size: 1953
particle-size: 1953
particle-size: 1953
particle-size: 1953
statement: this'.popFront()
particle-size: 1953
particle-size: 1953
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1953
particle-size: 1953
statement: return this'.data.length
particle-size: 1953
particle-size: 1953
particle-size: 1953
particle-size: 1953
particle-size: 1953
statement: return ()
particle-size: 1953
particle-size: 1953
particle-size: 1953
particle-size: 1953
statement: return r
particle-size: 1953
particle-size: 1953
particle-size: 1953
particle-size: 1953
particle-size: 1953
particle-size: 1953
statement: if port == 1 {
    this'.__S2.Q_in.pushBack((pkt,3));
}
statement: this'.__S2.Q_in.pushBack((pkt,3))
particle-size: 651
particle-size: 651
particle-size: 651
statement: this'.data = this'.data ~ [x]
particle-size: 651
statement: return ()
particle-size: 651
particle-size: 651
particle-size: 651
particle-size: 651
statement: if port == 2 {
    this'.__S3.Q_in.pushBack((pkt,2));
}
statement: this'.__S3.Q_in.pushBack((pkt,2))
particle-size: 651
particle-size: 651
particle-size: 651
statement: this'.data = this'.data ~ [x]
particle-size: 651
statement: return ()
particle-size: 651
particle-size: 651
particle-size: 651
particle-size: 651
statement: if port == 3 {
    this'.__S0.Q_in.pushBack((pkt,1));
}
statement: this'.__S0.Q_in.pushBack((pkt,1))
particle-size: 651
particle-size: 651
particle-size: 651
statement: this'.data = this'.data ~ [x]
particle-size: 651
statement: return ()
particle-size: 651
particle-size: 651
particle-size: 651
particle-size: 651
statement: if node == 2 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S3.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 5859
particle-size: 5859
statement: return this'.data.length
particle-size: 5859
particle-size: 5859
particle-size: 5859
particle-size: 5859
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 1953
particle-size: 1953
statement: r := this'.front()
particle-size: 1953
particle-size: 1953
statement: return this'.data[0]
particle-size: 1953
particle-size: 1953
particle-size: 1953
particle-size: 1953
particle-size: 1953
statement: this'.popFront()
particle-size: 1953
particle-size: 1953
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1953
particle-size: 1953
statement: return this'.data.length
particle-size: 1953
particle-size: 1953
particle-size: 1953
particle-size: 1953
particle-size: 1953
statement: return ()
particle-size: 1953
particle-size: 1953
particle-size: 1953
particle-size: 1953
statement: return r
particle-size: 1953
particle-size: 1953
particle-size: 1953
particle-size: 1953
particle-size: 1953
particle-size: 1953
statement: if port == 1 {
    this'.__S3.Q_in.pushBack((pkt,3));
}
statement: this'.__S3.Q_in.pushBack((pkt,3))
particle-size: 651
particle-size: 651
particle-size: 651
statement: this'.data = this'.data ~ [x]
particle-size: 651
statement: return ()
particle-size: 651
particle-size: 651
particle-size: 651
particle-size: 651
statement: if port == 2 {
    this'.__S0.Q_in.pushBack((pkt,2));
}
statement: this'.__S0.Q_in.pushBack((pkt,2))
particle-size: 651
particle-size: 651
particle-size: 651
statement: this'.data = this'.data ~ [x]
particle-size: 651
statement: return ()
particle-size: 651
particle-size: 651
particle-size: 651
particle-size: 651
statement: if port == 3 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 651
particle-size: 651
particle-size: 651
statement: this'.data = this'.data ~ [x]
particle-size: 651
statement: return ()
particle-size: 651
particle-size: 651
particle-size: 651
particle-size: 651
statement: if node == 3 && this'.__S3.Q_out.size() {
    (pkt,port) := this'.__S3.Q_out.takeFront();
    if port == 1 {
        this'.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 5859
particle-size: 5859
statement: return this'.data.length
particle-size: 5859
particle-size: 5859
particle-size: 5859
particle-size: 5859
statement: (pkt,port) := this'.__S3.Q_out.takeFront()
particle-size: 1953
particle-size: 1953
statement: r := this'.front()
particle-size: 1953
particle-size: 1953
statement: return this'.data[0]
particle-size: 1953
particle-size: 1953
particle-size: 1953
particle-size: 1953
particle-size: 1953
statement: this'.popFront()
particle-size: 1953
particle-size: 1953
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1953
particle-size: 1953
statement: return this'.data.length
particle-size: 1953
particle-size: 1953
particle-size: 1953
particle-size: 1953
particle-size: 1953
statement: return ()
particle-size: 1953
particle-size: 1953
particle-size: 1953
particle-size: 1953
statement: return r
particle-size: 1953
particle-size: 1953
particle-size: 1953
particle-size: 1953
particle-size: 1953
particle-size: 1953
statement: if port == 1 {
    this'.__S0.Q_in.pushBack((pkt,3));
}
statement: this'.__S0.Q_in.pushBack((pkt,3))
particle-size: 651
particle-size: 651
particle-size: 651
statement: this'.data = this'.data ~ [x]
particle-size: 651
statement: return ()
particle-size: 651
particle-size: 651
particle-size: 651
particle-size: 651
statement: if port == 2 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: this'.__S1.Q_in.pushBack((pkt,2))
particle-size: 651
particle-size: 651
particle-size: 651
statement: this'.data = this'.data ~ [x]
particle-size: 651
statement: return ()
particle-size: 651
particle-size: 651
particle-size: 651
particle-size: 651
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 651
particle-size: 651
particle-size: 651
statement: this'.data = this'.data ~ [x]
particle-size: 651
statement: return ()
particle-size: 651
particle-size: 651
particle-size: 651
particle-size: 651
statement: if node == 0 && this'.__S0.Q_in.size() {
    this'.__S0.__run();
}
particle-size: 7368
particle-size: 7368
statement: return this'.data.length
particle-size: 7368
particle-size: 7368
particle-size: 7368
particle-size: 7368
statement: this'.__S0.__run()
particle-size: 3126
particle-size: 3126
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 3126
particle-size: 3126
statement: this'.data = this'.data[1..this'.size()]
particle-size: 3126
particle-size: 3126
statement: return this'.data.length
particle-size: 3126
particle-size: 3126
particle-size: 3126
particle-size: 3126
particle-size: 3126
statement: return ()
particle-size: 3126
particle-size: 3126
particle-size: 3126
particle-size: 3126
statement: return ()
particle-size: 3126
particle-size: 3126
particle-size: 3126
particle-size: 3126
statement: if node == 1 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 7368
particle-size: 7368
statement: return this'.data.length
particle-size: 7368
particle-size: 7368
particle-size: 7368
particle-size: 7368
statement: this'.__S1.__run()
particle-size: 1414
particle-size: 1414
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 14
statement: this'.Q_in.dupFront()
particle-size: 14
particle-size: 14
statement: this'.pushFront(this'.front())
particle-size: 14
particle-size: 14
statement: return this'.data[0]
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: this'.data = [x] ~ this'.data
particle-size: 14
statement: return ()
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: return ()
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 14
particle-size: 14
statement: r := this'.front()
particle-size: 14
particle-size: 14
statement: return this'.data[0]
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: this'.popFront()
particle-size: 14
particle-size: 14
statement: this'.data = this'.data[1..this'.size()]
particle-size: 14
particle-size: 14
statement: return this'.data.length
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: return ()
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: return r
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: this'.data = this'.data ~ [x]
particle-size: 42
statement: return ()
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 42
particle-size: 42
statement: r := this'.front()
particle-size: 42
particle-size: 42
statement: return this'.data[0]
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: this'.popFront()
particle-size: 42
particle-size: 42
statement: this'.data = this'.data[1..this'.size()]
particle-size: 42
particle-size: 42
statement: return this'.data.length
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: return ()
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: return r
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
statement: this'.data = this'.data ~ [x]
particle-size: 126
statement: return ()
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
statement: this'.Q_in.popFront()
particle-size: 1400
particle-size: 1400
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1400
particle-size: 1400
statement: return this'.data.length
particle-size: 1400
particle-size: 1400
particle-size: 1400
particle-size: 1400
particle-size: 1400
statement: return ()
particle-size: 1400
particle-size: 1400
particle-size: 1400
particle-size: 1400
statement: return ()
particle-size: 1526
particle-size: 1526
particle-size: 1526
particle-size: 1526
statement: if node == 2 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 7480
particle-size: 7480
statement: return this'.data.length
particle-size: 7480
particle-size: 7480
particle-size: 7480
particle-size: 7480
statement: this'.__S2.__run()
particle-size: 1414
particle-size: 1414
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 14
statement: this'.Q_in.dupFront()
particle-size: 14
particle-size: 14
statement: this'.pushFront(this'.front())
particle-size: 14
particle-size: 14
statement: return this'.data[0]
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: this'.data = [x] ~ this'.data
particle-size: 14
statement: return ()
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: return ()
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 14
particle-size: 14
statement: r := this'.front()
particle-size: 14
particle-size: 14
statement: return this'.data[0]
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: this'.popFront()
particle-size: 14
particle-size: 14
statement: this'.data = this'.data[1..this'.size()]
particle-size: 14
particle-size: 14
statement: return this'.data.length
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: return ()
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: return r
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: this'.data = this'.data ~ [x]
particle-size: 42
statement: return ()
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 42
particle-size: 42
statement: r := this'.front()
particle-size: 42
particle-size: 42
statement: return this'.data[0]
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: this'.popFront()
particle-size: 42
particle-size: 42
statement: this'.data = this'.data[1..this'.size()]
particle-size: 42
particle-size: 42
statement: return this'.data.length
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: return ()
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: return r
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
statement: this'.data = this'.data ~ [x]
particle-size: 126
statement: return ()
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
statement: this'.Q_in.popFront()
particle-size: 1400
particle-size: 1400
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1400
particle-size: 1400
statement: return this'.data.length
particle-size: 1400
particle-size: 1400
particle-size: 1400
particle-size: 1400
particle-size: 1400
statement: return ()
particle-size: 1400
particle-size: 1400
particle-size: 1400
particle-size: 1400
statement: return ()
particle-size: 1526
particle-size: 1526
particle-size: 1526
particle-size: 1526
statement: if node == 3 && this'.__S3.Q_in.size() {
    this'.__S3.__run();
}
particle-size: 7592
particle-size: 7592
statement: return this'.data.length
particle-size: 7592
particle-size: 7592
particle-size: 7592
particle-size: 7592
statement: this'.__S3.__run()
particle-size: 1414
particle-size: 1414
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 14
statement: this'.Q_in.dupFront()
particle-size: 14
particle-size: 14
statement: this'.pushFront(this'.front())
particle-size: 14
particle-size: 14
statement: return this'.data[0]
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: this'.data = [x] ~ this'.data
particle-size: 14
statement: return ()
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: return ()
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 14
particle-size: 14
statement: r := this'.front()
particle-size: 14
particle-size: 14
statement: return this'.data[0]
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: this'.popFront()
particle-size: 14
particle-size: 14
statement: this'.data = this'.data[1..this'.size()]
particle-size: 14
particle-size: 14
statement: return this'.data.length
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: return ()
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: return r
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: this'.data = this'.data ~ [x]
particle-size: 42
statement: return ()
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 42
particle-size: 42
statement: r := this'.front()
particle-size: 42
particle-size: 42
statement: return this'.data[0]
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: this'.popFront()
particle-size: 42
particle-size: 42
statement: this'.data = this'.data[1..this'.size()]
particle-size: 42
particle-size: 42
statement: return this'.data.length
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: return ()
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: return r
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
statement: this'.data = this'.data ~ [x]
particle-size: 126
statement: return ()
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
statement: this'.Q_in.popFront()
particle-size: 1400
particle-size: 1400
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1400
particle-size: 1400
statement: return this'.data.length
particle-size: 1400
particle-size: 1400
particle-size: 1400
particle-size: 1400
particle-size: 1400
statement: return ()
particle-size: 1400
particle-size: 1400
particle-size: 1400
particle-size: 1400
statement: return ()
particle-size: 1526
particle-size: 1526
particle-size: 1526
particle-size: 1526
statement: return ()
particle-size: 13566
particle-size: 13566
particle-size: 13566
particle-size: 3759
repetition: 11
statement: __d.__step()
particle-size: 3759
particle-size: 3759
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 3759
particle-size: 3759
statement: return this'.data.length
particle-size: 3759
particle-size: 3759
particle-size: 3759
particle-size: 3759
particle-size: 3759
particle-size: 3759
statement: return this'.data.length
particle-size: 3759
particle-size: 3759
particle-size: 3759
particle-size: 3759
particle-size: 3759
particle-size: 3759
statement: return this'.data.length
particle-size: 3759
particle-size: 3759
particle-size: 3759
particle-size: 3759
particle-size: 3759
particle-size: 3759
statement: return this'.data.length
particle-size: 3759
particle-size: 3759
particle-size: 3759
particle-size: 3759
particle-size: 3759
particle-size: 3759
statement: return this'.data.length
particle-size: 3759
particle-size: 3759
particle-size: 3759
particle-size: 3759
particle-size: 3759
particle-size: 3759
statement: return this'.data.length
particle-size: 3759
particle-size: 3759
particle-size: 3759
particle-size: 3759
particle-size: 3759
particle-size: 3759
statement: return this'.data.length
particle-size: 3759
particle-size: 3759
particle-size: 3759
particle-size: 3759
particle-size: 3759
particle-size: 3759
statement: return this'.data.length
particle-size: 3759
particle-size: 3759
particle-size: 3759
particle-size: 3759
statement: (action,node) := this'.scheduler()
particle-size: 3756
particle-size: 3756
statement: actions := ([]: (R × R)[])
particle-size: 3756
statement: for i in [0..4){
    if (if i == 0 {
        this'.__S0.Q_in;
    } else if i == 1 {
        this'.__S1.Q_in;
    } else if i == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__S0.Q_out;
    } else if i == 1 {
        this'.__S1.Q_out;
    } else if i == 2 {
        this'.__S2.Q_out;
    } else {
        this'.__S3.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 3756
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 3756
particle-size: 3756
statement: return this'.data.length
particle-size: 3756
particle-size: 3756
particle-size: 3756
statement: actions ~= [(0,i)]
particle-size: 2952
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 3756
particle-size: 3756
statement: return this'.data.length
particle-size: 3756
particle-size: 3756
particle-size: 3756
loop-index: 1
particle-size: 3756
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 3756
particle-size: 3756
statement: return this'.data.length
particle-size: 3756
particle-size: 3756
particle-size: 3756
statement: actions ~= [(0,i)]
particle-size: 1392
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 3756
particle-size: 3756
statement: return this'.data.length
particle-size: 3756
particle-size: 3756
particle-size: 3756
statement: actions ~= [(1,i)]
particle-size: 1113
loop-index: 2
particle-size: 3756
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 3756
particle-size: 3756
statement: return this'.data.length
particle-size: 3756
particle-size: 3756
particle-size: 3756
statement: actions ~= [(0,i)]
particle-size: 1392
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 3756
particle-size: 3756
statement: return this'.data.length
particle-size: 3756
particle-size: 3756
particle-size: 3756
statement: actions ~= [(1,i)]
particle-size: 1113
loop-index: 3
particle-size: 3756
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 3756
particle-size: 3756
statement: return this'.data.length
particle-size: 3756
particle-size: 3756
particle-size: 3756
statement: actions ~= [(0,i)]
particle-size: 1392
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 3756
particle-size: 3756
statement: return this'.data.length
particle-size: 3756
particle-size: 3756
particle-size: 3756
statement: actions ~= [(1,i)]
particle-size: 1113
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 3756
particle-size: 3756
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 10467
particle-size: 10467
particle-size: 10467
particle-size: 10467
particle-size: 10467
particle-size: 10467
particle-size: 10467
particle-size: 10467
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_out.size() {
    (pkt,port) := this'.__S0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S3.Q_in.pushBack((pkt,1));
    }
}
particle-size: 3339
particle-size: 3339
statement: return this'.data.length
particle-size: 3339
particle-size: 3339
particle-size: 3339
particle-size: 3339
statement: if node == 1 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S3.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 3339
particle-size: 3339
statement: return this'.data.length
particle-size: 3339
particle-size: 3339
particle-size: 3339
particle-size: 3339
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 1113
particle-size: 1113
statement: r := this'.front()
particle-size: 1113
particle-size: 1113
statement: return this'.data[0]
particle-size: 1113
particle-size: 1113
particle-size: 1113
particle-size: 1113
particle-size: 1113
statement: this'.popFront()
particle-size: 1113
particle-size: 1113
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1113
particle-size: 1113
statement: return this'.data.length
particle-size: 1113
particle-size: 1113
particle-size: 1113
particle-size: 1113
particle-size: 1113
statement: return ()
particle-size: 1113
particle-size: 1113
particle-size: 1113
particle-size: 1113
statement: return r
particle-size: 1113
particle-size: 1113
particle-size: 1113
particle-size: 1113
particle-size: 1113
particle-size: 1113
statement: if port == 1 {
    this'.__S2.Q_in.pushBack((pkt,3));
}
statement: this'.__S2.Q_in.pushBack((pkt,3))
particle-size: 371
particle-size: 371
particle-size: 371
statement: this'.data = this'.data ~ [x]
particle-size: 371
statement: return ()
particle-size: 371
particle-size: 371
particle-size: 371
particle-size: 371
statement: if port == 2 {
    this'.__S3.Q_in.pushBack((pkt,2));
}
statement: this'.__S3.Q_in.pushBack((pkt,2))
particle-size: 371
particle-size: 371
particle-size: 371
statement: this'.data = this'.data ~ [x]
particle-size: 371
statement: return ()
particle-size: 371
particle-size: 371
particle-size: 371
particle-size: 371
statement: if port == 3 {
    this'.__S0.Q_in.pushBack((pkt,1));
}
statement: this'.__S0.Q_in.pushBack((pkt,1))
particle-size: 371
particle-size: 371
particle-size: 371
statement: this'.data = this'.data ~ [x]
particle-size: 371
statement: return ()
particle-size: 371
particle-size: 371
particle-size: 371
particle-size: 371
statement: if node == 2 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S3.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 3339
particle-size: 3339
statement: return this'.data.length
particle-size: 3339
particle-size: 3339
particle-size: 3339
particle-size: 3339
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 1113
particle-size: 1113
statement: r := this'.front()
particle-size: 1113
particle-size: 1113
statement: return this'.data[0]
particle-size: 1113
particle-size: 1113
particle-size: 1113
particle-size: 1113
particle-size: 1113
statement: this'.popFront()
particle-size: 1113
particle-size: 1113
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1113
particle-size: 1113
statement: return this'.data.length
particle-size: 1113
particle-size: 1113
particle-size: 1113
particle-size: 1113
particle-size: 1113
statement: return ()
particle-size: 1113
particle-size: 1113
particle-size: 1113
particle-size: 1113
statement: return r
particle-size: 1113
particle-size: 1113
particle-size: 1113
particle-size: 1113
particle-size: 1113
particle-size: 1113
statement: if port == 1 {
    this'.__S3.Q_in.pushBack((pkt,3));
}
statement: this'.__S3.Q_in.pushBack((pkt,3))
particle-size: 371
particle-size: 371
particle-size: 371
statement: this'.data = this'.data ~ [x]
particle-size: 371
statement: return ()
particle-size: 371
particle-size: 371
particle-size: 371
particle-size: 371
statement: if port == 2 {
    this'.__S0.Q_in.pushBack((pkt,2));
}
statement: this'.__S0.Q_in.pushBack((pkt,2))
particle-size: 371
particle-size: 371
particle-size: 371
statement: this'.data = this'.data ~ [x]
particle-size: 371
statement: return ()
particle-size: 371
particle-size: 371
particle-size: 371
particle-size: 371
statement: if port == 3 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 371
particle-size: 371
particle-size: 371
statement: this'.data = this'.data ~ [x]
particle-size: 371
statement: return ()
particle-size: 371
particle-size: 371
particle-size: 371
particle-size: 371
statement: if node == 3 && this'.__S3.Q_out.size() {
    (pkt,port) := this'.__S3.Q_out.takeFront();
    if port == 1 {
        this'.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 3339
particle-size: 3339
statement: return this'.data.length
particle-size: 3339
particle-size: 3339
particle-size: 3339
particle-size: 3339
statement: (pkt,port) := this'.__S3.Q_out.takeFront()
particle-size: 1113
particle-size: 1113
statement: r := this'.front()
particle-size: 1113
particle-size: 1113
statement: return this'.data[0]
particle-size: 1113
particle-size: 1113
particle-size: 1113
particle-size: 1113
particle-size: 1113
statement: this'.popFront()
particle-size: 1113
particle-size: 1113
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1113
particle-size: 1113
statement: return this'.data.length
particle-size: 1113
particle-size: 1113
particle-size: 1113
particle-size: 1113
particle-size: 1113
statement: return ()
particle-size: 1113
particle-size: 1113
particle-size: 1113
particle-size: 1113
statement: return r
particle-size: 1113
particle-size: 1113
particle-size: 1113
particle-size: 1113
particle-size: 1113
particle-size: 1113
statement: if port == 1 {
    this'.__S0.Q_in.pushBack((pkt,3));
}
statement: this'.__S0.Q_in.pushBack((pkt,3))
particle-size: 371
particle-size: 371
particle-size: 371
statement: this'.data = this'.data ~ [x]
particle-size: 371
statement: return ()
particle-size: 371
particle-size: 371
particle-size: 371
particle-size: 371
statement: if port == 2 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: this'.__S1.Q_in.pushBack((pkt,2))
particle-size: 371
particle-size: 371
particle-size: 371
statement: this'.data = this'.data ~ [x]
particle-size: 371
statement: return ()
particle-size: 371
particle-size: 371
particle-size: 371
particle-size: 371
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 371
particle-size: 371
particle-size: 371
statement: this'.data = this'.data ~ [x]
particle-size: 371
statement: return ()
particle-size: 371
particle-size: 371
particle-size: 371
particle-size: 371
statement: if node == 0 && this'.__S0.Q_in.size() {
    this'.__S0.__run();
}
particle-size: 7128
particle-size: 7128
statement: return this'.data.length
particle-size: 7128
particle-size: 7128
particle-size: 7128
particle-size: 7128
statement: this'.__S0.__run()
particle-size: 2952
particle-size: 2952
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 2952
particle-size: 2952
statement: this'.data = this'.data[1..this'.size()]
particle-size: 2952
particle-size: 2952
statement: return this'.data.length
particle-size: 2952
particle-size: 2952
particle-size: 2952
particle-size: 2952
particle-size: 2952
statement: return ()
particle-size: 2952
particle-size: 2952
particle-size: 2952
particle-size: 2952
statement: return ()
particle-size: 2952
particle-size: 2952
particle-size: 2952
particle-size: 2952
statement: if node == 1 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 7128
particle-size: 7128
statement: return this'.data.length
particle-size: 7128
particle-size: 7128
particle-size: 7128
particle-size: 7128
statement: this'.__S1.__run()
particle-size: 1392
particle-size: 1392
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 2
statement: this'.Q_in.dupFront()
particle-size: 2
particle-size: 2
statement: this'.pushFront(this'.front())
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = [x] ~ this'.data
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 2
particle-size: 2
statement: r := this'.front()
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.popFront()
particle-size: 2
particle-size: 2
statement: this'.data = this'.data[1..this'.size()]
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return r
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.data = this'.data ~ [x]
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 6
particle-size: 6
statement: r := this'.front()
particle-size: 6
particle-size: 6
statement: return this'.data[0]
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.popFront()
particle-size: 6
particle-size: 6
statement: this'.data = this'.data[1..this'.size()]
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return r
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.data = this'.data ~ [x]
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.Q_in.popFront()
particle-size: 1390
particle-size: 1390
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1390
particle-size: 1390
statement: return this'.data.length
particle-size: 1390
particle-size: 1390
particle-size: 1390
particle-size: 1390
particle-size: 1390
statement: return ()
particle-size: 1390
particle-size: 1390
particle-size: 1390
particle-size: 1390
statement: return ()
particle-size: 1408
particle-size: 1408
particle-size: 1408
particle-size: 1408
statement: if node == 2 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 7144
particle-size: 7144
statement: return this'.data.length
particle-size: 7144
particle-size: 7144
particle-size: 7144
particle-size: 7144
statement: this'.__S2.__run()
particle-size: 1392
particle-size: 1392
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 2
statement: this'.Q_in.dupFront()
particle-size: 2
particle-size: 2
statement: this'.pushFront(this'.front())
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = [x] ~ this'.data
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 2
particle-size: 2
statement: r := this'.front()
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.popFront()
particle-size: 2
particle-size: 2
statement: this'.data = this'.data[1..this'.size()]
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return r
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.data = this'.data ~ [x]
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 6
particle-size: 6
statement: r := this'.front()
particle-size: 6
particle-size: 6
statement: return this'.data[0]
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.popFront()
particle-size: 6
particle-size: 6
statement: this'.data = this'.data[1..this'.size()]
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return r
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.data = this'.data ~ [x]
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.Q_in.popFront()
particle-size: 1390
particle-size: 1390
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1390
particle-size: 1390
statement: return this'.data.length
particle-size: 1390
particle-size: 1390
particle-size: 1390
particle-size: 1390
particle-size: 1390
statement: return ()
particle-size: 1390
particle-size: 1390
particle-size: 1390
particle-size: 1390
statement: return ()
particle-size: 1408
particle-size: 1408
particle-size: 1408
particle-size: 1408
statement: if node == 3 && this'.__S3.Q_in.size() {
    this'.__S3.__run();
}
particle-size: 7160
particle-size: 7160
statement: return this'.data.length
particle-size: 7160
particle-size: 7160
particle-size: 7160
particle-size: 7160
statement: this'.__S3.__run()
particle-size: 1392
particle-size: 1392
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.infected = 1
particle-size: 2
statement: this'.Q_in.dupFront()
particle-size: 2
particle-size: 2
statement: this'.pushFront(this'.front())
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.data = [x] ~ this'.data
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 2
particle-size: 2
statement: r := this'.front()
particle-size: 2
particle-size: 2
statement: return this'.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this'.popFront()
particle-size: 2
particle-size: 2
statement: this'.data = this'.data[1..this'.size()]
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return r
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.data = this'.data ~ [x]
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 6
particle-size: 6
statement: r := this'.front()
particle-size: 6
particle-size: 6
statement: return this'.data[0]
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this'.popFront()
particle-size: 6
particle-size: 6
statement: this'.data = this'.data[1..this'.size()]
particle-size: 6
particle-size: 6
statement: return this'.data.length
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return r
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.data = this'.data ~ [x]
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this'.Q_in.popFront()
particle-size: 1390
particle-size: 1390
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1390
particle-size: 1390
statement: return this'.data.length
particle-size: 1390
particle-size: 1390
particle-size: 1390
particle-size: 1390
particle-size: 1390
statement: return ()
particle-size: 1390
particle-size: 1390
particle-size: 1390
particle-size: 1390
statement: return ()
particle-size: 1408
particle-size: 1408
particle-size: 1408
particle-size: 1408
statement: return ()
particle-size: 10518
particle-size: 10518
particle-size: 10518
particle-size: 2216
repetition: 12
statement: __d.__step()
particle-size: 2216
particle-size: 2216
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 2216
particle-size: 2216
statement: return this'.data.length
particle-size: 2216
particle-size: 2216
particle-size: 2216
particle-size: 2216
particle-size: 2216
particle-size: 2216
statement: return this'.data.length
particle-size: 2216
particle-size: 2216
particle-size: 2216
particle-size: 2216
particle-size: 2216
particle-size: 2216
statement: return this'.data.length
particle-size: 2216
particle-size: 2216
particle-size: 2216
particle-size: 2216
particle-size: 2216
particle-size: 2216
statement: return this'.data.length
particle-size: 2216
particle-size: 2216
particle-size: 2216
particle-size: 2216
particle-size: 2216
particle-size: 2216
statement: return this'.data.length
particle-size: 2216
particle-size: 2216
particle-size: 2216
particle-size: 2216
particle-size: 2216
particle-size: 2216
statement: return this'.data.length
particle-size: 2216
particle-size: 2216
particle-size: 2216
particle-size: 2216
particle-size: 2216
particle-size: 2216
statement: return this'.data.length
particle-size: 2216
particle-size: 2216
particle-size: 2216
particle-size: 2216
particle-size: 2216
particle-size: 2216
statement: return this'.data.length
particle-size: 2216
particle-size: 2216
particle-size: 2216
particle-size: 2216
statement: (action,node) := this'.scheduler()
particle-size: 2210
particle-size: 2210
statement: actions := ([]: (R × R)[])
particle-size: 2210
statement: for i in [0..4){
    if (if i == 0 {
        this'.__S0.Q_in;
    } else if i == 1 {
        this'.__S1.Q_in;
    } else if i == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__S0.Q_out;
    } else if i == 1 {
        this'.__S1.Q_out;
    } else if i == 2 {
        this'.__S2.Q_out;
    } else {
        this'.__S3.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 2210
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 2210
particle-size: 2210
statement: return this'.data.length
particle-size: 2210
particle-size: 2210
particle-size: 2210
statement: actions ~= [(0,i)]
particle-size: 1700
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 2210
particle-size: 2210
statement: return this'.data.length
particle-size: 2210
particle-size: 2210
particle-size: 2210
loop-index: 1
particle-size: 2210
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 2210
particle-size: 2210
statement: return this'.data.length
particle-size: 2210
particle-size: 2210
particle-size: 2210
statement: actions ~= [(0,i)]
particle-size: 830
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 2210
particle-size: 2210
statement: return this'.data.length
particle-size: 2210
particle-size: 2210
particle-size: 2210
statement: actions ~= [(1,i)]
particle-size: 243
loop-index: 2
particle-size: 2210
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 2210
particle-size: 2210
statement: return this'.data.length
particle-size: 2210
particle-size: 2210
particle-size: 2210
statement: actions ~= [(0,i)]
particle-size: 830
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 2210
particle-size: 2210
statement: return this'.data.length
particle-size: 2210
particle-size: 2210
particle-size: 2210
statement: actions ~= [(1,i)]
particle-size: 243
loop-index: 3
particle-size: 2210
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 2210
particle-size: 2210
statement: return this'.data.length
particle-size: 2210
particle-size: 2210
particle-size: 2210
statement: actions ~= [(0,i)]
particle-size: 830
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 2210
particle-size: 2210
statement: return this'.data.length
particle-size: 2210
particle-size: 2210
particle-size: 2210
statement: actions ~= [(1,i)]
particle-size: 243
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 2210
particle-size: 2210
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 4919
particle-size: 4919
particle-size: 4919
particle-size: 4919
particle-size: 4919
particle-size: 4919
particle-size: 4919
particle-size: 4919
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_out.size() {
    (pkt,port) := this'.__S0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S3.Q_in.pushBack((pkt,1));
    }
}
particle-size: 729
particle-size: 729
statement: return this'.data.length
particle-size: 729
particle-size: 729
particle-size: 729
particle-size: 729
statement: if node == 1 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S3.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 729
particle-size: 729
statement: return this'.data.length
particle-size: 729
particle-size: 729
particle-size: 729
particle-size: 729
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 243
particle-size: 243
statement: r := this'.front()
particle-size: 243
particle-size: 243
statement: return this'.data[0]
particle-size: 243
particle-size: 243
particle-size: 243
particle-size: 243
particle-size: 243
statement: this'.popFront()
particle-size: 243
particle-size: 243
statement: this'.data = this'.data[1..this'.size()]
particle-size: 243
particle-size: 243
statement: return this'.data.length
particle-size: 243
particle-size: 243
particle-size: 243
particle-size: 243
particle-size: 243
statement: return ()
particle-size: 243
particle-size: 243
particle-size: 243
particle-size: 243
statement: return r
particle-size: 243
particle-size: 243
particle-size: 243
particle-size: 243
particle-size: 243
particle-size: 243
statement: if port == 1 {
    this'.__S2.Q_in.pushBack((pkt,3));
}
statement: this'.__S2.Q_in.pushBack((pkt,3))
particle-size: 81
particle-size: 81
particle-size: 81
statement: this'.data = this'.data ~ [x]
particle-size: 81
statement: return ()
particle-size: 81
particle-size: 81
particle-size: 81
particle-size: 81
statement: if port == 2 {
    this'.__S3.Q_in.pushBack((pkt,2));
}
statement: this'.__S3.Q_in.pushBack((pkt,2))
particle-size: 81
particle-size: 81
particle-size: 81
statement: this'.data = this'.data ~ [x]
particle-size: 81
statement: return ()
particle-size: 81
particle-size: 81
particle-size: 81
particle-size: 81
statement: if port == 3 {
    this'.__S0.Q_in.pushBack((pkt,1));
}
statement: this'.__S0.Q_in.pushBack((pkt,1))
particle-size: 81
particle-size: 81
particle-size: 81
statement: this'.data = this'.data ~ [x]
particle-size: 81
statement: return ()
particle-size: 81
particle-size: 81
particle-size: 81
particle-size: 81
statement: if node == 2 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S3.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 729
particle-size: 729
statement: return this'.data.length
particle-size: 729
particle-size: 729
particle-size: 729
particle-size: 729
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 243
particle-size: 243
statement: r := this'.front()
particle-size: 243
particle-size: 243
statement: return this'.data[0]
particle-size: 243
particle-size: 243
particle-size: 243
particle-size: 243
particle-size: 243
statement: this'.popFront()
particle-size: 243
particle-size: 243
statement: this'.data = this'.data[1..this'.size()]
particle-size: 243
particle-size: 243
statement: return this'.data.length
particle-size: 243
particle-size: 243
particle-size: 243
particle-size: 243
particle-size: 243
statement: return ()
particle-size: 243
particle-size: 243
particle-size: 243
particle-size: 243
statement: return r
particle-size: 243
particle-size: 243
particle-size: 243
particle-size: 243
particle-size: 243
particle-size: 243
statement: if port == 1 {
    this'.__S3.Q_in.pushBack((pkt,3));
}
statement: this'.__S3.Q_in.pushBack((pkt,3))
particle-size: 81
particle-size: 81
particle-size: 81
statement: this'.data = this'.data ~ [x]
particle-size: 81
statement: return ()
particle-size: 81
particle-size: 81
particle-size: 81
particle-size: 81
statement: if port == 2 {
    this'.__S0.Q_in.pushBack((pkt,2));
}
statement: this'.__S0.Q_in.pushBack((pkt,2))
particle-size: 81
particle-size: 81
particle-size: 81
statement: this'.data = this'.data ~ [x]
particle-size: 81
statement: return ()
particle-size: 81
particle-size: 81
particle-size: 81
particle-size: 81
statement: if port == 3 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 81
particle-size: 81
particle-size: 81
statement: this'.data = this'.data ~ [x]
particle-size: 81
statement: return ()
particle-size: 81
particle-size: 81
particle-size: 81
particle-size: 81
statement: if node == 3 && this'.__S3.Q_out.size() {
    (pkt,port) := this'.__S3.Q_out.takeFront();
    if port == 1 {
        this'.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 729
particle-size: 729
statement: return this'.data.length
particle-size: 729
particle-size: 729
particle-size: 729
particle-size: 729
statement: (pkt,port) := this'.__S3.Q_out.takeFront()
particle-size: 243
particle-size: 243
statement: r := this'.front()
particle-size: 243
particle-size: 243
statement: return this'.data[0]
particle-size: 243
particle-size: 243
particle-size: 243
particle-size: 243
particle-size: 243
statement: this'.popFront()
particle-size: 243
particle-size: 243
statement: this'.data = this'.data[1..this'.size()]
particle-size: 243
particle-size: 243
statement: return this'.data.length
particle-size: 243
particle-size: 243
particle-size: 243
particle-size: 243
particle-size: 243
statement: return ()
particle-size: 243
particle-size: 243
particle-size: 243
particle-size: 243
statement: return r
particle-size: 243
particle-size: 243
particle-size: 243
particle-size: 243
particle-size: 243
particle-size: 243
statement: if port == 1 {
    this'.__S0.Q_in.pushBack((pkt,3));
}
statement: this'.__S0.Q_in.pushBack((pkt,3))
particle-size: 81
particle-size: 81
particle-size: 81
statement: this'.data = this'.data ~ [x]
particle-size: 81
statement: return ()
particle-size: 81
particle-size: 81
particle-size: 81
particle-size: 81
statement: if port == 2 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: this'.__S1.Q_in.pushBack((pkt,2))
particle-size: 81
particle-size: 81
particle-size: 81
statement: this'.data = this'.data ~ [x]
particle-size: 81
statement: return ()
particle-size: 81
particle-size: 81
particle-size: 81
particle-size: 81
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 81
particle-size: 81
particle-size: 81
statement: this'.data = this'.data ~ [x]
particle-size: 81
statement: return ()
particle-size: 81
particle-size: 81
particle-size: 81
particle-size: 81
statement: if node == 0 && this'.__S0.Q_in.size() {
    this'.__S0.__run();
}
particle-size: 4190
particle-size: 4190
statement: return this'.data.length
particle-size: 4190
particle-size: 4190
particle-size: 4190
particle-size: 4190
statement: this'.__S0.__run()
particle-size: 1700
particle-size: 1700
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 1700
particle-size: 1700
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1700
particle-size: 1700
statement: return this'.data.length
particle-size: 1700
particle-size: 1700
particle-size: 1700
particle-size: 1700
particle-size: 1700
statement: return ()
particle-size: 1700
particle-size: 1700
particle-size: 1700
particle-size: 1700
statement: return ()
particle-size: 1700
particle-size: 1700
particle-size: 1700
particle-size: 1700
statement: if node == 1 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 4190
particle-size: 4190
statement: return this'.data.length
particle-size: 4190
particle-size: 4190
particle-size: 4190
particle-size: 4190
statement: this'.__S1.__run()
particle-size: 830
particle-size: 830
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 830
particle-size: 830
statement: this'.data = this'.data[1..this'.size()]
particle-size: 830
particle-size: 830
statement: return this'.data.length
particle-size: 830
particle-size: 830
particle-size: 830
particle-size: 830
particle-size: 830
statement: return ()
particle-size: 830
particle-size: 830
particle-size: 830
particle-size: 830
statement: return ()
particle-size: 830
particle-size: 830
particle-size: 830
particle-size: 830
statement: if node == 2 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 4190
particle-size: 4190
statement: return this'.data.length
particle-size: 4190
particle-size: 4190
particle-size: 4190
particle-size: 4190
statement: this'.__S2.__run()
particle-size: 830
particle-size: 830
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 830
particle-size: 830
statement: this'.data = this'.data[1..this'.size()]
particle-size: 830
particle-size: 830
statement: return this'.data.length
particle-size: 830
particle-size: 830
particle-size: 830
particle-size: 830
particle-size: 830
statement: return ()
particle-size: 830
particle-size: 830
particle-size: 830
particle-size: 830
statement: return ()
particle-size: 830
particle-size: 830
particle-size: 830
particle-size: 830
statement: if node == 3 && this'.__S3.Q_in.size() {
    this'.__S3.__run();
}
particle-size: 4190
particle-size: 4190
statement: return this'.data.length
particle-size: 4190
particle-size: 4190
particle-size: 4190
particle-size: 4190
statement: this'.__S3.__run()
particle-size: 830
particle-size: 830
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 830
particle-size: 830
statement: this'.data = this'.data[1..this'.size()]
particle-size: 830
particle-size: 830
statement: return this'.data.length
particle-size: 830
particle-size: 830
particle-size: 830
particle-size: 830
particle-size: 830
statement: return ()
particle-size: 830
particle-size: 830
particle-size: 830
particle-size: 830
statement: return ()
particle-size: 830
particle-size: 830
particle-size: 830
particle-size: 830
statement: return ()
particle-size: 4925
particle-size: 4925
particle-size: 4925
particle-size: 566
repetition: 13
statement: __d.__step()
particle-size: 566
particle-size: 566
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 566
particle-size: 566
statement: return this'.data.length
particle-size: 566
particle-size: 566
particle-size: 566
particle-size: 566
particle-size: 566
particle-size: 566
statement: return this'.data.length
particle-size: 566
particle-size: 566
particle-size: 566
particle-size: 566
particle-size: 566
particle-size: 566
statement: return this'.data.length
particle-size: 566
particle-size: 566
particle-size: 566
particle-size: 566
particle-size: 566
particle-size: 566
statement: return this'.data.length
particle-size: 566
particle-size: 566
particle-size: 566
particle-size: 566
particle-size: 566
particle-size: 566
statement: return this'.data.length
particle-size: 566
particle-size: 566
particle-size: 566
particle-size: 566
particle-size: 566
particle-size: 566
statement: return this'.data.length
particle-size: 566
particle-size: 566
particle-size: 566
particle-size: 566
particle-size: 566
particle-size: 566
statement: return this'.data.length
particle-size: 566
particle-size: 566
particle-size: 566
particle-size: 566
particle-size: 566
particle-size: 566
statement: return this'.data.length
particle-size: 566
particle-size: 566
particle-size: 566
particle-size: 566
statement: (action,node) := this'.scheduler()
particle-size: 560
particle-size: 560
statement: actions := ([]: (R × R)[])
particle-size: 560
statement: for i in [0..4){
    if (if i == 0 {
        this'.__S0.Q_in;
    } else if i == 1 {
        this'.__S1.Q_in;
    } else if i == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__S0.Q_out;
    } else if i == 1 {
        this'.__S1.Q_out;
    } else if i == 2 {
        this'.__S2.Q_out;
    } else {
        this'.__S3.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 560
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 560
particle-size: 560
statement: return this'.data.length
particle-size: 560
particle-size: 560
particle-size: 560
statement: actions ~= [(0,i)]
particle-size: 360
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 560
particle-size: 560
statement: return this'.data.length
particle-size: 560
particle-size: 560
particle-size: 560
loop-index: 1
particle-size: 560
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 560
particle-size: 560
statement: return this'.data.length
particle-size: 560
particle-size: 560
particle-size: 560
statement: actions ~= [(0,i)]
particle-size: 196
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 560
particle-size: 560
statement: return this'.data.length
particle-size: 560
particle-size: 560
particle-size: 560
statement: actions ~= [(1,i)]
particle-size: 30
loop-index: 2
particle-size: 560
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 560
particle-size: 560
statement: return this'.data.length
particle-size: 560
particle-size: 560
particle-size: 560
statement: actions ~= [(0,i)]
particle-size: 196
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 560
particle-size: 560
statement: return this'.data.length
particle-size: 560
particle-size: 560
particle-size: 560
statement: actions ~= [(1,i)]
particle-size: 30
loop-index: 3
particle-size: 560
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 560
particle-size: 560
statement: return this'.data.length
particle-size: 560
particle-size: 560
particle-size: 560
statement: actions ~= [(0,i)]
particle-size: 196
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 560
particle-size: 560
statement: return this'.data.length
particle-size: 560
particle-size: 560
particle-size: 560
statement: actions ~= [(1,i)]
particle-size: 30
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 560
particle-size: 560
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 1038
particle-size: 1038
particle-size: 1038
particle-size: 1038
particle-size: 1038
particle-size: 1038
particle-size: 1038
particle-size: 1038
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_out.size() {
    (pkt,port) := this'.__S0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S3.Q_in.pushBack((pkt,1));
    }
}
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: if node == 1 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S3.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 30
particle-size: 30
statement: r := this'.front()
particle-size: 30
particle-size: 30
statement: return this'.data[0]
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
statement: this'.popFront()
particle-size: 30
particle-size: 30
statement: this'.data = this'.data[1..this'.size()]
particle-size: 30
particle-size: 30
statement: return this'.data.length
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
statement: return ()
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
statement: return r
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
statement: if port == 1 {
    this'.__S2.Q_in.pushBack((pkt,3));
}
statement: this'.__S2.Q_in.pushBack((pkt,3))
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.data = this'.data ~ [x]
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: if port == 2 {
    this'.__S3.Q_in.pushBack((pkt,2));
}
statement: this'.__S3.Q_in.pushBack((pkt,2))
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.data = this'.data ~ [x]
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: if port == 3 {
    this'.__S0.Q_in.pushBack((pkt,1));
}
statement: this'.__S0.Q_in.pushBack((pkt,1))
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.data = this'.data ~ [x]
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: if node == 2 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S3.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 30
particle-size: 30
statement: r := this'.front()
particle-size: 30
particle-size: 30
statement: return this'.data[0]
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
statement: this'.popFront()
particle-size: 30
particle-size: 30
statement: this'.data = this'.data[1..this'.size()]
particle-size: 30
particle-size: 30
statement: return this'.data.length
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
statement: return ()
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
statement: return r
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
statement: if port == 1 {
    this'.__S3.Q_in.pushBack((pkt,3));
}
statement: this'.__S3.Q_in.pushBack((pkt,3))
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.data = this'.data ~ [x]
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: if port == 2 {
    this'.__S0.Q_in.pushBack((pkt,2));
}
statement: this'.__S0.Q_in.pushBack((pkt,2))
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.data = this'.data ~ [x]
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: if port == 3 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.data = this'.data ~ [x]
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: if node == 3 && this'.__S3.Q_out.size() {
    (pkt,port) := this'.__S3.Q_out.takeFront();
    if port == 1 {
        this'.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
particle-size: 90
statement: (pkt,port) := this'.__S3.Q_out.takeFront()
particle-size: 30
particle-size: 30
statement: r := this'.front()
particle-size: 30
particle-size: 30
statement: return this'.data[0]
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
statement: this'.popFront()
particle-size: 30
particle-size: 30
statement: this'.data = this'.data[1..this'.size()]
particle-size: 30
particle-size: 30
statement: return this'.data.length
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
statement: return ()
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
statement: return r
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 30
statement: if port == 1 {
    this'.__S0.Q_in.pushBack((pkt,3));
}
statement: this'.__S0.Q_in.pushBack((pkt,3))
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.data = this'.data ~ [x]
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: if port == 2 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: this'.__S1.Q_in.pushBack((pkt,2))
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.data = this'.data ~ [x]
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.data = this'.data ~ [x]
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: if node == 0 && this'.__S0.Q_in.size() {
    this'.__S0.__run();
}
particle-size: 948
particle-size: 948
statement: return this'.data.length
particle-size: 948
particle-size: 948
particle-size: 948
particle-size: 948
statement: this'.__S0.__run()
particle-size: 360
particle-size: 360
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 360
particle-size: 360
statement: this'.data = this'.data[1..this'.size()]
particle-size: 360
particle-size: 360
statement: return this'.data.length
particle-size: 360
particle-size: 360
particle-size: 360
particle-size: 360
particle-size: 360
statement: return ()
particle-size: 360
particle-size: 360
particle-size: 360
particle-size: 360
statement: return ()
particle-size: 360
particle-size: 360
particle-size: 360
particle-size: 360
statement: if node == 1 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 948
particle-size: 948
statement: return this'.data.length
particle-size: 948
particle-size: 948
particle-size: 948
particle-size: 948
statement: this'.__S1.__run()
particle-size: 196
particle-size: 196
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 196
particle-size: 196
statement: this'.data = this'.data[1..this'.size()]
particle-size: 196
particle-size: 196
statement: return this'.data.length
particle-size: 196
particle-size: 196
particle-size: 196
particle-size: 196
particle-size: 196
statement: return ()
particle-size: 196
particle-size: 196
particle-size: 196
particle-size: 196
statement: return ()
particle-size: 196
particle-size: 196
particle-size: 196
particle-size: 196
statement: if node == 2 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 948
particle-size: 948
statement: return this'.data.length
particle-size: 948
particle-size: 948
particle-size: 948
particle-size: 948
statement: this'.__S2.__run()
particle-size: 196
particle-size: 196
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 196
particle-size: 196
statement: this'.data = this'.data[1..this'.size()]
particle-size: 196
particle-size: 196
statement: return this'.data.length
particle-size: 196
particle-size: 196
particle-size: 196
particle-size: 196
particle-size: 196
statement: return ()
particle-size: 196
particle-size: 196
particle-size: 196
particle-size: 196
statement: return ()
particle-size: 196
particle-size: 196
particle-size: 196
particle-size: 196
statement: if node == 3 && this'.__S3.Q_in.size() {
    this'.__S3.__run();
}
particle-size: 948
particle-size: 948
statement: return this'.data.length
particle-size: 948
particle-size: 948
particle-size: 948
particle-size: 948
statement: this'.__S3.__run()
particle-size: 196
particle-size: 196
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 196
particle-size: 196
statement: this'.data = this'.data[1..this'.size()]
particle-size: 196
particle-size: 196
statement: return this'.data.length
particle-size: 196
particle-size: 196
particle-size: 196
particle-size: 196
particle-size: 196
statement: return ()
particle-size: 196
particle-size: 196
particle-size: 196
particle-size: 196
statement: return ()
particle-size: 196
particle-size: 196
particle-size: 196
particle-size: 196
statement: return ()
particle-size: 1044
particle-size: 1044
particle-size: 1044
particle-size: 96
repetition: 14
statement: __d.__step()
particle-size: 96
particle-size: 96
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 96
particle-size: 96
statement: return this'.data.length
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: return this'.data.length
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: return this'.data.length
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: return this'.data.length
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: return this'.data.length
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: return this'.data.length
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: return this'.data.length
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: return this'.data.length
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: (action,node) := this'.scheduler()
particle-size: 90
particle-size: 90
statement: actions := ([]: (R × R)[])
particle-size: 90
statement: for i in [0..4){
    if (if i == 0 {
        this'.__S0.Q_in;
    } else if i == 1 {
        this'.__S1.Q_in;
    } else if i == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__S0.Q_out;
    } else if i == 1 {
        this'.__S1.Q_out;
    } else if i == 2 {
        this'.__S2.Q_out;
    } else {
        this'.__S3.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 90
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
statement: actions ~= [(0,i)]
particle-size: 45
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
loop-index: 1
particle-size: 90
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
statement: actions ~= [(0,i)]
particle-size: 24
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
statement: actions ~= [(1,i)]
particle-size: 3
loop-index: 2
particle-size: 90
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
statement: actions ~= [(0,i)]
particle-size: 24
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
statement: actions ~= [(1,i)]
particle-size: 3
loop-index: 3
particle-size: 90
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
statement: actions ~= [(0,i)]
particle-size: 24
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 90
particle-size: 90
statement: return this'.data.length
particle-size: 90
particle-size: 90
particle-size: 90
statement: actions ~= [(1,i)]
particle-size: 3
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 90
particle-size: 90
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_out.size() {
    (pkt,port) := this'.__S0.Q_out.takeFront();
    if port == 1 {
        this'.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S3.Q_in.pushBack((pkt,1));
    }
}
particle-size: 9
particle-size: 9
statement: return this'.data.length
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if node == 1 && this'.__S1.Q_out.size() {
    (pkt,port) := this'.__S1.Q_out.takeFront();
    if port == 1 {
        this'.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S3.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 9
particle-size: 9
statement: return this'.data.length
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: (pkt,port) := this'.__S1.Q_out.takeFront()
particle-size: 3
particle-size: 3
statement: r := this'.front()
particle-size: 3
particle-size: 3
statement: return this'.data[0]
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.popFront()
particle-size: 3
particle-size: 3
statement: this'.data = this'.data[1..this'.size()]
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return r
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 1 {
    this'.__S2.Q_in.pushBack((pkt,3));
}
statement: this'.__S2.Q_in.pushBack((pkt,3))
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = this'.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if port == 2 {
    this'.__S3.Q_in.pushBack((pkt,2));
}
statement: this'.__S3.Q_in.pushBack((pkt,2))
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = this'.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if port == 3 {
    this'.__S0.Q_in.pushBack((pkt,1));
}
statement: this'.__S0.Q_in.pushBack((pkt,1))
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = this'.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 2 && this'.__S2.Q_out.size() {
    (pkt,port) := this'.__S2.Q_out.takeFront();
    if port == 1 {
        this'.__S3.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 9
particle-size: 9
statement: return this'.data.length
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: (pkt,port) := this'.__S2.Q_out.takeFront()
particle-size: 3
particle-size: 3
statement: r := this'.front()
particle-size: 3
particle-size: 3
statement: return this'.data[0]
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.popFront()
particle-size: 3
particle-size: 3
statement: this'.data = this'.data[1..this'.size()]
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return r
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 1 {
    this'.__S3.Q_in.pushBack((pkt,3));
}
statement: this'.__S3.Q_in.pushBack((pkt,3))
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = this'.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if port == 2 {
    this'.__S0.Q_in.pushBack((pkt,2));
}
statement: this'.__S0.Q_in.pushBack((pkt,2))
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = this'.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if port == 3 {
    this'.__S1.Q_in.pushBack((pkt,1));
}
statement: this'.__S1.Q_in.pushBack((pkt,1))
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = this'.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 3 && this'.__S3.Q_out.size() {
    (pkt,port) := this'.__S3.Q_out.takeFront();
    if port == 1 {
        this'.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this'.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this'.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 9
particle-size: 9
statement: return this'.data.length
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: (pkt,port) := this'.__S3.Q_out.takeFront()
particle-size: 3
particle-size: 3
statement: r := this'.front()
particle-size: 3
particle-size: 3
statement: return this'.data[0]
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.popFront()
particle-size: 3
particle-size: 3
statement: this'.data = this'.data[1..this'.size()]
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return r
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 1 {
    this'.__S0.Q_in.pushBack((pkt,3));
}
statement: this'.__S0.Q_in.pushBack((pkt,3))
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = this'.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if port == 2 {
    this'.__S1.Q_in.pushBack((pkt,2));
}
statement: this'.__S1.Q_in.pushBack((pkt,2))
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = this'.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if port == 3 {
    this'.__S2.Q_in.pushBack((pkt,1));
}
statement: this'.__S2.Q_in.pushBack((pkt,1))
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = this'.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 0 && this'.__S0.Q_in.size() {
    this'.__S0.__run();
}
particle-size: 117
particle-size: 117
statement: return this'.data.length
particle-size: 117
particle-size: 117
particle-size: 117
particle-size: 117
statement: this'.__S0.__run()
particle-size: 45
particle-size: 45
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 45
particle-size: 45
statement: this'.data = this'.data[1..this'.size()]
particle-size: 45
particle-size: 45
statement: return this'.data.length
particle-size: 45
particle-size: 45
particle-size: 45
particle-size: 45
particle-size: 45
statement: return ()
particle-size: 45
particle-size: 45
particle-size: 45
particle-size: 45
statement: return ()
particle-size: 45
particle-size: 45
particle-size: 45
particle-size: 45
statement: if node == 1 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 117
particle-size: 117
statement: return this'.data.length
particle-size: 117
particle-size: 117
particle-size: 117
particle-size: 117
statement: this'.__S1.__run()
particle-size: 24
particle-size: 24
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 24
particle-size: 24
statement: this'.data = this'.data[1..this'.size()]
particle-size: 24
particle-size: 24
statement: return this'.data.length
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: return ()
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: return ()
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: if node == 2 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 117
particle-size: 117
statement: return this'.data.length
particle-size: 117
particle-size: 117
particle-size: 117
particle-size: 117
statement: this'.__S2.__run()
particle-size: 24
particle-size: 24
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 24
particle-size: 24
statement: this'.data = this'.data[1..this'.size()]
particle-size: 24
particle-size: 24
statement: return this'.data.length
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: return ()
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: return ()
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: if node == 3 && this'.__S3.Q_in.size() {
    this'.__S3.__run();
}
particle-size: 117
particle-size: 117
statement: return this'.data.length
particle-size: 117
particle-size: 117
particle-size: 117
particle-size: 117
statement: this'.__S3.__run()
particle-size: 24
particle-size: 24
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 24
particle-size: 24
statement: this'.data = this'.data[1..this'.size()]
particle-size: 24
particle-size: 24
statement: return this'.data.length
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: return ()
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: return ()
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: return ()
particle-size: 132
particle-size: 132
particle-size: 132
particle-size: 16
repetition: 15
statement: __d.__step()
particle-size: 16
particle-size: 16
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return this'.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: (action,node) := this'.scheduler()
particle-size: 10
particle-size: 10
statement: actions := ([]: (R × R)[])
particle-size: 10
statement: for i in [0..4){
    if (if i == 0 {
        this'.__S0.Q_in;
    } else if i == 1 {
        this'.__S1.Q_in;
    } else if i == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this'.__S0.Q_out;
    } else if i == 1 {
        this'.__S1.Q_out;
    } else if i == 2 {
        this'.__S2.Q_out;
    } else {
        this'.__S3.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 10
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
statement: actions ~= [(0,i)]
particle-size: 4
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
loop-index: 1
particle-size: 10
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
statement: actions ~= [(0,i)]
particle-size: 2
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
loop-index: 2
particle-size: 10
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
statement: actions ~= [(0,i)]
particle-size: 2
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
loop-index: 3
particle-size: 10
statement: if (if i == 0 {
    this'.__S0.Q_in;
} else if i == 1 {
    this'.__S1.Q_in;
} else if i == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
statement: actions ~= [(0,i)]
particle-size: 2
statement: if (if i == 0 {
    this'.__S0.Q_out;
} else if i == 1 {
    this'.__S1.Q_out;
} else if i == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 10
particle-size: 10
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_in.size() {
    this'.__S0.__run();
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.__S0.__run()
particle-size: 4
particle-size: 4
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 4
particle-size: 4
statement: this'.data = this'.data[1..this'.size()]
particle-size: 4
particle-size: 4
statement: return this'.data.length
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: if node == 1 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.__S1.__run()
particle-size: 2
particle-size: 2
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 2
particle-size: 2
statement: this'.data = this'.data[1..this'.size()]
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if node == 2 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.__S2.__run()
particle-size: 2
particle-size: 2
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 2
particle-size: 2
statement: this'.data = this'.data[1..this'.size()]
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if node == 3 && this'.__S3.Q_in.size() {
    this'.__S3.__run();
}
particle-size: 10
particle-size: 10
statement: return this'.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: this'.__S3.__run()
particle-size: 2
particle-size: 2
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
} else {
    this'.Q_in.popFront();
}
statement: this'.Q_in.popFront()
particle-size: 2
particle-size: 2
statement: this'.data = this'.data[1..this'.size()]
particle-size: 2
particle-size: 2
statement: return this'.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 7
statement: assert(!(__d.__S0.Q_in.size() || __d.__S0.Q_out.size() || __d.__S1.Q_in.size() || __d.__S1.Q_out.size() || __d.__S2.Q_in.size() || __d.__S2.Q_out.size() || __d.__S3.Q_in.size() || __d.__S3.Q_out.size()))
particle-size: 7
particle-size: 7
statement: return this'.data.length
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: return this'.data.length
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: return this'.data.length
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: return this'.data.length
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: return this'.data.length
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: return this'.data.length
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: return this'.data.length
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: return this'.data.length
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: q₁ := Expectation((if 0 == 0 {
    __d.__S0.infected;
} else if 0 == 1 {
    __d.__S1.infected;
} else if 0 == 2 {
    __d.__S2.infected;
} else if 0 == 3 {
    __d.__S3.infected;
} else {
    assert(0);
}) + (if 1 == 0 {
    __d.__S0.infected;
} else if 1 == 1 {
    __d.__S1.infected;
} else if 1 == 2 {
    __d.__S2.infected;
} else if 1 == 3 {
    __d.__S3.infected;
} else {
    assert(0);
}) + (if 2 == 0 {
    __d.__S0.infected;
} else if 2 == 1 {
    __d.__S1.infected;
} else if 2 == 2 {
    __d.__S2.infected;
} else if 2 == 3 {
    __d.__S3.infected;
} else {
    assert(0);
}) + (if 3 == 0 {
    __d.__S0.infected;
} else if 3 == 1 {
    __d.__S1.infected;
} else if 3 == 2 {
    __d.__S2.infected;
} else if 3 == 3 {
    __d.__S3.infected;
} else {
    assert(0);
}))
particle-size: 7
statement: return (q₁)
particle-size: 7
E[q1_] = 94/27

real	6m2.495s
user	5m43.300s
sys	0m18.944s
