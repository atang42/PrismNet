normalizing...
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
main
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__D'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__D'()
 
Expression of type ABinaryExp:
__d := __D'()
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
__d.__H0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
__d.__H0.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
__d.__H0.Q_in.pushBack
 
Expression of type Identifier:
Packet'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Packet'()
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
((Packet'(),0))
 
Expression of type CallExp:
__d.__H0.Q_in.pushBack((Packet'(),0))
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
__d.__H0
 
Expression of type Identifier:
__run
 
Expression of type FieldExp:
__d.__H0.__run
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__H0.__run()
 
Expression of type LiteralExp:
10
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__step
 
Expression of type FieldExp:
__d.__step
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__step()
 
Expression of type RepeatExp:
repeat 10 {
    __d.__step();
}
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
__d.__H0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
__d.__H0.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
__d.__H0.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__H0.Q_in.size()
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
__d.__H0
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
__d.__H0.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
__d.__H0.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__H0.Q_out.size()
 
Expression of type ABinaryExp:
__d.__H0.Q_in.size() || __d.__H0.Q_out.size()
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__H1
 
Expression of type FieldExp:
__d.__H1
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
__d.__H1.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
__d.__H1.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__H1.Q_in.size()
 
Expression of type ABinaryExp:
__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__H1.Q_in.size()
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__H1
 
Expression of type FieldExp:
__d.__H1
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
__d.__H1.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
__d.__H1.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__H1.Q_out.size()
 
Expression of type ABinaryExp:
__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__H1.Q_in.size() || __d.__H1.Q_out.size()
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
__d.__S0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
__d.__S0.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
__d.__S0.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__S0.Q_in.size()
 
Expression of type ABinaryExp:
__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__H1.Q_in.size() || __d.__H1.Q_out.size() || __d.__S0.Q_in.size()
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
__d.__S0
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
__d.__S0.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
__d.__S0.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__S0.Q_out.size()
 
Expression of type ABinaryExp:
__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__H1.Q_in.size() || __d.__H1.Q_out.size() || __d.__S0.Q_in.size() || __d.__S0.Q_out.size()
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
__d.__S1
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
__d.__S1.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
__d.__S1.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__S1.Q_in.size()
 
Expression of type ABinaryExp:
__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__H1.Q_in.size() || __d.__H1.Q_out.size() || __d.__S0.Q_in.size() || __d.__S0.Q_out.size() || __d.__S1.Q_in.size()
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
__d.__S1
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
__d.__S1.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
__d.__S1.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__S1.Q_out.size()
 
Expression of type ABinaryExp:
__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__H1.Q_in.size() || __d.__H1.Q_out.size() || __d.__S0.Q_in.size() || __d.__S0.Q_out.size() || __d.__S1.Q_in.size() || __d.__S1.Q_out.size()
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
__d.__S2
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
__d.__S2.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
__d.__S2.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__S2.Q_in.size()
 
Expression of type ABinaryExp:
__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__H1.Q_in.size() || __d.__H1.Q_out.size() || __d.__S0.Q_in.size() || __d.__S0.Q_out.size() || __d.__S1.Q_in.size() || __d.__S1.Q_out.size() || __d.__S2.Q_in.size()
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
__d.__S2
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
__d.__S2.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
__d.__S2.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__S2.Q_out.size()
 
Expression of type ABinaryExp:
__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__H1.Q_in.size() || __d.__H1.Q_out.size() || __d.__S0.Q_in.size() || __d.__S0.Q_out.size() || __d.__S1.Q_in.size() || __d.__S1.Q_out.size() || __d.__S2.Q_in.size() || __d.__S2.Q_out.size()
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
__d.__S3
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
__d.__S3.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
__d.__S3.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__S3.Q_in.size()
 
Expression of type ABinaryExp:
__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__H1.Q_in.size() || __d.__H1.Q_out.size() || __d.__S0.Q_in.size() || __d.__S0.Q_out.size() || __d.__S1.Q_in.size() || __d.__S1.Q_out.size() || __d.__S2.Q_in.size() || __d.__S2.Q_out.size() || __d.__S3.Q_in.size()
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
__d.__S3
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
__d.__S3.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
__d.__S3.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__S3.Q_out.size()
 
Expression of type ABinaryExp:
(__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__H1.Q_in.size() || __d.__H1.Q_out.size() || __d.__S0.Q_in.size() || __d.__S0.Q_out.size() || __d.__S1.Q_in.size() || __d.__S1.Q_out.size() || __d.__S2.Q_in.size() || __d.__S2.Q_out.size() || __d.__S3.Q_in.size() || __d.__S3.Q_out.size())
 
Expression of type AUnaryExp:
!(__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__H1.Q_in.size() || __d.__H1.Q_out.size() || __d.__S0.Q_in.size() || __d.__S0.Q_out.size() || __d.__S1.Q_in.size() || __d.__S1.Q_out.size() || __d.__S2.Q_in.size() || __d.__S2.Q_out.size() || __d.__S3.Q_in.size() || __d.__S3.Q_out.size())
 
Expression of type AssertExp:
assert(!(__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__H1.Q_in.size() || __d.__H1.Q_out.size() || __d.__S0.Q_in.size() || __d.__S0.Q_out.size() || __d.__S1.Q_in.size() || __d.__S1.Q_out.size() || __d.__S2.Q_in.size() || __d.__S2.Q_out.size() || __d.__S3.Q_in.size() || __d.__S3.Q_out.size()))
 
Expression of type Identifier:
q1
 
Expression of type Identifier:
Expectation
 
Expression of type LiteralExp:
1
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
1 == 1
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__H1
 
Expression of type FieldExp:
__d.__H1
 
Expression of type Identifier:
arrived
 
Expression of type FieldExp:
__d.__H1.arrived
 
Expression of type LiteralExp:
0
 
Expression of type AssertExp:
assert(0)
 
Expression of type IteExp:
((if 1 == 1 {
    __d.__H1.arrived;
} else {
    assert(0);
}))
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
(((if 1 == 1 {
    __d.__H1.arrived;
} else {
    assert(0);
})) != 0)
 
Expression of type CallExp:
Expectation(((if 1 == 1 {
    __d.__H1.arrived;
} else {
    assert(0);
})) != 0)
 
Expression of type ABinaryExp:
q1 := Expectation(((if 1 == 1 {
    __d.__H1.arrived;
} else {
    assert(0);
})) != 0)
 
Expression of type Identifier:
(q1)
 
Expression of type ReturnExp:
return (q1)
 
Expression of type FunctionDef:
def main(){
    __d := __D'();
    __d.__H0.Q_in.pushBack((Packet'(),0));
    __d.__H0.__run();
    repeat 10 {
        __d.__step();
    }
    assert(!(__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__H1.Q_in.size() || __d.__H1.Q_out.size() || __d.__S0.Q_in.size() || __d.__S0.Q_out.size() || __d.__S1.Q_in.size() || __d.__S1.Q_out.size() || __d.__S2.Q_in.size() || __d.__S2.Q_out.size() || __d.__S3.Q_in.size() || __d.__S3.Q_out.size()));
    q1 := Expectation(((if 1 == 1 {
        __d.__H1.arrived;
    } else {
        assert(0);
    })) != 0);
    return (q1);
}
 
done with forToWhile
whileToRec normalization...
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
done with whileToRec
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
done with tuplesNormalizer
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
done with unreachableNormalizer
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
webppl translation...
translating meaning of __D
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
done with ifElseFunctional
Expression of type Identifier:
__D
 
Expression of type Identifier:
__H0
 
Expression of type Identifier:
__h0_ty
 
Expression of type VarDecl:
__H0: __h0_ty
 
Expression of type Identifier:
__H1
 
Expression of type Identifier:
__h1_ty
 
Expression of type VarDecl:
__H1: __h1_ty
 
Expression of type ABinaryExp:
__H0: __h0_ty , __H1: __h1_ty
 
Expression of type Identifier:
__S0
 
Expression of type Identifier:
__s0_ty
 
Expression of type VarDecl:
__S0: __s0_ty
 
Expression of type ABinaryExp:
__H0: __h0_ty , __H1: __h1_ty , __S0: __s0_ty
 
Expression of type Identifier:
__S1
 
Expression of type Identifier:
__s1_ty
 
Expression of type VarDecl:
__S1: __s1_ty
 
Expression of type ABinaryExp:
__H0: __h0_ty , __H1: __h1_ty , __S0: __s0_ty , __S1: __s1_ty
 
Expression of type Identifier:
__S2
 
Expression of type Identifier:
__s2_ty
 
Expression of type VarDecl:
__S2: __s2_ty
 
Expression of type ABinaryExp:
__H0: __h0_ty , __H1: __h1_ty , __S0: __s0_ty , __S1: __s1_ty , __S2: __s2_ty
 
Expression of type Identifier:
__S3
 
Expression of type Identifier:
__s3_ty
 
Expression of type VarDecl:
__S3: __s3_ty
 
Expression of type ABinaryExp:
__H0: __h0_ty , __H1: __h1_ty , __S0: __s0_ty , __S1: __s1_ty , __S2: __s2_ty , __S3: __s3_ty
 
Expression of type Identifier:
phase
 
Expression of type Identifier:
ℝ
 
Expression of type VarDecl:
phase: ℝ
 
Expression of type Identifier:
cur_node
 
Expression of type Identifier:
ℝ
 
Expression of type VarDecl:
cur_node: ℝ
 
Expression of type ABinaryExp:
phase: ℝ , cur_node: ℝ
 
Expression of type Identifier:
__D
 
Expression of type Identifier:
this
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
this.__H0
 
Expression of type Identifier:
__h0_ty'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__h0_ty'()
 
Expression of type ABinaryExp:
this.__H0 = __h0_ty'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
__H1
 
Expression of type FieldExp:
this.__H1
 
Expression of type Identifier:
__h1_ty'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__h1_ty'()
 
Expression of type ABinaryExp:
this.__H1 = __h1_ty'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this.__S0
 
Expression of type Identifier:
__s0_ty'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__s0_ty'()
 
Expression of type ABinaryExp:
this.__S0 = __s0_ty'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this.__S1
 
Expression of type Identifier:
__s1_ty'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__s1_ty'()
 
Expression of type ABinaryExp:
this.__S1 = __s1_ty'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this.__S2
 
Expression of type Identifier:
__s2_ty'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__s2_ty'()
 
Expression of type ABinaryExp:
this.__S2 = __s2_ty'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
this.__S3
 
Expression of type Identifier:
__s3_ty'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__s3_ty'()
 
Expression of type ABinaryExp:
this.__S3 = __s3_ty'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
phase
 
Expression of type FieldExp:
this.phase
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
this.phase = 0
 
Expression of type Identifier:
this
 
Expression of type Identifier:
cur_node
 
Expression of type FieldExp:
this.cur_node
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
this.cur_node = 0
 
Expression of type Identifier:
this
 
Expression of type ReturnExp:
return this
 
Expression of type FunctionDef:
def __D'(){
    this.__H0 = __h0_ty'();
    this.__H1 = __h1_ty'();
    this.__S0 = __s0_ty'();
    this.__S1 = __s1_ty'();
    this.__S2 = __s2_ty'();
    this.__S3 = __s3_ty'();
    this.phase = 0;
    this.cur_node = 0;
    return this;
}
 
Expression of type Identifier:
scheduler
 
Expression of type Identifier:
p
 
Expression of type LiteralExp:
0
 
Expression of type LiteralExp:
2
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
i
 
Expression of type LiteralExp:
0
 
Expression of type LiteralExp:
6
 
Expression of type Identifier:
_if
 
Expression of type LiteralExp:
2
 
Expression of type LiteralExp:
0
 
Expression of type LiteralExp:
0
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
cur_node
 
Expression of type FieldExp:
this'.cur_node
 
Expression of type TupleExp:
(0,this'.cur_node)
 
Expression of type TupleExp:
(2,0,(0,this'.cur_node))
 
Expression of type ReturnExp:
return (2,0,(0,this'.cur_node))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    return (2,0,(0,this'.cur_node));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
cur_node
 
Expression of type FieldExp:
this'.cur_node
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
this'.cur_node == 0
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
this'.__H0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__H0.Q_in
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
cur_node
 
Expression of type FieldExp:
this'.cur_node
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
this'.cur_node == 1
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H1
 
Expression of type FieldExp:
this'.__H1
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__H1.Q_in
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
cur_node
 
Expression of type FieldExp:
this'.cur_node
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
this'.cur_node == 2
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S0.Q_in
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
cur_node
 
Expression of type FieldExp:
this'.cur_node
 
Expression of type LiteralExp:
3
 
Expression of type ABinaryExp:
this'.cur_node == 3
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this'.__S1
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S1.Q_in
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
cur_node
 
Expression of type FieldExp:
this'.cur_node
 
Expression of type LiteralExp:
4
 
Expression of type ABinaryExp:
this'.cur_node == 4
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this'.__S2
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S2.Q_in
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
this'.__S3
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S3.Q_in
 
Expression of type IteExp:
if this'.cur_node == 4 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}
 
Expression of type IteExp:
if this'.cur_node == 3 {
    this'.__S1.Q_in;
} else if this'.cur_node == 4 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}
 
Expression of type IteExp:
if this'.cur_node == 2 {
    this'.__S0.Q_in;
} else if this'.cur_node == 3 {
    this'.__S1.Q_in;
} else if this'.cur_node == 4 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}
 
Expression of type IteExp:
if this'.cur_node == 1 {
    this'.__H1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S0.Q_in;
} else if this'.cur_node == 3 {
    this'.__S1.Q_in;
} else if this'.cur_node == 4 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}
 
Expression of type IteExp:
(if this'.cur_node == 0 {
    this'.__H0.Q_in;
} else if this'.cur_node == 1 {
    this'.__H1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S0.Q_in;
} else if this'.cur_node == 3 {
    this'.__S1.Q_in;
} else if this'.cur_node == 4 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
})
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
(if this'.cur_node == 0 {
    this'.__H0.Q_in;
} else if this'.cur_node == 1 {
    this'.__H1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S0.Q_in;
} else if this'.cur_node == 3 {
    this'.__S1.Q_in;
} else if this'.cur_node == 4 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
(if this'.cur_node == 0 {
    this'.__H0.Q_in;
} else if this'.cur_node == 1 {
    this'.__H1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S0.Q_in;
} else if this'.cur_node == 3 {
    this'.__S1.Q_in;
} else if this'.cur_node == 4 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size()
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
(if this'.cur_node == 0 {
    this'.__H0.Q_in;
} else if this'.cur_node == 1 {
    this'.__H1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S0.Q_in;
} else if this'.cur_node == 3 {
    this'.__S1.Q_in;
} else if this'.cur_node == 4 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if (if this'.cur_node == 0 {
    this'.__H0.Q_in;
} else if this'.cur_node == 1 {
    this'.__H1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S0.Q_in;
} else if this'.cur_node == 3 {
    this'.__S1.Q_in;
} else if this'.cur_node == 4 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if (if this'.cur_node == 0 {
        this'.__H0.Q_in;
    } else if this'.cur_node == 1 {
        this'.__H1.Q_in;
    } else if this'.cur_node == 2 {
        this'.__S0.Q_in;
    } else if this'.cur_node == 3 {
        this'.__S1.Q_in;
    } else if this'.cur_node == 4 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
_ret[0]
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
_ret[0] == 2
 
Expression of type LiteralExp:
2
 
Expression of type LiteralExp:
0
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
2
 
Expression of type IndexExp:
_ret[2]
 
Expression of type TupleExp:
(2,0,_ret[2])
 
Expression of type ReturnExp:
return (2,0,_ret[2])
 
Expression of type IteExp:
if _ret[0] == 2 {
    return (2,0,_ret[2]);
}
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
cur_node
 
Expression of type FieldExp:
this'.cur_node
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
cur_node
 
Expression of type FieldExp:
this'.cur_node
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
(this'.cur_node + 1)
 
Expression of type LiteralExp:
6
 
Expression of type ABinaryExp:
(this'.cur_node + 1) % 6
 
Expression of type ABinaryExp:
this'.cur_node = (this'.cur_node + 1) % 6
 
Expression of type ForExp:
for i in [0..6){
    def _if(){
        return (2,0,(0,this'.cur_node));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if (if this'.cur_node == 0 {
            this'.__H0.Q_in;
        } else if this'.cur_node == 1 {
            this'.__H1.Q_in;
        } else if this'.cur_node == 2 {
            this'.__S0.Q_in;
        } else if this'.cur_node == 3 {
            this'.__S1.Q_in;
        } else if this'.cur_node == 4 {
            this'.__S2.Q_in;
        } else {
            this'.__S3.Q_in;
        }).size() > 0 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    if _ret[0] == 2 {
        return (2,0,_ret[2]);
    }
    this' = _ret[1];
    this'.cur_node = (this'.cur_node + 1) % 6;
}
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
phase
 
Expression of type FieldExp:
this'.phase
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
this'.phase = 1
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
cur_node
 
Expression of type FieldExp:
this'.cur_node
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
this'.cur_node = 0
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    for i in [0..6){
        def _if(){
            return (2,0,(0,this'.cur_node));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if (if this'.cur_node == 0 {
                this'.__H0.Q_in;
            } else if this'.cur_node == 1 {
                this'.__H1.Q_in;
            } else if this'.cur_node == 2 {
                this'.__S0.Q_in;
            } else if this'.cur_node == 3 {
                this'.__S1.Q_in;
            } else if this'.cur_node == 4 {
                this'.__S2.Q_in;
            } else {
                this'.__S3.Q_in;
            }).size() > 0 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        if _ret[0] == 2 {
            return (2,0,_ret[2]);
        }
        this' = _ret[1];
        this'.cur_node = (this'.cur_node + 1) % 6;
    }
    this'.phase = 1;
    this'.cur_node = 0;
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
phase
 
Expression of type FieldExp:
this'.phase
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
this'.phase == 0
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if this'.phase == 0 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if this'.phase == 0 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
_ret[0]
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
_ret[0] == 2
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
2
 
Expression of type IndexExp:
_ret[2]
 
Expression of type ReturnExp:
return _ret[2]
 
Expression of type IteExp:
if _ret[0] == 2 {
    return _ret[2];
}
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
i
 
Expression of type LiteralExp:
0
 
Expression of type LiteralExp:
6
 
Expression of type Identifier:
_if
 
Expression of type LiteralExp:
2
 
Expression of type LiteralExp:
0
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
cur_node
 
Expression of type FieldExp:
this'.cur_node
 
Expression of type TupleExp:
(1,this'.cur_node)
 
Expression of type TupleExp:
(2,0,(1,this'.cur_node))
 
Expression of type ReturnExp:
return (2,0,(1,this'.cur_node))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    return (2,0,(1,this'.cur_node));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
cur_node
 
Expression of type FieldExp:
this'.cur_node
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
this'.cur_node == 0
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
this'.__H0
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__H0.Q_out
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
cur_node
 
Expression of type FieldExp:
this'.cur_node
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
this'.cur_node == 1
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H1
 
Expression of type FieldExp:
this'.__H1
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__H1.Q_out
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
cur_node
 
Expression of type FieldExp:
this'.cur_node
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
this'.cur_node == 2
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S0.Q_out
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
cur_node
 
Expression of type FieldExp:
this'.cur_node
 
Expression of type LiteralExp:
3
 
Expression of type ABinaryExp:
this'.cur_node == 3
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this'.__S1
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S1.Q_out
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
cur_node
 
Expression of type FieldExp:
this'.cur_node
 
Expression of type LiteralExp:
4
 
Expression of type ABinaryExp:
this'.cur_node == 4
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this'.__S2
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S2.Q_out
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
this'.__S3
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S3.Q_out
 
Expression of type IteExp:
if this'.cur_node == 4 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}
 
Expression of type IteExp:
if this'.cur_node == 3 {
    this'.__S1.Q_out;
} else if this'.cur_node == 4 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}
 
Expression of type IteExp:
if this'.cur_node == 2 {
    this'.__S0.Q_out;
} else if this'.cur_node == 3 {
    this'.__S1.Q_out;
} else if this'.cur_node == 4 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}
 
Expression of type IteExp:
if this'.cur_node == 1 {
    this'.__H1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S0.Q_out;
} else if this'.cur_node == 3 {
    this'.__S1.Q_out;
} else if this'.cur_node == 4 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}
 
Expression of type IteExp:
(if this'.cur_node == 0 {
    this'.__H0.Q_out;
} else if this'.cur_node == 1 {
    this'.__H1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S0.Q_out;
} else if this'.cur_node == 3 {
    this'.__S1.Q_out;
} else if this'.cur_node == 4 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
})
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
(if this'.cur_node == 0 {
    this'.__H0.Q_out;
} else if this'.cur_node == 1 {
    this'.__H1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S0.Q_out;
} else if this'.cur_node == 3 {
    this'.__S1.Q_out;
} else if this'.cur_node == 4 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
(if this'.cur_node == 0 {
    this'.__H0.Q_out;
} else if this'.cur_node == 1 {
    this'.__H1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S0.Q_out;
} else if this'.cur_node == 3 {
    this'.__S1.Q_out;
} else if this'.cur_node == 4 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size()
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
(if this'.cur_node == 0 {
    this'.__H0.Q_out;
} else if this'.cur_node == 1 {
    this'.__H1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S0.Q_out;
} else if this'.cur_node == 3 {
    this'.__S1.Q_out;
} else if this'.cur_node == 4 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if (if this'.cur_node == 0 {
    this'.__H0.Q_out;
} else if this'.cur_node == 1 {
    this'.__H1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S0.Q_out;
} else if this'.cur_node == 3 {
    this'.__S1.Q_out;
} else if this'.cur_node == 4 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if (if this'.cur_node == 0 {
        this'.__H0.Q_out;
    } else if this'.cur_node == 1 {
        this'.__H1.Q_out;
    } else if this'.cur_node == 2 {
        this'.__S0.Q_out;
    } else if this'.cur_node == 3 {
        this'.__S1.Q_out;
    } else if this'.cur_node == 4 {
        this'.__S2.Q_out;
    } else {
        this'.__S3.Q_out;
    }).size() > 0 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
_ret[0]
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
_ret[0] == 2
 
Expression of type LiteralExp:
2
 
Expression of type LiteralExp:
0
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
2
 
Expression of type IndexExp:
_ret[2]
 
Expression of type TupleExp:
(2,0,_ret[2])
 
Expression of type ReturnExp:
return (2,0,_ret[2])
 
Expression of type IteExp:
if _ret[0] == 2 {
    return (2,0,_ret[2]);
}
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
cur_node
 
Expression of type FieldExp:
this'.cur_node
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
cur_node
 
Expression of type FieldExp:
this'.cur_node
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
(this'.cur_node + 1)
 
Expression of type LiteralExp:
6
 
Expression of type ABinaryExp:
(this'.cur_node + 1) % 6
 
Expression of type ABinaryExp:
this'.cur_node = (this'.cur_node + 1) % 6
 
Expression of type ForExp:
for i in [0..6){
    def _if(){
        return (2,0,(1,this'.cur_node));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if (if this'.cur_node == 0 {
            this'.__H0.Q_out;
        } else if this'.cur_node == 1 {
            this'.__H1.Q_out;
        } else if this'.cur_node == 2 {
            this'.__S0.Q_out;
        } else if this'.cur_node == 3 {
            this'.__S1.Q_out;
        } else if this'.cur_node == 4 {
            this'.__S2.Q_out;
        } else {
            this'.__S3.Q_out;
        }).size() > 0 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    if _ret[0] == 2 {
        return (2,0,_ret[2]);
    }
    this' = _ret[1];
    this'.cur_node = (this'.cur_node + 1) % 6;
}
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
phase
 
Expression of type FieldExp:
this'.phase
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
this'.phase = 0
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
cur_node
 
Expression of type FieldExp:
this'.cur_node
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
this'.cur_node = 0
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    for i in [0..6){
        def _if(){
            return (2,0,(1,this'.cur_node));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if (if this'.cur_node == 0 {
                this'.__H0.Q_out;
            } else if this'.cur_node == 1 {
                this'.__H1.Q_out;
            } else if this'.cur_node == 2 {
                this'.__S0.Q_out;
            } else if this'.cur_node == 3 {
                this'.__S1.Q_out;
            } else if this'.cur_node == 4 {
                this'.__S2.Q_out;
            } else {
                this'.__S3.Q_out;
            }).size() > 0 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        if _ret[0] == 2 {
            return (2,0,_ret[2]);
        }
        this' = _ret[1];
        this'.cur_node = (this'.cur_node + 1) % 6;
    }
    this'.phase = 0;
    this'.cur_node = 0;
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
phase
 
Expression of type FieldExp:
this'.phase
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
this'.phase == 1
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if this'.phase == 1 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if this'.phase == 1 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
_ret[0]
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
_ret[0] == 2
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
2
 
Expression of type IndexExp:
_ret[2]
 
Expression of type ReturnExp:
return _ret[2]
 
Expression of type IteExp:
if _ret[0] == 2 {
    return _ret[2];
}
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type ForExp:
for p in [0..2){
    def _if(){
        for i in [0..6){
            def _if(){
                return (2,0,(0,this'.cur_node));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if (if this'.cur_node == 0 {
                    this'.__H0.Q_in;
                } else if this'.cur_node == 1 {
                    this'.__H1.Q_in;
                } else if this'.cur_node == 2 {
                    this'.__S0.Q_in;
                } else if this'.cur_node == 3 {
                    this'.__S1.Q_in;
                } else if this'.cur_node == 4 {
                    this'.__S2.Q_in;
                } else {
                    this'.__S3.Q_in;
                }).size() > 0 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            if _ret[0] == 2 {
                return (2,0,_ret[2]);
            }
            this' = _ret[1];
            this'.cur_node = (this'.cur_node + 1) % 6;
        }
        this'.phase = 1;
        this'.cur_node = 0;
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if this'.phase == 0 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    if _ret[0] == 2 {
        return _ret[2];
    }
    this' = _ret[1];
    def _if(){
        for i in [0..6){
            def _if(){
                return (2,0,(1,this'.cur_node));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if (if this'.cur_node == 0 {
                    this'.__H0.Q_out;
                } else if this'.cur_node == 1 {
                    this'.__H1.Q_out;
                } else if this'.cur_node == 2 {
                    this'.__S0.Q_out;
                } else if this'.cur_node == 3 {
                    this'.__S1.Q_out;
                } else if this'.cur_node == 4 {
                    this'.__S2.Q_out;
                } else {
                    this'.__S3.Q_out;
                }).size() > 0 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            if _ret[0] == 2 {
                return (2,0,_ret[2]);
            }
            this' = _ret[1];
            this'.cur_node = (this'.cur_node + 1) % 6;
        }
        this'.phase = 0;
        this'.cur_node = 0;
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if this'.phase == 1 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    if _ret[0] == 2 {
        return _ret[2];
    }
    this' = _ret[1];
}
 
Expression of type LiteralExp:
0
 
Expression of type AssertExp:
assert(0)
 
Expression of type FunctionDef:
def scheduler(){
    for p in [0..2){
        def _if(){
            for i in [0..6){
                def _if(){
                    return (2,0,(0,this'.cur_node));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if (if this'.cur_node == 0 {
                        this'.__H0.Q_in;
                    } else if this'.cur_node == 1 {
                        this'.__H1.Q_in;
                    } else if this'.cur_node == 2 {
                        this'.__S0.Q_in;
                    } else if this'.cur_node == 3 {
                        this'.__S1.Q_in;
                    } else if this'.cur_node == 4 {
                        this'.__S2.Q_in;
                    } else {
                        this'.__S3.Q_in;
                    }).size() > 0 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                if _ret[0] == 2 {
                    return (2,0,_ret[2]);
                }
                this' = _ret[1];
                this'.cur_node = (this'.cur_node + 1) % 6;
            }
            this'.phase = 1;
            this'.cur_node = 0;
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if this'.phase == 0 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        if _ret[0] == 2 {
            return _ret[2];
        }
        this' = _ret[1];
        def _if(){
            for i in [0..6){
                def _if(){
                    return (2,0,(1,this'.cur_node));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if (if this'.cur_node == 0 {
                        this'.__H0.Q_out;
                    } else if this'.cur_node == 1 {
                        this'.__H1.Q_out;
                    } else if this'.cur_node == 2 {
                        this'.__S0.Q_out;
                    } else if this'.cur_node == 3 {
                        this'.__S1.Q_out;
                    } else if this'.cur_node == 4 {
                        this'.__S2.Q_out;
                    } else {
                        this'.__S3.Q_out;
                    }).size() > 0 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                if _ret[0] == 2 {
                    return (2,0,_ret[2]);
                }
                this' = _ret[1];
                this'.cur_node = (this'.cur_node + 1) % 6;
            }
            this'.phase = 0;
            this'.cur_node = 0;
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if this'.phase == 1 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        if _ret[0] == 2 {
            return _ret[2];
        }
        this' = _ret[1];
    }
    assert(0);
}
 
Expression of type Identifier:
__step
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
action
 
Expression of type Identifier:
node
 
Expression of type TupleExp:
(action,node)
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
scheduler
 
Expression of type FieldExp:
this'.scheduler
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.scheduler()
 
Expression of type ABinaryExp:
(action,node) := this'.scheduler()
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
pkt
 
Expression of type Identifier:
port
 
Expression of type TupleExp:
(pkt,port)
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
this'.__H0
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__H0.Q_out
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.__H0.Q_out.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__H0.Q_out.takeFront()
 
Expression of type ABinaryExp:
(pkt,port) := this'.__H0.Q_out.takeFront()
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S0.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__S0.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
1
 
Expression of type TupleExp:
((pkt,1))
 
Expression of type CallExp:
this'.__S0.Q_in.pushBack((pkt,1))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S0.Q_in.pushBack((pkt,1));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
port == 1
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 1 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 1 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    (pkt,port) := this'.__H0.Q_out.takeFront();
    def _if(){
        this'.__S0.Q_in.pushBack((pkt,1));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 1 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
node
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
node == 0
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
this'.__H0
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__H0.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__H0.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__H0.Q_out.size()
 
Expression of type ABinaryExp:
node == 0 && this'.__H0.Q_out.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if node == 0 && this'.__H0.Q_out.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if node == 0 && this'.__H0.Q_out.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
pkt
 
Expression of type Identifier:
port
 
Expression of type TupleExp:
(pkt,port)
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H1
 
Expression of type FieldExp:
this'.__H1
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__H1.Q_out
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.__H1.Q_out.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__H1.Q_out.takeFront()
 
Expression of type ABinaryExp:
(pkt,port) := this'.__H1.Q_out.takeFront()
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
this'.__S3
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S3.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__S3.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
3
 
Expression of type TupleExp:
((pkt,3))
 
Expression of type CallExp:
this'.__S3.Q_in.pushBack((pkt,3))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S3.Q_in.pushBack((pkt,3));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
port == 1
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 1 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 1 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    (pkt,port) := this'.__H1.Q_out.takeFront();
    def _if(){
        this'.__S3.Q_in.pushBack((pkt,3));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 1 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
node
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
node == 1
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H1
 
Expression of type FieldExp:
this'.__H1
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__H1.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__H1.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__H1.Q_out.size()
 
Expression of type ABinaryExp:
node == 1 && this'.__H1.Q_out.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if node == 1 && this'.__H1.Q_out.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if node == 1 && this'.__H1.Q_out.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
pkt
 
Expression of type Identifier:
port
 
Expression of type TupleExp:
(pkt,port)
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S0.Q_out
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.__S0.Q_out.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S0.Q_out.takeFront()
 
Expression of type ABinaryExp:
(pkt,port) := this'.__S0.Q_out.takeFront()
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
this'.__H0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__H0.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__H0.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
1
 
Expression of type TupleExp:
((pkt,1))
 
Expression of type CallExp:
this'.__H0.Q_in.pushBack((pkt,1))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__H0.Q_in.pushBack((pkt,1));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
port == 1
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 1 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 1 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this'.__S1
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S1.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__S1.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
1
 
Expression of type TupleExp:
((pkt,1))
 
Expression of type CallExp:
this'.__S1.Q_in.pushBack((pkt,1))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S1.Q_in.pushBack((pkt,1));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
port == 2
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 2 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 2 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this'.__S2
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S2.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__S2.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
1
 
Expression of type TupleExp:
((pkt,1))
 
Expression of type CallExp:
this'.__S2.Q_in.pushBack((pkt,1))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S2.Q_in.pushBack((pkt,1));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
3
 
Expression of type ABinaryExp:
port == 3
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 3 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 3 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    (pkt,port) := this'.__S0.Q_out.takeFront();
    def _if(){
        this'.__H0.Q_in.pushBack((pkt,1));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 1 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__S1.Q_in.pushBack((pkt,1));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 2 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__S2.Q_in.pushBack((pkt,1));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 3 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
node
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
node == 2
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S0.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S0.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S0.Q_out.size()
 
Expression of type ABinaryExp:
node == 2 && this'.__S0.Q_out.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if node == 2 && this'.__S0.Q_out.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if node == 2 && this'.__S0.Q_out.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
pkt
 
Expression of type Identifier:
port
 
Expression of type TupleExp:
(pkt,port)
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this'.__S1
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S1.Q_out
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.__S1.Q_out.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S1.Q_out.takeFront()
 
Expression of type ABinaryExp:
(pkt,port) := this'.__S1.Q_out.takeFront()
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S0.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__S0.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
2
 
Expression of type TupleExp:
((pkt,2))
 
Expression of type CallExp:
this'.__S0.Q_in.pushBack((pkt,2))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S0.Q_in.pushBack((pkt,2));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
port == 1
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 1 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 1 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
this'.__S3
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S3.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__S3.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
1
 
Expression of type TupleExp:
((pkt,1))
 
Expression of type CallExp:
this'.__S3.Q_in.pushBack((pkt,1))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S3.Q_in.pushBack((pkt,1));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
port == 2
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 2 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 2 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    (pkt,port) := this'.__S1.Q_out.takeFront();
    def _if(){
        this'.__S0.Q_in.pushBack((pkt,2));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 1 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__S3.Q_in.pushBack((pkt,1));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 2 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
node
 
Expression of type LiteralExp:
3
 
Expression of type ABinaryExp:
node == 3
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this'.__S1
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S1.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S1.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S1.Q_out.size()
 
Expression of type ABinaryExp:
node == 3 && this'.__S1.Q_out.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if node == 3 && this'.__S1.Q_out.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if node == 3 && this'.__S1.Q_out.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
pkt
 
Expression of type Identifier:
port
 
Expression of type TupleExp:
(pkt,port)
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this'.__S2
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S2.Q_out
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.__S2.Q_out.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S2.Q_out.takeFront()
 
Expression of type ABinaryExp:
(pkt,port) := this'.__S2.Q_out.takeFront()
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S0.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__S0.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
3
 
Expression of type TupleExp:
((pkt,3))
 
Expression of type CallExp:
this'.__S0.Q_in.pushBack((pkt,3))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S0.Q_in.pushBack((pkt,3));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
port == 1
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 1 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 1 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
this'.__S3
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S3.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__S3.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
2
 
Expression of type TupleExp:
((pkt,2))
 
Expression of type CallExp:
this'.__S3.Q_in.pushBack((pkt,2))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S3.Q_in.pushBack((pkt,2));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
port == 2
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 2 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 2 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    (pkt,port) := this'.__S2.Q_out.takeFront();
    def _if(){
        this'.__S0.Q_in.pushBack((pkt,3));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 1 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__S3.Q_in.pushBack((pkt,2));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 2 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
node
 
Expression of type LiteralExp:
4
 
Expression of type ABinaryExp:
node == 4
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this'.__S2
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S2.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S2.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S2.Q_out.size()
 
Expression of type ABinaryExp:
node == 4 && this'.__S2.Q_out.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if node == 4 && this'.__S2.Q_out.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if node == 4 && this'.__S2.Q_out.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
pkt
 
Expression of type Identifier:
port
 
Expression of type TupleExp:
(pkt,port)
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
this'.__S3
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S3.Q_out
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.__S3.Q_out.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S3.Q_out.takeFront()
 
Expression of type ABinaryExp:
(pkt,port) := this'.__S3.Q_out.takeFront()
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this'.__S1
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S1.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__S1.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
2
 
Expression of type TupleExp:
((pkt,2))
 
Expression of type CallExp:
this'.__S1.Q_in.pushBack((pkt,2))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S1.Q_in.pushBack((pkt,2));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
port == 1
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 1 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 1 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this'.__S2
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S2.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__S2.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
2
 
Expression of type TupleExp:
((pkt,2))
 
Expression of type CallExp:
this'.__S2.Q_in.pushBack((pkt,2))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S2.Q_in.pushBack((pkt,2));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
port == 2
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 2 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 2 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H1
 
Expression of type FieldExp:
this'.__H1
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__H1.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__H1.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
1
 
Expression of type TupleExp:
((pkt,1))
 
Expression of type CallExp:
this'.__H1.Q_in.pushBack((pkt,1))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__H1.Q_in.pushBack((pkt,1));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
3
 
Expression of type ABinaryExp:
port == 3
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 3 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 3 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    (pkt,port) := this'.__S3.Q_out.takeFront();
    def _if(){
        this'.__S1.Q_in.pushBack((pkt,2));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 1 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__S2.Q_in.pushBack((pkt,2));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 2 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__H1.Q_in.pushBack((pkt,1));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 3 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
node
 
Expression of type LiteralExp:
5
 
Expression of type ABinaryExp:
node == 5
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
this'.__S3
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S3.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S3.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S3.Q_out.size()
 
Expression of type ABinaryExp:
node == 5 && this'.__S3.Q_out.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if node == 5 && this'.__S3.Q_out.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if node == 5 && this'.__S3.Q_out.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    def _if(){
        (pkt,port) := this'.__H0.Q_out.takeFront();
        def _if(){
            this'.__S0.Q_in.pushBack((pkt,1));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 1 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if node == 0 && this'.__H0.Q_out.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        (pkt,port) := this'.__H1.Q_out.takeFront();
        def _if(){
            this'.__S3.Q_in.pushBack((pkt,3));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 1 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if node == 1 && this'.__H1.Q_out.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        (pkt,port) := this'.__S0.Q_out.takeFront();
        def _if(){
            this'.__H0.Q_in.pushBack((pkt,1));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 1 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__S1.Q_in.pushBack((pkt,1));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 2 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__S2.Q_in.pushBack((pkt,1));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 3 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if node == 2 && this'.__S0.Q_out.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        (pkt,port) := this'.__S1.Q_out.takeFront();
        def _if(){
            this'.__S0.Q_in.pushBack((pkt,2));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 1 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__S3.Q_in.pushBack((pkt,1));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 2 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if node == 3 && this'.__S1.Q_out.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        (pkt,port) := this'.__S2.Q_out.takeFront();
        def _if(){
            this'.__S0.Q_in.pushBack((pkt,3));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 1 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__S3.Q_in.pushBack((pkt,2));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 2 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if node == 4 && this'.__S2.Q_out.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        (pkt,port) := this'.__S3.Q_out.takeFront();
        def _if(){
            this'.__S1.Q_in.pushBack((pkt,2));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 1 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__S2.Q_in.pushBack((pkt,2));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 2 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__H1.Q_in.pushBack((pkt,1));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 3 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if node == 5 && this'.__S3.Q_out.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
this'.__H0
 
Expression of type Identifier:
__run
 
Expression of type FieldExp:
this'.__H0.__run
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__H0.__run()
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__H0.__run();
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
node
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
node == 0
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
this'.__H0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__H0.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__H0.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__H0.Q_in.size()
 
Expression of type ABinaryExp:
node == 0 && this'.__H0.Q_in.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if node == 0 && this'.__H0.Q_in.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if node == 0 && this'.__H0.Q_in.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H1
 
Expression of type FieldExp:
this'.__H1
 
Expression of type Identifier:
__run
 
Expression of type FieldExp:
this'.__H1.__run
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__H1.__run()
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__H1.__run();
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
node
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
node == 1
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H1
 
Expression of type FieldExp:
this'.__H1
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__H1.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__H1.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__H1.Q_in.size()
 
Expression of type ABinaryExp:
node == 1 && this'.__H1.Q_in.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if node == 1 && this'.__H1.Q_in.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if node == 1 && this'.__H1.Q_in.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
__run
 
Expression of type FieldExp:
this'.__S0.__run
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S0.__run()
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S0.__run();
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
node
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
node == 2
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S0.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S0.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S0.Q_in.size()
 
Expression of type ABinaryExp:
node == 2 && this'.__S0.Q_in.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if node == 2 && this'.__S0.Q_in.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if node == 2 && this'.__S0.Q_in.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this'.__S1
 
Expression of type Identifier:
__run
 
Expression of type FieldExp:
this'.__S1.__run
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S1.__run()
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S1.__run();
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
node
 
Expression of type LiteralExp:
3
 
Expression of type ABinaryExp:
node == 3
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this'.__S1
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S1.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S1.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S1.Q_in.size()
 
Expression of type ABinaryExp:
node == 3 && this'.__S1.Q_in.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if node == 3 && this'.__S1.Q_in.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if node == 3 && this'.__S1.Q_in.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this'.__S2
 
Expression of type Identifier:
__run
 
Expression of type FieldExp:
this'.__S2.__run
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S2.__run()
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S2.__run();
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
node
 
Expression of type LiteralExp:
4
 
Expression of type ABinaryExp:
node == 4
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this'.__S2
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S2.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S2.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S2.Q_in.size()
 
Expression of type ABinaryExp:
node == 4 && this'.__S2.Q_in.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if node == 4 && this'.__S2.Q_in.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if node == 4 && this'.__S2.Q_in.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
this'.__S3
 
Expression of type Identifier:
__run
 
Expression of type FieldExp:
this'.__S3.__run
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S3.__run()
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S3.__run();
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
node
 
Expression of type LiteralExp:
5
 
Expression of type ABinaryExp:
node == 5
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
this'.__S3
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S3.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S3.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S3.Q_in.size()
 
Expression of type ABinaryExp:
node == 5 && this'.__S3.Q_in.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if node == 5 && this'.__S3.Q_in.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if node == 5 && this'.__S3.Q_in.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    def _if(){
        this'.__H0.__run();
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if node == 0 && this'.__H0.Q_in.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__H1.__run();
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if node == 1 && this'.__H1.Q_in.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__S0.__run();
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if node == 2 && this'.__S0.Q_in.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__S1.__run();
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if node == 3 && this'.__S1.Q_in.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__S2.__run();
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if node == 4 && this'.__S2.Q_in.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__S3.__run();
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if node == 5 && this'.__S3.Q_in.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
action
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if action {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if action {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    (action,node) := this'.scheduler();
    def _if(){
        def _if(){
            (pkt,port) := this'.__H0.Q_out.takeFront();
            def _if(){
                this'.__S0.Q_in.pushBack((pkt,1));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 1 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if node == 0 && this'.__H0.Q_out.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            (pkt,port) := this'.__H1.Q_out.takeFront();
            def _if(){
                this'.__S3.Q_in.pushBack((pkt,3));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 1 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if node == 1 && this'.__H1.Q_out.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            (pkt,port) := this'.__S0.Q_out.takeFront();
            def _if(){
                this'.__H0.Q_in.pushBack((pkt,1));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 1 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__S1.Q_in.pushBack((pkt,1));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 2 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__S2.Q_in.pushBack((pkt,1));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 3 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if node == 2 && this'.__S0.Q_out.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            (pkt,port) := this'.__S1.Q_out.takeFront();
            def _if(){
                this'.__S0.Q_in.pushBack((pkt,2));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 1 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__S3.Q_in.pushBack((pkt,1));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 2 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if node == 3 && this'.__S1.Q_out.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            (pkt,port) := this'.__S2.Q_out.takeFront();
            def _if(){
                this'.__S0.Q_in.pushBack((pkt,3));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 1 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__S3.Q_in.pushBack((pkt,2));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 2 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if node == 4 && this'.__S2.Q_out.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            (pkt,port) := this'.__S3.Q_out.takeFront();
            def _if(){
                this'.__S1.Q_in.pushBack((pkt,2));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 1 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__S2.Q_in.pushBack((pkt,2));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 2 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__H1.Q_in.pushBack((pkt,1));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 3 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if node == 5 && this'.__S3.Q_out.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def _else(){
        def _if(){
            this'.__H0.__run();
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if node == 0 && this'.__H0.Q_in.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__H1.__run();
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if node == 1 && this'.__H1.Q_in.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__S0.__run();
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if node == 2 && this'.__S0.Q_in.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__S1.__run();
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if node == 3 && this'.__S1.Q_in.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__S2.__run();
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if node == 4 && this'.__S2.Q_in.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__S3.__run();
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if node == 5 && this'.__S3.Q_in.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def eval_if(){
        if action {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
this'.__H0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__H0.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__H0.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__H0.Q_in.size()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
this'.__H0
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__H0.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__H0.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__H0.Q_out.size()
 
Expression of type ABinaryExp:
this'.__H0.Q_in.size() || this'.__H0.Q_out.size()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H1
 
Expression of type FieldExp:
this'.__H1
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__H1.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__H1.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__H1.Q_in.size()
 
Expression of type ABinaryExp:
this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H1
 
Expression of type FieldExp:
this'.__H1
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__H1.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__H1.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__H1.Q_out.size()
 
Expression of type ABinaryExp:
this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S0.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S0.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S0.Q_in.size()
 
Expression of type ABinaryExp:
this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() || this'.__S0.Q_in.size()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S0.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S0.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S0.Q_out.size()
 
Expression of type ABinaryExp:
this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() || this'.__S0.Q_in.size() || this'.__S0.Q_out.size()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this'.__S1
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S1.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S1.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S1.Q_in.size()
 
Expression of type ABinaryExp:
this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() || this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this'.__S1
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S1.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S1.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S1.Q_out.size()
 
Expression of type ABinaryExp:
this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() || this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this'.__S2
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S2.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S2.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S2.Q_in.size()
 
Expression of type ABinaryExp:
this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() || this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this'.__S2
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S2.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S2.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S2.Q_out.size()
 
Expression of type ABinaryExp:
this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() || this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
this'.__S3
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S3.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S3.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S3.Q_in.size()
 
Expression of type ABinaryExp:
this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() || this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
this'.__S3
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S3.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S3.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S3.Q_out.size()
 
Expression of type ABinaryExp:
this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() || this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() || this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() || this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type TupleExp:
()
 
Expression of type ReturnExp:
return ()
 
Expression of type FunctionDef:
def __step(){
    def _if(){
        (action,node) := this'.scheduler();
        def _if(){
            def _if(){
                (pkt,port) := this'.__H0.Q_out.takeFront();
                def _if(){
                    this'.__S0.Q_in.pushBack((pkt,1));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 1 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if node == 0 && this'.__H0.Q_out.size() {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                (pkt,port) := this'.__H1.Q_out.takeFront();
                def _if(){
                    this'.__S3.Q_in.pushBack((pkt,3));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 1 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if node == 1 && this'.__H1.Q_out.size() {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                (pkt,port) := this'.__S0.Q_out.takeFront();
                def _if(){
                    this'.__H0.Q_in.pushBack((pkt,1));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 1 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S1.Q_in.pushBack((pkt,1));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 2 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S2.Q_in.pushBack((pkt,1));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 3 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if node == 2 && this'.__S0.Q_out.size() {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                (pkt,port) := this'.__S1.Q_out.takeFront();
                def _if(){
                    this'.__S0.Q_in.pushBack((pkt,2));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 1 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S3.Q_in.pushBack((pkt,1));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 2 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if node == 3 && this'.__S1.Q_out.size() {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                (pkt,port) := this'.__S2.Q_out.takeFront();
                def _if(){
                    this'.__S0.Q_in.pushBack((pkt,3));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 1 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S3.Q_in.pushBack((pkt,2));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 2 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if node == 4 && this'.__S2.Q_out.size() {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                (pkt,port) := this'.__S3.Q_out.takeFront();
                def _if(){
                    this'.__S1.Q_in.pushBack((pkt,2));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 1 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S2.Q_in.pushBack((pkt,2));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 2 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__H1.Q_in.pushBack((pkt,1));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 3 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if node == 5 && this'.__S3.Q_out.size() {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def _else(){
            def _if(){
                this'.__H0.__run();
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if node == 0 && this'.__H0.Q_in.size() {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__H1.__run();
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if node == 1 && this'.__H1.Q_in.size() {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__S0.__run();
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if node == 2 && this'.__S0.Q_in.size() {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__S1.__run();
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if node == 3 && this'.__S1.Q_in.size() {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__S2.__run();
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if node == 4 && this'.__S2.Q_in.size() {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__S3.__run();
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if node == 5 && this'.__S3.Q_in.size() {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def eval_if(){
            if action {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() || this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return ();
}
 
Expression of type CompoundDecl:
{
    __H0: __h0_ty , __H1: __h1_ty , __S0: __s0_ty , __S1: __s1_ty , __S2: __s2_ty , __S3: __s3_ty;
    phase: ℝ , cur_node: ℝ;
    def __D'(){
        this.__H0 = __h0_ty'();
        this.__H1 = __h1_ty'();
        this.__S0 = __s0_ty'();
        this.__S1 = __s1_ty'();
        this.__S2 = __s2_ty'();
        this.__S3 = __s3_ty'();
        this.phase = 0;
        this.cur_node = 0;
        return this;
    }
    def scheduler(){
        for p in [0..2){
            def _if(){
                for i in [0..6){
                    def _if(){
                        return (2,0,(0,this'.cur_node));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if (if this'.cur_node == 0 {
                            this'.__H0.Q_in;
                        } else if this'.cur_node == 1 {
                            this'.__H1.Q_in;
                        } else if this'.cur_node == 2 {
                            this'.__S0.Q_in;
                        } else if this'.cur_node == 3 {
                            this'.__S1.Q_in;
                        } else if this'.cur_node == 4 {
                            this'.__S2.Q_in;
                        } else {
                            this'.__S3.Q_in;
                        }).size() > 0 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    if _ret[0] == 2 {
                        return (2,0,_ret[2]);
                    }
                    this' = _ret[1];
                    this'.cur_node = (this'.cur_node + 1) % 6;
                }
                this'.phase = 1;
                this'.cur_node = 0;
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if this'.phase == 0 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            if _ret[0] == 2 {
                return _ret[2];
            }
            this' = _ret[1];
            def _if(){
                for i in [0..6){
                    def _if(){
                        return (2,0,(1,this'.cur_node));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if (if this'.cur_node == 0 {
                            this'.__H0.Q_out;
                        } else if this'.cur_node == 1 {
                            this'.__H1.Q_out;
                        } else if this'.cur_node == 2 {
                            this'.__S0.Q_out;
                        } else if this'.cur_node == 3 {
                            this'.__S1.Q_out;
                        } else if this'.cur_node == 4 {
                            this'.__S2.Q_out;
                        } else {
                            this'.__S3.Q_out;
                        }).size() > 0 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    if _ret[0] == 2 {
                        return (2,0,_ret[2]);
                    }
                    this' = _ret[1];
                    this'.cur_node = (this'.cur_node + 1) % 6;
                }
                this'.phase = 0;
                this'.cur_node = 0;
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if this'.phase == 1 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            if _ret[0] == 2 {
                return _ret[2];
            }
            this' = _ret[1];
        }
        assert(0);
    }
    def __step(){
        def _if(){
            (action,node) := this'.scheduler();
            def _if(){
                def _if(){
                    (pkt,port) := this'.__H0.Q_out.takeFront();
                    def _if(){
                        this'.__S0.Q_in.pushBack((pkt,1));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 1 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 0 && this'.__H0.Q_out.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    (pkt,port) := this'.__H1.Q_out.takeFront();
                    def _if(){
                        this'.__S3.Q_in.pushBack((pkt,3));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 1 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 1 && this'.__H1.Q_out.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    (pkt,port) := this'.__S0.Q_out.takeFront();
                    def _if(){
                        this'.__H0.Q_in.pushBack((pkt,1));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 1 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S1.Q_in.pushBack((pkt,1));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 2 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S2.Q_in.pushBack((pkt,1));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 3 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 2 && this'.__S0.Q_out.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    (pkt,port) := this'.__S1.Q_out.takeFront();
                    def _if(){
                        this'.__S0.Q_in.pushBack((pkt,2));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 1 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S3.Q_in.pushBack((pkt,1));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 2 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 3 && this'.__S1.Q_out.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    (pkt,port) := this'.__S2.Q_out.takeFront();
                    def _if(){
                        this'.__S0.Q_in.pushBack((pkt,3));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 1 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S3.Q_in.pushBack((pkt,2));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 2 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 4 && this'.__S2.Q_out.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    (pkt,port) := this'.__S3.Q_out.takeFront();
                    def _if(){
                        this'.__S1.Q_in.pushBack((pkt,2));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 1 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S2.Q_in.pushBack((pkt,2));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 2 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__H1.Q_in.pushBack((pkt,1));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 3 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 5 && this'.__S3.Q_out.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def _else(){
                def _if(){
                    this'.__H0.__run();
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 0 && this'.__H0.Q_in.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__H1.__run();
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 1 && this'.__H1.Q_in.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S0.__run();
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 2 && this'.__S0.Q_in.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S1.__run();
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 3 && this'.__S1.Q_in.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S2.__run();
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 4 && this'.__S2.Q_in.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S3.__run();
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 5 && this'.__S3.Q_in.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def eval_if(){
                if action {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() || this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return ();
    }
}
 
Expression of type DatDecl:
dat __D{
    __H0: __h0_ty , __H1: __h1_ty , __S0: __s0_ty , __S1: __s1_ty , __S2: __s2_ty , __S3: __s3_ty;
    phase: ℝ , cur_node: ℝ;
    def __D'(){
        this.__H0 = __h0_ty'();
        this.__H1 = __h1_ty'();
        this.__S0 = __s0_ty'();
        this.__S1 = __s1_ty'();
        this.__S2 = __s2_ty'();
        this.__S3 = __s3_ty'();
        this.phase = 0;
        this.cur_node = 0;
        return this;
    }
    def scheduler(){
        for p in [0..2){
            def _if(){
                for i in [0..6){
                    def _if(){
                        return (2,0,(0,this'.cur_node));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if (if this'.cur_node == 0 {
                            this'.__H0.Q_in;
                        } else if this'.cur_node == 1 {
                            this'.__H1.Q_in;
                        } else if this'.cur_node == 2 {
                            this'.__S0.Q_in;
                        } else if this'.cur_node == 3 {
                            this'.__S1.Q_in;
                        } else if this'.cur_node == 4 {
                            this'.__S2.Q_in;
                        } else {
                            this'.__S3.Q_in;
                        }).size() > 0 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    if _ret[0] == 2 {
                        return (2,0,_ret[2]);
                    }
                    this' = _ret[1];
                    this'.cur_node = (this'.cur_node + 1) % 6;
                }
                this'.phase = 1;
                this'.cur_node = 0;
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if this'.phase == 0 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            if _ret[0] == 2 {
                return _ret[2];
            }
            this' = _ret[1];
            def _if(){
                for i in [0..6){
                    def _if(){
                        return (2,0,(1,this'.cur_node));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if (if this'.cur_node == 0 {
                            this'.__H0.Q_out;
                        } else if this'.cur_node == 1 {
                            this'.__H1.Q_out;
                        } else if this'.cur_node == 2 {
                            this'.__S0.Q_out;
                        } else if this'.cur_node == 3 {
                            this'.__S1.Q_out;
                        } else if this'.cur_node == 4 {
                            this'.__S2.Q_out;
                        } else {
                            this'.__S3.Q_out;
                        }).size() > 0 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    if _ret[0] == 2 {
                        return (2,0,_ret[2]);
                    }
                    this' = _ret[1];
                    this'.cur_node = (this'.cur_node + 1) % 6;
                }
                this'.phase = 0;
                this'.cur_node = 0;
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if this'.phase == 1 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            if _ret[0] == 2 {
                return _ret[2];
            }
            this' = _ret[1];
        }
        assert(0);
    }
    def __step(){
        def _if(){
            (action,node) := this'.scheduler();
            def _if(){
                def _if(){
                    (pkt,port) := this'.__H0.Q_out.takeFront();
                    def _if(){
                        this'.__S0.Q_in.pushBack((pkt,1));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 1 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 0 && this'.__H0.Q_out.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    (pkt,port) := this'.__H1.Q_out.takeFront();
                    def _if(){
                        this'.__S3.Q_in.pushBack((pkt,3));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 1 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 1 && this'.__H1.Q_out.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    (pkt,port) := this'.__S0.Q_out.takeFront();
                    def _if(){
                        this'.__H0.Q_in.pushBack((pkt,1));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 1 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S1.Q_in.pushBack((pkt,1));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 2 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S2.Q_in.pushBack((pkt,1));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 3 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 2 && this'.__S0.Q_out.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    (pkt,port) := this'.__S1.Q_out.takeFront();
                    def _if(){
                        this'.__S0.Q_in.pushBack((pkt,2));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 1 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S3.Q_in.pushBack((pkt,1));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 2 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 3 && this'.__S1.Q_out.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    (pkt,port) := this'.__S2.Q_out.takeFront();
                    def _if(){
                        this'.__S0.Q_in.pushBack((pkt,3));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 1 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S3.Q_in.pushBack((pkt,2));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 2 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 4 && this'.__S2.Q_out.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    (pkt,port) := this'.__S3.Q_out.takeFront();
                    def _if(){
                        this'.__S1.Q_in.pushBack((pkt,2));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 1 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S2.Q_in.pushBack((pkt,2));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 2 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__H1.Q_in.pushBack((pkt,1));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 3 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 5 && this'.__S3.Q_out.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def _else(){
                def _if(){
                    this'.__H0.__run();
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 0 && this'.__H0.Q_in.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__H1.__run();
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 1 && this'.__H1.Q_in.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S0.__run();
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 2 && this'.__S0.Q_in.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S1.__run();
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 3 && this'.__S1.Q_in.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S2.__run();
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 4 && this'.__S2.Q_in.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S3.__run();
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 5 && this'.__S3.Q_in.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def eval_if(){
                if action {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() || this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return ();
    }
}
 
done with forToWhile
whileToRec normalization...
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
done with whileToRec
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
done with tuplesNormalizer
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
done with unreachableNormalizer
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
the following needs to be in a var:
(0,this.cur_node)
the following needs to be in a var:
this.cur_node
the following needs to be in a var:
(2,0,_ret_0[2])
the following needs to be in a var:
_ret_0[2]
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
the following needs to be in a var:
_ret_0[2]
the following needs to be in a var:
(1,this.cur_node)
the following needs to be in a var:
this.cur_node
the following needs to be in a var:
(2,0,_ret_1[2])
the following needs to be in a var:
_ret_1[2]
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
the following needs to be in a var:
_ret_1[2]
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
def outside of main:(normalized)
dat __D{
    __H0: __h0_ty , __H1: __h1_ty , __S0: __s0_ty , __S1: __s1_ty , __S2: __s2_ty , __S3: __s3_ty;
    phase: ℝ , cur_node: ℝ;
    def __D'(){
        subExp_CallExp_1 := __h0_ty();
        this.__H0 = subExp_CallExp_1;
        subExp_CallExp_2 := __h1_ty();
        this.__H1 = subExp_CallExp_2;
        subExp_CallExp_3 := __s0_ty();
        this.__S0 = subExp_CallExp_3;
        subExp_CallExp_4 := __s1_ty();
        this.__S1 = subExp_CallExp_4;
        subExp_CallExp_5 := __s2_ty();
        this.__S2 = subExp_CallExp_5;
        subExp_CallExp_6 := __s3_ty();
        this.__S3 = subExp_CallExp_6;
        this.phase = 0;
        this.cur_node = 0;
        return this;
    }
    def scheduler(){
        p_0 := 0;
        def loop_body_0(_args_0: ℝ × __D){
            _tuple_0 := _args_0;
            p_1 := _tuple_0[0];
            this := _tuple_0[1];
            subExp_7 := p_1 < 2;
            if subExp_7 {
                def _if_0(){
                    i_0 := 0;
                    def loop_body_1(_args_0: ℝ × __D){
                        _tuple_1 := _args_0;
                        i_1 := _tuple_1[0];
                        this := _tuple_1[1];
                        subExp_8 := i_1 < 6;
                        if subExp_8 {
                            def _if_1(){
                                subExpArr_11 := this.cur_node;
                                subExpArr_10 := (0,subExpArr_11);
                                subExp_9 := (2,0,subExpArr_10);
                                return subExp_9;
                            }
                            def _else_0(){
                                subExp_12 := (1,this,0);
                                return subExp_12;
                            }
                            def eval_if_0(){
                                subExp_16 := (if this.cur_node == 0 {
                                    this.__H0.Q_in;
                                } else if this.cur_node == 1 {
                                    this.__H1.Q_in;
                                } else if this.cur_node == 2 {
                                    this.__S0.Q_in;
                                } else if this.cur_node == 3 {
                                    this.__S1.Q_in;
                                } else if this.cur_node == 4 {
                                    this.__S2.Q_in;
                                } else {
                                    this.__S3.Q_in;
                                }).size();
                                subExp_13 := subExp_16 > 0;
                                if subExp_13 {
                                    subExp_14 := _if_1();
                                    return subExp_14;
                                } else {
                                    subExp_15 := _else_0();
                                    return subExp_15;
                                }
                            }
                            _ret_0 := eval_if_0();
                            subExp_21 := _ret_0[0];
                            subExp_17 := subExp_21 == 2;
                            if subExp_17 {
                                subExpArr_20 := _ret_0[2];
                                subExpArr_19 := (2,0,subExpArr_20);
                                subExp_18 := (2,0,subExpArr_19);
                                return subExp_18;
                            }
                            this = _ret_0[1];
                            subExp_23 := this.cur_node;
                            subExp_22 := (subExp_23 + 1);
                            this.cur_node = subExp_22 % 6;
                            i_2 := i_1 + 1;
                            _new_args_0 := (i_2,this);
                            subExp_24 := (0,_new_args_0,0);
                            return subExp_24;
                        } else {
                            subExp_25 := (1,_args_0,0);
                            return subExp_25;
                        }
                    }
                    def _loop_0(arg_0){
                        loop_body_2 := arg_0[0];
                        args_0 := arg_0[1];
                        k_0 := loop_body_2(args_0);
                        subExp_27 := k_0[0];
                        subExp_26 := subExp_27 != 0;
                        if subExp_26 {
                            return k_0;
                        }
                        subExp_arg_29 := k_0[1];
                        subExp_28 := _loop_0(loop_body_2,subExp_arg_29);
                        return subExp_28;
                    }
                    _args_1 := (i_0,this);
                    _ret_0 := _loop_0(loop_body_1,_args_1);
                    subExp_32 := _ret_0[0];
                    subExp_30 := subExp_32 == 2;
                    if subExp_30 {
                        subExp_31 := _ret_0[2];
                        return subExp_31;
                    }
                    _tuple_1 := _ret_0[1];
                    i_1 := _tuple_1[0];
                    this := _tuple_1[1];
                    this.phase = 1;
                    this.cur_node = 0;
                    subExp_33 := (1,this,0);
                    return subExp_33;
                }
                def _else_0(){
                    subExp_34 := (1,this,0);
                    return subExp_34;
                }
                def eval_if_0(){
                    subExp_38 := this.phase;
                    subExp_35 := subExp_38 == 0;
                    if subExp_35 {
                        subExp_36 := _if_0();
                        return subExp_36;
                    } else {
                        subExp_37 := _else_0();
                        return subExp_37;
                    }
                }
                _ret_0 := eval_if_0();
                subExp_42 := _ret_0[0];
                subExp_39 := subExp_42 == 2;
                if subExp_39 {
                    subExpArr_41 := _ret_0[2];
                    subExp_40 := (2,0,subExpArr_41);
                    return subExp_40;
                }
                this = _ret_0[1];
                def _if_1(){
                    i_0 := 0;
                    def loop_body_1(_args_0: ℝ × __D){
                        _tuple_1 := _args_0;
                        i_1 := _tuple_1[0];
                        this := _tuple_1[1];
                        subExp_43 := i_1 < 6;
                        if subExp_43 {
                            def _if_2(){
                                subExpArr_46 := this.cur_node;
                                subExpArr_45 := (1,subExpArr_46);
                                subExp_44 := (2,0,subExpArr_45);
                                return subExp_44;
                            }
                            def _else_1(){
                                subExp_47 := (1,this,0);
                                return subExp_47;
                            }
                            def eval_if_1(){
                                subExp_51 := (if this.cur_node == 0 {
                                    this.__H0.Q_out;
                                } else if this.cur_node == 1 {
                                    this.__H1.Q_out;
                                } else if this.cur_node == 2 {
                                    this.__S0.Q_out;
                                } else if this.cur_node == 3 {
                                    this.__S1.Q_out;
                                } else if this.cur_node == 4 {
                                    this.__S2.Q_out;
                                } else {
                                    this.__S3.Q_out;
                                }).size();
                                subExp_48 := subExp_51 > 0;
                                if subExp_48 {
                                    subExp_49 := _if_2();
                                    return subExp_49;
                                } else {
                                    subExp_50 := _else_1();
                                    return subExp_50;
                                }
                            }
                            _ret_1 := eval_if_1();
                            subExp_56 := _ret_1[0];
                            subExp_52 := subExp_56 == 2;
                            if subExp_52 {
                                subExpArr_55 := _ret_1[2];
                                subExpArr_54 := (2,0,subExpArr_55);
                                subExp_53 := (2,0,subExpArr_54);
                                return subExp_53;
                            }
                            this = _ret_1[1];
                            subExp_58 := this.cur_node;
                            subExp_57 := (subExp_58 + 1);
                            this.cur_node = subExp_57 % 6;
                            i_2 := i_1 + 1;
                            _new_args_0 := (i_2,this);
                            subExp_59 := (0,_new_args_0,0);
                            return subExp_59;
                        } else {
                            subExp_60 := (1,_args_0,0);
                            return subExp_60;
                        }
                    }
                    def _loop_0(arg_0){
                        loop_body_2 := arg_0[0];
                        args_0 := arg_0[1];
                        k_0 := loop_body_2(args_0);
                        subExp_62 := k_0[0];
                        subExp_61 := subExp_62 != 0;
                        if subExp_61 {
                            return k_0;
                        }
                        subExp_arg_64 := k_0[1];
                        subExp_63 := _loop_0(loop_body_2,subExp_arg_64);
                        return subExp_63;
                    }
                    _args_1 := (i_0,this);
                    _ret_1 := _loop_0(loop_body_1,_args_1);
                    subExp_67 := _ret_1[0];
                    subExp_65 := subExp_67 == 2;
                    if subExp_65 {
                        subExp_66 := _ret_1[2];
                        return subExp_66;
                    }
                    _tuple_1 := _ret_1[1];
                    i_1 := _tuple_1[0];
                    this := _tuple_1[1];
                    this.phase = 0;
                    this.cur_node = 0;
                    subExp_68 := (1,this,0);
                    return subExp_68;
                }
                def _else_1(){
                    subExp_69 := (1,this,0);
                    return subExp_69;
                }
                def eval_if_1(){
                    subExp_73 := this.phase;
                    subExp_70 := subExp_73 == 1;
                    if subExp_70 {
                        subExp_71 := _if_1();
                        return subExp_71;
                    } else {
                        subExp_72 := _else_1();
                        return subExp_72;
                    }
                }
                _ret_1 := eval_if_1();
                subExp_77 := _ret_1[0];
                subExp_74 := subExp_77 == 2;
                if subExp_74 {
                    subExpArr_76 := _ret_1[2];
                    subExp_75 := (2,0,subExpArr_76);
                    return subExp_75;
                }
                this = _ret_1[1];
                p_2 := p_1 + 1;
                _new_args_0 := (p_2,this);
                subExp_78 := (0,_new_args_0,0);
                return subExp_78;
            } else {
                subExp_79 := (1,_args_0,0);
                return subExp_79;
            }
        }
        def _loop_0(arg_0){
            loop_body_1 := arg_0[0];
            args_0 := arg_0[1];
            k_0 := loop_body_1(args_0);
            subExp_81 := k_0[0];
            subExp_80 := subExp_81 != 0;
            if subExp_80 {
                return k_0;
            }
            subExp_arg_83 := k_0[1];
            subExp_82 := _loop_0(loop_body_1,subExp_arg_83);
            return subExp_82;
        }
        _args_0 := (p_0,this);
        _ret_0 := _loop_0(loop_body_0,_args_0);
        subExp_86 := _ret_0[0];
        subExp_84 := subExp_86 == 2;
        if subExp_84 {
            subExp_85 := _ret_0[2];
            return subExp_85;
        }
        _tuple_0 := _ret_0[1];
        p_1 := _tuple_0[0];
        this := _tuple_0[1];
        assert(0);
    }
    def __step(){
        def _if_0(){
            _tuple_0 := this.scheduler();
            action_0 := _tuple_0[0];
            node_0 := _tuple_0[1];
            def _if_1(){
                def _if_2(){
                    _tuple_1 := this.__H0.Q_out.takeFront();
                    pkt_0 := _tuple_1[0];
                    port_0 := _tuple_1[1];
                    def _if_3(){
                        subExp_arg_87 := 1;
                        this.__S0.Q_in.pushBack(pkt_0,subExp_arg_87);
                        subExp_88 := (1,this,0);
                        return subExp_88;
                    }
                    def _else_0(){
                        subExp_89 := (1,this,0);
                        return subExp_89;
                    }
                    def eval_if_0(){
                        subExp_90 := port_0 == 1;
                        if subExp_90 {
                            subExp_91 := _if_3();
                            return subExp_91;
                        } else {
                            subExp_92 := _else_0();
                            return subExp_92;
                        }
                    }
                    _ret_0 := eval_if_0();
                    this = _ret_0[1];
                    subExp_93 := (1,this,0);
                    return subExp_93;
                }
                def _else_0(){
                    subExp_94 := (1,this,0);
                    return subExp_94;
                }
                def eval_if_0(){
                    subExp_98 := node_0 == 0;
                    subExp_99 := this.__H0.Q_out.size();
                    subExp_95 := subExp_98 && subExp_99;
                    if subExp_95 {
                        subExp_96 := _if_2();
                        return subExp_96;
                    } else {
                        subExp_97 := _else_0();
                        return subExp_97;
                    }
                }
                _ret_0 := eval_if_0();
                this = _ret_0[1];
                def _if_3(){
                    _tuple_1 := this.__H1.Q_out.takeFront();
                    pkt_0 := _tuple_1[0];
                    port_0 := _tuple_1[1];
                    def _if_4(){
                        subExp_arg_100 := 3;
                        this.__S3.Q_in.pushBack(pkt_0,subExp_arg_100);
                        subExp_101 := (1,this,0);
                        return subExp_101;
                    }
                    def _else_1(){
                        subExp_102 := (1,this,0);
                        return subExp_102;
                    }
                    def eval_if_1(){
                        subExp_103 := port_0 == 1;
                        if subExp_103 {
                            subExp_104 := _if_4();
                            return subExp_104;
                        } else {
                            subExp_105 := _else_1();
                            return subExp_105;
                        }
                    }
                    _ret_1 := eval_if_1();
                    this = _ret_1[1];
                    subExp_106 := (1,this,0);
                    return subExp_106;
                }
                def _else_1(){
                    subExp_107 := (1,this,0);
                    return subExp_107;
                }
                def eval_if_1(){
                    subExp_111 := node_0 == 1;
                    subExp_112 := this.__H1.Q_out.size();
                    subExp_108 := subExp_111 && subExp_112;
                    if subExp_108 {
                        subExp_109 := _if_3();
                        return subExp_109;
                    } else {
                        subExp_110 := _else_1();
                        return subExp_110;
                    }
                }
                _ret_1 := eval_if_1();
                this = _ret_1[1];
                def _if_4(){
                    _tuple_1 := this.__S0.Q_out.takeFront();
                    pkt_0 := _tuple_1[0];
                    port_0 := _tuple_1[1];
                    def _if_5(){
                        subExp_arg_113 := 1;
                        this.__H0.Q_in.pushBack(pkt_0,subExp_arg_113);
                        subExp_114 := (1,this,0);
                        return subExp_114;
                    }
                    def _else_2(){
                        subExp_115 := (1,this,0);
                        return subExp_115;
                    }
                    def eval_if_2(){
                        subExp_116 := port_0 == 1;
                        if subExp_116 {
                            subExp_117 := _if_5();
                            return subExp_117;
                        } else {
                            subExp_118 := _else_2();
                            return subExp_118;
                        }
                    }
                    _ret_2 := eval_if_2();
                    this = _ret_2[1];
                    def _if_6(){
                        subExp_arg_119 := 1;
                        this.__S1.Q_in.pushBack(pkt_0,subExp_arg_119);
                        subExp_120 := (1,this,0);
                        return subExp_120;
                    }
                    def _else_3(){
                        subExp_121 := (1,this,0);
                        return subExp_121;
                    }
                    def eval_if_3(){
                        subExp_122 := port_0 == 2;
                        if subExp_122 {
                            subExp_123 := _if_6();
                            return subExp_123;
                        } else {
                            subExp_124 := _else_3();
                            return subExp_124;
                        }
                    }
                    _ret_3 := eval_if_3();
                    this = _ret_3[1];
                    def _if_7(){
                        subExp_arg_125 := 1;
                        this.__S2.Q_in.pushBack(pkt_0,subExp_arg_125);
                        subExp_126 := (1,this,0);
                        return subExp_126;
                    }
                    def _else_4(){
                        subExp_127 := (1,this,0);
                        return subExp_127;
                    }
                    def eval_if_4(){
                        subExp_128 := port_0 == 3;
                        if subExp_128 {
                            subExp_129 := _if_7();
                            return subExp_129;
                        } else {
                            subExp_130 := _else_4();
                            return subExp_130;
                        }
                    }
                    _ret_4 := eval_if_4();
                    this = _ret_4[1];
                    subExp_131 := (1,this,0);
                    return subExp_131;
                }
                def _else_2(){
                    subExp_132 := (1,this,0);
                    return subExp_132;
                }
                def eval_if_2(){
                    subExp_136 := node_0 == 2;
                    subExp_137 := this.__S0.Q_out.size();
                    subExp_133 := subExp_136 && subExp_137;
                    if subExp_133 {
                        subExp_134 := _if_4();
                        return subExp_134;
                    } else {
                        subExp_135 := _else_2();
                        return subExp_135;
                    }
                }
                _ret_2 := eval_if_2();
                this = _ret_2[1];
                def _if_5(){
                    _tuple_1 := this.__S1.Q_out.takeFront();
                    pkt_0 := _tuple_1[0];
                    port_0 := _tuple_1[1];
                    def _if_6(){
                        subExp_arg_138 := 2;
                        this.__S0.Q_in.pushBack(pkt_0,subExp_arg_138);
                        subExp_139 := (1,this,0);
                        return subExp_139;
                    }
                    def _else_3(){
                        subExp_140 := (1,this,0);
                        return subExp_140;
                    }
                    def eval_if_3(){
                        subExp_141 := port_0 == 1;
                        if subExp_141 {
                            subExp_142 := _if_6();
                            return subExp_142;
                        } else {
                            subExp_143 := _else_3();
                            return subExp_143;
                        }
                    }
                    _ret_3 := eval_if_3();
                    this = _ret_3[1];
                    def _if_7(){
                        subExp_arg_144 := 1;
                        this.__S3.Q_in.pushBack(pkt_0,subExp_arg_144);
                        subExp_145 := (1,this,0);
                        return subExp_145;
                    }
                    def _else_4(){
                        subExp_146 := (1,this,0);
                        return subExp_146;
                    }
                    def eval_if_4(){
                        subExp_147 := port_0 == 2;
                        if subExp_147 {
                            subExp_148 := _if_7();
                            return subExp_148;
                        } else {
                            subExp_149 := _else_4();
                            return subExp_149;
                        }
                    }
                    _ret_4 := eval_if_4();
                    this = _ret_4[1];
                    subExp_150 := (1,this,0);
                    return subExp_150;
                }
                def _else_3(){
                    subExp_151 := (1,this,0);
                    return subExp_151;
                }
                def eval_if_3(){
                    subExp_155 := node_0 == 3;
                    subExp_156 := this.__S1.Q_out.size();
                    subExp_152 := subExp_155 && subExp_156;
                    if subExp_152 {
                        subExp_153 := _if_5();
                        return subExp_153;
                    } else {
                        subExp_154 := _else_3();
                        return subExp_154;
                    }
                }
                _ret_3 := eval_if_3();
                this = _ret_3[1];
                def _if_6(){
                    _tuple_1 := this.__S2.Q_out.takeFront();
                    pkt_0 := _tuple_1[0];
                    port_0 := _tuple_1[1];
                    def _if_7(){
                        subExp_arg_157 := 3;
                        this.__S0.Q_in.pushBack(pkt_0,subExp_arg_157);
                        subExp_158 := (1,this,0);
                        return subExp_158;
                    }
                    def _else_4(){
                        subExp_159 := (1,this,0);
                        return subExp_159;
                    }
                    def eval_if_4(){
                        subExp_160 := port_0 == 1;
                        if subExp_160 {
                            subExp_161 := _if_7();
                            return subExp_161;
                        } else {
                            subExp_162 := _else_4();
                            return subExp_162;
                        }
                    }
                    _ret_4 := eval_if_4();
                    this = _ret_4[1];
                    def _if_8(){
                        subExp_arg_163 := 2;
                        this.__S3.Q_in.pushBack(pkt_0,subExp_arg_163);
                        subExp_164 := (1,this,0);
                        return subExp_164;
                    }
                    def _else_5(){
                        subExp_165 := (1,this,0);
                        return subExp_165;
                    }
                    def eval_if_5(){
                        subExp_166 := port_0 == 2;
                        if subExp_166 {
                            subExp_167 := _if_8();
                            return subExp_167;
                        } else {
                            subExp_168 := _else_5();
                            return subExp_168;
                        }
                    }
                    _ret_5 := eval_if_5();
                    this = _ret_5[1];
                    subExp_169 := (1,this,0);
                    return subExp_169;
                }
                def _else_4(){
                    subExp_170 := (1,this,0);
                    return subExp_170;
                }
                def eval_if_4(){
                    subExp_174 := node_0 == 4;
                    subExp_175 := this.__S2.Q_out.size();
                    subExp_171 := subExp_174 && subExp_175;
                    if subExp_171 {
                        subExp_172 := _if_6();
                        return subExp_172;
                    } else {
                        subExp_173 := _else_4();
                        return subExp_173;
                    }
                }
                _ret_4 := eval_if_4();
                this = _ret_4[1];
                def _if_7(){
                    _tuple_1 := this.__S3.Q_out.takeFront();
                    pkt_0 := _tuple_1[0];
                    port_0 := _tuple_1[1];
                    def _if_8(){
                        subExp_arg_176 := 2;
                        this.__S1.Q_in.pushBack(pkt_0,subExp_arg_176);
                        subExp_177 := (1,this,0);
                        return subExp_177;
                    }
                    def _else_5(){
                        subExp_178 := (1,this,0);
                        return subExp_178;
                    }
                    def eval_if_5(){
                        subExp_179 := port_0 == 1;
                        if subExp_179 {
                            subExp_180 := _if_8();
                            return subExp_180;
                        } else {
                            subExp_181 := _else_5();
                            return subExp_181;
                        }
                    }
                    _ret_5 := eval_if_5();
                    this = _ret_5[1];
                    def _if_9(){
                        subExp_arg_182 := 2;
                        this.__S2.Q_in.pushBack(pkt_0,subExp_arg_182);
                        subExp_183 := (1,this,0);
                        return subExp_183;
                    }
                    def _else_6(){
                        subExp_184 := (1,this,0);
                        return subExp_184;
                    }
                    def eval_if_6(){
                        subExp_185 := port_0 == 2;
                        if subExp_185 {
                            subExp_186 := _if_9();
                            return subExp_186;
                        } else {
                            subExp_187 := _else_6();
                            return subExp_187;
                        }
                    }
                    _ret_6 := eval_if_6();
                    this = _ret_6[1];
                    def _if_10(){
                        subExp_arg_188 := 1;
                        this.__H1.Q_in.pushBack(pkt_0,subExp_arg_188);
                        subExp_189 := (1,this,0);
                        return subExp_189;
                    }
                    def _else_7(){
                        subExp_190 := (1,this,0);
                        return subExp_190;
                    }
                    def eval_if_7(){
                        subExp_191 := port_0 == 3;
                        if subExp_191 {
                            subExp_192 := _if_10();
                            return subExp_192;
                        } else {
                            subExp_193 := _else_7();
                            return subExp_193;
                        }
                    }
                    _ret_7 := eval_if_7();
                    this = _ret_7[1];
                    subExp_194 := (1,this,0);
                    return subExp_194;
                }
                def _else_5(){
                    subExp_195 := (1,this,0);
                    return subExp_195;
                }
                def eval_if_5(){
                    subExp_199 := node_0 == 5;
                    subExp_200 := this.__S3.Q_out.size();
                    subExp_196 := subExp_199 && subExp_200;
                    if subExp_196 {
                        subExp_197 := _if_7();
                        return subExp_197;
                    } else {
                        subExp_198 := _else_5();
                        return subExp_198;
                    }
                }
                _ret_5 := eval_if_5();
                this = _ret_5[1];
                subExp_201 := (1,this,0);
                return subExp_201;
            }
            def _else_0(){
                def _if_2(){
                    this.__H0.__run();
                    subExp_202 := (1,this,0);
                    return subExp_202;
                }
                def _else_1(){
                    subExp_203 := (1,this,0);
                    return subExp_203;
                }
                def eval_if_0(){
                    subExp_207 := node_0 == 0;
                    subExp_208 := this.__H0.Q_in.size();
                    subExp_204 := subExp_207 && subExp_208;
                    if subExp_204 {
                        subExp_205 := _if_2();
                        return subExp_205;
                    } else {
                        subExp_206 := _else_1();
                        return subExp_206;
                    }
                }
                _ret_0 := eval_if_0();
                this = _ret_0[1];
                def _if_3(){
                    this.__H1.__run();
                    subExp_209 := (1,this,0);
                    return subExp_209;
                }
                def _else_2(){
                    subExp_210 := (1,this,0);
                    return subExp_210;
                }
                def eval_if_1(){
                    subExp_214 := node_0 == 1;
                    subExp_215 := this.__H1.Q_in.size();
                    subExp_211 := subExp_214 && subExp_215;
                    if subExp_211 {
                        subExp_212 := _if_3();
                        return subExp_212;
                    } else {
                        subExp_213 := _else_2();
                        return subExp_213;
                    }
                }
                _ret_1 := eval_if_1();
                this = _ret_1[1];
                def _if_4(){
                    this.__S0.__run();
                    subExp_216 := (1,this,0);
                    return subExp_216;
                }
                def _else_3(){
                    subExp_217 := (1,this,0);
                    return subExp_217;
                }
                def eval_if_2(){
                    subExp_221 := node_0 == 2;
                    subExp_222 := this.__S0.Q_in.size();
                    subExp_218 := subExp_221 && subExp_222;
                    if subExp_218 {
                        subExp_219 := _if_4();
                        return subExp_219;
                    } else {
                        subExp_220 := _else_3();
                        return subExp_220;
                    }
                }
                _ret_2 := eval_if_2();
                this = _ret_2[1];
                def _if_5(){
                    this.__S1.__run();
                    subExp_223 := (1,this,0);
                    return subExp_223;
                }
                def _else_4(){
                    subExp_224 := (1,this,0);
                    return subExp_224;
                }
                def eval_if_3(){
                    subExp_228 := node_0 == 3;
                    subExp_229 := this.__S1.Q_in.size();
                    subExp_225 := subExp_228 && subExp_229;
                    if subExp_225 {
                        subExp_226 := _if_5();
                        return subExp_226;
                    } else {
                        subExp_227 := _else_4();
                        return subExp_227;
                    }
                }
                _ret_3 := eval_if_3();
                this = _ret_3[1];
                def _if_6(){
                    this.__S2.__run();
                    subExp_230 := (1,this,0);
                    return subExp_230;
                }
                def _else_5(){
                    subExp_231 := (1,this,0);
                    return subExp_231;
                }
                def eval_if_4(){
                    subExp_235 := node_0 == 4;
                    subExp_236 := this.__S2.Q_in.size();
                    subExp_232 := subExp_235 && subExp_236;
                    if subExp_232 {
                        subExp_233 := _if_6();
                        return subExp_233;
                    } else {
                        subExp_234 := _else_5();
                        return subExp_234;
                    }
                }
                _ret_4 := eval_if_4();
                this = _ret_4[1];
                def _if_7(){
                    this.__S3.__run();
                    subExp_237 := (1,this,0);
                    return subExp_237;
                }
                def _else_6(){
                    subExp_238 := (1,this,0);
                    return subExp_238;
                }
                def eval_if_5(){
                    subExp_242 := node_0 == 5;
                    subExp_243 := this.__S3.Q_in.size();
                    subExp_239 := subExp_242 && subExp_243;
                    if subExp_239 {
                        subExp_240 := _if_7();
                        return subExp_240;
                    } else {
                        subExp_241 := _else_6();
                        return subExp_241;
                    }
                }
                _ret_5 := eval_if_5();
                this = _ret_5[1];
                subExp_244 := (1,this,0);
                return subExp_244;
            }
            def eval_if_0(){
                if action_0 {
                    subExp_245 := _if_1();
                    return subExp_245;
                } else {
                    subExp_246 := _else_0();
                    return subExp_246;
                }
            }
            _ret_0 := eval_if_0();
            this = _ret_0[1];
            subExp_247 := (1,this,0);
            return subExp_247;
        }
        def _else_0(){
            subExp_248 := (1,this,0);
            return subExp_248;
        }
        def eval_if_0(){
            subExp_272 := this.__H0.Q_in.size();
            subExp_273 := this.__H0.Q_out.size();
            subExp_270 := subExp_272 || subExp_273;
            subExp_271 := this.__H1.Q_in.size();
            subExp_268 := subExp_270 || subExp_271;
            subExp_269 := this.__H1.Q_out.size();
            subExp_266 := subExp_268 || subExp_269;
            subExp_267 := this.__S0.Q_in.size();
            subExp_264 := subExp_266 || subExp_267;
            subExp_265 := this.__S0.Q_out.size();
            subExp_262 := subExp_264 || subExp_265;
            subExp_263 := this.__S1.Q_in.size();
            subExp_260 := subExp_262 || subExp_263;
            subExp_261 := this.__S1.Q_out.size();
            subExp_258 := subExp_260 || subExp_261;
            subExp_259 := this.__S2.Q_in.size();
            subExp_256 := subExp_258 || subExp_259;
            subExp_257 := this.__S2.Q_out.size();
            subExp_254 := subExp_256 || subExp_257;
            subExp_255 := this.__S3.Q_in.size();
            subExp_252 := subExp_254 || subExp_255;
            subExp_253 := this.__S3.Q_out.size();
            subExp_249 := subExp_252 || subExp_253;
            if subExp_249 {
                subExp_250 := _if_0();
                return subExp_250;
            } else {
                subExp_251 := _else_0();
                return subExp_251;
            }
        }
        _ret_0 := eval_if_0();
        this = _ret_0[1];
        subExp_274 := ();
        return subExp_274;
    }
}
illegal thing in data declaration:
__H0: __h0_ty , __H1: __h1_ty , __S0: __s0_ty , __S1: __s1_ty , __S2: __s2_ty , __S3: __s3_ty

illegal thing in data declaration:
phase: ℝ , cur_node: ℝ

translating meaning of __h0_ty
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
__h0_ty
 
Expression of type Identifier:
Q_in
 
Expression of type Identifier:
Queue
 
Expression of type VarDecl:
Q_in: Queue
 
Expression of type Identifier:
Q_out
 
Expression of type Identifier:
Queue
 
Expression of type VarDecl:
Q_out: Queue
 
Expression of type ABinaryExp:
Q_in: Queue , Q_out: Queue
 
Expression of type Identifier:
__h0_ty
 
Expression of type Identifier:
this
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this.Q_in
 
Expression of type Identifier:
Queue'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Queue'()
 
Expression of type ABinaryExp:
this.Q_in = Queue'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this.Q_out
 
Expression of type Identifier:
Queue'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Queue'()
 
Expression of type ABinaryExp:
this.Q_out = Queue'()
 
Expression of type Identifier:
this
 
Expression of type ReturnExp:
return this
 
Expression of type FunctionDef:
def __h0_ty'(){
    this.Q_in = Queue'();
    this.Q_out = Queue'();
    return this;
}
 
Expression of type Identifier:
__run
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.Q_out
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.Q_out.pushBack
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.Q_in.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.Q_in.takeFront()
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.takeFront()[0]
 
Expression of type LiteralExp:
1
 
Expression of type TupleExp:
((this'.Q_in.takeFront()[0],1))
 
Expression of type CallExp:
this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1))
 
Expression of type TupleExp:
()
 
Expression of type ReturnExp:
return ()
 
Expression of type FunctionDef:
def __run(){
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
    return ();
}
 
Expression of type CompoundDecl:
{
    Q_in: Queue , Q_out: Queue;
    def __h0_ty'(){
        this.Q_in = Queue'();
        this.Q_out = Queue'();
        return this;
    }
    def __run(){
        this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
        return ();
    }
}
 
Expression of type DatDecl:
dat __h0_ty{
    Q_in: Queue , Q_out: Queue;
    def __h0_ty'(){
        this.Q_in = Queue'();
        this.Q_out = Queue'();
        return this;
    }
    def __run(){
        this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
        return ();
    }
}
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
dat __h0_ty{
    Q_in: Queue , Q_out: Queue;
    def __h0_ty'(){
        subExp_CallExp_1 := Queue();
        this.Q_in = subExp_CallExp_1;
        subExp_CallExp_2 := Queue();
        this.Q_out = subExp_CallExp_2;
        return this;
    }
    def __run(){
        subExp_5 := this.Q_in.takeFront();
        subExp_arg_3 := subExp_5[0];
        subExp_arg_4 := 1;
        this.Q_out.pushBack(subExp_arg_3,subExp_arg_4);
        subExp_6 := ();
        return subExp_6;
    }
}
illegal thing in data declaration:
Q_in: Queue , Q_out: Queue

translating meaning of Queue
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
Queue
 
Expression of type Identifier:
data
 
Expression of type Identifier:
Packet
 
Expression of type Identifier:
ℝ
 
Expression of type ABinaryExp:
(Packet × ℝ)
 
Expression of type IndexExp:
(Packet × ℝ)[]
 
Expression of type VarDecl:
data: (Packet × ℝ)[]
 
Expression of type Identifier:
Queue
 
Expression of type Identifier:
this
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this.data
 
Expression of type ArrayExp:
[]
 
Expression of type Identifier:
Packet
 
Expression of type Identifier:
ℝ
 
Expression of type ABinaryExp:
(Packet × ℝ)
 
Expression of type IndexExp:
(Packet × ℝ)[]
 
Expression of type TypeAnnotationExp:
([]: (Packet × ℝ)[])
 
Expression of type ABinaryExp:
this.data = ([]: (Packet × ℝ)[])
 
Expression of type Identifier:
this
 
Expression of type ReturnExp:
return this
 
Expression of type FunctionDef:
def Queue'(){
    this.data = ([]: (Packet × ℝ)[]);
    return this;
}
 
Expression of type Identifier:
pushFront
 
Expression of type Identifier:
x
 
Expression of type Parameter:
x: Packet × ℝ
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type Identifier:
x
 
Expression of type ArrayExp:
[x]
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type ABinaryExp:
[x] ~ this'.data
 
Expression of type ABinaryExp:
this'.data = [x] ~ this'.data
 
Expression of type TupleExp:
()
 
Expression of type ReturnExp:
return ()
 
Expression of type FunctionDef:
def pushFront(x: Packet × ℝ){
    this'.data = [x] ~ this'.data;
    return ();
}
 
Expression of type Identifier:
pushBack
 
Expression of type Identifier:
x
 
Expression of type Parameter:
x: Packet × ℝ
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type Identifier:
x
 
Expression of type ArrayExp:
[x]
 
Expression of type ABinaryExp:
this'.data ~ [x]
 
Expression of type ABinaryExp:
this'.data = this'.data ~ [x]
 
Expression of type TupleExp:
()
 
Expression of type ReturnExp:
return ()
 
Expression of type FunctionDef:
def pushBack(x: Packet × ℝ){
    this'.data = this'.data ~ [x];
    return ();
}
 
Expression of type Identifier:
takeFront
 
Expression of type Identifier:
r
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
front
 
Expression of type FieldExp:
this'.front
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.front()
 
Expression of type ABinaryExp:
r := this'.front()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
popFront
 
Expression of type FieldExp:
this'.popFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.popFront()
 
Expression of type Identifier:
r
 
Expression of type ReturnExp:
return r
 
Expression of type FunctionDef:
def takeFront(){
    r := this'.front();
    this'.popFront();
    return r;
}
 
Expression of type Identifier:
takeBack
 
Expression of type Identifier:
r
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.size()
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
this'.size() - 1
 
Expression of type IndexExp:
this'.data[this'.size() - 1]
 
Expression of type ABinaryExp:
r := this'.data[this'.size() - 1]
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type LiteralExp:
0
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.size()
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
this'.size() - 1
 
Expression of type SliceExp:
this'.data[0..this'.size() - 1]
 
Expression of type ABinaryExp:
this'.data = this'.data[0..this'.size() - 1]
 
Expression of type Identifier:
r
 
Expression of type ReturnExp:
return r
 
Expression of type FunctionDef:
def takeBack(){
    r := this'.data[this'.size() - 1];
    this'.data = this'.data[0..this'.size() - 1];
    return r;
}
 
Expression of type Identifier:
size
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type Identifier:
length
 
Expression of type FieldExp:
this'.data.length
 
Expression of type ReturnExp:
return this'.data.length
 
Expression of type FunctionDef:
def size(){
    return this'.data.length;
}
 
Expression of type Identifier:
front
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.data[0]
 
Expression of type ReturnExp:
return this'.data[0]
 
Expression of type FunctionDef:
def front(){
    return this'.data[0];
}
 
Expression of type Identifier:
dupFront
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
pushFront
 
Expression of type FieldExp:
this'.pushFront
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
front
 
Expression of type FieldExp:
this'.front
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
(this'.front())
 
Expression of type CallExp:
this'.pushFront(this'.front())
 
Expression of type TupleExp:
()
 
Expression of type ReturnExp:
return ()
 
Expression of type FunctionDef:
def dupFront(){
    this'.pushFront(this'.front());
    return ();
}
 
Expression of type Identifier:
popFront
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.size()
 
Expression of type SliceExp:
this'.data[1..this'.size()]
 
Expression of type ABinaryExp:
this'.data = this'.data[1..this'.size()]
 
Expression of type TupleExp:
()
 
Expression of type ReturnExp:
return ()
 
Expression of type FunctionDef:
def popFront(){
    this'.data = this'.data[1..this'.size()];
    return ();
}
 
Expression of type CompoundDecl:
{
    data: (Packet × ℝ)[];
    def Queue'(){
        this.data = ([]: (Packet × ℝ)[]);
        return this;
    }
    def pushFront(x: Packet × ℝ){
        this'.data = [x] ~ this'.data;
        return ();
    }
    def pushBack(x: Packet × ℝ){
        this'.data = this'.data ~ [x];
        return ();
    }
    def takeFront(){
        r := this'.front();
        this'.popFront();
        return r;
    }
    def takeBack(){
        r := this'.data[this'.size() - 1];
        this'.data = this'.data[0..this'.size() - 1];
        return r;
    }
    def size(){
        return this'.data.length;
    }
    def front(){
        return this'.data[0];
    }
    def dupFront(){
        this'.pushFront(this'.front());
        return ();
    }
    def popFront(){
        this'.data = this'.data[1..this'.size()];
        return ();
    }
}
 
Expression of type DatDecl:
dat Queue{
    data: (Packet × ℝ)[];
    def Queue'(){
        this.data = ([]: (Packet × ℝ)[]);
        return this;
    }
    def pushFront(x: Packet × ℝ){
        this'.data = [x] ~ this'.data;
        return ();
    }
    def pushBack(x: Packet × ℝ){
        this'.data = this'.data ~ [x];
        return ();
    }
    def takeFront(){
        r := this'.front();
        this'.popFront();
        return r;
    }
    def takeBack(){
        r := this'.data[this'.size() - 1];
        this'.data = this'.data[0..this'.size() - 1];
        return r;
    }
    def size(){
        return this'.data.length;
    }
    def front(){
        return this'.data[0];
    }
    def dupFront(){
        this'.pushFront(this'.front());
        return ();
    }
    def popFront(){
        this'.data = this'.data[1..this'.size()];
        return ();
    }
}
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
dat Queue{
    data: (Packet × ℝ)[];
    def Queue'(){
        this.data = ([]: (Packet × ℝ)[]);
        return this;
    }
    def pushFront(x_0: Packet × ℝ){
        subExp_1 := [x_0];
        subExp_2 := this.data;
        this.data = subExp_1 ~ subExp_2;
        subExp_3 := ();
        return subExp_3;
    }
    def pushBack(x_0: Packet × ℝ){
        subExp_4 := this.data;
        subExp_5 := [x_0];
        this.data = subExp_4 ~ subExp_5;
        subExp_6 := ();
        return subExp_6;
    }
    def takeFront(){
        r_0 := this.front();
        this.popFront();
        return r_0;
    }
    def takeBack(){
        subExp_7 := this.data;
        subExp_9 := this.size();
        subExpArr_8 := subExp_9 - 1;
        r_0 := subExp_7[subExpArr_8];
        subExp_10 := this.data;
        subExp_12 := this.size();
        subExp_11 := subExp_12 - 1;
        this.data = subExp_10[0..subExp_11];
        return r_0;
    }
    def size(){
        subExp_13 := this.data.length;
        return subExp_13;
    }
    def front(){
        subExp_15 := this.data;
        subExp_14 := subExp_15[0];
        return subExp_14;
    }
    def dupFront(){
        subExp_16 := (this.front());
        this.pushFront(subExp_16);
        subExp_17 := ();
        return subExp_17;
    }
    def popFront(){
        subExp_18 := this.data;
        subExp_19 := this.size();
        this.data = subExp_18[1..subExp_19];
        subExp_20 := ();
        return subExp_20;
    }
}
var Queue = function(){
    var this_v0 = {};
    var this_v1 = _.assign({},this_v0,{data: []});
    return {res:this_v1,obj:this_v1};
}
var Queue_pushFront = function(this_v0, x_0){
    var subExp_1=[x_0];
    var subExp_2=this_v0.data;
    var this_v1 = _.assign({},this_v0,{data: [].concat(subExp_1,subExp_2)});
    var subExp_3=[];
    return {res:subExp_3,obj:this_v1};
}
var Queue_pushBack = function(this_v0, x_0){
    var subExp_4=this_v0.data;
    var subExp_5=[x_0];
    var this_v1 = _.assign({},this_v0,{data: [].concat(subExp_4,subExp_5)});
    var subExp_6=[];
    return {res:subExp_6,obj:this_v1};
}
var Queue_takeFront = function(this_v0){
    var tmp = Queue_front(this_v0,[]);
    var r_0 = tmp.res;
    var this_v1 = tmp.obj;
    var this_v2 = Queue_popFront(this_v1,[]).obj;
    return {res:r_0,obj:this_v2};
}
var Queue_takeBack = function(this_v0){
    var subExp_7=this_v0.data;
    var tmp = Queue_size(this_v0,[]);
    var subExp_9 = tmp.res;
    var this_v1 = tmp.obj;
    var subExpArr_8=subExp_9-1;
    var r_0=subExp_7[+subExpArr_8];
    var subExp_10=this_v1.data;
    var tmp = Queue_size(this_v1,[]);
    var subExp_12 = tmp.res;
    var this_v2 = tmp.obj;
    var subExp_11=subExp_12-1;
    var this_v3 = _.assign({},this_v2,{data: ([].concat(subExp_10)).slice(0,subExp_11)});
    return {res:r_0,obj:this_v3};
}
var Queue_size = function(this_v0){
    var subExp_13=this_v0.data.length;
    return {res:subExp_13,obj:this_v0};
}
var Queue_front = function(this_v0){
    var subExp_15=this_v0.data;
    var subExp_14=subExp_15[+0];
    return {res:subExp_14,obj:this_v0};
}
var Queue_dupFront = function(this_v0){
    var tmp = Queue_front(this_v0,[]);
    var subExp_16 = tmp.res;
    var this_v1 = tmp.obj;
    var this_v2 = Queue_pushFront(this_v1,subExp_16).obj;
    var subExp_17=[];
    return {res:subExp_17,obj:this_v2};
}
var Queue_popFront = function(this_v0){
    var subExp_18=this_v0.data;
    var tmp = Queue_size(this_v0,[]);
    var subExp_19 = tmp.res;
    var this_v1 = tmp.obj;
    var this_v2 = _.assign({},this_v1,{data: ([].concat(subExp_18)).slice(1,subExp_19)});
    var subExp_20=[];
    return {res:subExp_20,obj:this_v2};
}

var Queue = function(){
    var this_v0 = {};
    var this_v1 = _.assign({},this_v0,{data: []});
    return {res:this_v1,obj:this_v1};
}
var Queue_pushFront = function(this_v0, x_0){
    var subExp_1=[x_0];
    var subExp_2=this_v0.data;
    var this_v1 = _.assign({},this_v0,{data: [].concat(subExp_1,subExp_2)});
    var subExp_3=[];
    return {res:subExp_3,obj:this_v1};
}
var Queue_pushBack = function(this_v0, x_0){
    var subExp_4=this_v0.data;
    var subExp_5=[x_0];
    var this_v1 = _.assign({},this_v0,{data: [].concat(subExp_4,subExp_5)});
    var subExp_6=[];
    return {res:subExp_6,obj:this_v1};
}
var Queue_takeFront = function(this_v0){
    var tmp = Queue_front(this_v0,[]);
    var r_0 = tmp.res;
    var this_v1 = tmp.obj;
    var this_v2 = Queue_popFront(this_v1,[]).obj;
    return {res:r_0,obj:this_v2};
}
var Queue_takeBack = function(this_v0){
    var subExp_7=this_v0.data;
    var tmp = Queue_size(this_v0,[]);
    var subExp_9 = tmp.res;
    var this_v1 = tmp.obj;
    var subExpArr_8=subExp_9-1;
    var r_0=subExp_7[+subExpArr_8];
    var subExp_10=this_v1.data;
    var tmp = Queue_size(this_v1,[]);
    var subExp_12 = tmp.res;
    var this_v2 = tmp.obj;
    var subExp_11=subExp_12-1;
    var this_v3 = _.assign({},this_v2,{data: ([].concat(subExp_10)).slice(0,subExp_11)});
    return {res:r_0,obj:this_v3};
}
var Queue_size = function(this_v0){
    var subExp_13=this_v0.data.length;
    return {res:subExp_13,obj:this_v0};
}
var Queue_front = function(this_v0){
    var subExp_15=this_v0.data;
    var subExp_14=subExp_15[+0];
    return {res:subExp_14,obj:this_v0};
}
var Queue_dupFront = function(this_v0){
    var tmp = Queue_front(this_v0,[]);
    var subExp_16 = tmp.res;
    var this_v1 = tmp.obj;
    var this_v2 = Queue_pushFront(this_v1,subExp_16).obj;
    var subExp_17=[];
    return {res:subExp_17,obj:this_v2};
}
var Queue_popFront = function(this_v0){
    var subExp_18=this_v0.data;
    var tmp = Queue_size(this_v0,[]);
    var subExp_19 = tmp.res;
    var this_v1 = tmp.obj;
    var this_v2 = _.assign({},this_v1,{data: ([].concat(subExp_18)).slice(1,subExp_19)});
    var subExp_20=[];
    return {res:subExp_20,obj:this_v2};
}
var __h0_ty = function(){
    var this_v0 = {};
    var subExp_CallExp_1_v0 = Queue([]).obj;
    var this_v1 = _.assign({},this_v0,{Q_in: subExp_CallExp_1_v0});
    var subExp_CallExp_2_v0 = Queue([]).obj;
    var this_v2 = _.assign({},this_v1,{Q_out: subExp_CallExp_2_v0});
    return {res:this_v2,obj:this_v2};
}
var __h0_ty___run = function(this_v0){
    var tmp = Queue_takeFront(this_v0.Q_in,[]);
    var subExp_5 = tmp.res;
    var this_v1 = _.assign({},this_v0,{Q_in: tmp.obj});
    var subExp_arg_3=subExp_5[+0];
    var subExp_arg_4=1;
    var this_v2 = _.assign({},this_v1,{Q_out: Queue_pushBack(this_v1.Q_out,[subExp_arg_3,subExp_arg_4]).obj});
    var subExp_6=[];
    return {res:subExp_6,obj:this_v2};
}

translating meaning of __h1_ty
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
__h1_ty
 
Expression of type Identifier:
Q_in
 
Expression of type Identifier:
Queue
 
Expression of type VarDecl:
Q_in: Queue
 
Expression of type Identifier:
Q_out
 
Expression of type Identifier:
Queue
 
Expression of type VarDecl:
Q_out: Queue
 
Expression of type ABinaryExp:
Q_in: Queue , Q_out: Queue
 
Expression of type Identifier:
arrived
 
Expression of type Identifier:
ℝ
 
Expression of type VarDecl:
arrived: ℝ
 
Expression of type Identifier:
__h1_ty
 
Expression of type Identifier:
this
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this.Q_in
 
Expression of type Identifier:
Queue'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Queue'()
 
Expression of type ABinaryExp:
this.Q_in = Queue'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this.Q_out
 
Expression of type Identifier:
Queue'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Queue'()
 
Expression of type ABinaryExp:
this.Q_out = Queue'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
arrived
 
Expression of type FieldExp:
this.arrived
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
this.arrived = 0
 
Expression of type Identifier:
this
 
Expression of type ReturnExp:
return this
 
Expression of type FunctionDef:
def __h1_ty'(){
    this.Q_in = Queue'();
    this.Q_out = Queue'();
    this.arrived = 0;
    return this;
}
 
Expression of type Identifier:
__run
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
arrived
 
Expression of type FieldExp:
this'.arrived
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
this'.arrived = 1
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
popFront
 
Expression of type FieldExp:
this'.Q_in.popFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.Q_in.popFront()
 
Expression of type TupleExp:
()
 
Expression of type ReturnExp:
return ()
 
Expression of type FunctionDef:
def __run(){
    this'.arrived = 1;
    this'.Q_in.popFront();
    return ();
}
 
Expression of type CompoundDecl:
{
    Q_in: Queue , Q_out: Queue;
    arrived: ℝ;
    def __h1_ty'(){
        this.Q_in = Queue'();
        this.Q_out = Queue'();
        this.arrived = 0;
        return this;
    }
    def __run(){
        this'.arrived = 1;
        this'.Q_in.popFront();
        return ();
    }
}
 
Expression of type DatDecl:
dat __h1_ty{
    Q_in: Queue , Q_out: Queue;
    arrived: ℝ;
    def __h1_ty'(){
        this.Q_in = Queue'();
        this.Q_out = Queue'();
        this.arrived = 0;
        return this;
    }
    def __run(){
        this'.arrived = 1;
        this'.Q_in.popFront();
        return ();
    }
}
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
dat __h1_ty{
    Q_in: Queue , Q_out: Queue;
    arrived: ℝ;
    def __h1_ty'(){
        subExp_CallExp_1 := Queue();
        this.Q_in = subExp_CallExp_1;
        subExp_CallExp_2 := Queue();
        this.Q_out = subExp_CallExp_2;
        this.arrived = 0;
        return this;
    }
    def __run(){
        this.arrived = 1;
        this.Q_in.popFront();
        subExp_3 := ();
        return subExp_3;
    }
}
illegal thing in data declaration:
Q_in: Queue , Q_out: Queue

var __h1_ty = function(){
    var this_v0 = {};
    var subExp_CallExp_1_v0 = Queue([]).obj;
    var this_v1 = _.assign({},this_v0,{Q_in: subExp_CallExp_1_v0});
    var subExp_CallExp_2_v0 = Queue([]).obj;
    var this_v2 = _.assign({},this_v1,{Q_out: subExp_CallExp_2_v0});
    var this_v3 = _.assign({},this_v2,{arrived: 0});
    return {res:this_v3,obj:this_v3};
}
var __h1_ty___run = function(this_v0){
    var this_v1 = _.assign({},this_v0,{arrived: 1});
    var this_v2 = _.assign({},this_v1,{Q_in: Queue_popFront(this_v1.Q_in,[]).obj});
    var subExp_3=[];
    return {res:subExp_3,obj:this_v2};
}

translating meaning of __s0_ty
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
__s0_ty
 
Expression of type Identifier:
Q_in
 
Expression of type Identifier:
Queue
 
Expression of type VarDecl:
Q_in: Queue
 
Expression of type Identifier:
Q_out
 
Expression of type Identifier:
Queue
 
Expression of type VarDecl:
Q_out: Queue
 
Expression of type ABinaryExp:
Q_in: Queue , Q_out: Queue
 
Expression of type Identifier:
__s0_ty
 
Expression of type Identifier:
this
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this.Q_in
 
Expression of type Identifier:
Queue'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Queue'()
 
Expression of type ABinaryExp:
this.Q_in = Queue'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this.Q_out
 
Expression of type Identifier:
Queue'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Queue'()
 
Expression of type ABinaryExp:
this.Q_out = Queue'()
 
Expression of type Identifier:
this
 
Expression of type ReturnExp:
return this
 
Expression of type FunctionDef:
def __s0_ty'(){
    this.Q_in = Queue'();
    this.Q_out = Queue'();
    return this;
}
 
Expression of type Identifier:
__run
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.Q_out
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.Q_out.pushBack
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.Q_in.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.Q_in.takeFront()
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.takeFront()[0]
 
Expression of type LiteralExp:
2
 
Expression of type TupleExp:
((this'.Q_in.takeFront()[0],2))
 
Expression of type CallExp:
this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.Q_out
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.Q_out.pushBack
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.Q_in.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.Q_in.takeFront()
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.takeFront()[0]
 
Expression of type LiteralExp:
3
 
Expression of type TupleExp:
((this'.Q_in.takeFront()[0],3))
 
Expression of type CallExp:
this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
flip
 
Expression of type LiteralExp:
1
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
((1 / 2))
 
Expression of type CallExp:
flip((1 / 2))
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if flip((1 / 2)) {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if flip((1 / 2)) {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type TupleExp:
()
 
Expression of type ReturnExp:
return ()
 
Expression of type FunctionDef:
def __run(){
    def _if(){
        this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
        return (1,this',0);
    }
    def _else(){
        this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
        return (1,this',0);
    }
    def eval_if(){
        if flip((1 / 2)) {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return ();
}
 
Expression of type CompoundDecl:
{
    Q_in: Queue , Q_out: Queue;
    def __s0_ty'(){
        this.Q_in = Queue'();
        this.Q_out = Queue'();
        return this;
    }
    def __run(){
        def _if(){
            this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
            return (1,this',0);
        }
        def _else(){
            this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
            return (1,this',0);
        }
        def eval_if(){
            if flip((1 / 2)) {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return ();
    }
}
 
Expression of type DatDecl:
dat __s0_ty{
    Q_in: Queue , Q_out: Queue;
    def __s0_ty'(){
        this.Q_in = Queue'();
        this.Q_out = Queue'();
        return this;
    }
    def __run(){
        def _if(){
            this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
            return (1,this',0);
        }
        def _else(){
            this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
            return (1,this',0);
        }
        def eval_if(){
            if flip((1 / 2)) {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return ();
    }
}
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
dat __s0_ty{
    Q_in: Queue , Q_out: Queue;
    def __s0_ty'(){
        subExp_CallExp_1 := Queue();
        this.Q_in = subExp_CallExp_1;
        subExp_CallExp_2 := Queue();
        this.Q_out = subExp_CallExp_2;
        return this;
    }
    def __run(){
        def _if_0(){
            subExp_5 := this.Q_in.takeFront();
            subExp_arg_3 := subExp_5[0];
            subExp_arg_4 := 2;
            this.Q_out.pushBack(subExp_arg_3,subExp_arg_4);
            subExp_6 := (1,this,0);
            return subExp_6;
        }
        def _else_0(){
            subExp_9 := this.Q_in.takeFront();
            subExp_arg_7 := subExp_9[0];
            subExp_arg_8 := 3;
            this.Q_out.pushBack(subExp_arg_7,subExp_arg_8);
            subExp_10 := (1,this,0);
            return subExp_10;
        }
        def eval_if_0(){
            subExp_14 := ((1 / 2));
            subExp_11 := flip(subExp_14);
            if subExp_11 {
                subExp_12 := _if_0();
                return subExp_12;
            } else {
                subExp_13 := _else_0();
                return subExp_13;
            }
        }
        _ret_0 := eval_if_0();
        this = _ret_0[1];
        subExp_15 := ();
        return subExp_15;
    }
}
illegal thing in data declaration:
Q_in: Queue , Q_out: Queue

var __s0_ty = function(){
    var this_v0 = {};
    var subExp_CallExp_1_v0 = Queue([]).obj;
    var this_v1 = _.assign({},this_v0,{Q_in: subExp_CallExp_1_v0});
    var subExp_CallExp_2_v0 = Queue([]).obj;
    var this_v2 = _.assign({},this_v1,{Q_out: subExp_CallExp_2_v0});
    return {res:this_v2,obj:this_v2};
}
var __s0_ty___run = function(this_v0){
    var _if_0 = function(){
        var tmp = Queue_takeFront(this_v0.Q_in,[]);
        var subExp_5 = tmp.res;
        var this_v1 = _.assign({},this_v0,{Q_in: tmp.obj});
        var subExp_arg_3=subExp_5[+0];
        var subExp_arg_4=2;
        var this_v2 = _.assign({},this_v1,{Q_out: Queue_pushBack(this_v1.Q_out,[subExp_arg_3,subExp_arg_4]).obj});
        var subExp_6=[1,this_v2,0];
        return subExp_6;
    }
    var _else_0 = function(){
        var tmp = Queue_takeFront(this_v0.Q_in,[]);
        var subExp_9 = tmp.res;
        var this_v1 = _.assign({},this_v0,{Q_in: tmp.obj});
        var subExp_arg_7=subExp_9[+0];
        var subExp_arg_8=3;
        var this_v2 = _.assign({},this_v1,{Q_out: Queue_pushBack(this_v1.Q_out,[subExp_arg_7,subExp_arg_8]).obj});
        var subExp_10=[1,this_v2,0];
        return subExp_10;
    }
    var eval_if_0 = function(){
        var subExp_14=((1/2));
        var subExp_11=sample(Bernoulli({p:subExp_14}));
        if(subExp_11){
            var subExp_12=_if_0([]);
            return subExp_12;
        }
        else{
            var subExp_13=_else_0([]);
            return subExp_13;
        }
    }
    var _ret_0=eval_if_0([]);
    var this_v0=_ret_0[+1];
    var subExp_15=[];
    return {res:subExp_15,obj:this_v0};
}

translating meaning of __s1_ty
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
__s1_ty
 
Expression of type Identifier:
Q_in
 
Expression of type Identifier:
Queue
 
Expression of type VarDecl:
Q_in: Queue
 
Expression of type Identifier:
Q_out
 
Expression of type Identifier:
Queue
 
Expression of type VarDecl:
Q_out: Queue
 
Expression of type ABinaryExp:
Q_in: Queue , Q_out: Queue
 
Expression of type Identifier:
__s1_ty
 
Expression of type Identifier:
this
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this.Q_in
 
Expression of type Identifier:
Queue'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Queue'()
 
Expression of type ABinaryExp:
this.Q_in = Queue'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this.Q_out
 
Expression of type Identifier:
Queue'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Queue'()
 
Expression of type ABinaryExp:
this.Q_out = Queue'()
 
Expression of type Identifier:
this
 
Expression of type ReturnExp:
return this
 
Expression of type FunctionDef:
def __s1_ty'(){
    this.Q_in = Queue'();
    this.Q_out = Queue'();
    return this;
}
 
Expression of type Identifier:
__run
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.Q_out
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.Q_out.pushBack
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.Q_in.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.Q_in.takeFront()
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.takeFront()[0]
 
Expression of type LiteralExp:
2
 
Expression of type TupleExp:
((this'.Q_in.takeFront()[0],2))
 
Expression of type CallExp:
this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
 
Expression of type TupleExp:
()
 
Expression of type ReturnExp:
return ()
 
Expression of type FunctionDef:
def __run(){
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
    return ();
}
 
Expression of type CompoundDecl:
{
    Q_in: Queue , Q_out: Queue;
    def __s1_ty'(){
        this.Q_in = Queue'();
        this.Q_out = Queue'();
        return this;
    }
    def __run(){
        this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
        return ();
    }
}
 
Expression of type DatDecl:
dat __s1_ty{
    Q_in: Queue , Q_out: Queue;
    def __s1_ty'(){
        this.Q_in = Queue'();
        this.Q_out = Queue'();
        return this;
    }
    def __run(){
        this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
        return ();
    }
}
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
dat __s1_ty{
    Q_in: Queue , Q_out: Queue;
    def __s1_ty'(){
        subExp_CallExp_1 := Queue();
        this.Q_in = subExp_CallExp_1;
        subExp_CallExp_2 := Queue();
        this.Q_out = subExp_CallExp_2;
        return this;
    }
    def __run(){
        subExp_5 := this.Q_in.takeFront();
        subExp_arg_3 := subExp_5[0];
        subExp_arg_4 := 2;
        this.Q_out.pushBack(subExp_arg_3,subExp_arg_4);
        subExp_6 := ();
        return subExp_6;
    }
}
illegal thing in data declaration:
Q_in: Queue , Q_out: Queue

var __s1_ty = function(){
    var this_v0 = {};
    var subExp_CallExp_1_v0 = Queue([]).obj;
    var this_v1 = _.assign({},this_v0,{Q_in: subExp_CallExp_1_v0});
    var subExp_CallExp_2_v0 = Queue([]).obj;
    var this_v2 = _.assign({},this_v1,{Q_out: subExp_CallExp_2_v0});
    return {res:this_v2,obj:this_v2};
}
var __s1_ty___run = function(this_v0){
    var tmp = Queue_takeFront(this_v0.Q_in,[]);
    var subExp_5 = tmp.res;
    var this_v1 = _.assign({},this_v0,{Q_in: tmp.obj});
    var subExp_arg_3=subExp_5[+0];
    var subExp_arg_4=2;
    var this_v2 = _.assign({},this_v1,{Q_out: Queue_pushBack(this_v1.Q_out,[subExp_arg_3,subExp_arg_4]).obj});
    var subExp_6=[];
    return {res:subExp_6,obj:this_v2};
}

translating meaning of __s2_ty
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
done with ifElseFunctional
Expression of type Identifier:
__s2_ty
 
Expression of type Identifier:
Q_in
 
Expression of type Identifier:
Queue
 
Expression of type VarDecl:
Q_in: Queue
 
Expression of type Identifier:
Q_out
 
Expression of type Identifier:
Queue
 
Expression of type VarDecl:
Q_out: Queue
 
Expression of type ABinaryExp:
Q_in: Queue , Q_out: Queue
 
Expression of type Identifier:
failing
 
Expression of type Identifier:
ℝ
 
Expression of type VarDecl:
failing: ℝ
 
Expression of type Identifier:
__s2_ty
 
Expression of type Identifier:
this
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this.Q_in
 
Expression of type Identifier:
Queue'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Queue'()
 
Expression of type ABinaryExp:
this.Q_in = Queue'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this.Q_out
 
Expression of type Identifier:
Queue'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Queue'()
 
Expression of type ABinaryExp:
this.Q_out = Queue'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
failing
 
Expression of type FieldExp:
this.failing
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
this.failing = 2
 
Expression of type Identifier:
this
 
Expression of type ReturnExp:
return this
 
Expression of type FunctionDef:
def __s2_ty'(){
    this.Q_in = Queue'();
    this.Q_out = Queue'();
    this.failing = 2;
    return this;
}
 
Expression of type Identifier:
__run
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
failing
 
Expression of type FieldExp:
this'.failing
 
Expression of type Identifier:
flip
 
Expression of type LiteralExp:
1
 
Expression of type LiteralExp:
1000
 
Expression of type ABinaryExp:
((1 / 1000))
 
Expression of type CallExp:
flip((1 / 1000))
 
Expression of type ABinaryExp:
this'.failing = flip((1 / 1000))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.failing = flip((1 / 1000));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
failing
 
Expression of type FieldExp:
this'.failing
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
(this'.failing == 2)
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if (this'.failing == 2) {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if (this'.failing == 2) {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
popFront
 
Expression of type FieldExp:
this'.Q_in.popFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.Q_in.popFront()
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.Q_in.popFront();
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.Q_out
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.Q_out.pushBack
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.Q_in.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.Q_in.takeFront()
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.takeFront()[0]
 
Expression of type LiteralExp:
2
 
Expression of type TupleExp:
((this'.Q_in.takeFront()[0],2))
 
Expression of type CallExp:
this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
failing
 
Expression of type FieldExp:
this'.failing
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
(this'.failing == 1)
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if (this'.failing == 1) {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if (this'.failing == 1) {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type TupleExp:
()
 
Expression of type ReturnExp:
return ()
 
Expression of type FunctionDef:
def __run(){
    def _if(){
        this'.failing = flip((1 / 1000));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if (this'.failing == 2) {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.Q_in.popFront();
        return (1,this',0);
    }
    def _else(){
        this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
        return (1,this',0);
    }
    def eval_if(){
        if (this'.failing == 1) {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return ();
}
 
Expression of type CompoundDecl:
{
    Q_in: Queue , Q_out: Queue;
    failing: ℝ;
    def __s2_ty'(){
        this.Q_in = Queue'();
        this.Q_out = Queue'();
        this.failing = 2;
        return this;
    }
    def __run(){
        def _if(){
            this'.failing = flip((1 / 1000));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if (this'.failing == 2) {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.Q_in.popFront();
            return (1,this',0);
        }
        def _else(){
            this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
            return (1,this',0);
        }
        def eval_if(){
            if (this'.failing == 1) {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return ();
    }
}
 
Expression of type DatDecl:
dat __s2_ty{
    Q_in: Queue , Q_out: Queue;
    failing: ℝ;
    def __s2_ty'(){
        this.Q_in = Queue'();
        this.Q_out = Queue'();
        this.failing = 2;
        return this;
    }
    def __run(){
        def _if(){
            this'.failing = flip((1 / 1000));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if (this'.failing == 2) {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.Q_in.popFront();
            return (1,this',0);
        }
        def _else(){
            this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
            return (1,this',0);
        }
        def eval_if(){
            if (this'.failing == 1) {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return ();
    }
}
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
dat __s2_ty{
    Q_in: Queue , Q_out: Queue;
    failing: ℝ;
    def __s2_ty'(){
        subExp_CallExp_1 := Queue();
        this.Q_in = subExp_CallExp_1;
        subExp_CallExp_2 := Queue();
        this.Q_out = subExp_CallExp_2;
        this.failing = 2;
        return this;
    }
    def __run(){
        def _if_0(){
            subExp_3 := ((1 / 1000));
            subExp_CallExp_4 := flip(subExp_3);
            this.failing = subExp_CallExp_4;
            subExp_5 := (1,this,0);
            return subExp_5;
        }
        def _else_0(){
            subExp_6 := (1,this,0);
            return subExp_6;
        }
        def eval_if_0(){
            subExp_10 := this.failing;
            subExp_7 := (subExp_10 == 2);
            if subExp_7 {
                subExp_8 := _if_0();
                return subExp_8;
            } else {
                subExp_9 := _else_0();
                return subExp_9;
            }
        }
        _ret_0 := eval_if_0();
        this = _ret_0[1];
        def _if_1(){
            this.Q_in.popFront();
            subExp_11 := (1,this,0);
            return subExp_11;
        }
        def _else_1(){
            subExp_14 := this.Q_in.takeFront();
            subExp_arg_12 := subExp_14[0];
            subExp_arg_13 := 2;
            this.Q_out.pushBack(subExp_arg_12,subExp_arg_13);
            subExp_15 := (1,this,0);
            return subExp_15;
        }
        def eval_if_1(){
            subExp_19 := this.failing;
            subExp_16 := (subExp_19 == 1);
            if subExp_16 {
                subExp_17 := _if_1();
                return subExp_17;
            } else {
                subExp_18 := _else_1();
                return subExp_18;
            }
        }
        _ret_1 := eval_if_1();
        this = _ret_1[1];
        subExp_20 := ();
        return subExp_20;
    }
}
illegal thing in data declaration:
Q_in: Queue , Q_out: Queue

var __s2_ty = function(){
    var this_v0 = {};
    var subExp_CallExp_1_v0 = Queue([]).obj;
    var this_v1 = _.assign({},this_v0,{Q_in: subExp_CallExp_1_v0});
    var subExp_CallExp_2_v0 = Queue([]).obj;
    var this_v2 = _.assign({},this_v1,{Q_out: subExp_CallExp_2_v0});
    var this_v3 = _.assign({},this_v2,{failing: 2});
    return {res:this_v3,obj:this_v3};
}
var __s2_ty___run = function(this_v0){
    var _if_0 = function(){
        var subExp_3=((1/1000));
        var subExp_CallExp_4=sample(Bernoulli({p:subExp_3}));
        var this_v1 = _.assign({},this_v0,{failing: subExp_CallExp_4});
        var subExp_5=[1,this_v1,0];
        return subExp_5;
    }
    var _else_0 = function(){
        var subExp_6=[1,this_v0,0];
        return subExp_6;
    }
    var eval_if_0 = function(){
        var subExp_10=this_v0.failing;
        var subExp_7=(subExp_10==2);
        if(subExp_7){
            var subExp_8=_if_0([]);
            return subExp_8;
        }
        else{
            var subExp_9=_else_0([]);
            return subExp_9;
        }
    }
    var _ret_0=eval_if_0([]);
    var this_v0=_ret_0[+1];
    var _if_1 = function(){
        var this_v1 = _.assign({},this_v0,{Q_in: Queue_popFront(this_v0.Q_in,[]).obj});
        var subExp_11=[1,this_v1,0];
        return subExp_11;
    }
    var _else_1 = function(){
        var tmp = Queue_takeFront(this_v0.Q_in,[]);
        var subExp_14 = tmp.res;
        var this_v1 = _.assign({},this_v0,{Q_in: tmp.obj});
        var subExp_arg_12=subExp_14[+0];
        var subExp_arg_13=2;
        var this_v2 = _.assign({},this_v1,{Q_out: Queue_pushBack(this_v1.Q_out,[subExp_arg_12,subExp_arg_13]).obj});
        var subExp_15=[1,this_v2,0];
        return subExp_15;
    }
    var eval_if_1 = function(){
        var subExp_19=this_v0.failing;
        var subExp_16=(subExp_19==1);
        if(subExp_16){
            var subExp_17=_if_1([]);
            return subExp_17;
        }
        else{
            var subExp_18=_else_1([]);
            return subExp_18;
        }
    }
    var _ret_1=eval_if_1([]);
    var this_v0=_ret_1[+1];
    var subExp_20=[];
    return {res:subExp_20,obj:this_v0};
}

translating meaning of __s3_ty
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
__s3_ty
 
Expression of type Identifier:
Q_in
 
Expression of type Identifier:
Queue
 
Expression of type VarDecl:
Q_in: Queue
 
Expression of type Identifier:
Q_out
 
Expression of type Identifier:
Queue
 
Expression of type VarDecl:
Q_out: Queue
 
Expression of type ABinaryExp:
Q_in: Queue , Q_out: Queue
 
Expression of type Identifier:
__s3_ty
 
Expression of type Identifier:
this
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this.Q_in
 
Expression of type Identifier:
Queue'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Queue'()
 
Expression of type ABinaryExp:
this.Q_in = Queue'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this.Q_out
 
Expression of type Identifier:
Queue'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Queue'()
 
Expression of type ABinaryExp:
this.Q_out = Queue'()
 
Expression of type Identifier:
this
 
Expression of type ReturnExp:
return this
 
Expression of type FunctionDef:
def __s3_ty'(){
    this.Q_in = Queue'();
    this.Q_out = Queue'();
    return this;
}
 
Expression of type Identifier:
__run
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.Q_out
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.Q_out.pushBack
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.Q_in.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.Q_in.takeFront()
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.takeFront()[0]
 
Expression of type LiteralExp:
3
 
Expression of type TupleExp:
((this'.Q_in.takeFront()[0],3))
 
Expression of type CallExp:
this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3))
 
Expression of type TupleExp:
()
 
Expression of type ReturnExp:
return ()
 
Expression of type FunctionDef:
def __run(){
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
    return ();
}
 
Expression of type CompoundDecl:
{
    Q_in: Queue , Q_out: Queue;
    def __s3_ty'(){
        this.Q_in = Queue'();
        this.Q_out = Queue'();
        return this;
    }
    def __run(){
        this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
        return ();
    }
}
 
Expression of type DatDecl:
dat __s3_ty{
    Q_in: Queue , Q_out: Queue;
    def __s3_ty'(){
        this.Q_in = Queue'();
        this.Q_out = Queue'();
        return this;
    }
    def __run(){
        this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
        return ();
    }
}
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
dat __s3_ty{
    Q_in: Queue , Q_out: Queue;
    def __s3_ty'(){
        subExp_CallExp_1 := Queue();
        this.Q_in = subExp_CallExp_1;
        subExp_CallExp_2 := Queue();
        this.Q_out = subExp_CallExp_2;
        return this;
    }
    def __run(){
        subExp_5 := this.Q_in.takeFront();
        subExp_arg_3 := subExp_5[0];
        subExp_arg_4 := 3;
        this.Q_out.pushBack(subExp_arg_3,subExp_arg_4);
        subExp_6 := ();
        return subExp_6;
    }
}
illegal thing in data declaration:
Q_in: Queue , Q_out: Queue

var __s3_ty = function(){
    var this_v0 = {};
    var subExp_CallExp_1_v0 = Queue([]).obj;
    var this_v1 = _.assign({},this_v0,{Q_in: subExp_CallExp_1_v0});
    var subExp_CallExp_2_v0 = Queue([]).obj;
    var this_v2 = _.assign({},this_v1,{Q_out: subExp_CallExp_2_v0});
    return {res:this_v2,obj:this_v2};
}
var __s3_ty___run = function(this_v0){
    var tmp = Queue_takeFront(this_v0.Q_in,[]);
    var subExp_5 = tmp.res;
    var this_v1 = _.assign({},this_v0,{Q_in: tmp.obj});
    var subExp_arg_3=subExp_5[+0];
    var subExp_arg_4=3;
    var this_v2 = _.assign({},this_v1,{Q_out: Queue_pushBack(this_v1.Q_out,[subExp_arg_3,subExp_arg_4]).obj});
    var subExp_6=[];
    return {res:subExp_6,obj:this_v2};
}

var __s3_ty = function(){
    var this_v0 = {};
    var subExp_CallExp_1_v0 = Queue([]).obj;
    var this_v1 = _.assign({},this_v0,{Q_in: subExp_CallExp_1_v0});
    var subExp_CallExp_2_v0 = Queue([]).obj;
    var this_v2 = _.assign({},this_v1,{Q_out: subExp_CallExp_2_v0});
    return {res:this_v2,obj:this_v2};
}
var __s3_ty___run = function(this_v0){
    var tmp = Queue_takeFront(this_v0.Q_in,[]);
    var subExp_5 = tmp.res;
    var this_v1 = _.assign({},this_v0,{Q_in: tmp.obj});
    var subExp_arg_3=subExp_5[+0];
    var subExp_arg_4=3;
    var this_v2 = _.assign({},this_v1,{Q_out: Queue_pushBack(this_v1.Q_out,[subExp_arg_3,subExp_arg_4]).obj});
    var subExp_6=[];
    return {res:subExp_6,obj:this_v2};
}
var __s2_ty = function(){
    var this_v0 = {};
    var subExp_CallExp_1_v0 = Queue([]).obj;
    var this_v1 = _.assign({},this_v0,{Q_in: subExp_CallExp_1_v0});
    var subExp_CallExp_2_v0 = Queue([]).obj;
    var this_v2 = _.assign({},this_v1,{Q_out: subExp_CallExp_2_v0});
    var this_v3 = _.assign({},this_v2,{failing: 2});
    return {res:this_v3,obj:this_v3};
}
var __s2_ty___run = function(this_v0){
    var _if_0 = function(){
        var subExp_3=((1/1000));
        var subExp_CallExp_4=sample(Bernoulli({p:subExp_3}));
        var this_v1 = _.assign({},this_v0,{failing: subExp_CallExp_4});
        var subExp_5=[1,this_v1,0];
        return subExp_5;
    }
    var _else_0 = function(){
        var subExp_6=[1,this_v0,0];
        return subExp_6;
    }
    var eval_if_0 = function(){
        var subExp_10=this_v0.failing;
        var subExp_7=(subExp_10==2);
        if(subExp_7){
            var subExp_8=_if_0([]);
            return subExp_8;
        }
        else{
            var subExp_9=_else_0([]);
            return subExp_9;
        }
    }
    var _ret_0=eval_if_0([]);
    var this_v0=_ret_0[+1];
    var _if_1 = function(){
        var this_v1 = _.assign({},this_v0,{Q_in: Queue_popFront(this_v0.Q_in,[]).obj});
        var subExp_11=[1,this_v1,0];
        return subExp_11;
    }
    var _else_1 = function(){
        var tmp = Queue_takeFront(this_v0.Q_in,[]);
        var subExp_14 = tmp.res;
        var this_v1 = _.assign({},this_v0,{Q_in: tmp.obj});
        var subExp_arg_12=subExp_14[+0];
        var subExp_arg_13=2;
        var this_v2 = _.assign({},this_v1,{Q_out: Queue_pushBack(this_v1.Q_out,[subExp_arg_12,subExp_arg_13]).obj});
        var subExp_15=[1,this_v2,0];
        return subExp_15;
    }
    var eval_if_1 = function(){
        var subExp_19=this_v0.failing;
        var subExp_16=(subExp_19==1);
        if(subExp_16){
            var subExp_17=_if_1([]);
            return subExp_17;
        }
        else{
            var subExp_18=_else_1([]);
            return subExp_18;
        }
    }
    var _ret_1=eval_if_1([]);
    var this_v0=_ret_1[+1];
    var subExp_20=[];
    return {res:subExp_20,obj:this_v0};
}
var __s1_ty = function(){
    var this_v0 = {};
    var subExp_CallExp_1_v0 = Queue([]).obj;
    var this_v1 = _.assign({},this_v0,{Q_in: subExp_CallExp_1_v0});
    var subExp_CallExp_2_v0 = Queue([]).obj;
    var this_v2 = _.assign({},this_v1,{Q_out: subExp_CallExp_2_v0});
    return {res:this_v2,obj:this_v2};
}
var __s1_ty___run = function(this_v0){
    var tmp = Queue_takeFront(this_v0.Q_in,[]);
    var subExp_5 = tmp.res;
    var this_v1 = _.assign({},this_v0,{Q_in: tmp.obj});
    var subExp_arg_3=subExp_5[+0];
    var subExp_arg_4=2;
    var this_v2 = _.assign({},this_v1,{Q_out: Queue_pushBack(this_v1.Q_out,[subExp_arg_3,subExp_arg_4]).obj});
    var subExp_6=[];
    return {res:subExp_6,obj:this_v2};
}
var __s0_ty = function(){
    var this_v0 = {};
    var subExp_CallExp_1_v0 = Queue([]).obj;
    var this_v1 = _.assign({},this_v0,{Q_in: subExp_CallExp_1_v0});
    var subExp_CallExp_2_v0 = Queue([]).obj;
    var this_v2 = _.assign({},this_v1,{Q_out: subExp_CallExp_2_v0});
    return {res:this_v2,obj:this_v2};
}
var __s0_ty___run = function(this_v0){
    var _if_0 = function(){
        var tmp = Queue_takeFront(this_v0.Q_in,[]);
        var subExp_5 = tmp.res;
        var this_v1 = _.assign({},this_v0,{Q_in: tmp.obj});
        var subExp_arg_3=subExp_5[+0];
        var subExp_arg_4=2;
        var this_v2 = _.assign({},this_v1,{Q_out: Queue_pushBack(this_v1.Q_out,[subExp_arg_3,subExp_arg_4]).obj});
        var subExp_6=[1,this_v2,0];
        return subExp_6;
    }
    var _else_0 = function(){
        var tmp = Queue_takeFront(this_v0.Q_in,[]);
        var subExp_9 = tmp.res;
        var this_v1 = _.assign({},this_v0,{Q_in: tmp.obj});
        var subExp_arg_7=subExp_9[+0];
        var subExp_arg_8=3;
        var this_v2 = _.assign({},this_v1,{Q_out: Queue_pushBack(this_v1.Q_out,[subExp_arg_7,subExp_arg_8]).obj});
        var subExp_10=[1,this_v2,0];
        return subExp_10;
    }
    var eval_if_0 = function(){
        var subExp_14=((1/2));
        var subExp_11=sample(Bernoulli({p:subExp_14}));
        if(subExp_11){
            var subExp_12=_if_0([]);
            return subExp_12;
        }
        else{
            var subExp_13=_else_0([]);
            return subExp_13;
        }
    }
    var _ret_0=eval_if_0([]);
    var this_v0=_ret_0[+1];
    var subExp_15=[];
    return {res:subExp_15,obj:this_v0};
}
var __h1_ty = function(){
    var this_v0 = {};
    var subExp_CallExp_1_v0 = Queue([]).obj;
    var this_v1 = _.assign({},this_v0,{Q_in: subExp_CallExp_1_v0});
    var subExp_CallExp_2_v0 = Queue([]).obj;
    var this_v2 = _.assign({},this_v1,{Q_out: subExp_CallExp_2_v0});
    var this_v3 = _.assign({},this_v2,{arrived: 0});
    return {res:this_v3,obj:this_v3};
}
var __h1_ty___run = function(this_v0){
    var this_v1 = _.assign({},this_v0,{arrived: 1});
    var this_v2 = _.assign({},this_v1,{Q_in: Queue_popFront(this_v1.Q_in,[]).obj});
    var subExp_3=[];
    return {res:subExp_3,obj:this_v2};
}
var Queue = function(){
    var this_v0 = {};
    var this_v1 = _.assign({},this_v0,{data: []});
    return {res:this_v1,obj:this_v1};
}
var Queue_pushFront = function(this_v0, x_0){
    var subExp_1=[x_0];
    var subExp_2=this_v0.data;
    var this_v1 = _.assign({},this_v0,{data: [].concat(subExp_1,subExp_2)});
    var subExp_3=[];
    return {res:subExp_3,obj:this_v1};
}
var Queue_pushBack = function(this_v0, x_0){
    var subExp_4=this_v0.data;
    var subExp_5=[x_0];
    var this_v1 = _.assign({},this_v0,{data: [].concat(subExp_4,subExp_5)});
    var subExp_6=[];
    return {res:subExp_6,obj:this_v1};
}
var Queue_takeFront = function(this_v0){
    var tmp = Queue_front(this_v0,[]);
    var r_0 = tmp.res;
    var this_v1 = tmp.obj;
    var this_v2 = Queue_popFront(this_v1,[]).obj;
    return {res:r_0,obj:this_v2};
}
var Queue_takeBack = function(this_v0){
    var subExp_7=this_v0.data;
    var tmp = Queue_size(this_v0,[]);
    var subExp_9 = tmp.res;
    var this_v1 = tmp.obj;
    var subExpArr_8=subExp_9-1;
    var r_0=subExp_7[+subExpArr_8];
    var subExp_10=this_v1.data;
    var tmp = Queue_size(this_v1,[]);
    var subExp_12 = tmp.res;
    var this_v2 = tmp.obj;
    var subExp_11=subExp_12-1;
    var this_v3 = _.assign({},this_v2,{data: ([].concat(subExp_10)).slice(0,subExp_11)});
    return {res:r_0,obj:this_v3};
}
var Queue_size = function(this_v0){
    var subExp_13=this_v0.data.length;
    return {res:subExp_13,obj:this_v0};
}
var Queue_front = function(this_v0){
    var subExp_15=this_v0.data;
    var subExp_14=subExp_15[+0];
    return {res:subExp_14,obj:this_v0};
}
var Queue_dupFront = function(this_v0){
    var tmp = Queue_front(this_v0,[]);
    var subExp_16 = tmp.res;
    var this_v1 = tmp.obj;
    var this_v2 = Queue_pushFront(this_v1,subExp_16).obj;
    var subExp_17=[];
    return {res:subExp_17,obj:this_v2};
}
var Queue_popFront = function(this_v0){
    var subExp_18=this_v0.data;
    var tmp = Queue_size(this_v0,[]);
    var subExp_19 = tmp.res;
    var this_v1 = tmp.obj;
    var this_v2 = _.assign({},this_v1,{data: ([].concat(subExp_18)).slice(1,subExp_19)});
    var subExp_20=[];
    return {res:subExp_20,obj:this_v2};
}
var __h0_ty = function(){
    var this_v0 = {};
    var subExp_CallExp_1_v0 = Queue([]).obj;
    var this_v1 = _.assign({},this_v0,{Q_in: subExp_CallExp_1_v0});
    var subExp_CallExp_2_v0 = Queue([]).obj;
    var this_v2 = _.assign({},this_v1,{Q_out: subExp_CallExp_2_v0});
    return {res:this_v2,obj:this_v2};
}
var __h0_ty___run = function(this_v0){
    var tmp = Queue_takeFront(this_v0.Q_in,[]);
    var subExp_5 = tmp.res;
    var this_v1 = _.assign({},this_v0,{Q_in: tmp.obj});
    var subExp_arg_3=subExp_5[+0];
    var subExp_arg_4=1;
    var this_v2 = _.assign({},this_v1,{Q_out: Queue_pushBack(this_v1.Q_out,[subExp_arg_3,subExp_arg_4]).obj});
    var subExp_6=[];
    return {res:subExp_6,obj:this_v2};
}
var __D = function(){
    var this_v0 = {};
    var subExp_CallExp_1_v0 = __h0_ty([]).obj;
    var this_v1 = _.assign({},this_v0,{__H0: subExp_CallExp_1_v0});
    var subExp_CallExp_2_v0 = __h1_ty([]).obj;
    var this_v2 = _.assign({},this_v1,{__H1: subExp_CallExp_2_v0});
    var subExp_CallExp_3_v0 = __s0_ty([]).obj;
    var this_v3 = _.assign({},this_v2,{__S0: subExp_CallExp_3_v0});
    var subExp_CallExp_4_v0 = __s1_ty([]).obj;
    var this_v4 = _.assign({},this_v3,{__S1: subExp_CallExp_4_v0});
    var subExp_CallExp_5_v0 = __s2_ty([]).obj;
    var this_v5 = _.assign({},this_v4,{__S2: subExp_CallExp_5_v0});
    var subExp_CallExp_6_v0 = __s3_ty([]).obj;
    var this_v6 = _.assign({},this_v5,{__S3: subExp_CallExp_6_v0});
    var this_v7 = _.assign({},this_v6,{phase: 0});
    var this_v8 = _.assign({},this_v7,{cur_node: 0});
    return {res:this_v8,obj:this_v8};
}
var __D_scheduler = function(this_v0){
    var p_0=0;
    var loop_body_0 = function(_args_0){
        var _tuple_0=_args_0;
        var p_1=_tuple_0[+0];
        var this_v0=_tuple_0[+1];
        var subExp_7=p_1<2;
        if(subExp_7){
            var _if_0 = function(){
                var i_0=0;
                var loop_body_1 = function(_args_0){
                    var _tuple_1=_args_0;
                    var i_1=_tuple_1[+0];
                    var this_v0=_tuple_1[+1];
                    var subExp_8=i_1<6;
                    if(subExp_8){
                        var _if_1 = function(){
                            var subExpArr_11=this_v0.cur_node;
                            var subExpArr_10=[0,subExpArr_11];
                            var subExp_9=[2,0,subExpArr_10];
                            return subExp_9;
                        }
                        var _else_0 = function(){
                            var subExp_12=[1,this_v0,0];
                            return subExp_12;
                        }
                        var eval_if_0 = function(){
                            var tmp = Queue_size((function(){if(this_v0.cur_node==0){ return this_v0.__H0.Q_in} else{ return (function(){if(this_v0.cur_node==1){ return this_v0.__H1.Q_in} else{ return (function(){if(this_v0.cur_node==2){ return this_v0.__S0.Q_in} else{ return (function(){if(this_v0.cur_node==3){ return this_v0.__S1.Q_in} else{ return (function(){if(this_v0.cur_node==4){ return this_v0.__S2.Q_in} else{ return this_v0.__S3.Q_in}})()}})()}})()}})()}})(),[]);
                            var subExp_16/*might have an error:*/ = tmp.res;
                            
                            var subExp_13=subExp_16>0;
                            if(subExp_13){
                                var subExp_14=_if_1([]);
                                return subExp_14;
                            }
                            else{
                                var subExp_15=_else_0([]);
                                return subExp_15;
                            }
                        }
                        var _ret_0=eval_if_0([]);
                        var subExp_21=_ret_0[+0];
                        var subExp_17=subExp_21==2;
                        if(subExp_17){
                            var subExpArr_20=_ret_0[+2];
                            var subExpArr_19=[2,0,subExpArr_20];
                            var subExp_18=[2,0,subExpArr_19];
                            return subExp_18;
                        }
                        var this_v0=_ret_0[+1];
                        var subExp_23=this_v0.cur_node;
                        var subExp_22=(subExp_23+1);
                        var this_v1 = _.assign({},this_v0,{cur_node: subExp_22%6});
                        var i_2=i_1+1;
                        var _new_args_0=[i_2,this_v1];
                        var subExp_24=[0,_new_args_0,0];
                        return subExp_24;
                    }
                    else{
                        var subExp_25=[1,_args_0,0];
                        return subExp_25;
                    }
                }
                var _loop_0 = function(arg_0){
                    var loop_body_2=arg_0[+0];
                    var args_0=arg_0[+1];
                    var k_0=loop_body_2(args_0);
                    var subExp_27=k_0[+0];
                    var subExp_26=subExp_27!=0;
                    if(subExp_26){
                        return k_0;
                    }
                    var subExp_arg_29=k_0[+1];
                    var subExp_28=_loop_0([loop_body_2,subExp_arg_29]);
                    return subExp_28;
                }
                var _args_1=[i_0,this_v0];
                var _ret_0=_loop_0([loop_body_1,_args_1]);
                var subExp_32=_ret_0[+0];
                var subExp_30=subExp_32==2;
                if(subExp_30){
                    var subExp_31=_ret_0[+2];
                    return subExp_31;
                }
                var _tuple_1=_ret_0[+1];
                var i_1=_tuple_1[+0];
                var this_v0=_tuple_1[+1];
                var this_v1 = _.assign({},this_v0,{phase: 1});
                var this_v2 = _.assign({},this_v1,{cur_node: 0});
                var subExp_33=[1,this_v2,0];
                return subExp_33;
            }
            var _else_0 = function(){
                var subExp_34=[1,this_v0,0];
                return subExp_34;
            }
            var eval_if_0 = function(){
                var subExp_38=this_v0.phase;
                var subExp_35=subExp_38==0;
                if(subExp_35){
                    var subExp_36=_if_0([]);
                    return subExp_36;
                }
                else{
                    var subExp_37=_else_0([]);
                    return subExp_37;
                }
            }
            var _ret_0=eval_if_0([]);
            var subExp_42=_ret_0[+0];
            var subExp_39=subExp_42==2;
            if(subExp_39){
                var subExpArr_41=_ret_0[+2];
                var subExp_40=[2,0,subExpArr_41];
                return subExp_40;
            }
            var this_v0=_ret_0[+1];
            var _if_1 = function(){
                var i_0=0;
                var loop_body_1 = function(_args_0){
                    var _tuple_1=_args_0;
                    var i_1=_tuple_1[+0];
                    var this_v0=_tuple_1[+1];
                    var subExp_43=i_1<6;
                    if(subExp_43){
                        var _if_2 = function(){
                            var subExpArr_46=this_v0.cur_node;
                            var subExpArr_45=[1,subExpArr_46];
                            var subExp_44=[2,0,subExpArr_45];
                            return subExp_44;
                        }
                        var _else_1 = function(){
                            var subExp_47=[1,this_v0,0];
                            return subExp_47;
                        }
                        var eval_if_1 = function(){
                            var tmp = Queue_size((function(){if(this_v0.cur_node==0){ return this_v0.__H0.Q_out} else{ return (function(){if(this_v0.cur_node==1){ return this_v0.__H1.Q_out} else{ return (function(){if(this_v0.cur_node==2){ return this_v0.__S0.Q_out} else{ return (function(){if(this_v0.cur_node==3){ return this_v0.__S1.Q_out} else{ return (function(){if(this_v0.cur_node==4){ return this_v0.__S2.Q_out} else{ return this_v0.__S3.Q_out}})()}})()}})()}})()}})(),[]);
                            var subExp_51/*might have an error:*/ = tmp.res;
                            
                            var subExp_48=subExp_51>0;
                            if(subExp_48){
                                var subExp_49=_if_2([]);
                                return subExp_49;
                            }
                            else{
                                var subExp_50=_else_1([]);
                                return subExp_50;
                            }
                        }
                        var _ret_1=eval_if_1([]);
                        var subExp_56=_ret_1[+0];
                        var subExp_52=subExp_56==2;
                        if(subExp_52){
                            var subExpArr_55=_ret_1[+2];
                            var subExpArr_54=[2,0,subExpArr_55];
                            var subExp_53=[2,0,subExpArr_54];
                            return subExp_53;
                        }
                        var this_v0=_ret_1[+1];
                        var subExp_58=this_v0.cur_node;
                        var subExp_57=(subExp_58+1);
                        var this_v1 = _.assign({},this_v0,{cur_node: subExp_57%6});
                        var i_2=i_1+1;
                        var _new_args_0=[i_2,this_v1];
                        var subExp_59=[0,_new_args_0,0];
                        return subExp_59;
                    }
                    else{
                        var subExp_60=[1,_args_0,0];
                        return subExp_60;
                    }
                }
                var _loop_0 = function(arg_0){
                    var loop_body_2=arg_0[+0];
                    var args_0=arg_0[+1];
                    var k_0=loop_body_2(args_0);
                    var subExp_62=k_0[+0];
                    var subExp_61=subExp_62!=0;
                    if(subExp_61){
                        return k_0;
                    }
                    var subExp_arg_64=k_0[+1];
                    var subExp_63=_loop_0([loop_body_2,subExp_arg_64]);
                    return subExp_63;
                }
                var _args_1=[i_0,this_v0];
                var _ret_1=_loop_0([loop_body_1,_args_1]);
                var subExp_67=_ret_1[+0];
                var subExp_65=subExp_67==2;
                if(subExp_65){
                    var subExp_66=_ret_1[+2];
                    return subExp_66;
                }
                var _tuple_1=_ret_1[+1];
                var i_1=_tuple_1[+0];
                var this_v0=_tuple_1[+1];
                var this_v1 = _.assign({},this_v0,{phase: 0});
                var this_v2 = _.assign({},this_v1,{cur_node: 0});
                var subExp_68=[1,this_v2,0];
                return subExp_68;
            }
            var _else_1 = function(){
                var subExp_69=[1,this_v0,0];
                return subExp_69;
            }
            var eval_if_1 = function(){
                var subExp_73=this_v0.phase;
                var subExp_70=subExp_73==1;
                if(subExp_70){
                    var subExp_71=_if_1([]);
                    return subExp_71;
                }
                else{
                    var subExp_72=_else_1([]);
                    return subExp_72;
                }
            }
            var _ret_1=eval_if_1([]);
            var subExp_77=_ret_1[+0];
            var subExp_74=subExp_77==2;
            if(subExp_74){
                var subExpArr_76=_ret_1[+2];
                var subExp_75=[2,0,subExpArr_76];
                return subExp_75;
            }
            var this_v0=_ret_1[+1];
            var p_2=p_1+1;
            var _new_args_0=[p_2,this_v0];
            var subExp_78=[0,_new_args_0,0];
            return subExp_78;
        }
        else{
            var subExp_79=[1,_args_0,0];
            return subExp_79;
        }
    }
    var _loop_0 = function(arg_0){
        var loop_body_1=arg_0[+0];
        var args_0=arg_0[+1];
        var k_0=loop_body_1(args_0);
        var subExp_81=k_0[+0];
        var subExp_80=subExp_81!=0;
        if(subExp_80){
            return k_0;
        }
        var subExp_arg_83=k_0[+1];
        var subExp_82=_loop_0([loop_body_1,subExp_arg_83]);
        return subExp_82;
    }
    var _args_0=[p_0,this_v0];
    var _ret_0=_loop_0([loop_body_0,_args_0]);
    var subExp_86=_ret_0[+0];
    var subExp_84=subExp_86==2;
    if(subExp_84){
        var subExp_85=_ret_0[+2];
        return {res:subExp_85,obj:this_v0};
    }
    var _tuple_0=_ret_0[+1];
    var p_1=_tuple_0[+0];
    var this_v0=_tuple_0[+1];
    "error"
}
var __D___step = function(this_v0){
    var _if_0 = function(){
        var tmp = __D_scheduler(this_v0,[]);
        var _tuple_0 = tmp.res;
        var this_v1 = tmp.obj;
        var action_0=_tuple_0[+0];
        var node_0=_tuple_0[+1];
        var _if_1 = function(){
            var _if_2 = function(){
                var tmp = Queue_takeFront(this_v1.__H0.Q_out,[]);
                var _tuple_1 = tmp.res;
                var new___H0=_.assign({},this_v1.__H0,{Q_out:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__H0: new___H0});
                var pkt_0=_tuple_1[+0];
                var port_0=_tuple_1[+1];
                var _if_3 = function(){
                    var subExp_arg_87=1;
                    var new___S0=_.assign({},this_v2.__S0,{Q_in:Queue_pushBack(this_v2.__S0.Q_in,[pkt_0,subExp_arg_87]).obj});
                    var this_v3 = _.assign({},this_v2,{__S0: new___S0});
                    var subExp_88=[1,this_v3,0];
                    return subExp_88;
                }
                var _else_0 = function(){
                    var subExp_89=[1,this_v2,0];
                    return subExp_89;
                }
                var eval_if_0 = function(){
                    var subExp_90=port_0==1;
                    if(subExp_90){
                        var subExp_91=_if_3([]);
                        return subExp_91;
                    }
                    else{
                        var subExp_92=_else_0([]);
                        return subExp_92;
                    }
                }
                var _ret_0=eval_if_0([]);
                var this_v2=_ret_0[+1];
                var subExp_93=[1,this_v2,0];
                return subExp_93;
            }
            var _else_0 = function(){
                var subExp_94=[1,this_v1,0];
                return subExp_94;
            }
            var eval_if_0 = function(){
                var subExp_98=node_0==0;
                var tmp = Queue_size(this_v1.__H0.Q_out,[]);
                var subExp_99 = tmp.res;
                var new___H0=_.assign({},this_v1.__H0,{Q_out:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__H0: new___H0});
                var subExp_95=subExp_98&&subExp_99;
                if(subExp_95){
                    var subExp_96=_if_2([]);
                    return subExp_96;
                }
                else{
                    var subExp_97=_else_0([]);
                    return subExp_97;
                }
            }
            var _ret_0=eval_if_0([]);
            var this_v1=_ret_0[+1];
            var _if_3 = function(){
                var tmp = Queue_takeFront(this_v1.__H1.Q_out,[]);
                var _tuple_1 = tmp.res;
                var new___H1=_.assign({},this_v1.__H1,{Q_out:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__H1: new___H1});
                var pkt_0=_tuple_1[+0];
                var port_0=_tuple_1[+1];
                var _if_4 = function(){
                    var subExp_arg_100=3;
                    var new___S3=_.assign({},this_v2.__S3,{Q_in:Queue_pushBack(this_v2.__S3.Q_in,[pkt_0,subExp_arg_100]).obj});
                    var this_v3 = _.assign({},this_v2,{__S3: new___S3});
                    var subExp_101=[1,this_v3,0];
                    return subExp_101;
                }
                var _else_1 = function(){
                    var subExp_102=[1,this_v2,0];
                    return subExp_102;
                }
                var eval_if_1 = function(){
                    var subExp_103=port_0==1;
                    if(subExp_103){
                        var subExp_104=_if_4([]);
                        return subExp_104;
                    }
                    else{
                        var subExp_105=_else_1([]);
                        return subExp_105;
                    }
                }
                var _ret_1=eval_if_1([]);
                var this_v2=_ret_1[+1];
                var subExp_106=[1,this_v2,0];
                return subExp_106;
            }
            var _else_1 = function(){
                var subExp_107=[1,this_v1,0];
                return subExp_107;
            }
            var eval_if_1 = function(){
                var subExp_111=node_0==1;
                var tmp = Queue_size(this_v1.__H1.Q_out,[]);
                var subExp_112 = tmp.res;
                var new___H1=_.assign({},this_v1.__H1,{Q_out:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__H1: new___H1});
                var subExp_108=subExp_111&&subExp_112;
                if(subExp_108){
                    var subExp_109=_if_3([]);
                    return subExp_109;
                }
                else{
                    var subExp_110=_else_1([]);
                    return subExp_110;
                }
            }
            var _ret_1=eval_if_1([]);
            var this_v1=_ret_1[+1];
            var _if_4 = function(){
                var tmp = Queue_takeFront(this_v1.__S0.Q_out,[]);
                var _tuple_1 = tmp.res;
                var new___S0=_.assign({},this_v1.__S0,{Q_out:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S0: new___S0});
                var pkt_0=_tuple_1[+0];
                var port_0=_tuple_1[+1];
                var _if_5 = function(){
                    var subExp_arg_113=1;
                    var new___H0=_.assign({},this_v2.__H0,{Q_in:Queue_pushBack(this_v2.__H0.Q_in,[pkt_0,subExp_arg_113]).obj});
                    var this_v3 = _.assign({},this_v2,{__H0: new___H0});
                    var subExp_114=[1,this_v3,0];
                    return subExp_114;
                }
                var _else_2 = function(){
                    var subExp_115=[1,this_v2,0];
                    return subExp_115;
                }
                var eval_if_2 = function(){
                    var subExp_116=port_0==1;
                    if(subExp_116){
                        var subExp_117=_if_5([]);
                        return subExp_117;
                    }
                    else{
                        var subExp_118=_else_2([]);
                        return subExp_118;
                    }
                }
                var _ret_2=eval_if_2([]);
                var this_v2=_ret_2[+1];
                var _if_6 = function(){
                    var subExp_arg_119=1;
                    var new___S1=_.assign({},this_v2.__S1,{Q_in:Queue_pushBack(this_v2.__S1.Q_in,[pkt_0,subExp_arg_119]).obj});
                    var this_v3 = _.assign({},this_v2,{__S1: new___S1});
                    var subExp_120=[1,this_v3,0];
                    return subExp_120;
                }
                var _else_3 = function(){
                    var subExp_121=[1,this_v2,0];
                    return subExp_121;
                }
                var eval_if_3 = function(){
                    var subExp_122=port_0==2;
                    if(subExp_122){
                        var subExp_123=_if_6([]);
                        return subExp_123;
                    }
                    else{
                        var subExp_124=_else_3([]);
                        return subExp_124;
                    }
                }
                var _ret_3=eval_if_3([]);
                var this_v2=_ret_3[+1];
                var _if_7 = function(){
                    var subExp_arg_125=1;
                    var new___S2=_.assign({},this_v2.__S2,{Q_in:Queue_pushBack(this_v2.__S2.Q_in,[pkt_0,subExp_arg_125]).obj});
                    var this_v3 = _.assign({},this_v2,{__S2: new___S2});
                    var subExp_126=[1,this_v3,0];
                    return subExp_126;
                }
                var _else_4 = function(){
                    var subExp_127=[1,this_v2,0];
                    return subExp_127;
                }
                var eval_if_4 = function(){
                    var subExp_128=port_0==3;
                    if(subExp_128){
                        var subExp_129=_if_7([]);
                        return subExp_129;
                    }
                    else{
                        var subExp_130=_else_4([]);
                        return subExp_130;
                    }
                }
                var _ret_4=eval_if_4([]);
                var this_v2=_ret_4[+1];
                var subExp_131=[1,this_v2,0];
                return subExp_131;
            }
            var _else_2 = function(){
                var subExp_132=[1,this_v1,0];
                return subExp_132;
            }
            var eval_if_2 = function(){
                var subExp_136=node_0==2;
                var tmp = Queue_size(this_v1.__S0.Q_out,[]);
                var subExp_137 = tmp.res;
                var new___S0=_.assign({},this_v1.__S0,{Q_out:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S0: new___S0});
                var subExp_133=subExp_136&&subExp_137;
                if(subExp_133){
                    var subExp_134=_if_4([]);
                    return subExp_134;
                }
                else{
                    var subExp_135=_else_2([]);
                    return subExp_135;
                }
            }
            var _ret_2=eval_if_2([]);
            var this_v1=_ret_2[+1];
            var _if_5 = function(){
                var tmp = Queue_takeFront(this_v1.__S1.Q_out,[]);
                var _tuple_1 = tmp.res;
                var new___S1=_.assign({},this_v1.__S1,{Q_out:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S1: new___S1});
                var pkt_0=_tuple_1[+0];
                var port_0=_tuple_1[+1];
                var _if_6 = function(){
                    var subExp_arg_138=2;
                    var new___S0=_.assign({},this_v2.__S0,{Q_in:Queue_pushBack(this_v2.__S0.Q_in,[pkt_0,subExp_arg_138]).obj});
                    var this_v3 = _.assign({},this_v2,{__S0: new___S0});
                    var subExp_139=[1,this_v3,0];
                    return subExp_139;
                }
                var _else_3 = function(){
                    var subExp_140=[1,this_v2,0];
                    return subExp_140;
                }
                var eval_if_3 = function(){
                    var subExp_141=port_0==1;
                    if(subExp_141){
                        var subExp_142=_if_6([]);
                        return subExp_142;
                    }
                    else{
                        var subExp_143=_else_3([]);
                        return subExp_143;
                    }
                }
                var _ret_3=eval_if_3([]);
                var this_v2=_ret_3[+1];
                var _if_7 = function(){
                    var subExp_arg_144=1;
                    var new___S3=_.assign({},this_v2.__S3,{Q_in:Queue_pushBack(this_v2.__S3.Q_in,[pkt_0,subExp_arg_144]).obj});
                    var this_v3 = _.assign({},this_v2,{__S3: new___S3});
                    var subExp_145=[1,this_v3,0];
                    return subExp_145;
                }
                var _else_4 = function(){
                    var subExp_146=[1,this_v2,0];
                    return subExp_146;
                }
                var eval_if_4 = function(){
                    var subExp_147=port_0==2;
                    if(subExp_147){
                        var subExp_148=_if_7([]);
                        return subExp_148;
                    }
                    else{
                        var subExp_149=_else_4([]);
                        return subExp_149;
                    }
                }
                var _ret_4=eval_if_4([]);
                var this_v2=_ret_4[+1];
                var subExp_150=[1,this_v2,0];
                return subExp_150;
            }
            var _else_3 = function(){
                var subExp_151=[1,this_v1,0];
                return subExp_151;
            }
            var eval_if_3 = function(){
                var subExp_155=node_0==3;
                var tmp = Queue_size(this_v1.__S1.Q_out,[]);
                var subExp_156 = tmp.res;
                var new___S1=_.assign({},this_v1.__S1,{Q_out:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S1: new___S1});
                var subExp_152=subExp_155&&subExp_156;
                if(subExp_152){
                    var subExp_153=_if_5([]);
                    return subExp_153;
                }
                else{
                    var subExp_154=_else_3([]);
                    return subExp_154;
                }
            }
            var _ret_3=eval_if_3([]);
            var this_v1=_ret_3[+1];
            var _if_6 = function(){
                var tmp = Queue_takeFront(this_v1.__S2.Q_out,[]);
                var _tuple_1 = tmp.res;
                var new___S2=_.assign({},this_v1.__S2,{Q_out:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S2: new___S2});
                var pkt_0=_tuple_1[+0];
                var port_0=_tuple_1[+1];
                var _if_7 = function(){
                    var subExp_arg_157=3;
                    var new___S0=_.assign({},this_v2.__S0,{Q_in:Queue_pushBack(this_v2.__S0.Q_in,[pkt_0,subExp_arg_157]).obj});
                    var this_v3 = _.assign({},this_v2,{__S0: new___S0});
                    var subExp_158=[1,this_v3,0];
                    return subExp_158;
                }
                var _else_4 = function(){
                    var subExp_159=[1,this_v2,0];
                    return subExp_159;
                }
                var eval_if_4 = function(){
                    var subExp_160=port_0==1;
                    if(subExp_160){
                        var subExp_161=_if_7([]);
                        return subExp_161;
                    }
                    else{
                        var subExp_162=_else_4([]);
                        return subExp_162;
                    }
                }
                var _ret_4=eval_if_4([]);
                var this_v2=_ret_4[+1];
                var _if_8 = function(){
                    var subExp_arg_163=2;
                    var new___S3=_.assign({},this_v2.__S3,{Q_in:Queue_pushBack(this_v2.__S3.Q_in,[pkt_0,subExp_arg_163]).obj});
                    var this_v3 = _.assign({},this_v2,{__S3: new___S3});
                    var subExp_164=[1,this_v3,0];
                    return subExp_164;
                }
                var _else_5 = function(){
                    var subExp_165=[1,this_v2,0];
                    return subExp_165;
                }
                var eval_if_5 = function(){
                    var subExp_166=port_0==2;
                    if(subExp_166){
                        var subExp_167=_if_8([]);
                        return subExp_167;
                    }
                    else{
                        var subExp_168=_else_5([]);
                        return subExp_168;
                    }
                }
                var _ret_5=eval_if_5([]);
                var this_v2=_ret_5[+1];
                var subExp_169=[1,this_v2,0];
                return subExp_169;
            }
            var _else_4 = function(){
                var subExp_170=[1,this_v1,0];
                return subExp_170;
            }
            var eval_if_4 = function(){
                var subExp_174=node_0==4;
                var tmp = Queue_size(this_v1.__S2.Q_out,[]);
                var subExp_175 = tmp.res;
                var new___S2=_.assign({},this_v1.__S2,{Q_out:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S2: new___S2});
                var subExp_171=subExp_174&&subExp_175;
                if(subExp_171){
                    var subExp_172=_if_6([]);
                    return subExp_172;
                }
                else{
                    var subExp_173=_else_4([]);
                    return subExp_173;
                }
            }
            var _ret_4=eval_if_4([]);
            var this_v1=_ret_4[+1];
            var _if_7 = function(){
                var tmp = Queue_takeFront(this_v1.__S3.Q_out,[]);
                var _tuple_1 = tmp.res;
                var new___S3=_.assign({},this_v1.__S3,{Q_out:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S3: new___S3});
                var pkt_0=_tuple_1[+0];
                var port_0=_tuple_1[+1];
                var _if_8 = function(){
                    var subExp_arg_176=2;
                    var new___S1=_.assign({},this_v2.__S1,{Q_in:Queue_pushBack(this_v2.__S1.Q_in,[pkt_0,subExp_arg_176]).obj});
                    var this_v3 = _.assign({},this_v2,{__S1: new___S1});
                    var subExp_177=[1,this_v3,0];
                    return subExp_177;
                }
                var _else_5 = function(){
                    var subExp_178=[1,this_v2,0];
                    return subExp_178;
                }
                var eval_if_5 = function(){
                    var subExp_179=port_0==1;
                    if(subExp_179){
                        var subExp_180=_if_8([]);
                        return subExp_180;
                    }
                    else{
                        var subExp_181=_else_5([]);
                        return subExp_181;
                    }
                }
                var _ret_5=eval_if_5([]);
                var this_v2=_ret_5[+1];
                var _if_9 = function(){
                    var subExp_arg_182=2;
                    var new___S2=_.assign({},this_v2.__S2,{Q_in:Queue_pushBack(this_v2.__S2.Q_in,[pkt_0,subExp_arg_182]).obj});
                    var this_v3 = _.assign({},this_v2,{__S2: new___S2});
                    var subExp_183=[1,this_v3,0];
                    return subExp_183;
                }
                var _else_6 = function(){
                    var subExp_184=[1,this_v2,0];
                    return subExp_184;
                }
                var eval_if_6 = function(){
                    var subExp_185=port_0==2;
                    if(subExp_185){
                        var subExp_186=_if_9([]);
                        return subExp_186;
                    }
                    else{
                        var subExp_187=_else_6([]);
                        return subExp_187;
                    }
                }
                var _ret_6=eval_if_6([]);
                var this_v2=_ret_6[+1];
                var _if_10 = function(){
                    var subExp_arg_188=1;
                    var new___H1=_.assign({},this_v2.__H1,{Q_in:Queue_pushBack(this_v2.__H1.Q_in,[pkt_0,subExp_arg_188]).obj});
                    var this_v3 = _.assign({},this_v2,{__H1: new___H1});
                    var subExp_189=[1,this_v3,0];
                    return subExp_189;
                }
                var _else_7 = function(){
                    var subExp_190=[1,this_v2,0];
                    return subExp_190;
                }
                var eval_if_7 = function(){
                    var subExp_191=port_0==3;
                    if(subExp_191){
                        var subExp_192=_if_10([]);
                        return subExp_192;
                    }
                    else{
                        var subExp_193=_else_7([]);
                        return subExp_193;
                    }
                }
                var _ret_7=eval_if_7([]);
                var this_v2=_ret_7[+1];
                var subExp_194=[1,this_v2,0];
                return subExp_194;
            }
            var _else_5 = function(){
                var subExp_195=[1,this_v1,0];
                return subExp_195;
            }
            var eval_if_5 = function(){
                var subExp_199=node_0==5;
                var tmp = Queue_size(this_v1.__S3.Q_out,[]);
                var subExp_200 = tmp.res;
                var new___S3=_.assign({},this_v1.__S3,{Q_out:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S3: new___S3});
                var subExp_196=subExp_199&&subExp_200;
                if(subExp_196){
                    var subExp_197=_if_7([]);
                    return subExp_197;
                }
                else{
                    var subExp_198=_else_5([]);
                    return subExp_198;
                }
            }
            var _ret_5=eval_if_5([]);
            var this_v1=_ret_5[+1];
            var subExp_201=[1,this_v1,0];
            return subExp_201;
        }
        var _else_0 = function(){
            var _if_2 = function(){
                var this_v2 = _.assign({},this_v1,{__H0: __h0_ty___run(this_v1.__H0,[]).obj});
                var subExp_202=[1,this_v2,0];
                return subExp_202;
            }
            var _else_1 = function(){
                var subExp_203=[1,this_v1,0];
                return subExp_203;
            }
            var eval_if_0 = function(){
                var subExp_207=node_0==0;
                var tmp = Queue_size(this_v1.__H0.Q_in,[]);
                var subExp_208 = tmp.res;
                var new___H0=_.assign({},this_v1.__H0,{Q_in:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__H0: new___H0});
                var subExp_204=subExp_207&&subExp_208;
                if(subExp_204){
                    var subExp_205=_if_2([]);
                    return subExp_205;
                }
                else{
                    var subExp_206=_else_1([]);
                    return subExp_206;
                }
            }
            var _ret_0=eval_if_0([]);
            var this_v1=_ret_0[+1];
            var _if_3 = function(){
                var this_v2 = _.assign({},this_v1,{__H1: __h1_ty___run(this_v1.__H1,[]).obj});
                var subExp_209=[1,this_v2,0];
                return subExp_209;
            }
            var _else_2 = function(){
                var subExp_210=[1,this_v1,0];
                return subExp_210;
            }
            var eval_if_1 = function(){
                var subExp_214=node_0==1;
                var tmp = Queue_size(this_v1.__H1.Q_in,[]);
                var subExp_215 = tmp.res;
                var new___H1=_.assign({},this_v1.__H1,{Q_in:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__H1: new___H1});
                var subExp_211=subExp_214&&subExp_215;
                if(subExp_211){
                    var subExp_212=_if_3([]);
                    return subExp_212;
                }
                else{
                    var subExp_213=_else_2([]);
                    return subExp_213;
                }
            }
            var _ret_1=eval_if_1([]);
            var this_v1=_ret_1[+1];
            var _if_4 = function(){
                var this_v2 = _.assign({},this_v1,{__S0: __s0_ty___run(this_v1.__S0,[]).obj});
                var subExp_216=[1,this_v2,0];
                return subExp_216;
            }
            var _else_3 = function(){
                var subExp_217=[1,this_v1,0];
                return subExp_217;
            }
            var eval_if_2 = function(){
                var subExp_221=node_0==2;
                var tmp = Queue_size(this_v1.__S0.Q_in,[]);
                var subExp_222 = tmp.res;
                var new___S0=_.assign({},this_v1.__S0,{Q_in:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S0: new___S0});
                var subExp_218=subExp_221&&subExp_222;
                if(subExp_218){
                    var subExp_219=_if_4([]);
                    return subExp_219;
                }
                else{
                    var subExp_220=_else_3([]);
                    return subExp_220;
                }
            }
            var _ret_2=eval_if_2([]);
            var this_v1=_ret_2[+1];
            var _if_5 = function(){
                var this_v2 = _.assign({},this_v1,{__S1: __s1_ty___run(this_v1.__S1,[]).obj});
                var subExp_223=[1,this_v2,0];
                return subExp_223;
            }
            var _else_4 = function(){
                var subExp_224=[1,this_v1,0];
                return subExp_224;
            }
            var eval_if_3 = function(){
                var subExp_228=node_0==3;
                var tmp = Queue_size(this_v1.__S1.Q_in,[]);
                var subExp_229 = tmp.res;
                var new___S1=_.assign({},this_v1.__S1,{Q_in:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S1: new___S1});
                var subExp_225=subExp_228&&subExp_229;
                if(subExp_225){
                    var subExp_226=_if_5([]);
                    return subExp_226;
                }
                else{
                    var subExp_227=_else_4([]);
                    return subExp_227;
                }
            }
            var _ret_3=eval_if_3([]);
            var this_v1=_ret_3[+1];
            var _if_6 = function(){
                var this_v2 = _.assign({},this_v1,{__S2: __s2_ty___run(this_v1.__S2,[]).obj});
                var subExp_230=[1,this_v2,0];
                return subExp_230;
            }
            var _else_5 = function(){
                var subExp_231=[1,this_v1,0];
                return subExp_231;
            }
            var eval_if_4 = function(){
                var subExp_235=node_0==4;
                var tmp = Queue_size(this_v1.__S2.Q_in,[]);
                var subExp_236 = tmp.res;
                var new___S2=_.assign({},this_v1.__S2,{Q_in:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S2: new___S2});
                var subExp_232=subExp_235&&subExp_236;
                if(subExp_232){
                    var subExp_233=_if_6([]);
                    return subExp_233;
                }
                else{
                    var subExp_234=_else_5([]);
                    return subExp_234;
                }
            }
            var _ret_4=eval_if_4([]);
            var this_v1=_ret_4[+1];
            var _if_7 = function(){
                var this_v2 = _.assign({},this_v1,{__S3: __s3_ty___run(this_v1.__S3,[]).obj});
                var subExp_237=[1,this_v2,0];
                return subExp_237;
            }
            var _else_6 = function(){
                var subExp_238=[1,this_v1,0];
                return subExp_238;
            }
            var eval_if_5 = function(){
                var subExp_242=node_0==5;
                var tmp = Queue_size(this_v1.__S3.Q_in,[]);
                var subExp_243 = tmp.res;
                var new___S3=_.assign({},this_v1.__S3,{Q_in:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S3: new___S3});
                var subExp_239=subExp_242&&subExp_243;
                if(subExp_239){
                    var subExp_240=_if_7([]);
                    return subExp_240;
                }
                else{
                    var subExp_241=_else_6([]);
                    return subExp_241;
                }
            }
            var _ret_5=eval_if_5([]);
            var this_v1=_ret_5[+1];
            var subExp_244=[1,this_v1,0];
            return subExp_244;
        }
        var eval_if_0 = function(){
            if(action_0){
                var subExp_245=_if_1([]);
                return subExp_245;
            }
            else{
                var subExp_246=_else_0([]);
                return subExp_246;
            }
        }
        var _ret_0=eval_if_0([]);
        var this_v1=_ret_0[+1];
        var subExp_247=[1,this_v1,0];
        return subExp_247;
    }
    var _else_0 = function(){
        var subExp_248=[1,this_v0,0];
        return subExp_248;
    }
    var eval_if_0 = function(){
        var tmp = Queue_size(this_v0.__H0.Q_in,[]);
        var subExp_272 = tmp.res;
        var new___H0=_.assign({},this_v0.__H0,{Q_in:tmp.obj});
        var this_v1 = _.assign({},this_v0,{__H0: new___H0});
        var tmp = Queue_size(this_v1.__H0.Q_out,[]);
        var subExp_273 = tmp.res;
        var new___H0=_.assign({},this_v1.__H0,{Q_out:tmp.obj});
        var this_v2 = _.assign({},this_v1,{__H0: new___H0});
        var subExp_270=subExp_272||subExp_273;
        var tmp = Queue_size(this_v2.__H1.Q_in,[]);
        var subExp_271 = tmp.res;
        var new___H1=_.assign({},this_v2.__H1,{Q_in:tmp.obj});
        var this_v3 = _.assign({},this_v2,{__H1: new___H1});
        var subExp_268=subExp_270||subExp_271;
        var tmp = Queue_size(this_v3.__H1.Q_out,[]);
        var subExp_269 = tmp.res;
        var new___H1=_.assign({},this_v3.__H1,{Q_out:tmp.obj});
        var this_v4 = _.assign({},this_v3,{__H1: new___H1});
        var subExp_266=subExp_268||subExp_269;
        var tmp = Queue_size(this_v4.__S0.Q_in,[]);
        var subExp_267 = tmp.res;
        var new___S0=_.assign({},this_v4.__S0,{Q_in:tmp.obj});
        var this_v5 = _.assign({},this_v4,{__S0: new___S0});
        var subExp_264=subExp_266||subExp_267;
        var tmp = Queue_size(this_v5.__S0.Q_out,[]);
        var subExp_265 = tmp.res;
        var new___S0=_.assign({},this_v5.__S0,{Q_out:tmp.obj});
        var this_v6 = _.assign({},this_v5,{__S0: new___S0});
        var subExp_262=subExp_264||subExp_265;
        var tmp = Queue_size(this_v6.__S1.Q_in,[]);
        var subExp_263 = tmp.res;
        var new___S1=_.assign({},this_v6.__S1,{Q_in:tmp.obj});
        var this_v7 = _.assign({},this_v6,{__S1: new___S1});
        var subExp_260=subExp_262||subExp_263;
        var tmp = Queue_size(this_v7.__S1.Q_out,[]);
        var subExp_261 = tmp.res;
        var new___S1=_.assign({},this_v7.__S1,{Q_out:tmp.obj});
        var this_v8 = _.assign({},this_v7,{__S1: new___S1});
        var subExp_258=subExp_260||subExp_261;
        var tmp = Queue_size(this_v8.__S2.Q_in,[]);
        var subExp_259 = tmp.res;
        var new___S2=_.assign({},this_v8.__S2,{Q_in:tmp.obj});
        var this_v9 = _.assign({},this_v8,{__S2: new___S2});
        var subExp_256=subExp_258||subExp_259;
        var tmp = Queue_size(this_v9.__S2.Q_out,[]);
        var subExp_257 = tmp.res;
        var new___S2=_.assign({},this_v9.__S2,{Q_out:tmp.obj});
        var this_v10 = _.assign({},this_v9,{__S2: new___S2});
        var subExp_254=subExp_256||subExp_257;
        var tmp = Queue_size(this_v10.__S3.Q_in,[]);
        var subExp_255 = tmp.res;
        var new___S3=_.assign({},this_v10.__S3,{Q_in:tmp.obj});
        var this_v11 = _.assign({},this_v10,{__S3: new___S3});
        var subExp_252=subExp_254||subExp_255;
        var tmp = Queue_size(this_v11.__S3.Q_out,[]);
        var subExp_253 = tmp.res;
        var new___S3=_.assign({},this_v11.__S3,{Q_out:tmp.obj});
        var this_v12 = _.assign({},this_v11,{__S3: new___S3});
        var subExp_249=subExp_252||subExp_253;
        if(subExp_249){
            var subExp_250=_if_0([]);
            return subExp_250;
        }
        else{
            var subExp_251=_else_0([]);
            return subExp_251;
        }
    }
    var _ret_0=eval_if_0([]);
    var this_v0=_ret_0[+1];
    var subExp_274=[];
    return {res:subExp_274,obj:this_v0};
}

translating meaning of Packet
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
Packet
 
Expression of type Identifier:
Packet
 
Expression of type Identifier:
this
 
Expression of type ReturnExp:
return this
 
Expression of type FunctionDef:
def Packet'(){
    return this;
}
 
Expression of type CompoundDecl:
{
    def Packet'(){
        return this;
    }
}
 
Expression of type DatDecl:
dat Packet{
    def Packet'(){
        return this;
    }
}
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
dat Packet{
    def Packet'(){
        return this;
    }
}
var Packet = function(){
    var this_v0 = {};
    return {res:this_v0,obj:this_v0};
}

translating meaning of __H0
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
__H0
 
Expression of type Identifier:
__h0_ty
 
Expression of type VarDecl:
__H0: __h0_ty
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
__H0: __h0_ty
TODO 'VarDecl' not translated yet. You might want to insert:
override Expression visit(VarDecl e){
    code~=;
    visit(e.dtype);
    code~=;
    return e;
}


translating meaning of __H1
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression ofundefined
 type Identifier:
__H1
 
Expression of type Identifier:
__h1_ty
 
Expression of type VarDecl:
__H1: __h1_ty
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
__H1: __h1_ty
TODO 'VarDecl' not translated yet. You might want to insert:
override Expression visit(VarDecl e){
    code~=;
    visit(e.dtype);
    code~=;
    return e;
}


translating meaning of __S0
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
__S0
 
Expression of type Identifier:
__s0_ty
 
Expression of type VarDecl:
__S0: __s0_ty
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
__S0: __s0_ty
TODO 'VarDecl' not translated yet. You might want to insert:
override Expression visit(VarDecl e){
    code~=;
    visit(e.dtype);
    code~=;
    return e;
}


translating meaning of __S1
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
__S1
 
Expression of type Identifier:
__s1_ty
 
Expression of type VarDecl:
__S1: __s1_ty
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
__S1: __s1_ty
TODO 'VarDecl' not translated yet. You might want to insert:
override Expression visit(VarDecl e){
    code~=;
    visit(e.dtype);
    code~=;
    return e;
}


translating meaning of __S2
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
__S2
 
Expression of type Identifier:
__s2_ty
 
Expression of type VarDecl:
__S2: __s2_ty
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
__S2: __s2_ty
TODO 'VarDecl' not translated yet. You might want to insert:
override Expression visit(VarDecl e){
    code~=;
    visit(e.dtype);
    code~=;
    return e;
}


translating meaning of __S3
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
__S3
 
Expression of type Identifier:
__s3_ty
 
Expression of type VarDecl:
__S3: __s3_ty
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
__S3: __s3_ty
TODO 'VarDecl' not translated yet. You might want to insert:
override Expression visit(VarDecl e){
    code~=;
    visit(e.dtype);
    code~=;
    return e;
}


running webppl
E[r] = (1.0000000000000000*10^+00)

real	0m10.149s
user	0m10.336s
sys	0m0.576s
