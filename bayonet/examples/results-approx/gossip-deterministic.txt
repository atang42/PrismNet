normalizing...
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
main
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__D'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__D'()
 
Expression of type ABinaryExp:
__d := __D'()
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
__d.__S0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
__d.__S0.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
__d.__S0.Q_in.pushBack
 
Expression of type Identifier:
Packet'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Packet'()
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
((Packet'(),0))
 
Expression of type CallExp:
__d.__S0.Q_in.pushBack((Packet'(),0))
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
__d.__S0
 
Expression of type Identifier:
__run
 
Expression of type FieldExp:
__d.__S0.__run
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__S0.__run()
 
Expression of type LiteralExp:
15
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__step
 
Expression of type FieldExp:
__d.__step
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__step()
 
Expression of type RepeatExp:
repeat 15 {
    __d.__step();
}
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
__d.__S0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
__d.__S0.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
__d.__S0.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__S0.Q_in.size()
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
__d.__S0
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
__d.__S0.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
__d.__S0.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__S0.Q_out.size()
 
Expression of type ABinaryExp:
__d.__S0.Q_in.size() || __d.__S0.Q_out.size()
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
__d.__S1
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
__d.__S1.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
__d.__S1.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__S1.Q_in.size()
 
Expression of type ABinaryExp:
__d.__S0.Q_in.size() || __d.__S0.Q_out.size() || __d.__S1.Q_in.size()
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
__d.__S1
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
__d.__S1.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
__d.__S1.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__S1.Q_out.size()
 
Expression of type ABinaryExp:
__d.__S0.Q_in.size() || __d.__S0.Q_out.size() || __d.__S1.Q_in.size() || __d.__S1.Q_out.size()
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
__d.__S2
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
__d.__S2.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
__d.__S2.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__S2.Q_in.size()
 
Expression of type ABinaryExp:
__d.__S0.Q_in.size() || __d.__S0.Q_out.size() || __d.__S1.Q_in.size() || __d.__S1.Q_out.size() || __d.__S2.Q_in.size()
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
__d.__S2
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
__d.__S2.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
__d.__S2.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__S2.Q_out.size()
 
Expression of type ABinaryExp:
__d.__S0.Q_in.size() || __d.__S0.Q_out.size() || __d.__S1.Q_in.size() || __d.__S1.Q_out.size() || __d.__S2.Q_in.size() || __d.__S2.Q_out.size()
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
__d.__S3
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
__d.__S3.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
__d.__S3.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__S3.Q_in.size()
 
Expression of type ABinaryExp:
__d.__S0.Q_in.size() || __d.__S0.Q_out.size() || __d.__S1.Q_in.size() || __d.__S1.Q_out.size() || __d.__S2.Q_in.size() || __d.__S2.Q_out.size() || __d.__S3.Q_in.size()
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
__d.__S3
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
__d.__S3.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
__d.__S3.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__S3.Q_out.size()
 
Expression of type ABinaryExp:
(__d.__S0.Q_in.size() || __d.__S0.Q_out.size() || __d.__S1.Q_in.size() || __d.__S1.Q_out.size() || __d.__S2.Q_in.size() || __d.__S2.Q_out.size() || __d.__S3.Q_in.size() || __d.__S3.Q_out.size())
 
Expression of type AUnaryExp:
!(__d.__S0.Q_in.size() || __d.__S0.Q_out.size() || __d.__S1.Q_in.size() || __d.__S1.Q_out.size() || __d.__S2.Q_in.size() || __d.__S2.Q_out.size() || __d.__S3.Q_in.size() || __d.__S3.Q_out.size())
 
Expression of type AssertExp:
assert(!(__d.__S0.Q_in.size() || __d.__S0.Q_out.size() || __d.__S1.Q_in.size() || __d.__S1.Q_out.size() || __d.__S2.Q_in.size() || __d.__S2.Q_out.size() || __d.__S3.Q_in.size() || __d.__S3.Q_out.size()))
 
Expression of type Identifier:
q1
 
Expression of type Identifier:
Expectation
 
Expression of type LiteralExp:
0
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
0 == 0
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
__d.__S0
 
Expression of type Identifier:
infected
 
Expression of type FieldExp:
__d.__S0.infected
 
Expression of type LiteralExp:
0
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
0 == 1
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
__d.__S1
 
Expression of type Identifier:
infected
 
Expression of type FieldExp:
__d.__S1.infected
 
Expression of type LiteralExp:
0
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
0 == 2
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
__d.__S2
 
Expression of type Identifier:
infected
 
Expression of type FieldExp:
__d.__S2.infected
 
Expression of type LiteralExp:
0
 
Expression of type LiteralExp:
3
 
Expression of type ABinaryExp:
0 == 3
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
__d.__S3
 
Expression of type Identifier:
infected
 
Expression of type FieldExp:
__d.__S3.infected
 
Expression of type LiteralExp:
0
 
Expression of type AssertExp:
assert(0)
 
Expression of type IteExp:
if 0 == 3 {
    __d.__S3.infected;
} else {
    assert(0);
}
 
Expression of type IteExp:
if 0 == 2 {
    __d.__S2.infected;
} else if 0 == 3 {
    __d.__S3.infected;
} else {
    assert(0);
}
 
Expression of type IteExp:
if 0 == 1 {
    __d.__S1.infected;
} else if 0 == 2 {
    __d.__S2.infected;
} else if 0 == 3 {
    __d.__S3.infected;
} else {
    assert(0);
}
 
Expression of type IteExp:
(if 0 == 0 {
    __d.__S0.infected;
} else if 0 == 1 {
    __d.__S1.infected;
} else if 0 == 2 {
    __d.__S2.infected;
} else if 0 == 3 {
    __d.__S3.infected;
} else {
    assert(0);
})
 
Expression of type LiteralExp:
1
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
1 == 0
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
__d.__S0
 
Expression of type Identifier:
infected
 
Expression of type FieldExp:
__d.__S0.infected
 
Expression of type LiteralExp:
1
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
1 == 1
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
__d.__S1
 
Expression of type Identifier:
infected
 
Expression of type FieldExp:
__d.__S1.infected
 
Expression of type LiteralExp:
1
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
1 == 2
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
__d.__S2
 
Expression of type Identifier:
infected
 
Expression of type FieldExp:
__d.__S2.infected
 
Expression of type LiteralExp:
1
 
Expression of type LiteralExp:
3
 
Expression of type ABinaryExp:
1 == 3
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
__d.__S3
 
Expression of type Identifier:
infected
 
Expression of type FieldExp:
__d.__S3.infected
 
Expression of type LiteralExp:
0
 
Expression of type AssertExp:
assert(0)
 
Expression of type IteExp:
if 1 == 3 {
    __d.__S3.infected;
} else {
    assert(0);
}
 
Expression of type IteExp:
if 1 == 2 {
    __d.__S2.infected;
} else if 1 == 3 {
    __d.__S3.infected;
} else {
    assert(0);
}
 
Expression of type IteExp:
if 1 == 1 {
    __d.__S1.infected;
} else if 1 == 2 {
    __d.__S2.infected;
} else if 1 == 3 {
    __d.__S3.infected;
} else {
    assert(0);
}
 
Expression of type IteExp:
(if 1 == 0 {
    __d.__S0.infected;
} else if 1 == 1 {
    __d.__S1.infected;
} else if 1 == 2 {
    __d.__S2.infected;
} else if 1 == 3 {
    __d.__S3.infected;
} else {
    assert(0);
})
 
Expression of type ABinaryExp:
(if 0 == 0 {
    __d.__S0.infected;
} else if 0 == 1 {
    __d.__S1.infected;
} else if 0 == 2 {
    __d.__S2.infected;
} else if 0 == 3 {
    __d.__S3.infected;
} else {
    assert(0);
}) + (if 1 == 0 {
    __d.__S0.infected;
} else if 1 == 1 {
    __d.__S1.infected;
} else if 1 == 2 {
    __d.__S2.infected;
} else if 1 == 3 {
    __d.__S3.infected;
} else {
    assert(0);
})
 
Expression of type LiteralExp:
2
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
2 == 0
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
__d.__S0
 
Expression of type Identifier:
infected
 
Expression of type FieldExp:
__d.__S0.infected
 
Expression of type LiteralExp:
2
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
2 == 1
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
__d.__S1
 
Expression of type Identifier:
infected
 
Expression of type FieldExp:
__d.__S1.infected
 
Expression of type LiteralExp:
2
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
2 == 2
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
__d.__S2
 
Expression of type Identifier:
infected
 
Expression of type FieldExp:
__d.__S2.infected
 
Expression of type LiteralExp:
2
 
Expression of type LiteralExp:
3
 
Expression of type ABinaryExp:
2 == 3
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
__d.__S3
 
Expression of type Identifier:
infected
 
Expression of type FieldExp:
__d.__S3.infected
 
Expression of type LiteralExp:
0
 
Expression of type AssertExp:
assert(0)
 
Expression of type IteExp:
if 2 == 3 {
    __d.__S3.infected;
} else {
    assert(0);
}
 
Expression of type IteExp:
if 2 == 2 {
    __d.__S2.infected;
} else if 2 == 3 {
    __d.__S3.infected;
} else {
    assert(0);
}
 
Expression of type IteExp:
if 2 == 1 {
    __d.__S1.infected;
} else if 2 == 2 {
    __d.__S2.infected;
} else if 2 == 3 {
    __d.__S3.infected;
} else {
    assert(0);
}
 
Expression of type IteExp:
(if 2 == 0 {
    __d.__S0.infected;
} else if 2 == 1 {
    __d.__S1.infected;
} else if 2 == 2 {
    __d.__S2.infected;
} else if 2 == 3 {
    __d.__S3.infected;
} else {
    assert(0);
})
 
Expression of type ABinaryExp:
(if 0 == 0 {
    __d.__S0.infected;
} else if 0 == 1 {
    __d.__S1.infected;
} else if 0 == 2 {
    __d.__S2.infected;
} else if 0 == 3 {
    __d.__S3.infected;
} else {
    assert(0);
}) + (if 1 == 0 {
    __d.__S0.infected;
} else if 1 == 1 {
    __d.__S1.infected;
} else if 1 == 2 {
    __d.__S2.infected;
} else if 1 == 3 {
    __d.__S3.infected;
} else {
    assert(0);
}) + (if 2 == 0 {
    __d.__S0.infected;
} else if 2 == 1 {
    __d.__S1.infected;
} else if 2 == 2 {
    __d.__S2.infected;
} else if 2 == 3 {
    __d.__S3.infected;
} else {
    assert(0);
})
 
Expression of type LiteralExp:
3
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
3 == 0
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
__d.__S0
 
Expression of type Identifier:
infected
 
Expression of type FieldExp:
__d.__S0.infected
 
Expression of type LiteralExp:
3
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
3 == 1
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
__d.__S1
 
Expression of type Identifier:
infected
 
Expression of type FieldExp:
__d.__S1.infected
 
Expression of type LiteralExp:
3
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
3 == 2
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
__d.__S2
 
Expression of type Identifier:
infected
 
Expression of type FieldExp:
__d.__S2.infected
 
Expression of type LiteralExp:
3
 
Expression of type LiteralExp:
3
 
Expression of type ABinaryExp:
3 == 3
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
__d.__S3
 
Expression of type Identifier:
infected
 
Expression of type FieldExp:
__d.__S3.infected
 
Expression of type LiteralExp:
0
 
Expression of type AssertExp:
assert(0)
 
Expression of type IteExp:
if 3 == 3 {
    __d.__S3.infected;
} else {
    assert(0);
}
 
Expression of type IteExp:
if 3 == 2 {
    __d.__S2.infected;
} else if 3 == 3 {
    __d.__S3.infected;
} else {
    assert(0);
}
 
Expression of type IteExp:
if 3 == 1 {
    __d.__S1.infected;
} else if 3 == 2 {
    __d.__S2.infected;
} else if 3 == 3 {
    __d.__S3.infected;
} else {
    assert(0);
}
 
Expression of type IteExp:
(if 3 == 0 {
    __d.__S0.infected;
} else if 3 == 1 {
    __d.__S1.infected;
} else if 3 == 2 {
    __d.__S2.infected;
} else if 3 == 3 {
    __d.__S3.infected;
} else {
    assert(0);
})
 
Expression of type ABinaryExp:
((if 0 == 0 {
    __d.__S0.infected;
} else if 0 == 1 {
    __d.__S1.infected;
} else if 0 == 2 {
    __d.__S2.infected;
} else if 0 == 3 {
    __d.__S3.infected;
} else {
    assert(0);
}) + (if 1 == 0 {
    __d.__S0.infected;
} else if 1 == 1 {
    __d.__S1.infected;
} else if 1 == 2 {
    __d.__S2.infected;
} else if 1 == 3 {
    __d.__S3.infected;
} else {
    assert(0);
}) + (if 2 == 0 {
    __d.__S0.infected;
} else if 2 == 1 {
    __d.__S1.infected;
} else if 2 == 2 {
    __d.__S2.infected;
} else if 2 == 3 {
    __d.__S3.infected;
} else {
    assert(0);
}) + (if 3 == 0 {
    __d.__S0.infected;
} else if 3 == 1 {
    __d.__S1.infected;
} else if 3 == 2 {
    __d.__S2.infected;
} else if 3 == 3 {
    __d.__S3.infected;
} else {
    assert(0);
}))
 
Expression of type CallExp:
Expectation((if 0 == 0 {
    __d.__S0.infected;
} else if 0 == 1 {
    __d.__S1.infected;
} else if 0 == 2 {
    __d.__S2.infected;
} else if 0 == 3 {
    __d.__S3.infected;
} else {
    assert(0);
}) + (if 1 == 0 {
    __d.__S0.infected;
} else if 1 == 1 {
    __d.__S1.infected;
} else if 1 == 2 {
    __d.__S2.infected;
} else if 1 == 3 {
    __d.__S3.infected;
} else {
    assert(0);
}) + (if 2 == 0 {
    __d.__S0.infected;
} else if 2 == 1 {
    __d.__S1.infected;
} else if 2 == 2 {
    __d.__S2.infected;
} else if 2 == 3 {
    __d.__S3.infected;
} else {
    assert(0);
}) + (if 3 == 0 {
    __d.__S0.infected;
} else if 3 == 1 {
    __d.__S1.infected;
} else if 3 == 2 {
    __d.__S2.infected;
} else if 3 == 3 {
    __d.__S3.infected;
} else {
    assert(0);
}))
 
Expression of type ABinaryExp:
q1 := Expectation((if 0 == 0 {
    __d.__S0.infected;
} else if 0 == 1 {
    __d.__S1.infected;
} else if 0 == 2 {
    __d.__S2.infected;
} else if 0 == 3 {
    __d.__S3.infected;
} else {
    assert(0);
}) + (if 1 == 0 {
    __d.__S0.infected;
} else if 1 == 1 {
    __d.__S1.infected;
} else if 1 == 2 {
    __d.__S2.infected;
} else if 1 == 3 {
    __d.__S3.infected;
} else {
    assert(0);
}) + (if 2 == 0 {
    __d.__S0.infected;
} else if 2 == 1 {
    __d.__S1.infected;
} else if 2 == 2 {
    __d.__S2.infected;
} else if 2 == 3 {
    __d.__S3.infected;
} else {
    assert(0);
}) + (if 3 == 0 {
    __d.__S0.infected;
} else if 3 == 1 {
    __d.__S1.infected;
} else if 3 == 2 {
    __d.__S2.infected;
} else if 3 == 3 {
    __d.__S3.infected;
} else {
    assert(0);
}))
 
Expression of type Identifier:
(q1)
 
Expression of type ReturnExp:
return (q1)
 
Expression of type FunctionDef:
def main(){
    __d := __D'();
    __d.__S0.Q_in.pushBack((Packet'(),0));
    __d.__S0.__run();
    repeat 15 {
        __d.__step();
    }
    assert(!(__d.__S0.Q_in.size() || __d.__S0.Q_out.size() || __d.__S1.Q_in.size() || __d.__S1.Q_out.size() || __d.__S2.Q_in.size() || __d.__S2.Q_out.size() || __d.__S3.Q_in.size() || __d.__S3.Q_out.size()));
    q1 := Expectation((if 0 == 0 {
        __d.__S0.infected;
    } else if 0 == 1 {
        __d.__S1.infected;
    } else if 0 == 2 {
        __d.__S2.infected;
    } else if 0 == 3 {
        __d.__S3.infected;
    } else {
        assert(0);
    }) + (if 1 == 0 {
        __d.__S0.infected;
    } else if 1 == 1 {
        __d.__S1.infected;
    } else if 1 == 2 {
        __d.__S2.infected;
    } else if 1 == 3 {
        __d.__S3.infected;
    } else {
        assert(0);
    }) + (if 2 == 0 {
        __d.__S0.infected;
    } else if 2 == 1 {
        __d.__S1.infected;
    } else if 2 == 2 {
        __d.__S2.infected;
    } else if 2 == 3 {
        __d.__S3.infected;
    } else {
        assert(0);
    }) + (if 3 == 0 {
        __d.__S0.infected;
    } else if 3 == 1 {
        __d.__S1.infected;
    } else if 3 == 2 {
        __d.__S2.infected;
    } else if 3 == 3 {
        __d.__S3.infected;
    } else {
        assert(0);
    }));
    return (q1);
}
 
done with forToWhile
whileToRec normalization...
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
done with whileToRec
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
done with tuplesNormalizer
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
done with unreachableNormalizer
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
webppl translation...
translating meaning of __D
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
done with ifElseFunctional
Expression of type Identifier:
__D
 
Expression of type Identifier:
__S0
 
Expression of type Identifier:
__first_ty
 
Expression of type VarDecl:
__S0: __first_ty
 
Expression of type Identifier:
__S1
 
Expression of type Identifier:
__node_ty
 
Expression of type VarDecl:
__S1: __node_ty
 
Expression of type ABinaryExp:
__S0: __first_ty , __S1: __node_ty
 
Expression of type Identifier:
__S2
 
Expression of type Identifier:
__node_ty
 
Expression of type VarDecl:
__S2: __node_ty
 
Expression of type ABinaryExp:
__S0: __first_ty , __S1: __node_ty , __S2: __node_ty
 
Expression of type Identifier:
__S3
 
Expression of type Identifier:
__node_ty
 
Expression of type VarDecl:
__S3: __node_ty
 
Expression of type ABinaryExp:
__S0: __first_ty , __S1: __node_ty , __S2: __node_ty , __S3: __node_ty
 
Expression of type Identifier:
phase
 
Expression of type Identifier:
ℝ
 
Expression of type VarDecl:
phase: ℝ
 
Expression of type Identifier:
cur_node
 
Expression of type Identifier:
ℝ
 
Expression of type VarDecl:
cur_node: ℝ
 
Expression of type ABinaryExp:
phase: ℝ , cur_node: ℝ
 
Expression of type Identifier:
__D
 
Expression of type Identifier:
this
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this.__S0
 
Expression of type Identifier:
__first_ty'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__first_ty'()
 
Expression of type ABinaryExp:
this.__S0 = __first_ty'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this.__S1
 
Expression of type Identifier:
__node_ty'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__node_ty'()
 
Expression of type ABinaryExp:
this.__S1 = __node_ty'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this.__S2
 
Expression of type Identifier:
__node_ty'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__node_ty'()
 
Expression of type ABinaryExp:
this.__S2 = __node_ty'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
this.__S3
 
Expression of type Identifier:
__node_ty'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__node_ty'()
 
Expression of type ABinaryExp:
this.__S3 = __node_ty'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
phase
 
Expression of type FieldExp:
this.phase
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
this.phase = 0
 
Expression of type Identifier:
this
 
Expression of type Identifier:
cur_node
 
Expression of type FieldExp:
this.cur_node
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
this.cur_node = 0
 
Expression of type Identifier:
this
 
Expression of type ReturnExp:
return this
 
Expression of type FunctionDef:
def __D'(){
    this.__S0 = __first_ty'();
    this.__S1 = __node_ty'();
    this.__S2 = __node_ty'();
    this.__S3 = __node_ty'();
    this.phase = 0;
    this.cur_node = 0;
    return this;
}
 
Expression of type Identifier:
scheduler
 
Expression of type Identifier:
p
 
Expression of type LiteralExp:
0
 
Expression of type LiteralExp:
2
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
i
 
Expression of type LiteralExp:
0
 
Expression of type LiteralExp:
4
 
Expression of type Identifier:
_if
 
Expression of type LiteralExp:
2
 
Expression of type LiteralExp:
0
 
Expression of type LiteralExp:
0
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
cur_node
 
Expression of type FieldExp:
this'.cur_node
 
Expression of type TupleExp:
(0,this'.cur_node)
 
Expression of type TupleExp:
(2,0,(0,this'.cur_node))
 
Expression of type ReturnExp:
return (2,0,(0,this'.cur_node))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    return (2,0,(0,this'.cur_node));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
cur_node
 
Expression of type FieldExp:
this'.cur_node
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
this'.cur_node == 0
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S0.Q_in
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
cur_node
 
Expression of type FieldExp:
this'.cur_node
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
this'.cur_node == 1
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this'.__S1
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S1.Q_in
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
cur_node
 
Expression of type FieldExp:
this'.cur_node
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
this'.cur_node == 2
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this'.__S2
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S2.Q_in
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
this'.__S3
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S3.Q_in
 
Expression of type IteExp:
if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}
 
Expression of type IteExp:
if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}
 
Expression of type IteExp:
(if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
})
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
(if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
(if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size()
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
(if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_in;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_in;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
_ret[0]
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
_ret[0] == 2
 
Expression of type LiteralExp:
2
 
Expression of type LiteralExp:
0
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
2
 
Expression of type IndexExp:
_ret[2]
 
Expression of type TupleExp:
(2,0,_ret[2])
 
Expression of type ReturnExp:
return (2,0,_ret[2])
 
Expression of type IteExp:
if _ret[0] == 2 {
    return (2,0,_ret[2]);
}
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
cur_node
 
Expression of type FieldExp:
this'.cur_node
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
cur_node
 
Expression of type FieldExp:
this'.cur_node
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
(this'.cur_node + 1)
 
Expression of type LiteralExp:
4
 
Expression of type ABinaryExp:
(this'.cur_node + 1) % 4
 
Expression of type ABinaryExp:
this'.cur_node = (this'.cur_node + 1) % 4
 
Expression of type ForExp:
for i in [0..4){
    def _if(){
        return (2,0,(0,this'.cur_node));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_in;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_in;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_in;
        } else {
            this'.__S3.Q_in;
        }).size() > 0 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    if _ret[0] == 2 {
        return (2,0,_ret[2]);
    }
    this' = _ret[1];
    this'.cur_node = (this'.cur_node + 1) % 4;
}
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
phase
 
Expression of type FieldExp:
this'.phase
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
this'.phase = 1
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
cur_node
 
Expression of type FieldExp:
this'.cur_node
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
this'.cur_node = 0
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    for i in [0..4){
        def _if(){
            return (2,0,(0,this'.cur_node));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_in;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_in;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_in;
            } else {
                this'.__S3.Q_in;
            }).size() > 0 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        if _ret[0] == 2 {
            return (2,0,_ret[2]);
        }
        this' = _ret[1];
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 1;
    this'.cur_node = 0;
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
phase
 
Expression of type FieldExp:
this'.phase
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
this'.phase == 0
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if this'.phase == 0 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if this'.phase == 0 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
_ret[0]
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
_ret[0] == 2
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
2
 
Expression of type IndexExp:
_ret[2]
 
Expression of type ReturnExp:
return _ret[2]
 
Expression of type IteExp:
if _ret[0] == 2 {
    return _ret[2];
}
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
i
 
Expression of type LiteralExp:
0
 
Expression of type LiteralExp:
4
 
Expression of type Identifier:
_if
 
Expression of type LiteralExp:
2
 
Expression of type LiteralExp:
0
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
cur_node
 
Expression of type FieldExp:
this'.cur_node
 
Expression of type TupleExp:
(1,this'.cur_node)
 
Expression of type TupleExp:
(2,0,(1,this'.cur_node))
 
Expression of type ReturnExp:
return (2,0,(1,this'.cur_node))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    return (2,0,(1,this'.cur_node));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
cur_node
 
Expression of type FieldExp:
this'.cur_node
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
this'.cur_node == 0
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S0.Q_out
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
cur_node
 
Expression of type FieldExp:
this'.cur_node
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
this'.cur_node == 1
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this'.__S1
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S1.Q_out
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
cur_node
 
Expression of type FieldExp:
this'.cur_node
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
this'.cur_node == 2
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this'.__S2
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S2.Q_out
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
this'.__S3
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S3.Q_out
 
Expression of type IteExp:
if this'.cur_node == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}
 
Expression of type IteExp:
if this'.cur_node == 1 {
    this'.__S1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}
 
Expression of type IteExp:
(if this'.cur_node == 0 {
    this'.__S0.Q_out;
} else if this'.cur_node == 1 {
    this'.__S1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
})
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
(if this'.cur_node == 0 {
    this'.__S0.Q_out;
} else if this'.cur_node == 1 {
    this'.__S1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
(if this'.cur_node == 0 {
    this'.__S0.Q_out;
} else if this'.cur_node == 1 {
    this'.__S1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size()
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
(if this'.cur_node == 0 {
    this'.__S0.Q_out;
} else if this'.cur_node == 1 {
    this'.__S1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if (if this'.cur_node == 0 {
    this'.__S0.Q_out;
} else if this'.cur_node == 1 {
    this'.__S1.Q_out;
} else if this'.cur_node == 2 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_out;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_out;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_out;
    } else {
        this'.__S3.Q_out;
    }).size() > 0 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
_ret[0]
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
_ret[0] == 2
 
Expression of type LiteralExp:
2
 
Expression of type LiteralExp:
0
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
2
 
Expression of type IndexExp:
_ret[2]
 
Expression of type TupleExp:
(2,0,_ret[2])
 
Expression of type ReturnExp:
return (2,0,_ret[2])
 
Expression of type IteExp:
if _ret[0] == 2 {
    return (2,0,_ret[2]);
}
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
cur_node
 
Expression of type FieldExp:
this'.cur_node
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
cur_node
 
Expression of type FieldExp:
this'.cur_node
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
(this'.cur_node + 1)
 
Expression of type LiteralExp:
4
 
Expression of type ABinaryExp:
(this'.cur_node + 1) % 4
 
Expression of type ABinaryExp:
this'.cur_node = (this'.cur_node + 1) % 4
 
Expression of type ForExp:
for i in [0..4){
    def _if(){
        return (2,0,(1,this'.cur_node));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_out;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_out;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_out;
        } else {
            this'.__S3.Q_out;
        }).size() > 0 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    if _ret[0] == 2 {
        return (2,0,_ret[2]);
    }
    this' = _ret[1];
    this'.cur_node = (this'.cur_node + 1) % 4;
}
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
phase
 
Expression of type FieldExp:
this'.phase
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
this'.phase = 0
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
cur_node
 
Expression of type FieldExp:
this'.cur_node
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
this'.cur_node = 0
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    for i in [0..4){
        def _if(){
            return (2,0,(1,this'.cur_node));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_out;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_out;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_out;
            } else {
                this'.__S3.Q_out;
            }).size() > 0 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        if _ret[0] == 2 {
            return (2,0,_ret[2]);
        }
        this' = _ret[1];
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 0;
    this'.cur_node = 0;
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
phase
 
Expression of type FieldExp:
this'.phase
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
this'.phase == 1
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if this'.phase == 1 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if this'.phase == 1 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
_ret[0]
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
_ret[0] == 2
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
2
 
Expression of type IndexExp:
_ret[2]
 
Expression of type ReturnExp:
return _ret[2]
 
Expression of type IteExp:
if _ret[0] == 2 {
    return _ret[2];
}
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type ForExp:
for p in [0..2){
    def _if(){
        for i in [0..4){
            def _if(){
                return (2,0,(0,this'.cur_node));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if (if this'.cur_node == 0 {
                    this'.__S0.Q_in;
                } else if this'.cur_node == 1 {
                    this'.__S1.Q_in;
                } else if this'.cur_node == 2 {
                    this'.__S2.Q_in;
                } else {
                    this'.__S3.Q_in;
                }).size() > 0 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            if _ret[0] == 2 {
                return (2,0,_ret[2]);
            }
            this' = _ret[1];
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 1;
        this'.cur_node = 0;
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if this'.phase == 0 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    if _ret[0] == 2 {
        return _ret[2];
    }
    this' = _ret[1];
    def _if(){
        for i in [0..4){
            def _if(){
                return (2,0,(1,this'.cur_node));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if (if this'.cur_node == 0 {
                    this'.__S0.Q_out;
                } else if this'.cur_node == 1 {
                    this'.__S1.Q_out;
                } else if this'.cur_node == 2 {
                    this'.__S2.Q_out;
                } else {
                    this'.__S3.Q_out;
                }).size() > 0 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            if _ret[0] == 2 {
                return (2,0,_ret[2]);
            }
            this' = _ret[1];
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 0;
        this'.cur_node = 0;
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if this'.phase == 1 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    if _ret[0] == 2 {
        return _ret[2];
    }
    this' = _ret[1];
}
 
Expression of type LiteralExp:
0
 
Expression of type AssertExp:
assert(0)
 
Expression of type FunctionDef:
def scheduler(){
    for p in [0..2){
        def _if(){
            for i in [0..4){
                def _if(){
                    return (2,0,(0,this'.cur_node));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if (if this'.cur_node == 0 {
                        this'.__S0.Q_in;
                    } else if this'.cur_node == 1 {
                        this'.__S1.Q_in;
                    } else if this'.cur_node == 2 {
                        this'.__S2.Q_in;
                    } else {
                        this'.__S3.Q_in;
                    }).size() > 0 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                if _ret[0] == 2 {
                    return (2,0,_ret[2]);
                }
                this' = _ret[1];
                this'.cur_node = (this'.cur_node + 1) % 4;
            }
            this'.phase = 1;
            this'.cur_node = 0;
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if this'.phase == 0 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        if _ret[0] == 2 {
            return _ret[2];
        }
        this' = _ret[1];
        def _if(){
            for i in [0..4){
                def _if(){
                    return (2,0,(1,this'.cur_node));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if (if this'.cur_node == 0 {
                        this'.__S0.Q_out;
                    } else if this'.cur_node == 1 {
                        this'.__S1.Q_out;
                    } else if this'.cur_node == 2 {
                        this'.__S2.Q_out;
                    } else {
                        this'.__S3.Q_out;
                    }).size() > 0 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                if _ret[0] == 2 {
                    return (2,0,_ret[2]);
                }
                this' = _ret[1];
                this'.cur_node = (this'.cur_node + 1) % 4;
            }
            this'.phase = 0;
            this'.cur_node = 0;
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if this'.phase == 1 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        if _ret[0] == 2 {
            return _ret[2];
        }
        this' = _ret[1];
    }
    assert(0);
}
 
Expression of type Identifier:
__step
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
action
 
Expression of type Identifier:
node
 
Expression of type TupleExp:
(action,node)
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
scheduler
 
Expression of type FieldExp:
this'.scheduler
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.scheduler()
 
Expression of type ABinaryExp:
(action,node) := this'.scheduler()
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
pkt
 
Expression of type Identifier:
port
 
Expression of type TupleExp:
(pkt,port)
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S0.Q_out
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.__S0.Q_out.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S0.Q_out.takeFront()
 
Expression of type ABinaryExp:
(pkt,port) := this'.__S0.Q_out.takeFront()
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this'.__S1
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S1.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__S1.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
3
 
Expression of type TupleExp:
((pkt,3))
 
Expression of type CallExp:
this'.__S1.Q_in.pushBack((pkt,3))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S1.Q_in.pushBack((pkt,3));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
port == 1
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 1 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 1 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this'.__S2
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S2.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__S2.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
2
 
Expression of type TupleExp:
((pkt,2))
 
Expression of type CallExp:
this'.__S2.Q_in.pushBack((pkt,2))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S2.Q_in.pushBack((pkt,2));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
port == 2
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 2 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 2 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
this'.__S3
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S3.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__S3.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
1
 
Expression of type TupleExp:
((pkt,1))
 
Expression of type CallExp:
this'.__S3.Q_in.pushBack((pkt,1))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S3.Q_in.pushBack((pkt,1));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
3
 
Expression of type ABinaryExp:
port == 3
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 3 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 3 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    (pkt,port) := this'.__S0.Q_out.takeFront();
    def _if(){
        this'.__S1.Q_in.pushBack((pkt,3));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 1 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__S2.Q_in.pushBack((pkt,2));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 2 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__S3.Q_in.pushBack((pkt,1));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 3 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
node
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
node == 0
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S0.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S0.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S0.Q_out.size()
 
Expression of type ABinaryExp:
node == 0 && this'.__S0.Q_out.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if node == 0 && this'.__S0.Q_out.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if node == 0 && this'.__S0.Q_out.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
pkt
 
Expression of type Identifier:
port
 
Expression of type TupleExp:
(pkt,port)
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this'.__S1
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S1.Q_out
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.__S1.Q_out.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S1.Q_out.takeFront()
 
Expression of type ABinaryExp:
(pkt,port) := this'.__S1.Q_out.takeFront()
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this'.__S2
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S2.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__S2.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
3
 
Expression of type TupleExp:
((pkt,3))
 
Expression of type CallExp:
this'.__S2.Q_in.pushBack((pkt,3))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S2.Q_in.pushBack((pkt,3));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
port == 1
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 1 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 1 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
this'.__S3
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S3.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__S3.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
2
 
Expression of type TupleExp:
((pkt,2))
 
Expression of type CallExp:
this'.__S3.Q_in.pushBack((pkt,2))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S3.Q_in.pushBack((pkt,2));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
port == 2
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 2 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 2 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S0.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__S0.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
1
 
Expression of type TupleExp:
((pkt,1))
 
Expression of type CallExp:
this'.__S0.Q_in.pushBack((pkt,1))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S0.Q_in.pushBack((pkt,1));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
3
 
Expression of type ABinaryExp:
port == 3
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 3 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 3 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    (pkt,port) := this'.__S1.Q_out.takeFront();
    def _if(){
        this'.__S2.Q_in.pushBack((pkt,3));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 1 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__S3.Q_in.pushBack((pkt,2));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 2 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__S0.Q_in.pushBack((pkt,1));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 3 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
node
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
node == 1
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this'.__S1
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S1.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S1.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S1.Q_out.size()
 
Expression of type ABinaryExp:
node == 1 && this'.__S1.Q_out.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if node == 1 && this'.__S1.Q_out.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if node == 1 && this'.__S1.Q_out.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
pkt
 
Expression of type Identifier:
port
 
Expression of type TupleExp:
(pkt,port)
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this'.__S2
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S2.Q_out
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.__S2.Q_out.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S2.Q_out.takeFront()
 
Expression of type ABinaryExp:
(pkt,port) := this'.__S2.Q_out.takeFront()
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
this'.__S3
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S3.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__S3.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
3
 
Expression of type TupleExp:
((pkt,3))
 
Expression of type CallExp:
this'.__S3.Q_in.pushBack((pkt,3))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S3.Q_in.pushBack((pkt,3));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
port == 1
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 1 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 1 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S0.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__S0.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
2
 
Expression of type TupleExp:
((pkt,2))
 
Expression of type CallExp:
this'.__S0.Q_in.pushBack((pkt,2))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S0.Q_in.pushBack((pkt,2));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
port == 2
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 2 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 2 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this'.__S1
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S1.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__S1.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
1
 
Expression of type TupleExp:
((pkt,1))
 
Expression of type CallExp:
this'.__S1.Q_in.pushBack((pkt,1))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S1.Q_in.pushBack((pkt,1));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
3
 
Expression of type ABinaryExp:
port == 3
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 3 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 3 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    (pkt,port) := this'.__S2.Q_out.takeFront();
    def _if(){
        this'.__S3.Q_in.pushBack((pkt,3));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 1 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__S0.Q_in.pushBack((pkt,2));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 2 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__S1.Q_in.pushBack((pkt,1));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 3 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
node
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
node == 2
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this'.__S2
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S2.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S2.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S2.Q_out.size()
 
Expression of type ABinaryExp:
node == 2 && this'.__S2.Q_out.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if node == 2 && this'.__S2.Q_out.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if node == 2 && this'.__S2.Q_out.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
pkt
 
Expression of type Identifier:
port
 
Expression of type TupleExp:
(pkt,port)
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
this'.__S3
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S3.Q_out
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.__S3.Q_out.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S3.Q_out.takeFront()
 
Expression of type ABinaryExp:
(pkt,port) := this'.__S3.Q_out.takeFront()
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S0.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__S0.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
3
 
Expression of type TupleExp:
((pkt,3))
 
Expression of type CallExp:
this'.__S0.Q_in.pushBack((pkt,3))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S0.Q_in.pushBack((pkt,3));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
port == 1
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 1 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 1 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this'.__S1
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S1.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__S1.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
2
 
Expression of type TupleExp:
((pkt,2))
 
Expression of type CallExp:
this'.__S1.Q_in.pushBack((pkt,2))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S1.Q_in.pushBack((pkt,2));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
port == 2
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 2 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 2 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this'.__S2
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S2.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__S2.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
1
 
Expression of type TupleExp:
((pkt,1))
 
Expression of type CallExp:
this'.__S2.Q_in.pushBack((pkt,1))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S2.Q_in.pushBack((pkt,1));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
3
 
Expression of type ABinaryExp:
port == 3
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 3 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 3 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    (pkt,port) := this'.__S3.Q_out.takeFront();
    def _if(){
        this'.__S0.Q_in.pushBack((pkt,3));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 1 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__S1.Q_in.pushBack((pkt,2));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 2 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__S2.Q_in.pushBack((pkt,1));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 3 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
node
 
Expression of type LiteralExp:
3
 
Expression of type ABinaryExp:
node == 3
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
this'.__S3
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S3.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S3.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S3.Q_out.size()
 
Expression of type ABinaryExp:
node == 3 && this'.__S3.Q_out.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if node == 3 && this'.__S3.Q_out.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if node == 3 && this'.__S3.Q_out.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    def _if(){
        (pkt,port) := this'.__S0.Q_out.takeFront();
        def _if(){
            this'.__S1.Q_in.pushBack((pkt,3));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 1 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__S2.Q_in.pushBack((pkt,2));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 2 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__S3.Q_in.pushBack((pkt,1));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 3 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if node == 0 && this'.__S0.Q_out.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        (pkt,port) := this'.__S1.Q_out.takeFront();
        def _if(){
            this'.__S2.Q_in.pushBack((pkt,3));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 1 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__S3.Q_in.pushBack((pkt,2));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 2 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__S0.Q_in.pushBack((pkt,1));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 3 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if node == 1 && this'.__S1.Q_out.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        (pkt,port) := this'.__S2.Q_out.takeFront();
        def _if(){
            this'.__S3.Q_in.pushBack((pkt,3));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 1 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__S0.Q_in.pushBack((pkt,2));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 2 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__S1.Q_in.pushBack((pkt,1));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 3 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if node == 2 && this'.__S2.Q_out.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        (pkt,port) := this'.__S3.Q_out.takeFront();
        def _if(){
            this'.__S0.Q_in.pushBack((pkt,3));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 1 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__S1.Q_in.pushBack((pkt,2));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 2 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__S2.Q_in.pushBack((pkt,1));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 3 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if node == 3 && this'.__S3.Q_out.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
__run
 
Expression of type FieldExp:
this'.__S0.__run
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S0.__run()
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S0.__run();
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
node
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
node == 0
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S0.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S0.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S0.Q_in.size()
 
Expression of type ABinaryExp:
node == 0 && this'.__S0.Q_in.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if node == 0 && this'.__S0.Q_in.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if node == 0 && this'.__S0.Q_in.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this'.__S1
 
Expression of type Identifier:
__run
 
Expression of type FieldExp:
this'.__S1.__run
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S1.__run()
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S1.__run();
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
node
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
node == 1
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this'.__S1
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S1.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S1.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S1.Q_in.size()
 
Expression of type ABinaryExp:
node == 1 && this'.__S1.Q_in.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if node == 1 && this'.__S1.Q_in.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if node == 1 && this'.__S1.Q_in.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this'.__S2
 
Expression of type Identifier:
__run
 
Expression of type FieldExp:
this'.__S2.__run
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S2.__run()
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S2.__run();
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
node
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
node == 2
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this'.__S2
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S2.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S2.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S2.Q_in.size()
 
Expression of type ABinaryExp:
node == 2 && this'.__S2.Q_in.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if node == 2 && this'.__S2.Q_in.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if node == 2 && this'.__S2.Q_in.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
this'.__S3
 
Expression of type Identifier:
__run
 
Expression of type FieldExp:
this'.__S3.__run
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S3.__run()
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S3.__run();
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
node
 
Expression of type LiteralExp:
3
 
Expression of type ABinaryExp:
node == 3
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
this'.__S3
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S3.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S3.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S3.Q_in.size()
 
Expression of type ABinaryExp:
node == 3 && this'.__S3.Q_in.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if node == 3 && this'.__S3.Q_in.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if node == 3 && this'.__S3.Q_in.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    def _if(){
        this'.__S0.__run();
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if node == 0 && this'.__S0.Q_in.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__S1.__run();
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if node == 1 && this'.__S1.Q_in.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__S2.__run();
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if node == 2 && this'.__S2.Q_in.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__S3.__run();
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if node == 3 && this'.__S3.Q_in.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
action
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if action {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if action {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    (action,node) := this'.scheduler();
    def _if(){
        def _if(){
            (pkt,port) := this'.__S0.Q_out.takeFront();
            def _if(){
                this'.__S1.Q_in.pushBack((pkt,3));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 1 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__S2.Q_in.pushBack((pkt,2));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 2 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__S3.Q_in.pushBack((pkt,1));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 3 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if node == 0 && this'.__S0.Q_out.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            (pkt,port) := this'.__S1.Q_out.takeFront();
            def _if(){
                this'.__S2.Q_in.pushBack((pkt,3));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 1 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__S3.Q_in.pushBack((pkt,2));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 2 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__S0.Q_in.pushBack((pkt,1));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 3 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if node == 1 && this'.__S1.Q_out.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            (pkt,port) := this'.__S2.Q_out.takeFront();
            def _if(){
                this'.__S3.Q_in.pushBack((pkt,3));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 1 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__S0.Q_in.pushBack((pkt,2));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 2 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__S1.Q_in.pushBack((pkt,1));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 3 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if node == 2 && this'.__S2.Q_out.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            (pkt,port) := this'.__S3.Q_out.takeFront();
            def _if(){
                this'.__S0.Q_in.pushBack((pkt,3));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 1 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__S1.Q_in.pushBack((pkt,2));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 2 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__S2.Q_in.pushBack((pkt,1));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 3 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if node == 3 && this'.__S3.Q_out.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def _else(){
        def _if(){
            this'.__S0.__run();
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if node == 0 && this'.__S0.Q_in.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__S1.__run();
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if node == 1 && this'.__S1.Q_in.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__S2.__run();
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if node == 2 && this'.__S2.Q_in.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__S3.__run();
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if node == 3 && this'.__S3.Q_in.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def eval_if(){
        if action {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S0.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S0.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S0.Q_in.size()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S0.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S0.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S0.Q_out.size()
 
Expression of type ABinaryExp:
this'.__S0.Q_in.size() || this'.__S0.Q_out.size()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this'.__S1
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S1.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S1.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S1.Q_in.size()
 
Expression of type ABinaryExp:
this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this'.__S1
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S1.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S1.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S1.Q_out.size()
 
Expression of type ABinaryExp:
this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this'.__S2
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S2.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S2.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S2.Q_in.size()
 
Expression of type ABinaryExp:
this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this'.__S2
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S2.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S2.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S2.Q_out.size()
 
Expression of type ABinaryExp:
this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
this'.__S3
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S3.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S3.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S3.Q_in.size()
 
Expression of type ABinaryExp:
this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
this'.__S3
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S3.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S3.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S3.Q_out.size()
 
Expression of type ABinaryExp:
this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type TupleExp:
()
 
Expression of type ReturnExp:
return ()
 
Expression of type FunctionDef:
def __step(){
    def _if(){
        (action,node) := this'.scheduler();
        def _if(){
            def _if(){
                (pkt,port) := this'.__S0.Q_out.takeFront();
                def _if(){
                    this'.__S1.Q_in.pushBack((pkt,3));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 1 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S2.Q_in.pushBack((pkt,2));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 2 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S3.Q_in.pushBack((pkt,1));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 3 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if node == 0 && this'.__S0.Q_out.size() {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                (pkt,port) := this'.__S1.Q_out.takeFront();
                def _if(){
                    this'.__S2.Q_in.pushBack((pkt,3));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 1 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S3.Q_in.pushBack((pkt,2));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 2 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S0.Q_in.pushBack((pkt,1));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 3 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if node == 1 && this'.__S1.Q_out.size() {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                (pkt,port) := this'.__S2.Q_out.takeFront();
                def _if(){
                    this'.__S3.Q_in.pushBack((pkt,3));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 1 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S0.Q_in.pushBack((pkt,2));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 2 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S1.Q_in.pushBack((pkt,1));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 3 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if node == 2 && this'.__S2.Q_out.size() {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                (pkt,port) := this'.__S3.Q_out.takeFront();
                def _if(){
                    this'.__S0.Q_in.pushBack((pkt,3));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 1 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S1.Q_in.pushBack((pkt,2));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 2 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S2.Q_in.pushBack((pkt,1));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 3 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if node == 3 && this'.__S3.Q_out.size() {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def _else(){
            def _if(){
                this'.__S0.__run();
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if node == 0 && this'.__S0.Q_in.size() {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__S1.__run();
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if node == 1 && this'.__S1.Q_in.size() {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__S2.__run();
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if node == 2 && this'.__S2.Q_in.size() {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__S3.__run();
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if node == 3 && this'.__S3.Q_in.size() {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def eval_if(){
            if action {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return ();
}
 
Expression of type CompoundDecl:
{
    __S0: __first_ty , __S1: __node_ty , __S2: __node_ty , __S3: __node_ty;
    phase: ℝ , cur_node: ℝ;
    def __D'(){
        this.__S0 = __first_ty'();
        this.__S1 = __node_ty'();
        this.__S2 = __node_ty'();
        this.__S3 = __node_ty'();
        this.phase = 0;
        this.cur_node = 0;
        return this;
    }
    def scheduler(){
        for p in [0..2){
            def _if(){
                for i in [0..4){
                    def _if(){
                        return (2,0,(0,this'.cur_node));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if (if this'.cur_node == 0 {
                            this'.__S0.Q_in;
                        } else if this'.cur_node == 1 {
                            this'.__S1.Q_in;
                        } else if this'.cur_node == 2 {
                            this'.__S2.Q_in;
                        } else {
                            this'.__S3.Q_in;
                        }).size() > 0 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    if _ret[0] == 2 {
                        return (2,0,_ret[2]);
                    }
                    this' = _ret[1];
                    this'.cur_node = (this'.cur_node + 1) % 4;
                }
                this'.phase = 1;
                this'.cur_node = 0;
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if this'.phase == 0 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            if _ret[0] == 2 {
                return _ret[2];
            }
            this' = _ret[1];
            def _if(){
                for i in [0..4){
                    def _if(){
                        return (2,0,(1,this'.cur_node));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if (if this'.cur_node == 0 {
                            this'.__S0.Q_out;
                        } else if this'.cur_node == 1 {
                            this'.__S1.Q_out;
                        } else if this'.cur_node == 2 {
                            this'.__S2.Q_out;
                        } else {
                            this'.__S3.Q_out;
                        }).size() > 0 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    if _ret[0] == 2 {
                        return (2,0,_ret[2]);
                    }
                    this' = _ret[1];
                    this'.cur_node = (this'.cur_node + 1) % 4;
                }
                this'.phase = 0;
                this'.cur_node = 0;
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if this'.phase == 1 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            if _ret[0] == 2 {
                return _ret[2];
            }
            this' = _ret[1];
        }
        assert(0);
    }
    def __step(){
        def _if(){
            (action,node) := this'.scheduler();
            def _if(){
                def _if(){
                    (pkt,port) := this'.__S0.Q_out.takeFront();
                    def _if(){
                        this'.__S1.Q_in.pushBack((pkt,3));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 1 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S2.Q_in.pushBack((pkt,2));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 2 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S3.Q_in.pushBack((pkt,1));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 3 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 0 && this'.__S0.Q_out.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    (pkt,port) := this'.__S1.Q_out.takeFront();
                    def _if(){
                        this'.__S2.Q_in.pushBack((pkt,3));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 1 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S3.Q_in.pushBack((pkt,2));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 2 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S0.Q_in.pushBack((pkt,1));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 3 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 1 && this'.__S1.Q_out.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    (pkt,port) := this'.__S2.Q_out.takeFront();
                    def _if(){
                        this'.__S3.Q_in.pushBack((pkt,3));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 1 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S0.Q_in.pushBack((pkt,2));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 2 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S1.Q_in.pushBack((pkt,1));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 3 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 2 && this'.__S2.Q_out.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    (pkt,port) := this'.__S3.Q_out.takeFront();
                    def _if(){
                        this'.__S0.Q_in.pushBack((pkt,3));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 1 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S1.Q_in.pushBack((pkt,2));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 2 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S2.Q_in.pushBack((pkt,1));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 3 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 3 && this'.__S3.Q_out.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def _else(){
                def _if(){
                    this'.__S0.__run();
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 0 && this'.__S0.Q_in.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S1.__run();
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 1 && this'.__S1.Q_in.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S2.__run();
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 2 && this'.__S2.Q_in.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S3.__run();
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 3 && this'.__S3.Q_in.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def eval_if(){
                if action {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return ();
    }
}
 
Expression of type DatDecl:
dat __D{
    __S0: __first_ty , __S1: __node_ty , __S2: __node_ty , __S3: __node_ty;
    phase: ℝ , cur_node: ℝ;
    def __D'(){
        this.__S0 = __first_ty'();
        this.__S1 = __node_ty'();
        this.__S2 = __node_ty'();
        this.__S3 = __node_ty'();
        this.phase = 0;
        this.cur_node = 0;
        return this;
    }
    def scheduler(){
        for p in [0..2){
            def _if(){
                for i in [0..4){
                    def _if(){
                        return (2,0,(0,this'.cur_node));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if (if this'.cur_node == 0 {
                            this'.__S0.Q_in;
                        } else if this'.cur_node == 1 {
                            this'.__S1.Q_in;
                        } else if this'.cur_node == 2 {
                            this'.__S2.Q_in;
                        } else {
                            this'.__S3.Q_in;
                        }).size() > 0 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    if _ret[0] == 2 {
                        return (2,0,_ret[2]);
                    }
                    this' = _ret[1];
                    this'.cur_node = (this'.cur_node + 1) % 4;
                }
                this'.phase = 1;
                this'.cur_node = 0;
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if this'.phase == 0 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            if _ret[0] == 2 {
                return _ret[2];
            }
            this' = _ret[1];
            def _if(){
                for i in [0..4){
                    def _if(){
                        return (2,0,(1,this'.cur_node));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if (if this'.cur_node == 0 {
                            this'.__S0.Q_out;
                        } else if this'.cur_node == 1 {
                            this'.__S1.Q_out;
                        } else if this'.cur_node == 2 {
                            this'.__S2.Q_out;
                        } else {
                            this'.__S3.Q_out;
                        }).size() > 0 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    if _ret[0] == 2 {
                        return (2,0,_ret[2]);
                    }
                    this' = _ret[1];
                    this'.cur_node = (this'.cur_node + 1) % 4;
                }
                this'.phase = 0;
                this'.cur_node = 0;
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if this'.phase == 1 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            if _ret[0] == 2 {
                return _ret[2];
            }
            this' = _ret[1];
        }
        assert(0);
    }
    def __step(){
        def _if(){
            (action,node) := this'.scheduler();
            def _if(){
                def _if(){
                    (pkt,port) := this'.__S0.Q_out.takeFront();
                    def _if(){
                        this'.__S1.Q_in.pushBack((pkt,3));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 1 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S2.Q_in.pushBack((pkt,2));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 2 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S3.Q_in.pushBack((pkt,1));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 3 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 0 && this'.__S0.Q_out.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    (pkt,port) := this'.__S1.Q_out.takeFront();
                    def _if(){
                        this'.__S2.Q_in.pushBack((pkt,3));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 1 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S3.Q_in.pushBack((pkt,2));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 2 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S0.Q_in.pushBack((pkt,1));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 3 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 1 && this'.__S1.Q_out.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    (pkt,port) := this'.__S2.Q_out.takeFront();
                    def _if(){
                        this'.__S3.Q_in.pushBack((pkt,3));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 1 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S0.Q_in.pushBack((pkt,2));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 2 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S1.Q_in.pushBack((pkt,1));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 3 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 2 && this'.__S2.Q_out.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    (pkt,port) := this'.__S3.Q_out.takeFront();
                    def _if(){
                        this'.__S0.Q_in.pushBack((pkt,3));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 1 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S1.Q_in.pushBack((pkt,2));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 2 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S2.Q_in.pushBack((pkt,1));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 3 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 3 && this'.__S3.Q_out.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def _else(){
                def _if(){
                    this'.__S0.__run();
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 0 && this'.__S0.Q_in.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S1.__run();
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 1 && this'.__S1.Q_in.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S2.__run();
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 2 && this'.__S2.Q_in.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S3.__run();
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 3 && this'.__S3.Q_in.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def eval_if(){
                if action {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return ();
    }
}
 
done with forToWhile
whileToRec normalization...
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
done with whileToRec
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
done with tuplesNormalizer
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
done with unreachableNormalizer
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
the following needs to be in a var:
(0,this.cur_node)
the following needs to be in a var:
this.cur_node
the following needs to be in a var:
(2,0,_ret_0[2])
the following needs to be in a var:
_ret_0[2]
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
the following needs to be in a var:
_ret_0[2]
the following needs to be in a var:
(1,this.cur_node)
the following needs to be in a var:
this.cur_node
the following needs to be in a var:
(2,0,_ret_1[2])
the following needs to be in a var:
_ret_1[2]
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
the following needs to be in a var:
_ret_1[2]
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
def outside of main:(normalized)
dat __D{
    __S0: __first_ty , __S1: __node_ty , __S2: __node_ty , __S3: __node_ty;
    phase: ℝ , cur_node: ℝ;
    def __D'(){
        subExp_CallExp_1 := __first_ty();
        this.__S0 = subExp_CallExp_1;
        subExp_CallExp_2 := __node_ty();
        this.__S1 = subExp_CallExp_2;
        subExp_CallExp_3 := __node_ty();
        this.__S2 = subExp_CallExp_3;
        subExp_CallExp_4 := __node_ty();
        this.__S3 = subExp_CallExp_4;
        this.phase = 0;
        this.cur_node = 0;
        return this;
    }
    def scheduler(){
        p_0 := 0;
        def loop_body_0(_args_0: ℝ × __D){
            _tuple_0 := _args_0;
            p_1 := _tuple_0[0];
            this := _tuple_0[1];
            subExp_5 := p_1 < 2;
            if subExp_5 {
                def _if_0(){
                    i_0 := 0;
                    def loop_body_1(_args_0: ℝ × __D){
                        _tuple_1 := _args_0;
                        i_1 := _tuple_1[0];
                        this := _tuple_1[1];
                        subExp_6 := i_1 < 4;
                        if subExp_6 {
                            def _if_1(){
                                subExpArr_9 := this.cur_node;
                                subExpArr_8 := (0,subExpArr_9);
                                subExp_7 := (2,0,subExpArr_8);
                                return subExp_7;
                            }
                            def _else_0(){
                                subExp_10 := (1,this,0);
                                return subExp_10;
                            }
                            def eval_if_0(){
                                subExp_14 := (if this.cur_node == 0 {
                                    this.__S0.Q_in;
                                } else if this.cur_node == 1 {
                                    this.__S1.Q_in;
                                } else if this.cur_node == 2 {
                                    this.__S2.Q_in;
                                } else {
                                    this.__S3.Q_in;
                                }).size();
                                subExp_11 := subExp_14 > 0;
                                if subExp_11 {
                                    subExp_12 := _if_1();
                                    return subExp_12;
                                } else {
                                    subExp_13 := _else_0();
                                    return subExp_13;
                                }
                            }
                            _ret_0 := eval_if_0();
                            subExp_19 := _ret_0[0];
                            subExp_15 := subExp_19 == 2;
                            if subExp_15 {
                                subExpArr_18 := _ret_0[2];
                                subExpArr_17 := (2,0,subExpArr_18);
                                subExp_16 := (2,0,subExpArr_17);
                                return subExp_16;
                            }
                            this = _ret_0[1];
                            subExp_21 := this.cur_node;
                            subExp_20 := (subExp_21 + 1);
                            this.cur_node = subExp_20 % 4;
                            i_2 := i_1 + 1;
                            _new_args_0 := (i_2,this);
                            subExp_22 := (0,_new_args_0,0);
                            return subExp_22;
                        } else {
                            subExp_23 := (1,_args_0,0);
                            return subExp_23;
                        }
                    }
                    def _loop_0(arg_0){
                        loop_body_2 := arg_0[0];
                        args_0 := arg_0[1];
                        k_0 := loop_body_2(args_0);
                        subExp_25 := k_0[0];
                        subExp_24 := subExp_25 != 0;
                        if subExp_24 {
                            return k_0;
                        }
                        subExp_arg_27 := k_0[1];
                        subExp_26 := _loop_0(loop_body_2,subExp_arg_27);
                        return subExp_26;
                    }
                    _args_1 := (i_0,this);
                    _ret_0 := _loop_0(loop_body_1,_args_1);
                    subExp_30 := _ret_0[0];
                    subExp_28 := subExp_30 == 2;
                    if subExp_28 {
                        subExp_29 := _ret_0[2];
                        return subExp_29;
                    }
                    _tuple_1 := _ret_0[1];
                    i_1 := _tuple_1[0];
                    this := _tuple_1[1];
                    this.phase = 1;
                    this.cur_node = 0;
                    subExp_31 := (1,this,0);
                    return subExp_31;
                }
                def _else_0(){
                    subExp_32 := (1,this,0);
                    return subExp_32;
                }
                def eval_if_0(){
                    subExp_36 := this.phase;
                    subExp_33 := subExp_36 == 0;
                    if subExp_33 {
                        subExp_34 := _if_0();
                        return subExp_34;
                    } else {
                        subExp_35 := _else_0();
                        return subExp_35;
                    }
                }
                _ret_0 := eval_if_0();
                subExp_40 := _ret_0[0];
                subExp_37 := subExp_40 == 2;
                if subExp_37 {
                    subExpArr_39 := _ret_0[2];
                    subExp_38 := (2,0,subExpArr_39);
                    return subExp_38;
                }
                this = _ret_0[1];
                def _if_1(){
                    i_0 := 0;
                    def loop_body_1(_args_0: ℝ × __D){
                        _tuple_1 := _args_0;
                        i_1 := _tuple_1[0];
                        this := _tuple_1[1];
                        subExp_41 := i_1 < 4;
                        if subExp_41 {
                            def _if_2(){
                                subExpArr_44 := this.cur_node;
                                subExpArr_43 := (1,subExpArr_44);
                                subExp_42 := (2,0,subExpArr_43);
                                return subExp_42;
                            }
                            def _else_1(){
                                subExp_45 := (1,this,0);
                                return subExp_45;
                            }
                            def eval_if_1(){
                                subExp_49 := (if this.cur_node == 0 {
                                    this.__S0.Q_out;
                                } else if this.cur_node == 1 {
                                    this.__S1.Q_out;
                                } else if this.cur_node == 2 {
                                    this.__S2.Q_out;
                                } else {
                                    this.__S3.Q_out;
                                }).size();
                                subExp_46 := subExp_49 > 0;
                                if subExp_46 {
                                    subExp_47 := _if_2();
                                    return subExp_47;
                                } else {
                                    subExp_48 := _else_1();
                                    return subExp_48;
                                }
                            }
                            _ret_1 := eval_if_1();
                            subExp_54 := _ret_1[0];
                            subExp_50 := subExp_54 == 2;
                            if subExp_50 {
                                subExpArr_53 := _ret_1[2];
                                subExpArr_52 := (2,0,subExpArr_53);
                                subExp_51 := (2,0,subExpArr_52);
                                return subExp_51;
                            }
                            this = _ret_1[1];
                            subExp_56 := this.cur_node;
                            subExp_55 := (subExp_56 + 1);
                            this.cur_node = subExp_55 % 4;
                            i_2 := i_1 + 1;
                            _new_args_0 := (i_2,this);
                            subExp_57 := (0,_new_args_0,0);
                            return subExp_57;
                        } else {
                            subExp_58 := (1,_args_0,0);
                            return subExp_58;
                        }
                    }
                    def _loop_0(arg_0){
                        loop_body_2 := arg_0[0];
                        args_0 := arg_0[1];
                        k_0 := loop_body_2(args_0);
                        subExp_60 := k_0[0];
                        subExp_59 := subExp_60 != 0;
                        if subExp_59 {
                            return k_0;
                        }
                        subExp_arg_62 := k_0[1];
                        subExp_61 := _loop_0(loop_body_2,subExp_arg_62);
                        return subExp_61;
                    }
                    _args_1 := (i_0,this);
                    _ret_1 := _loop_0(loop_body_1,_args_1);
                    subExp_65 := _ret_1[0];
                    subExp_63 := subExp_65 == 2;
                    if subExp_63 {
                        subExp_64 := _ret_1[2];
                        return subExp_64;
                    }
                    _tuple_1 := _ret_1[1];
                    i_1 := _tuple_1[0];
                    this := _tuple_1[1];
                    this.phase = 0;
                    this.cur_node = 0;
                    subExp_66 := (1,this,0);
                    return subExp_66;
                }
                def _else_1(){
                    subExp_67 := (1,this,0);
                    return subExp_67;
                }
                def eval_if_1(){
                    subExp_71 := this.phase;
                    subExp_68 := subExp_71 == 1;
                    if subExp_68 {
                        subExp_69 := _if_1();
                        return subExp_69;
                    } else {
                        subExp_70 := _else_1();
                        return subExp_70;
                    }
                }
                _ret_1 := eval_if_1();
                subExp_75 := _ret_1[0];
                subExp_72 := subExp_75 == 2;
                if subExp_72 {
                    subExpArr_74 := _ret_1[2];
                    subExp_73 := (2,0,subExpArr_74);
                    return subExp_73;
                }
                this = _ret_1[1];
                p_2 := p_1 + 1;
                _new_args_0 := (p_2,this);
                subExp_76 := (0,_new_args_0,0);
                return subExp_76;
            } else {
                subExp_77 := (1,_args_0,0);
                return subExp_77;
            }
        }
        def _loop_0(arg_0){
            loop_body_1 := arg_0[0];
            args_0 := arg_0[1];
            k_0 := loop_body_1(args_0);
            subExp_79 := k_0[0];
            subExp_78 := subExp_79 != 0;
            if subExp_78 {
                return k_0;
            }
            subExp_arg_81 := k_0[1];
            subExp_80 := _loop_0(loop_body_1,subExp_arg_81);
            return subExp_80;
        }
        _args_0 := (p_0,this);
        _ret_0 := _loop_0(loop_body_0,_args_0);
        subExp_84 := _ret_0[0];
        subExp_82 := subExp_84 == 2;
        if subExp_82 {
            subExp_83 := _ret_0[2];
            return subExp_83;
        }
        _tuple_0 := _ret_0[1];
        p_1 := _tuple_0[0];
        this := _tuple_0[1];
        assert(0);
    }
    def __step(){
        def _if_0(){
            _tuple_0 := this.scheduler();
            action_0 := _tuple_0[0];
            node_0 := _tuple_0[1];
            def _if_1(){
                def _if_2(){
                    _tuple_1 := this.__S0.Q_out.takeFront();
                    pkt_0 := _tuple_1[0];
                    port_0 := _tuple_1[1];
                    def _if_3(){
                        subExp_arg_85 := 3;
                        this.__S1.Q_in.pushBack(pkt_0,subExp_arg_85);
                        subExp_86 := (1,this,0);
                        return subExp_86;
                    }
                    def _else_0(){
                        subExp_87 := (1,this,0);
                        return subExp_87;
                    }
                    def eval_if_0(){
                        subExp_88 := port_0 == 1;
                        if subExp_88 {
                            subExp_89 := _if_3();
                            return subExp_89;
                        } else {
                            subExp_90 := _else_0();
                            return subExp_90;
                        }
                    }
                    _ret_0 := eval_if_0();
                    this = _ret_0[1];
                    def _if_4(){
                        subExp_arg_91 := 2;
                        this.__S2.Q_in.pushBack(pkt_0,subExp_arg_91);
                        subExp_92 := (1,this,0);
                        return subExp_92;
                    }
                    def _else_1(){
                        subExp_93 := (1,this,0);
                        return subExp_93;
                    }
                    def eval_if_1(){
                        subExp_94 := port_0 == 2;
                        if subExp_94 {
                            subExp_95 := _if_4();
                            return subExp_95;
                        } else {
                            subExp_96 := _else_1();
                            return subExp_96;
                        }
                    }
                    _ret_1 := eval_if_1();
                    this = _ret_1[1];
                    def _if_5(){
                        subExp_arg_97 := 1;
                        this.__S3.Q_in.pushBack(pkt_0,subExp_arg_97);
                        subExp_98 := (1,this,0);
                        return subExp_98;
                    }
                    def _else_2(){
                        subExp_99 := (1,this,0);
                        return subExp_99;
                    }
                    def eval_if_2(){
                        subExp_100 := port_0 == 3;
                        if subExp_100 {
                            subExp_101 := _if_5();
                            return subExp_101;
                        } else {
                            subExp_102 := _else_2();
                            return subExp_102;
                        }
                    }
                    _ret_2 := eval_if_2();
                    this = _ret_2[1];
                    subExp_103 := (1,this,0);
                    return subExp_103;
                }
                def _else_0(){
                    subExp_104 := (1,this,0);
                    return subExp_104;
                }
                def eval_if_0(){
                    subExp_108 := node_0 == 0;
                    subExp_109 := this.__S0.Q_out.size();
                    subExp_105 := subExp_108 && subExp_109;
                    if subExp_105 {
                        subExp_106 := _if_2();
                        return subExp_106;
                    } else {
                        subExp_107 := _else_0();
                        return subExp_107;
                    }
                }
                _ret_0 := eval_if_0();
                this = _ret_0[1];
                def _if_3(){
                    _tuple_1 := this.__S1.Q_out.takeFront();
                    pkt_0 := _tuple_1[0];
                    port_0 := _tuple_1[1];
                    def _if_4(){
                        subExp_arg_110 := 3;
                        this.__S2.Q_in.pushBack(pkt_0,subExp_arg_110);
                        subExp_111 := (1,this,0);
                        return subExp_111;
                    }
                    def _else_1(){
                        subExp_112 := (1,this,0);
                        return subExp_112;
                    }
                    def eval_if_1(){
                        subExp_113 := port_0 == 1;
                        if subExp_113 {
                            subExp_114 := _if_4();
                            return subExp_114;
                        } else {
                            subExp_115 := _else_1();
                            return subExp_115;
                        }
                    }
                    _ret_1 := eval_if_1();
                    this = _ret_1[1];
                    def _if_5(){
                        subExp_arg_116 := 2;
                        this.__S3.Q_in.pushBack(pkt_0,subExp_arg_116);
                        subExp_117 := (1,this,0);
                        return subExp_117;
                    }
                    def _else_2(){
                        subExp_118 := (1,this,0);
                        return subExp_118;
                    }
                    def eval_if_2(){
                        subExp_119 := port_0 == 2;
                        if subExp_119 {
                            subExp_120 := _if_5();
                            return subExp_120;
                        } else {
                            subExp_121 := _else_2();
                            return subExp_121;
                        }
                    }
                    _ret_2 := eval_if_2();
                    this = _ret_2[1];
                    def _if_6(){
                        subExp_arg_122 := 1;
                        this.__S0.Q_in.pushBack(pkt_0,subExp_arg_122);
                        subExp_123 := (1,this,0);
                        return subExp_123;
                    }
                    def _else_3(){
                        subExp_124 := (1,this,0);
                        return subExp_124;
                    }
                    def eval_if_3(){
                        subExp_125 := port_0 == 3;
                        if subExp_125 {
                            subExp_126 := _if_6();
                            return subExp_126;
                        } else {
                            subExp_127 := _else_3();
                            return subExp_127;
                        }
                    }
                    _ret_3 := eval_if_3();
                    this = _ret_3[1];
                    subExp_128 := (1,this,0);
                    return subExp_128;
                }
                def _else_1(){
                    subExp_129 := (1,this,0);
                    return subExp_129;
                }
                def eval_if_1(){
                    subExp_133 := node_0 == 1;
                    subExp_134 := this.__S1.Q_out.size();
                    subExp_130 := subExp_133 && subExp_134;
                    if subExp_130 {
                        subExp_131 := _if_3();
                        return subExp_131;
                    } else {
                        subExp_132 := _else_1();
                        return subExp_132;
                    }
                }
                _ret_1 := eval_if_1();
                this = _ret_1[1];
                def _if_4(){
                    _tuple_1 := this.__S2.Q_out.takeFront();
                    pkt_0 := _tuple_1[0];
                    port_0 := _tuple_1[1];
                    def _if_5(){
                        subExp_arg_135 := 3;
                        this.__S3.Q_in.pushBack(pkt_0,subExp_arg_135);
                        subExp_136 := (1,this,0);
                        return subExp_136;
                    }
                    def _else_2(){
                        subExp_137 := (1,this,0);
                        return subExp_137;
                    }
                    def eval_if_2(){
                        subExp_138 := port_0 == 1;
                        if subExp_138 {
                            subExp_139 := _if_5();
                            return subExp_139;
                        } else {
                            subExp_140 := _else_2();
                            return subExp_140;
                        }
                    }
                    _ret_2 := eval_if_2();
                    this = _ret_2[1];
                    def _if_6(){
                        subExp_arg_141 := 2;
                        this.__S0.Q_in.pushBack(pkt_0,subExp_arg_141);
                        subExp_142 := (1,this,0);
                        return subExp_142;
                    }
                    def _else_3(){
                        subExp_143 := (1,this,0);
                        return subExp_143;
                    }
                    def eval_if_3(){
                        subExp_144 := port_0 == 2;
                        if subExp_144 {
                            subExp_145 := _if_6();
                            return subExp_145;
                        } else {
                            subExp_146 := _else_3();
                            return subExp_146;
                        }
                    }
                    _ret_3 := eval_if_3();
                    this = _ret_3[1];
                    def _if_7(){
                        subExp_arg_147 := 1;
                        this.__S1.Q_in.pushBack(pkt_0,subExp_arg_147);
                        subExp_148 := (1,this,0);
                        return subExp_148;
                    }
                    def _else_4(){
                        subExp_149 := (1,this,0);
                        return subExp_149;
                    }
                    def eval_if_4(){
                        subExp_150 := port_0 == 3;
                        if subExp_150 {
                            subExp_151 := _if_7();
                            return subExp_151;
                        } else {
                            subExp_152 := _else_4();
                            return subExp_152;
                        }
                    }
                    _ret_4 := eval_if_4();
                    this = _ret_4[1];
                    subExp_153 := (1,this,0);
                    return subExp_153;
                }
                def _else_2(){
                    subExp_154 := (1,this,0);
                    return subExp_154;
                }
                def eval_if_2(){
                    subExp_158 := node_0 == 2;
                    subExp_159 := this.__S2.Q_out.size();
                    subExp_155 := subExp_158 && subExp_159;
                    if subExp_155 {
                        subExp_156 := _if_4();
                        return subExp_156;
                    } else {
                        subExp_157 := _else_2();
                        return subExp_157;
                    }
                }
                _ret_2 := eval_if_2();
                this = _ret_2[1];
                def _if_5(){
                    _tuple_1 := this.__S3.Q_out.takeFront();
                    pkt_0 := _tuple_1[0];
                    port_0 := _tuple_1[1];
                    def _if_6(){
                        subExp_arg_160 := 3;
                        this.__S0.Q_in.pushBack(pkt_0,subExp_arg_160);
                        subExp_161 := (1,this,0);
                        return subExp_161;
                    }
                    def _else_3(){
                        subExp_162 := (1,this,0);
                        return subExp_162;
                    }
                    def eval_if_3(){
                        subExp_163 := port_0 == 1;
                        if subExp_163 {
                            subExp_164 := _if_6();
                            return subExp_164;
                        } else {
                            subExp_165 := _else_3();
                            return subExp_165;
                        }
                    }
                    _ret_3 := eval_if_3();
                    this = _ret_3[1];
                    def _if_7(){
                        subExp_arg_166 := 2;
                        this.__S1.Q_in.pushBack(pkt_0,subExp_arg_166);
                        subExp_167 := (1,this,0);
                        return subExp_167;
                    }
                    def _else_4(){
                        subExp_168 := (1,this,0);
                        return subExp_168;
                    }
                    def eval_if_4(){
                        subExp_169 := port_0 == 2;
                        if subExp_169 {
                            subExp_170 := _if_7();
                            return subExp_170;
                        } else {
                            subExp_171 := _else_4();
                            return subExp_171;
                        }
                    }
                    _ret_4 := eval_if_4();
                    this = _ret_4[1];
                    def _if_8(){
                        subExp_arg_172 := 1;
                        this.__S2.Q_in.pushBack(pkt_0,subExp_arg_172);
                        subExp_173 := (1,this,0);
                        return subExp_173;
                    }
                    def _else_5(){
                        subExp_174 := (1,this,0);
                        return subExp_174;
                    }
                    def eval_if_5(){
                        subExp_175 := port_0 == 3;
                        if subExp_175 {
                            subExp_176 := _if_8();
                            return subExp_176;
                        } else {
                            subExp_177 := _else_5();
                            return subExp_177;
                        }
                    }
                    _ret_5 := eval_if_5();
                    this = _ret_5[1];
                    subExp_178 := (1,this,0);
                    return subExp_178;
                }
                def _else_3(){
                    subExp_179 := (1,this,0);
                    return subExp_179;
                }
                def eval_if_3(){
                    subExp_183 := node_0 == 3;
                    subExp_184 := this.__S3.Q_out.size();
                    subExp_180 := subExp_183 && subExp_184;
                    if subExp_180 {
                        subExp_181 := _if_5();
                        return subExp_181;
                    } else {
                        subExp_182 := _else_3();
                        return subExp_182;
                    }
                }
                _ret_3 := eval_if_3();
                this = _ret_3[1];
                subExp_185 := (1,this,0);
                return subExp_185;
            }
            def _else_0(){
                def _if_2(){
                    this.__S0.__run();
                    subExp_186 := (1,this,0);
                    return subExp_186;
                }
                def _else_1(){
                    subExp_187 := (1,this,0);
                    return subExp_187;
                }
                def eval_if_0(){
                    subExp_191 := node_0 == 0;
                    subExp_192 := this.__S0.Q_in.size();
                    subExp_188 := subExp_191 && subExp_192;
                    if subExp_188 {
                        subExp_189 := _if_2();
                        return subExp_189;
                    } else {
                        subExp_190 := _else_1();
                        return subExp_190;
                    }
                }
                _ret_0 := eval_if_0();
                this = _ret_0[1];
                def _if_3(){
                    this.__S1.__run();
                    subExp_193 := (1,this,0);
                    return subExp_193;
                }
                def _else_2(){
                    subExp_194 := (1,this,0);
                    return subExp_194;
                }
                def eval_if_1(){
                    subExp_198 := node_0 == 1;
                    subExp_199 := this.__S1.Q_in.size();
                    subExp_195 := subExp_198 && subExp_199;
                    if subExp_195 {
                        subExp_196 := _if_3();
                        return subExp_196;
                    } else {
                        subExp_197 := _else_2();
                        return subExp_197;
                    }
                }
                _ret_1 := eval_if_1();
                this = _ret_1[1];
                def _if_4(){
                    this.__S2.__run();
                    subExp_200 := (1,this,0);
                    return subExp_200;
                }
                def _else_3(){
                    subExp_201 := (1,this,0);
                    return subExp_201;
                }
                def eval_if_2(){
                    subExp_205 := node_0 == 2;
                    subExp_206 := this.__S2.Q_in.size();
                    subExp_202 := subExp_205 && subExp_206;
                    if subExp_202 {
                        subExp_203 := _if_4();
                        return subExp_203;
                    } else {
                        subExp_204 := _else_3();
                        return subExp_204;
                    }
                }
                _ret_2 := eval_if_2();
                this = _ret_2[1];
                def _if_5(){
                    this.__S3.__run();
                    subExp_207 := (1,this,0);
                    return subExp_207;
                }
                def _else_4(){
                    subExp_208 := (1,this,0);
                    return subExp_208;
                }
                def eval_if_3(){
                    subExp_212 := node_0 == 3;
                    subExp_213 := this.__S3.Q_in.size();
                    subExp_209 := subExp_212 && subExp_213;
                    if subExp_209 {
                        subExp_210 := _if_5();
                        return subExp_210;
                    } else {
                        subExp_211 := _else_4();
                        return subExp_211;
                    }
                }
                _ret_3 := eval_if_3();
                this = _ret_3[1];
                subExp_214 := (1,this,0);
                return subExp_214;
            }
            def eval_if_0(){
                if action_0 {
                    subExp_215 := _if_1();
                    return subExp_215;
                } else {
                    subExp_216 := _else_0();
                    return subExp_216;
                }
            }
            _ret_0 := eval_if_0();
            this = _ret_0[1];
            subExp_217 := (1,this,0);
            return subExp_217;
        }
        def _else_0(){
            subExp_218 := (1,this,0);
            return subExp_218;
        }
        def eval_if_0(){
            subExp_234 := this.__S0.Q_in.size();
            subExp_235 := this.__S0.Q_out.size();
            subExp_232 := subExp_234 || subExp_235;
            subExp_233 := this.__S1.Q_in.size();
            subExp_230 := subExp_232 || subExp_233;
            subExp_231 := this.__S1.Q_out.size();
            subExp_228 := subExp_230 || subExp_231;
            subExp_229 := this.__S2.Q_in.size();
            subExp_226 := subExp_228 || subExp_229;
            subExp_227 := this.__S2.Q_out.size();
            subExp_224 := subExp_226 || subExp_227;
            subExp_225 := this.__S3.Q_in.size();
            subExp_222 := subExp_224 || subExp_225;
            subExp_223 := this.__S3.Q_out.size();
            subExp_219 := subExp_222 || subExp_223;
            if subExp_219 {
                subExp_220 := _if_0();
                return subExp_220;
            } else {
                subExp_221 := _else_0();
                return subExp_221;
            }
        }
        _ret_0 := eval_if_0();
        this = _ret_0[1];
        subExp_236 := ();
        return subExp_236;
    }
}
illegal thing in data declaration:
__S0: __first_ty , __S1: __node_ty , __S2: __node_ty , __S3: __node_ty

illegal thing in data declaration:
phase: ℝ , cur_node: ℝ

translating meaning of __first_ty
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
done with ifElseFunctional
Expression of type Identifier:
__first_ty
 
Expression of type Identifier:
Q_in
 
Expression of type Identifier:
Queue
 
Expression of type VarDecl:
Q_in: Queue
 
Expression of type Identifier:
Q_out
 
Expression of type Identifier:
Queue
 
Expression of type VarDecl:
Q_out: Queue
 
Expression of type ABinaryExp:
Q_in: Queue , Q_out: Queue
 
Expression of type Identifier:
infected
 
Expression of type Identifier:
ℝ
 
Expression of type VarDecl:
infected: ℝ
 
Expression of type Identifier:
__first_ty
 
Expression of type Identifier:
this
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this.Q_in
 
Expression of type Identifier:
Queue'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Queue'()
 
Expression of type ABinaryExp:
this.Q_in = Queue'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this.Q_out
 
Expression of type Identifier:
Queue'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Queue'()
 
Expression of type ABinaryExp:
this.Q_out = Queue'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
infected
 
Expression of type FieldExp:
this.infected
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
this.infected = 0
 
Expression of type Identifier:
this
 
Expression of type ReturnExp:
return this
 
Expression of type FunctionDef:
def __first_ty'(){
    this.Q_in = Queue'();
    this.Q_out = Queue'();
    this.infected = 0;
    return this;
}
 
Expression of type Identifier:
__run
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
infected
 
Expression of type FieldExp:
this'.infected
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
this'.infected = 1
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
pushFront
 
Expression of type FieldExp:
this'.Q_in.pushFront
 
Expression of type Identifier:
Packet'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Packet'()
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
((Packet'(),0))
 
Expression of type CallExp:
this'.Q_in.pushFront((Packet'(),0))
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.Q_out
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.Q_out.pushBack
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.Q_in.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.Q_in.takeFront()
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.takeFront()[0]
 
Expression of type Identifier:
uniformInt
 
Expression of type LiteralExp:
1
 
Expression of type LiteralExp:
3
 
Expression of type TupleExp:
(1,3)
 
Expression of type CallExp:
uniformInt(1,3)
 
Expression of type TupleExp:
((this'.Q_in.takeFront()[0],uniformInt(1,3)))
 
Expression of type CallExp:
this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
popFront
 
Expression of type FieldExp:
this'.Q_in.popFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.Q_in.popFront()
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    this'.Q_in.popFront();
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
infected
 
Expression of type FieldExp:
this'.infected
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
(this'.infected == 0)
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if (this'.infected == 0) {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if (this'.infected == 0) {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type TupleExp:
()
 
Expression of type ReturnExp:
return ()
 
Expression of type FunctionDef:
def __run(){
    def _if(){
        this'.infected = 1;
        this'.Q_in.pushFront((Packet'(),0));
        this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
        return (1,this',0);
    }
    def _else(){
        this'.Q_in.popFront();
        return (1,this',0);
    }
    def eval_if(){
        if (this'.infected == 0) {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return ();
}
 
Expression of type CompoundDecl:
{
    Q_in: Queue , Q_out: Queue;
    infected: ℝ;
    def __first_ty'(){
        this.Q_in = Queue'();
        this.Q_out = Queue'();
        this.infected = 0;
        return this;
    }
    def __run(){
        def _if(){
            this'.infected = 1;
            this'.Q_in.pushFront((Packet'(),0));
            this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
            return (1,this',0);
        }
        def _else(){
            this'.Q_in.popFront();
            return (1,this',0);
        }
        def eval_if(){
            if (this'.infected == 0) {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return ();
    }
}
 
Expression of type DatDecl:
dat __first_ty{
    Q_in: Queue , Q_out: Queue;
    infected: ℝ;
    def __first_ty'(){
        this.Q_in = Queue'();
        this.Q_out = Queue'();
        this.infected = 0;
        return this;
    }
    def __run(){
        def _if(){
            this'.infected = 1;
            this'.Q_in.pushFront((Packet'(),0));
            this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
            return (1,this',0);
        }
        def _else(){
            this'.Q_in.popFront();
            return (1,this',0);
        }
        def eval_if(){
            if (this'.infected == 0) {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return ();
    }
}
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
dat __first_ty{
    Q_in: Queue , Q_out: Queue;
    infected: ℝ;
    def __first_ty'(){
        subExp_CallExp_1 := Queue();
        this.Q_in = subExp_CallExp_1;
        subExp_CallExp_2 := Queue();
        this.Q_out = subExp_CallExp_2;
        this.infected = 0;
        return this;
    }
    def __run(){
        def _if_0(){
            this.infected = 1;
            subExp_arg_3 := Packet();
            subExp_arg_4 := 0;
            this.Q_in.pushFront(subExp_arg_3,subExp_arg_4);
            subExp_7 := this.Q_in.takeFront();
            subExp_arg_5 := subExp_7[0];
            subExp_arg_8 := 1;
            subExp_arg_9 := 3;
            subExp_arg_6 := uniformInt(subExp_arg_8,subExp_arg_9);
            this.Q_out.pushBack(subExp_arg_5,subExp_arg_6);
            subExp_10 := (1,this,0);
            return subExp_10;
        }
        def _else_0(){
            this.Q_in.popFront();
            subExp_11 := (1,this,0);
            return subExp_11;
        }
        def eval_if_0(){
            subExp_15 := this.infected;
            subExp_12 := (subExp_15 == 0);
            if subExp_12 {
                subExp_13 := _if_0();
                return subExp_13;
            } else {
                subExp_14 := _else_0();
                return subExp_14;
            }
        }
        _ret_0 := eval_if_0();
        this = _ret_0[1];
        subExp_16 := ();
        return subExp_16;
    }
}
illegal thing in data declaration:
Q_in: Queue , Q_out: Queue

translating meaning of Queue
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
Queue
 
Expression of type Identifier:
data
 
Expression of type Identifier:
Packet
 
Expression of type Identifier:
ℝ
 
Expression of type ABinaryExp:
(Packet × ℝ)
 
Expression of type IndexExp:
(Packet × ℝ)[]
 
Expression of type VarDecl:
data: (Packet × ℝ)[]
 
Expression of type Identifier:
Queue
 
Expression of type Identifier:
this
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this.data
 
Expression of type ArrayExp:
[]
 
Expression of type Identifier:
Packet
 
Expression of type Identifier:
ℝ
 
Expression of type ABinaryExp:
(Packet × ℝ)
 
Expression of type IndexExp:
(Packet × ℝ)[]
 
Expression of type TypeAnnotationExp:
([]: (Packet × ℝ)[])
 
Expression of type ABinaryExp:
this.data = ([]: (Packet × ℝ)[])
 
Expression of type Identifier:
this
 
Expression of type ReturnExp:
return this
 
Expression of type FunctionDef:
def Queue'(){
    this.data = ([]: (Packet × ℝ)[]);
    return this;
}
 
Expression of type Identifier:
pushFront
 
Expression of type Identifier:
x
 
Expression of type Parameter:
x: Packet × ℝ
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type Identifier:
x
 
Expression of type ArrayExp:
[x]
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type ABinaryExp:
[x] ~ this'.data
 
Expression of type ABinaryExp:
this'.data = [x] ~ this'.data
 
Expression of type TupleExp:
()
 
Expression of type ReturnExp:
return ()
 
Expression of type FunctionDef:
def pushFront(x: Packet × ℝ){
    this'.data = [x] ~ this'.data;
    return ();
}
 
Expression of type Identifier:
pushBack
 
Expression of type Identifier:
x
 
Expression of type Parameter:
x: Packet × ℝ
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type Identifier:
x
 
Expression of type ArrayExp:
[x]
 
Expression of type ABinaryExp:
this'.data ~ [x]
 
Expression of type ABinaryExp:
this'.data = this'.data ~ [x]
 
Expression of type TupleExp:
()
 
Expression of type ReturnExp:
return ()
 
Expression of type FunctionDef:
def pushBack(x: Packet × ℝ){
    this'.data = this'.data ~ [x];
    return ();
}
 
Expression of type Identifier:
takeFront
 
Expression of type Identifier:
r
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
front
 
Expression of type FieldExp:
this'.front
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.front()
 
Expression of type ABinaryExp:
r := this'.front()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
popFront
 
Expression of type FieldExp:
this'.popFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.popFront()
 
Expression of type Identifier:
r
 
Expression of type ReturnExp:
return r
 
Expression of type FunctionDef:
def takeFront(){
    r := this'.front();
    this'.popFront();
    return r;
}
 
Expression of type Identifier:
takeBack
 
Expression of type Identifier:
r
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.size()
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
this'.size() - 1
 
Expression of type IndexExp:
this'.data[this'.size() - 1]
 
Expression of type ABinaryExp:
r := this'.data[this'.size() - 1]
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type LiteralExp:
0
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.size()
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
this'.size() - 1
 
Expression of type SliceExp:
this'.data[0..this'.size() - 1]
 
Expression of type ABinaryExp:
this'.data = this'.data[0..this'.size() - 1]
 
Expression of type Identifier:
r
 
Expression of type ReturnExp:
return r
 
Expression of type FunctionDef:
def takeBack(){
    r := this'.data[this'.size() - 1];
    this'.data = this'.data[0..this'.size() - 1];
    return r;
}
 
Expression of type Identifier:
size
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type Identifier:
length
 
Expression of type FieldExp:
this'.data.length
 
Expression of type ReturnExp:
return this'.data.length
 
Expression of type FunctionDef:
def size(){
    return this'.data.length;
}
 
Expression of type Identifier:
front
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.data[0]
 
Expression of type ReturnExp:
return this'.data[0]
 
Expression of type FunctionDef:
def front(){
    return this'.data[0];
}
 
Expression of type Identifier:
dupFront
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
pushFront
 
Expression of type FieldExp:
this'.pushFront
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
front
 
Expression of type FieldExp:
this'.front
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
(this'.front())
 
Expression of type CallExp:
this'.pushFront(this'.front())
 
Expression of type TupleExp:
()
 
Expression of type ReturnExp:
return ()
 
Expression of type FunctionDef:
def dupFront(){
    this'.pushFront(this'.front());
    return ();
}
 
Expression of type Identifier:
popFront
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.size()
 
Expression of type SliceExp:
this'.data[1..this'.size()]
 
Expression of type ABinaryExp:
this'.data = this'.data[1..this'.size()]
 
Expression of type TupleExp:
()
 
Expression of type ReturnExp:
return ()
 
Expression of type FunctionDef:
def popFront(){
    this'.data = this'.data[1..this'.size()];
    return ();
}
 
Expression of type CompoundDecl:
{
    data: (Packet × ℝ)[];
    def Queue'(){
        this.data = ([]: (Packet × ℝ)[]);
        return this;
    }
    def pushFront(x: Packet × ℝ){
        this'.data = [x] ~ this'.data;
        return ();
    }
    def pushBack(x: Packet × ℝ){
        this'.data = this'.data ~ [x];
        return ();
    }
    def takeFront(){
        r := this'.front();
        this'.popFront();
        return r;
    }
    def takeBack(){
        r := this'.data[this'.size() - 1];
        this'.data = this'.data[0..this'.size() - 1];
        return r;
    }
    def size(){
        return this'.data.length;
    }
    def front(){
        return this'.data[0];
    }
    def dupFront(){
        this'.pushFront(this'.front());
        return ();
    }
    def popFront(){
        this'.data = this'.data[1..this'.size()];
        return ();
    }
}
 
Expression of type DatDecl:
dat Queue{
    data: (Packet × ℝ)[];
    def Queue'(){
        this.data = ([]: (Packet × ℝ)[]);
        return this;
    }
    def pushFront(x: Packet × ℝ){
        this'.data = [x] ~ this'.data;
        return ();
    }
    def pushBack(x: Packet × ℝ){
        this'.data = this'.data ~ [x];
        return ();
    }
    def takeFront(){
        r := this'.front();
        this'.popFront();
        return r;
    }
    def takeBack(){
        r := this'.data[this'.size() - 1];
        this'.data = this'.data[0..this'.size() - 1];
        return r;
    }
    def size(){
        return this'.data.length;
    }
    def front(){
        return this'.data[0];
    }
    def dupFront(){
        this'.pushFront(this'.front());
        return ();
    }
    def popFront(){
        this'.data = this'.data[1..this'.size()];
        return ();
    }
}
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
dat Queue{
    data: (Packet × ℝ)[];
    def Queue'(){
        this.data = ([]: (Packet × ℝ)[]);
        return this;
    }
    def pushFront(x_0: Packet × ℝ){
        subExp_1 := [x_0];
        subExp_2 := this.data;
        this.data = subExp_1 ~ subExp_2;
        subExp_3 := ();
        return subExp_3;
    }
    def pushBack(x_0: Packet × ℝ){
        subExp_4 := this.data;
        subExp_5 := [x_0];
        this.data = subExp_4 ~ subExp_5;
        subExp_6 := ();
        return subExp_6;
    }
    def takeFront(){
        r_0 := this.front();
        this.popFront();
        return r_0;
    }
    def takeBack(){
        subExp_7 := this.data;
        subExp_9 := this.size();
        subExpArr_8 := subExp_9 - 1;
        r_0 := subExp_7[subExpArr_8];
        subExp_10 := this.data;
        subExp_12 := this.size();
        subExp_11 := subExp_12 - 1;
        this.data = subExp_10[0..subExp_11];
        return r_0;
    }
    def size(){
        subExp_13 := this.data.length;
        return subExp_13;
    }
    def front(){
        subExp_15 := this.data;
        subExp_14 := subExp_15[0];
        return subExp_14;
    }
    def dupFront(){
        subExp_16 := (this.front());
        this.pushFront(subExp_16);
        subExp_17 := ();
        return subExp_17;
    }
    def popFront(){
        subExp_18 := this.data;
        subExp_19 := this.size();
        this.data = subExp_18[1..subExp_19];
        subExp_20 := ();
        return subExp_20;
    }
}
var Queue = function(){
    var this_v0 = {};
    var this_v1 = _.assign({},this_v0,{data: []});
    return {res:this_v1,obj:this_v1};
}
var Queue_pushFront = function(this_v0, x_0){
    var subExp_1=[x_0];
    var subExp_2=this_v0.data;
    var this_v1 = _.assign({},this_v0,{data: [].concat(subExp_1,subExp_2)});
    var subExp_3=[];
    return {res:subExp_3,obj:this_v1};
}
var Queue_pushBack = function(this_v0, x_0){
    var subExp_4=this_v0.data;
    var subExp_5=[x_0];
    var this_v1 = _.assign({},this_v0,{data: [].concat(subExp_4,subExp_5)});
    var subExp_6=[];
    return {res:subExp_6,obj:this_v1};
}
var Queue_takeFront = function(this_v0){
    var tmp = Queue_front(this_v0,[]);
    var r_0 = tmp.res;
    var this_v1 = tmp.obj;
    var this_v2 = Queue_popFront(this_v1,[]).obj;
    return {res:r_0,obj:this_v2};
}
var Queue_takeBack = function(this_v0){
    var subExp_7=this_v0.data;
    var tmp = Queue_size(this_v0,[]);
    var subExp_9 = tmp.res;
    var this_v1 = tmp.obj;
    var subExpArr_8=subExp_9-1;
    var r_0=subExp_7[+subExpArr_8];
    var subExp_10=this_v1.data;
    var tmp = Queue_size(this_v1,[]);
    var subExp_12 = tmp.res;
    var this_v2 = tmp.obj;
    var subExp_11=subExp_12-1;
    var this_v3 = _.assign({},this_v2,{data: ([].concat(subExp_10)).slice(0,subExp_11)});
    return {res:r_0,obj:this_v3};
}
var Queue_size = function(this_v0){
    var subExp_13=this_v0.data.length;
    return {res:subExp_13,obj:this_v0};
}
var Queue_front = function(this_v0){
    var subExp_15=this_v0.data;
    var subExp_14=subExp_15[+0];
    return {res:subExp_14,obj:this_v0};
}
var Queue_dupFront = function(this_v0){
    var tmp = Queue_front(this_v0,[]);
    var subExp_16 = tmp.res;
    var this_v1 = tmp.obj;
    var this_v2 = Queue_pushFront(this_v1,subExp_16).obj;
    var subExp_17=[];
    return {res:subExp_17,obj:this_v2};
}
var Queue_popFront = function(this_v0){
    var subExp_18=this_v0.data;
    var tmp = Queue_size(this_v0,[]);
    var subExp_19 = tmp.res;
    var this_v1 = tmp.obj;
    var this_v2 = _.assign({},this_v1,{data: ([].concat(subExp_18)).slice(1,subExp_19)});
    var subExp_20=[];
    return {res:subExp_20,obj:this_v2};
}

translating meaning of Packet
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
Packet
 
Expression of type Identifier:
Packet
 
Expression of type Identifier:
this
 
Expression of type ReturnExp:
return this
 
Expression of type FunctionDef:
def Packet'(){
    return this;
}
 
Expression of type CompoundDecl:
{
    def Packet'(){
        return this;
    }
}
 
Expression of type DatDecl:
dat Packet{
    def Packet'(){
        return this;
    }
}
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
dat Packet{
    def Packet'(){
        return this;
    }
}
var Packet = function(){
    var this_v0 = {};
    return {res:this_v0,obj:this_v0};
}

var Packet = function(){
    var this_v0 = {};
    return {res:this_v0,obj:this_v0};
}
var Queue = function(){
    var this_v0 = {};
    var this_v1 = _.assign({},this_v0,{data: []});
    return {res:this_v1,obj:this_v1};
}
var Queue_pushFront = function(this_v0, x_0){
    var subExp_1=[x_0];
    var subExp_2=this_v0.data;
    var this_v1 = _.assign({},this_v0,{data: [].concat(subExp_1,subExp_2)});
    var subExp_3=[];
    return {res:subExp_3,obj:this_v1};
}
var Queue_pushBack = function(this_v0, x_0){
    var subExp_4=this_v0.data;
    var subExp_5=[x_0];
    var this_v1 = _.assign({},this_v0,{data: [].concat(subExp_4,subExp_5)});
    var subExp_6=[];
    return {res:subExp_6,obj:this_v1};
}
var Queue_takeFront = function(this_v0){
    var tmp = Queue_front(this_v0,[]);
    var r_0 = tmp.res;
    var this_v1 = tmp.obj;
    var this_v2 = Queue_popFront(this_v1,[]).obj;
    return {res:r_0,obj:this_v2};
}
var Queue_takeBack = function(this_v0){
    var subExp_7=this_v0.data;
    var tmp = Queue_size(this_v0,[]);
    var subExp_9 = tmp.res;
    var this_v1 = tmp.obj;
    var subExpArr_8=subExp_9-1;
    var r_0=subExp_7[+subExpArr_8];
    var subExp_10=this_v1.data;
    var tmp = Queue_size(this_v1,[]);
    var subExp_12 = tmp.res;
    var this_v2 = tmp.obj;
    var subExp_11=subExp_12-1;
    var this_v3 = _.assign({},this_v2,{data: ([].concat(subExp_10)).slice(0,subExp_11)});
    return {res:r_0,obj:this_v3};
}
var Queue_size = function(this_v0){
    var subExp_13=this_v0.data.length;
    return {res:subExp_13,obj:this_v0};
}
var Queue_front = function(this_v0){
    var subExp_15=this_v0.data;
    var subExp_14=subExp_15[+0];
    return {res:subExp_14,obj:this_v0};
}
var Queue_dupFront = function(this_v0){
    var tmp = Queue_front(this_v0,[]);
    var subExp_16 = tmp.res;
    var this_v1 = tmp.obj;
    var this_v2 = Queue_pushFront(this_v1,subExp_16).obj;
    var subExp_17=[];
    return {res:subExp_17,obj:this_v2};
}
var Queue_popFront = function(this_v0){
    var subExp_18=this_v0.data;
    var tmp = Queue_size(this_v0,[]);
    var subExp_19 = tmp.res;
    var this_v1 = tmp.obj;
    var this_v2 = _.assign({},this_v1,{data: ([].concat(subExp_18)).slice(1,subExp_19)});
    var subExp_20=[];
    return {res:subExp_20,obj:this_v2};
}
var __first_ty = function(){
    var this_v0 = {};
    var subExp_CallExp_1_v0 = Queue([]).obj;
    var this_v1 = _.assign({},this_v0,{Q_in: subExp_CallExp_1_v0});
    var subExp_CallExp_2_v0 = Queue([]).obj;
    var this_v2 = _.assign({},this_v1,{Q_out: subExp_CallExp_2_v0});
    var this_v3 = _.assign({},this_v2,{infected: 0});
    return {res:this_v3,obj:this_v3};
}
var __first_ty___run = function(this_v0){
    var _if_0 = function(){
        var this_v1 = _.assign({},this_v0,{infected: 1});
        var subExp_arg_3_v0 = Packet([]).obj;
        var subExp_arg_4=0;
        var this_v2 = _.assign({},this_v1,{Q_in: Queue_pushFront(this_v1.Q_in,[subExp_arg_3_v0,subExp_arg_4]).obj});
        var tmp = Queue_takeFront(this_v2.Q_in,[]);
        var subExp_7 = tmp.res;
        var this_v3 = _.assign({},this_v2,{Q_in: tmp.obj});
        var subExp_arg_5=subExp_7[+0];
        var subExp_arg_8=1;
        var subExp_arg_9=3;
        var subExp_arg_6=sample(RandomInteger({n:((subExp_arg_9)-(subExp_arg_8)+1)}))+(subExp_arg_8);
        var this_v4 = _.assign({},this_v3,{Q_out: Queue_pushBack(this_v3.Q_out,[subExp_arg_5,subExp_arg_6]).obj});
        var subExp_10=[1,this_v4,0];
        return subExp_10;
    }
    var _else_0 = function(){
        var this_v1 = _.assign({},this_v0,{Q_in: Queue_popFront(this_v0.Q_in,[]).obj});
        var subExp_11=[1,this_v1,0];
        return subExp_11;
    }
    var eval_if_0 = function(){
        var subExp_15=this_v0.infected;
        var subExp_12=(subExp_15==0);
        if(subExp_12){
            var subExp_13=_if_0([]);
            return subExp_13;
        }
        else{
            var subExp_14=_else_0([]);
            return subExp_14;
        }
    }
    var _ret_0=eval_if_0([]);
    var this_v0=_ret_0[+1];
    var subExp_16=[];
    return {res:subExp_16,obj:this_v0};
}

translating meaning of __node_ty
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
done with ifElseFunctional
Expression of type Identifier:
__node_ty
 
Expression of type Identifier:
Q_in
 
Expression of type Identifier:
Queue
 
Expression of type VarDecl:
Q_in: Queue
 
Expression of type Identifier:
Q_out
 
Expression of type Identifier:
Queue
 
Expression of type VarDecl:
Q_out: Queue
 
Expression of type ABinaryExp:
Q_in: Queue , Q_out: Queue
 
Expression of type Identifier:
infected
 
Expression of type Identifier:
ℝ
 
Expression of type VarDecl:
infected: ℝ
 
Expression of type Identifier:
__node_ty
 
Expression of type Identifier:
this
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this.Q_in
 
Expression of type Identifier:
Queue'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Queue'()
 
Expression of type ABinaryExp:
this.Q_in = Queue'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this.Q_out
 
Expression of type Identifier:
Queue'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Queue'()
 
Expression of type ABinaryExp:
this.Q_out = Queue'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
infected
 
Expression of type FieldExp:
this.infected
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
this.infected = 0
 
Expression of type Identifier:
this
 
Expression of type ReturnExp:
return this
 
Expression of type FunctionDef:
def __node_ty'(){
    this.Q_in = Queue'();
    this.Q_out = Queue'();
    this.infected = 0;
    return this;
}
 
Expression of type Identifier:
__run
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
infected
 
Expression of type FieldExp:
this'.infected
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
this'.infected = 1
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
dupFront
 
Expression of type FieldExp:
this'.Q_in.dupFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.Q_in.dupFront()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.Q_out
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.Q_out.pushBack
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.Q_in.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.Q_in.takeFront()
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.takeFront()[0]
 
Expression of type Identifier:
uniformInt
 
Expression of type LiteralExp:
1
 
Expression of type LiteralExp:
3
 
Expression of type TupleExp:
(1,3)
 
Expression of type CallExp:
uniformInt(1,3)
 
Expression of type TupleExp:
((this'.Q_in.takeFront()[0],uniformInt(1,3)))
 
Expression of type CallExp:
this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.Q_out
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.Q_out.pushBack
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.Q_in.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.Q_in.takeFront()
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.takeFront()[0]
 
Expression of type Identifier:
uniformInt
 
Expression of type LiteralExp:
1
 
Expression of type LiteralExp:
3
 
Expression of type TupleExp:
(1,3)
 
Expression of type CallExp:
uniformInt(1,3)
 
Expression of type TupleExp:
((this'.Q_in.takeFront()[0],uniformInt(1,3)))
 
Expression of type CallExp:
this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.infected = 1;
    this'.Q_in.dupFront();
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
popFront
 
Expression of type FieldExp:
this'.Q_in.popFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.Q_in.popFront()
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    this'.Q_in.popFront();
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
infected
 
Expression of type FieldExp:
this'.infected
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
(this'.infected == 0)
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if (this'.infected == 0) {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if (this'.infected == 0) {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type TupleExp:
()
 
Expression of type ReturnExp:
return ()
 
Expression of type FunctionDef:
def __run(){
    def _if(){
        this'.infected = 1;
        this'.Q_in.dupFront();
        this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
        this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
        return (1,this',0);
    }
    def _else(){
        this'.Q_in.popFront();
        return (1,this',0);
    }
    def eval_if(){
        if (this'.infected == 0) {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return ();
}
 
Expression of type CompoundDecl:
{
    Q_in: Queue , Q_out: Queue;
    infected: ℝ;
    def __node_ty'(){
        this.Q_in = Queue'();
        this.Q_out = Queue'();
        this.infected = 0;
        return this;
    }
    def __run(){
        def _if(){
            this'.infected = 1;
            this'.Q_in.dupFront();
            this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
            this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
            return (1,this',0);
        }
        def _else(){
            this'.Q_in.popFront();
            return (1,this',0);
        }
        def eval_if(){
            if (this'.infected == 0) {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return ();
    }
}
 
Expression of type DatDecl:
dat __node_ty{
    Q_in: Queue , Q_out: Queue;
    infected: ℝ;
    def __node_ty'(){
        this.Q_in = Queue'();
        this.Q_out = Queue'();
        this.infected = 0;
        return this;
    }
    def __run(){
        def _if(){
            this'.infected = 1;
            this'.Q_in.dupFront();
            this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
            this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
            return (1,this',0);
        }
        def _else(){
            this'.Q_in.popFront();
            return (1,this',0);
        }
        def eval_if(){
            if (this'.infected == 0) {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return ();
    }
}
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
dat __node_ty{
    Q_in: Queue , Q_out: Queue;
    infected: ℝ;
    def __node_ty'(){
        subExp_CallExp_1 := Queue();
        this.Q_in = subExp_CallExp_1;
        subExp_CallExp_2 := Queue();
        this.Q_out = subExp_CallExp_2;
        this.infected = 0;
        return this;
    }
    def __run(){
        def _if_0(){
            this.infected = 1;
            this.Q_in.dupFront();
            subExp_5 := this.Q_in.takeFront();
            subExp_arg_3 := subExp_5[0];
            subExp_arg_6 := 1;
            subExp_arg_7 := 3;
            subExp_arg_4 := uniformInt(subExp_arg_6,subExp_arg_7);
            this.Q_out.pushBack(subExp_arg_3,subExp_arg_4);
            subExp_10 := this.Q_in.takeFront();
            subExp_arg_8 := subExp_10[0];
            subExp_arg_11 := 1;
            subExp_arg_12 := 3;
            subExp_arg_9 := uniformInt(subExp_arg_11,subExp_arg_12);
            this.Q_out.pushBack(subExp_arg_8,subExp_arg_9);
            subExp_13 := (1,this,0);
            return subExp_13;
        }
        def _else_0(){
            this.Q_in.popFront();
            subExp_14 := (1,this,0);
            return subExp_14;
        }
        def eval_if_0(){
            subExp_18 := this.infected;
            subExp_15 := (subExp_18 == 0);
            if subExp_15 {
                subExp_16 := _if_0();
                return subExp_16;
            } else {
                subExp_17 := _else_0();
                return subExp_17;
            }
        }
        _ret_0 := eval_if_0();
        this = _ret_0[1];
        subExp_19 := ();
        return subExp_19;
    }
}
illegal thing in data declaration:
Q_in: Queue , Q_out: Queue

var __node_ty = function(){
    var this_v0 = {};
    var subExp_CallExp_1_v0 = Queue([]).obj;
    var this_v1 = _.assign({},this_v0,{Q_in: subExp_CallExp_1_v0});
    var subExp_CallExp_2_v0 = Queue([]).obj;
    var this_v2 = _.assign({},this_v1,{Q_out: subExp_CallExp_2_v0});
    var this_v3 = _.assign({},this_v2,{infected: 0});
    return {res:this_v3,obj:this_v3};
}
var __node_ty___run = function(this_v0){
    var _if_0 = function(){
        var this_v1 = _.assign({},this_v0,{infected: 1});
        var this_v2 = _.assign({},this_v1,{Q_in: Queue_dupFront(this_v1.Q_in,[]).obj});
        var tmp = Queue_takeFront(this_v2.Q_in,[]);
        var subExp_5 = tmp.res;
        var this_v3 = _.assign({},this_v2,{Q_in: tmp.obj});
        var subExp_arg_3=subExp_5[+0];
        var subExp_arg_6=1;
        var subExp_arg_7=3;
        var subExp_arg_4=sample(RandomInteger({n:((subExp_arg_7)-(subExp_arg_6)+1)}))+(subExp_arg_6);
        var this_v4 = _.assign({},this_v3,{Q_out: Queue_pushBack(this_v3.Q_out,[subExp_arg_3,subExp_arg_4]).obj});
        var tmp = Queue_takeFront(this_v4.Q_in,[]);
        var subExp_10 = tmp.res;
        var this_v5 = _.assign({},this_v4,{Q_in: tmp.obj});
        var subExp_arg_8=subExp_10[+0];
        var subExp_arg_11=1;
        var subExp_arg_12=3;
        var subExp_arg_9=sample(RandomInteger({n:((subExp_arg_12)-(subExp_arg_11)+1)}))+(subExp_arg_11);
        var this_v6 = _.assign({},this_v5,{Q_out: Queue_pushBack(this_v5.Q_out,[subExp_arg_8,subExp_arg_9]).obj});
        var subExp_13=[1,this_v6,0];
        return subExp_13;
    }
    var _else_0 = function(){
        var this_v1 = _.assign({},this_v0,{Q_in: Queue_popFront(this_v0.Q_in,[]).obj});
        var subExp_14=[1,this_v1,0];
        return subExp_14;
    }
    var eval_if_0 = function(){
        var subExp_18=this_v0.infected;
        var subExp_15=(subExp_18==0);
        if(subExp_15){
            var subExp_16=_if_0([]);
            return subExp_16;
        }
        else{
            var subExp_17=_else_0([]);
            return subExp_17;
        }
    }
    var _ret_0=eval_if_0([]);
    var this_v0=_ret_0[+1];
    var subExp_19=[];
    return {res:subExp_19,obj:this_v0};
}

var __node_ty = function(){
    var this_v0 = {};
    var subExp_CallExp_1_v0 = Queue([]).obj;
    var this_v1 = _.assign({},this_v0,{Q_in: subExp_CallExp_1_v0});
    var subExp_CallExp_2_v0 = Queue([]).obj;
    var this_v2 = _.assign({},this_v1,{Q_out: subExp_CallExp_2_v0});
    var this_v3 = _.assign({},this_v2,{infected: 0});
    return {res:this_v3,obj:this_v3};
}
var __node_ty___run = function(this_v0){
    var _if_0 = function(){
        var this_v1 = _.assign({},this_v0,{infected: 1});
        var this_v2 = _.assign({},this_v1,{Q_in: Queue_dupFront(this_v1.Q_in,[]).obj});
        var tmp = Queue_takeFront(this_v2.Q_in,[]);
        var subExp_5 = tmp.res;
        var this_v3 = _.assign({},this_v2,{Q_in: tmp.obj});
        var subExp_arg_3=subExp_5[+0];
        var subExp_arg_6=1;
        var subExp_arg_7=3;
        var subExp_arg_4=sample(RandomInteger({n:((subExp_arg_7)-(subExp_arg_6)+1)}))+(subExp_arg_6);
        var this_v4 = _.assign({},this_v3,{Q_out: Queue_pushBack(this_v3.Q_out,[subExp_arg_3,subExp_arg_4]).obj});
        var tmp = Queue_takeFront(this_v4.Q_in,[]);
        var subExp_10 = tmp.res;
        var this_v5 = _.assign({},this_v4,{Q_in: tmp.obj});
        var subExp_arg_8=subExp_10[+0];
        var subExp_arg_11=1;
        var subExp_arg_12=3;
        var subExp_arg_9=sample(RandomInteger({n:((subExp_arg_12)-(subExp_arg_11)+1)}))+(subExp_arg_11);
        var this_v6 = _.assign({},this_v5,{Q_out: Queue_pushBack(this_v5.Q_out,[subExp_arg_8,subExp_arg_9]).obj});
        var subExp_13=[1,this_v6,0];
        return subExp_13;
    }
    var _else_0 = function(){
        var this_v1 = _.assign({},this_v0,{Q_in: Queue_popFront(this_v0.Q_in,[]).obj});
        var subExp_14=[1,this_v1,0];
        return subExp_14;
    }
    var eval_if_0 = function(){
        var subExp_18=this_v0.infected;
        var subExp_15=(subExp_18==0);
        if(subExp_15){
            var subExp_16=_if_0([]);
            return subExp_16;
        }
        else{
            var subExp_17=_else_0([]);
            return subExp_17;
        }
    }
    var _ret_0=eval_if_0([]);
    var this_v0=_ret_0[+1];
    var subExp_19=[];
    return {res:subExp_19,obj:this_v0};
}
var Packet = function(){
    var this_v0 = {};
    return {res:this_v0,obj:this_v0};
}
var Queue = function(){
    var this_v0 = {};
    var this_v1 = _.assign({},this_v0,{data: []});
    return {res:this_v1,obj:this_v1};
}
var Queue_pushFront = function(this_v0, x_0){
    var subExp_1=[x_0];
    var subExp_2=this_v0.data;
    var this_v1 = _.assign({},this_v0,{data: [].concat(subExp_1,subExp_2)});
    var subExp_3=[];
    return {res:subExp_3,obj:this_v1};
}
var Queue_pushBack = function(this_v0, x_0){
    var subExp_4=this_v0.data;
    var subExp_5=[x_0];
    var this_v1 = _.assign({},this_v0,{data: [].concat(subExp_4,subExp_5)});
    var subExp_6=[];
    return {res:subExp_6,obj:this_v1};
}
var Queue_takeFront = function(this_v0){
    var tmp = Queue_front(this_v0,[]);
    var r_0 = tmp.res;
    var this_v1 = tmp.obj;
    var this_v2 = Queue_popFront(this_v1,[]).obj;
    return {res:r_0,obj:this_v2};
}
var Queue_takeBack = function(this_v0){
    var subExp_7=this_v0.data;
    var tmp = Queue_size(this_v0,[]);
    var subExp_9 = tmp.res;
    var this_v1 = tmp.obj;
    var subExpArr_8=subExp_9-1;
    var r_0=subExp_7[+subExpArr_8];
    var subExp_10=this_v1.data;
    var tmp = Queue_size(this_v1,[]);
    var subExp_12 = tmp.res;
    var this_v2 = tmp.obj;
    var subExp_11=subExp_12-1;
    var this_v3 = _.assign({},this_v2,{data: ([].concat(subExp_10)).slice(0,subExp_11)});
    return {res:r_0,obj:this_v3};
}
var Queue_size = function(this_v0){
    var subExp_13=this_v0.data.length;
    return {res:subExp_13,obj:this_v0};
}
var Queue_front = function(this_v0){
    var subExp_15=this_v0.data;
    var subExp_14=subExp_15[+0];
    return {res:subExp_14,obj:this_v0};
}
var Queue_dupFront = function(this_v0){
    var tmp = Queue_front(this_v0,[]);
    var subExp_16 = tmp.res;
    var this_v1 = tmp.obj;
    var this_v2 = Queue_pushFront(this_v1,subExp_16).obj;
    var subExp_17=[];
    return {res:subExp_17,obj:this_v2};
}
var Queue_popFront = function(this_v0){
    var subExp_18=this_v0.data;
    var tmp = Queue_size(this_v0,[]);
    var subExp_19 = tmp.res;
    var this_v1 = tmp.obj;
    var this_v2 = _.assign({},this_v1,{data: ([].concat(subExp_18)).slice(1,subExp_19)});
    var subExp_20=[];
    return {res:subExp_20,obj:this_v2};
}
var __first_ty = function(){
    var this_v0 = {};
    var subExp_CallExp_1_v0 = Queue([]).obj;
    var this_v1 = _.assign({},this_v0,{Q_in: subExp_CallExp_1_v0});
    var subExp_CallExp_2_v0 = Queue([]).obj;
    var this_v2 = _.assign({},this_v1,{Q_out: subExp_CallExp_2_v0});
    var this_v3 = _.assign({},this_v2,{infected: 0});
    return {res:this_v3,obj:this_v3};
}
var __first_ty___run = function(this_v0){
    var _if_0 = function(){
        var this_v1 = _.assign({},this_v0,{infected: 1});
        var subExp_arg_3_v0 = Packet([]).obj;
        var subExp_arg_4=0;
        var this_v2 = _.assign({},this_v1,{Q_in: Queue_pushFront(this_v1.Q_in,[subExp_arg_3_v0,subExp_arg_4]).obj});
        var tmp = Queue_takeFront(this_v2.Q_in,[]);
        var subExp_7 = tmp.res;
        var this_v3 = _.assign({},this_v2,{Q_in: tmp.obj});
        var subExp_arg_5=subExp_7[+0];
        var subExp_arg_8=1;
        var subExp_arg_9=3;
        var subExp_arg_6=sample(RandomInteger({n:((subExp_arg_9)-(subExp_arg_8)+1)}))+(subExp_arg_8);
        var this_v4 = _.assign({},this_v3,{Q_out: Queue_pushBack(this_v3.Q_out,[subExp_arg_5,subExp_arg_6]).obj});
        var subExp_10=[1,this_v4,0];
        return subExp_10;
    }
    var _else_0 = function(){
        var this_v1 = _.assign({},this_v0,{Q_in: Queue_popFront(this_v0.Q_in,[]).obj});
        var subExp_11=[1,this_v1,0];
        return subExp_11;
    }
    var eval_if_0 = function(){
        var subExp_15=this_v0.infected;
        var subExp_12=(subExp_15==0);
        if(subExp_12){
            var subExp_13=_if_0([]);
            return subExp_13;
        }
        else{
            var subExp_14=_else_0([]);
            return subExp_14;
        }
    }
    var _ret_0=eval_if_0([]);
    var this_v0=_ret_0[+1];
    var subExp_16=[];
    return {res:subExp_16,obj:this_v0};
}
var __D = function(){
    var this_v0 = {};
    var subExp_CallExp_1_v0 = __first_ty([]).obj;
    var this_v1 = _.assign({},this_v0,{__S0: subExp_CallExp_1_v0});
    var subExp_CallExp_2_v0 = __node_ty([]).obj;
    var this_v2 = _.assign({},this_v1,{__S1: subExp_CallExp_2_v0});
    var subExp_CallExp_3_v0 = __node_ty([]).obj;
    var this_v3 = _.assign({},this_v2,{__S2: subExp_CallExp_3_v0});
    var subExp_CallExp_4_v0 = __node_ty([]).obj;
    var this_v4 = _.assign({},this_v3,{__S3: subExp_CallExp_4_v0});
    var this_v5 = _.assign({},this_v4,{phase: 0});
    var this_v6 = _.assign({},this_v5,{cur_node: 0});
    return {res:this_v6,obj:this_v6};
}
var __D_scheduler = function(this_v0){
    var p_0=0;
    var loop_body_0 = function(_args_0){
        var _tuple_0=_args_0;
        var p_1=_tuple_0[+0];
        var this_v0=_tuple_0[+1];
        var subExp_5=p_1<2;
        if(subExp_5){
            var _if_0 = function(){
                var i_0=0;
                var loop_body_1 = function(_args_0){
                    var _tuple_1=_args_0;
                    var i_1=_tuple_1[+0];
                    var this_v0=_tuple_1[+1];
                    var subExp_6=i_1<4;
                    if(subExp_6){
                        var _if_1 = function(){
                            var subExpArr_9=this_v0.cur_node;
                            var subExpArr_8=[0,subExpArr_9];
                            var subExp_7=[2,0,subExpArr_8];
                            return subExp_7;
                        }
                        var _else_0 = function(){
                            var subExp_10=[1,this_v0,0];
                            return subExp_10;
                        }
                        var eval_if_0 = function(){
                            var tmp = Queue_size((function(){if(this_v0.cur_node==0){ return this_v0.__S0.Q_in} else{ return (function(){if(this_v0.cur_node==1){ return this_v0.__S1.Q_in} else{ return (function(){if(this_v0.cur_node==2){ return this_v0.__S2.Q_in} else{ return this_v0.__S3.Q_in}})()}})()}})(),[]);
                            var subExp_14/*might have an error:*/ = tmp.res;
                            
                            var subExp_11=subExp_14>0;
                            if(subExp_11){
                                var subExp_12=_if_1([]);
                                return subExp_12;
                            }
                            else{
                                var subExp_13=_else_0([]);
                                return subExp_13;
                            }
                        }
                        var _ret_0=eval_if_0([]);
                        var subExp_19=_ret_0[+0];
                        var subExp_15=subExp_19==2;
                        if(subExp_15){
                            var subExpArr_18=_ret_0[+2];
                            var subExpArr_17=[2,0,subExpArr_18];
                            var subExp_16=[2,0,subExpArr_17];
                            return subExp_16;
                        }
                        var this_v0=_ret_0[+1];
                        var subExp_21=this_v0.cur_node;
                        var subExp_20=(subExp_21+1);
                        var this_v1 = _.assign({},this_v0,{cur_node: subExp_20%4});
                        var i_2=i_1+1;
                        var _new_args_0=[i_2,this_v1];
                        var subExp_22=[0,_new_args_0,0];
                        return subExp_22;
                    }
                    else{
                        var subExp_23=[1,_args_0,0];
                        return subExp_23;
                    }
                }
                var _loop_0 = function(arg_0){
                    var loop_body_2=arg_0[+0];
                    var args_0=arg_0[+1];
                    var k_0=loop_body_2(args_0);
                    var subExp_25=k_0[+0];
                    var subExp_24=subExp_25!=0;
                    if(subExp_24){
                        return k_0;
                    }
                    var subExp_arg_27=k_0[+1];
                    var subExp_26=_loop_0([loop_body_2,subExp_arg_27]);
                    return subExp_26;
                }
                var _args_1=[i_0,this_v0];
                var _ret_0=_loop_0([loop_body_1,_args_1]);
                var subExp_30=_ret_0[+0];
                var subExp_28=subExp_30==2;
                if(subExp_28){
                    var subExp_29=_ret_0[+2];
                    return subExp_29;
                }
                var _tuple_1=_ret_0[+1];
                var i_1=_tuple_1[+0];
                var this_v0=_tuple_1[+1];
                var this_v1 = _.assign({},this_v0,{phase: 1});
                var this_v2 = _.assign({},this_v1,{cur_node: 0});
                var subExp_31=[1,this_v2,0];
                return subExp_31;
            }
            var _else_0 = function(){
                var subExp_32=[1,this_v0,0];
                return subExp_32;
            }
            var eval_if_0 = function(){
                var subExp_36=this_v0.phase;
                var subExp_33=subExp_36==0;
                if(subExp_33){
                    var subExp_34=_if_0([]);
                    return subExp_34;
                }
                else{
                    var subExp_35=_else_0([]);
                    return subExp_35;
                }
            }
            var _ret_0=eval_if_0([]);
            var subExp_40=_ret_0[+0];
            var subExp_37=subExp_40==2;
            if(subExp_37){
                var subExpArr_39=_ret_0[+2];
                var subExp_38=[2,0,subExpArr_39];
                return subExp_38;
            }
            var this_v0=_ret_0[+1];
            var _if_1 = function(){
                var i_0=0;
                var loop_body_1 = function(_args_0){
                    var _tuple_1=_args_0;
                    var i_1=_tuple_1[+0];
                    var this_v0=_tuple_1[+1];
                    var subExp_41=i_1<4;
                    if(subExp_41){
                        var _if_2 = function(){
                            var subExpArr_44=this_v0.cur_node;
                            var subExpArr_43=[1,subExpArr_44];
                            var subExp_42=[2,0,subExpArr_43];
                            return subExp_42;
                        }
                        var _else_1 = function(){
                            var subExp_45=[1,this_v0,0];
                            return subExp_45;
                        }
                        var eval_if_1 = function(){
                            var tmp = Queue_size((function(){if(this_v0.cur_node==0){ return this_v0.__S0.Q_out} else{ return (function(){if(this_v0.cur_node==1){ return this_v0.__S1.Q_out} else{ return (function(){if(this_v0.cur_node==2){ return this_v0.__S2.Q_out} else{ return this_v0.__S3.Q_out}})()}})()}})(),[]);
                            var subExp_49/*might have an error:*/ = tmp.res;
                            
                            var subExp_46=subExp_49>0;
                            if(subExp_46){
                                var subExp_47=_if_2([]);
                                return subExp_47;
                            }
                            else{
                                var subExp_48=_else_1([]);
                                return subExp_48;
                            }
                        }
                        var _ret_1=eval_if_1([]);
                        var subExp_54=_ret_1[+0];
                        var subExp_50=subExp_54==2;
                        if(subExp_50){
                            var subExpArr_53=_ret_1[+2];
                            var subExpArr_52=[2,0,subExpArr_53];
                            var subExp_51=[2,0,subExpArr_52];
                            return subExp_51;
                        }
                        var this_v0=_ret_1[+1];
                        var subExp_56=this_v0.cur_node;
                        var subExp_55=(subExp_56+1);
                        var this_v1 = _.assign({},this_v0,{cur_node: subExp_55%4});
                        var i_2=i_1+1;
                        var _new_args_0=[i_2,this_v1];
                        var subExp_57=[0,_new_args_0,0];
                        return subExp_57;
                    }
                    else{
                        var subExp_58=[1,_args_0,0];
                        return subExp_58;
                    }
                }
                var _loop_0 = function(arg_0){
                    var loop_body_2=arg_0[+0];
                    var args_0=arg_0[+1];
                    var k_0=loop_body_2(args_0);
                    var subExp_60=k_0[+0];
                    var subExp_59=subExp_60!=0;
                    if(subExp_59){
                        return k_0;
                    }
                    var subExp_arg_62=k_0[+1];
                    var subExp_61=_loop_0([loop_body_2,subExp_arg_62]);
                    return subExp_61;
                }
                var _args_1=[i_0,this_v0];
                var _ret_1=_loop_0([loop_body_1,_args_1]);
                var subExp_65=_ret_1[+0];
                var subExp_63=subExp_65==2;
                if(subExp_63){
                    var subExp_64=_ret_1[+2];
                    return subExp_64;
                }
                var _tuple_1=_ret_1[+1];
                var i_1=_tuple_1[+0];
                var this_v0=_tuple_1[+1];
                var this_v1 = _.assign({},this_v0,{phase: 0});
                var this_v2 = _.assign({},this_v1,{cur_node: 0});
                var subExp_66=[1,this_v2,0];
                return subExp_66;
            }
            var _else_1 = function(){
                var subExp_67=[1,this_v0,0];
                return subExp_67;
            }
            var eval_if_1 = function(){
                var subExp_71=this_v0.phase;
                var subExp_68=subExp_71==1;
                if(subExp_68){
                    var subExp_69=_if_1([]);
                    return subExp_69;
                }
                else{
                    var subExp_70=_else_1([]);
                    return subExp_70;
                }
            }
            var _ret_1=eval_if_1([]);
            var subExp_75=_ret_1[+0];
            var subExp_72=subExp_75==2;
            if(subExp_72){
                var subExpArr_74=_ret_1[+2];
                var subExp_73=[2,0,subExpArr_74];
                return subExp_73;
            }
            var this_v0=_ret_1[+1];
            var p_2=p_1+1;
            var _new_args_0=[p_2,this_v0];
            var subExp_76=[0,_new_args_0,0];
            return subExp_76;
        }
        else{
            var subExp_77=[1,_args_0,0];
            return subExp_77;
        }
    }
    var _loop_0 = function(arg_0){
        var loop_body_1=arg_0[+0];
        var args_0=arg_0[+1];
        var k_0=loop_body_1(args_0);
        var subExp_79=k_0[+0];
        var subExp_78=subExp_79!=0;
        if(subExp_78){
            return k_0;
        }
        var subExp_arg_81=k_0[+1];
        var subExp_80=_loop_0([loop_body_1,subExp_arg_81]);
        return subExp_80;
    }
    var _args_0=[p_0,this_v0];
    var _ret_0=_loop_0([loop_body_0,_args_0]);
    var subExp_84=_ret_0[+0];
    var subExp_82=subExp_84==2;
    if(subExp_82){
        var subExp_83=_ret_0[+2];
        return {res:subExp_83,obj:this_v0};
    }
    var _tuple_0=_ret_0[+1];
    var p_1=_tuple_0[+0];
    var this_v0=_tuple_0[+1];
    "error"
}
var __D___step = function(this_v0){
    var _if_0 = function(){
        var tmp = __D_scheduler(this_v0,[]);
        var _tuple_0 = tmp.res;
        var this_v1 = tmp.obj;
        var action_0=_tuple_0[+0];
        var node_0=_tuple_0[+1];
        var _if_1 = function(){
            var _if_2 = function(){
                var tmp = Queue_takeFront(this_v1.__S0.Q_out,[]);
                var _tuple_1 = tmp.res;
                var new___S0=_.assign({},this_v1.__S0,{Q_out:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S0: new___S0});
                var pkt_0=_tuple_1[+0];
                var port_0=_tuple_1[+1];
                var _if_3 = function(){
                    var subExp_arg_85=3;
                    var new___S1=_.assign({},this_v2.__S1,{Q_in:Queue_pushBack(this_v2.__S1.Q_in,[pkt_0,subExp_arg_85]).obj});
                    var this_v3 = _.assign({},this_v2,{__S1: new___S1});
                    var subExp_86=[1,this_v3,0];
                    return subExp_86;
                }
                var _else_0 = function(){
                    var subExp_87=[1,this_v2,0];
                    return subExp_87;
                }
                var eval_if_0 = function(){
                    var subExp_88=port_0==1;
                    if(subExp_88){
                        var subExp_89=_if_3([]);
                        return subExp_89;
                    }
                    else{
                        var subExp_90=_else_0([]);
                        return subExp_90;
                    }
                }
                var _ret_0=eval_if_0([]);
                var this_v2=_ret_0[+1];
                var _if_4 = function(){
                    var subExp_arg_91=2;
                    var new___S2=_.assign({},this_v2.__S2,{Q_in:Queue_pushBack(this_v2.__S2.Q_in,[pkt_0,subExp_arg_91]).obj});
                    var this_v3 = _.assign({},this_v2,{__S2: new___S2});
                    var subExp_92=[1,this_v3,0];
                    return subExp_92;
                }
                var _else_1 = function(){
                    var subExp_93=[1,this_v2,0];
                    return subExp_93;
                }
                var eval_if_1 = function(){
                    var subExp_94=port_0==2;
                    if(subExp_94){
                        var subExp_95=_if_4([]);
                        return subExp_95;
                    }
                    else{
                        var subExp_96=_else_1([]);
                        return subExp_96;
                    }
                }
                var _ret_1=eval_if_1([]);
                var this_v2=_ret_1[+1];
                var _if_5 = function(){
                    var subExp_arg_97=1;
                    var new___S3=_.assign({},this_v2.__S3,{Q_in:Queue_pushBack(this_v2.__S3.Q_in,[pkt_0,subExp_arg_97]).obj});
                    var this_v3 = _.assign({},this_v2,{__S3: new___S3});
                    var subExp_98=[1,this_v3,0];
                    return subExp_98;
                }
                var _else_2 = function(){
                    var subExp_99=[1,this_v2,0];
                    return subExp_99;
                }
                var eval_if_2 = function(){
                    var subExp_100=port_0==3;
                    if(subExp_100){
                        var subExp_101=_if_5([]);
                        return subExp_101;
                    }
                    else{
                        var subExp_102=_else_2([]);
                        return subExp_102;
                    }
                }
                var _ret_2=eval_if_2([]);
                var this_v2=_ret_2[+1];
                var subExp_103=[1,this_v2,0];
                return subExp_103;
            }
            var _else_0 = function(){
                var subExp_104=[1,this_v1,0];
                return subExp_104;
            }
            var eval_if_0 = function(){
                var subExp_108=node_0==0;
                var tmp = Queue_size(this_v1.__S0.Q_out,[]);
                var subExp_109 = tmp.res;
                var new___S0=_.assign({},this_v1.__S0,{Q_out:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S0: new___S0});
                var subExp_105=subExp_108&&subExp_109;
                if(subExp_105){
                    var subExp_106=_if_2([]);
                    return subExp_106;
                }
                else{
                    var subExp_107=_else_0([]);
                    return subExp_107;
                }
            }
            var _ret_0=eval_if_0([]);
            var this_v1=_ret_0[+1];
            var _if_3 = function(){
                var tmp = Queue_takeFront(this_v1.__S1.Q_out,[]);
                var _tuple_1 = tmp.res;
                var new___S1=_.assign({},this_v1.__S1,{Q_out:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S1: new___S1});
                var pkt_0=_tuple_1[+0];
                var port_0=_tuple_1[+1];
                var _if_4 = function(){
                    var subExp_arg_110=3;
                    var new___S2=_.assign({},this_v2.__S2,{Q_in:Queue_pushBack(this_v2.__S2.Q_in,[pkt_0,subExp_arg_110]).obj});
                    var this_v3 = _.assign({},this_v2,{__S2: new___S2});
                    var subExp_111=[1,this_v3,0];
                    return subExp_111;
                }
                var _else_1 = function(){
                    var subExp_112=[1,this_v2,0];
                    return subExp_112;
                }
                var eval_if_1 = function(){
                    var subExp_113=port_0==1;
                    if(subExp_113){
                        var subExp_114=_if_4([]);
                        return subExp_114;
                    }
                    else{
                        var subExp_115=_else_1([]);
                        return subExp_115;
                    }
                }
                var _ret_1=eval_if_1([]);
                var this_v2=_ret_1[+1];
                var _if_5 = function(){
                    var subExp_arg_116=2;
                    var new___S3=_.assign({},this_v2.__S3,{Q_in:Queue_pushBack(this_v2.__S3.Q_in,[pkt_0,subExp_arg_116]).obj});
                    var this_v3 = _.assign({},this_v2,{__S3: new___S3});
                    var subExp_117=[1,this_v3,0];
                    return subExp_117;
                }
                var _else_2 = function(){
                    var subExp_118=[1,this_v2,0];
                    return subExp_118;
                }
                var eval_if_2 = function(){
                    var subExp_119=port_0==2;
                    if(subExp_119){
                        var subExp_120=_if_5([]);
                        return subExp_120;
                    }
                    else{
                        var subExp_121=_else_2([]);
                        return subExp_121;
                    }
                }
                var _ret_2=eval_if_2([]);
                var this_v2=_ret_2[+1];
                var _if_6 = function(){
                    var subExp_arg_122=1;
                    var new___S0=_.assign({},this_v2.__S0,{Q_in:Queue_pushBack(this_v2.__S0.Q_in,[pkt_0,subExp_arg_122]).obj});
                    var this_v3 = _.assign({},this_v2,{__S0: new___S0});
                    var subExp_123=[1,this_v3,0];
                    return subExp_123;
                }
                var _else_3 = function(){
                    var subExp_124=[1,this_v2,0];
                    return subExp_124;
                }
                var eval_if_3 = function(){
                    var subExp_125=port_0==3;
                    if(subExp_125){
                        var subExp_126=_if_6([]);
                        return subExp_126;
                    }
                    else{
                        var subExp_127=_else_3([]);
                        return subExp_127;
                    }
                }
                var _ret_3=eval_if_3([]);
                var this_v2=_ret_3[+1];
                var subExp_128=[1,this_v2,0];
                return subExp_128;
            }
            var _else_1 = function(){
                var subExp_129=[1,this_v1,0];
                return subExp_129;
            }
            var eval_if_1 = function(){
                var subExp_133=node_0==1;
                var tmp = Queue_size(this_v1.__S1.Q_out,[]);
                var subExp_134 = tmp.res;
                var new___S1=_.assign({},this_v1.__S1,{Q_out:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S1: new___S1});
                var subExp_130=subExp_133&&subExp_134;
                if(subExp_130){
                    var subExp_131=_if_3([]);
                    return subExp_131;
                }
                else{
                    var subExp_132=_else_1([]);
                    return subExp_132;
                }
            }
            var _ret_1=eval_if_1([]);
            var this_v1=_ret_1[+1];
            var _if_4 = function(){
                var tmp = Queue_takeFront(this_v1.__S2.Q_out,[]);
                var _tuple_1 = tmp.res;
                var new___S2=_.assign({},this_v1.__S2,{Q_out:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S2: new___S2});
                var pkt_0=_tuple_1[+0];
                var port_0=_tuple_1[+1];
                var _if_5 = function(){
                    var subExp_arg_135=3;
                    var new___S3=_.assign({},this_v2.__S3,{Q_in:Queue_pushBack(this_v2.__S3.Q_in,[pkt_0,subExp_arg_135]).obj});
                    var this_v3 = _.assign({},this_v2,{__S3: new___S3});
                    var subExp_136=[1,this_v3,0];
                    return subExp_136;
                }
                var _else_2 = function(){
                    var subExp_137=[1,this_v2,0];
                    return subExp_137;
                }
                var eval_if_2 = function(){
                    var subExp_138=port_0==1;
                    if(subExp_138){
                        var subExp_139=_if_5([]);
                        return subExp_139;
                    }
                    else{
                        var subExp_140=_else_2([]);
                        return subExp_140;
                    }
                }
                var _ret_2=eval_if_2([]);
                var this_v2=_ret_2[+1];
                var _if_6 = function(){
                    var subExp_arg_141=2;
                    var new___S0=_.assign({},this_v2.__S0,{Q_in:Queue_pushBack(this_v2.__S0.Q_in,[pkt_0,subExp_arg_141]).obj});
                    var this_v3 = _.assign({},this_v2,{__S0: new___S0});
                    var subExp_142=[1,this_v3,0];
                    return subExp_142;
                }
                var _else_3 = function(){
                    var subExp_143=[1,this_v2,0];
                    return subExp_143;
                }
                var eval_if_3 = function(){
                    var subExp_144=port_0==2;
                    if(subExp_144){
                        var subExp_145=_if_6([]);
                        return subExp_145;
                    }
                    else{
                        var subExp_146=_else_3([]);
                        return subExp_146;
                    }
                }
                var _ret_3=eval_if_3([]);
                var this_v2=_ret_3[+1];
                var _if_7 = function(){
                    var subExp_arg_147=1;
                    var new___S1=_.assign({},this_v2.__S1,{Q_in:Queue_pushBack(this_v2.__S1.Q_in,[pkt_0,subExp_arg_147]).obj});
                    var this_v3 = _.assign({},this_v2,{__S1: new___S1});
                    var subExp_148=[1,this_v3,0];
                    return subExp_148;
                }
                var _else_4 = function(){
                    var subExp_149=[1,this_v2,0];
                    return subExp_149;
                }
                var eval_if_4 = function(){
                    var subExp_150=port_0==3;
                    if(subExp_150){
                        var subExp_151=_if_7([]);
                        return subExp_151;
                    }
                    else{
                        var subExp_152=_else_4([]);
                        return subExp_152;
                    }
                }
                var _ret_4=eval_if_4([]);
                var this_v2=_ret_4[+1];
                var subExp_153=[1,this_v2,0];
                return subExp_153;
            }
            var _else_2 = function(){
                var subExp_154=[1,this_v1,0];
                return subExp_154;
            }
            var eval_if_2 = function(){
                var subExp_158=node_0==2;
                var tmp = Queue_size(this_v1.__S2.Q_out,[]);
                var subExp_159 = tmp.res;
                var new___S2=_.assign({},this_v1.__S2,{Q_out:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S2: new___S2});
                var subExp_155=subExp_158&&subExp_159;
                if(subExp_155){
                    var subExp_156=_if_4([]);
                    return subExp_156;
                }
                else{
                    var subExp_157=_else_2([]);
                    return subExp_157;
                }
            }
            var _ret_2=eval_if_2([]);
            var this_v1=_ret_2[+1];
            var _if_5 = function(){
                var tmp = Queue_takeFront(this_v1.__S3.Q_out,[]);
                var _tuple_1 = tmp.res;
                var new___S3=_.assign({},this_v1.__S3,{Q_out:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S3: new___S3});
                var pkt_0=_tuple_1[+0];
                var port_0=_tuple_1[+1];
                var _if_6 = function(){
                    var subExp_arg_160=3;
                    var new___S0=_.assign({},this_v2.__S0,{Q_in:Queue_pushBack(this_v2.__S0.Q_in,[pkt_0,subExp_arg_160]).obj});
                    var this_v3 = _.assign({},this_v2,{__S0: new___S0});
                    var subExp_161=[1,this_v3,0];
                    return subExp_161;
                }
                var _else_3 = function(){
                    var subExp_162=[1,this_v2,0];
                    return subExp_162;
                }
                var eval_if_3 = function(){
                    var subExp_163=port_0==1;
                    if(subExp_163){
                        var subExp_164=_if_6([]);
                        return subExp_164;
                    }
                    else{
                        var subExp_165=_else_3([]);
                        return subExp_165;
                    }
                }
                var _ret_3=eval_if_3([]);
                var this_v2=_ret_3[+1];
                var _if_7 = function(){
                    var subExp_arg_166=2;
                    var new___S1=_.assign({},this_v2.__S1,{Q_in:Queue_pushBack(this_v2.__S1.Q_in,[pkt_0,subExp_arg_166]).obj});
                    var this_v3 = _.assign({},this_v2,{__S1: new___S1});
                    var subExp_167=[1,this_v3,0];
                    return subExp_167;
                }
                var _else_4 = function(){
                    var subExp_168=[1,this_v2,0];
                    return subExp_168;
                }
                var eval_if_4 = function(){
                    var subExp_169=port_0==2;
                    if(subExp_169){
                        var subExp_170=_if_7([]);
                        return subExp_170;
                    }
                    else{
                        var subExp_171=_else_4([]);
                        return subExp_171;
                    }
                }
                var _ret_4=eval_if_4([]);
                var this_v2=_ret_4[+1];
                var _if_8 = function(){
                    var subExp_arg_172=1;
                    var new___S2=_.assign({},this_v2.__S2,{Q_in:Queue_pushBack(this_v2.__S2.Q_in,[pkt_0,subExp_arg_172]).obj});
                    var this_v3 = _.assign({},this_v2,{__S2: new___S2});
                    var subExp_173=[1,this_v3,0];
                    return subExp_173;
                }
                var _else_5 = function(){
                    var subExp_174=[1,this_v2,0];
                    return subExp_174;
                }
                var eval_if_5 = function(){
                    var subExp_175=port_0==3;
                    if(subExp_175){
                        var subExp_176=_if_8([]);
                        return subExp_176;
                    }
                    else{
                        var subExp_177=_else_5([]);
                        return subExp_177;
                    }
                }
                var _ret_5=eval_if_5([]);
                var this_v2=_ret_5[+1];
                var subExp_178=[1,this_v2,0];
                return subExp_178;
            }
            var _else_3 = function(){
                var subExp_179=[1,this_v1,0];
                return subExp_179;
            }
            var eval_if_3 = function(){
                var subExp_183=node_0==3;
                var tmp = Queue_size(this_v1.__S3.Q_out,[]);
                var subExp_184 = tmp.res;
                var new___S3=_.assign({},this_v1.__S3,{Q_out:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S3: new___S3});
                var subExp_180=subExp_183&&subExp_184;
                if(subExp_180){
                    var subExp_181=_if_5([]);
                    return subExp_181;
                }
                else{
                    var subExp_182=_else_3([]);
                    return subExp_182;
                }
            }
            var _ret_3=eval_if_3([]);
            var this_v1=_ret_3[+1];
            var subExp_185=[1,this_v1,0];
            return subExp_185;
        }
        var _else_0 = function(){
            var _if_2 = function(){
                var this_v2 = _.assign({},this_v1,{__S0: __first_ty___run(this_v1.__S0,[]).obj});
                var subExp_186=[1,this_v2,0];
                return subExp_186;
            }
            var _else_1 = function(){
                var subExp_187=[1,this_v1,0];
                return subExp_187;
            }
            var eval_if_0 = function(){
                var subExp_191=node_0==0;
                var tmp = Queue_size(this_v1.__S0.Q_in,[]);
                var subExp_192 = tmp.res;
                var new___S0=_.assign({},this_v1.__S0,{Q_in:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S0: new___S0});
                var subExp_188=subExp_191&&subExp_192;
                if(subExp_188){
                    var subExp_189=_if_2([]);
                    return subExp_189;
                }
                else{
                    var subExp_190=_else_1([]);
                    return subExp_190;
                }
            }
            var _ret_0=eval_if_0([]);
            var this_v1=_ret_0[+1];
            var _if_3 = function(){
                var this_v2 = _.assign({},this_v1,{__S1: __node_ty___run(this_v1.__S1,[]).obj});
                var subExp_193=[1,this_v2,0];
                return subExp_193;
            }
            var _else_2 = function(){
                var subExp_194=[1,this_v1,0];
                return subExp_194;
            }
            var eval_if_1 = function(){
                var subExp_198=node_0==1;
                var tmp = Queue_size(this_v1.__S1.Q_in,[]);
                var subExp_199 = tmp.res;
                var new___S1=_.assign({},this_v1.__S1,{Q_in:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S1: new___S1});
                var subExp_195=subExp_198&&subExp_199;
                if(subExp_195){
                    var subExp_196=_if_3([]);
                    return subExp_196;
                }
                else{
                    var subExp_197=_else_2([]);
                    return subExp_197;
                }
            }
            var _ret_1=eval_if_1([]);
            var this_v1=_ret_1[+1];
            var _if_4 = function(){
                var this_v2 = _.assign({},this_v1,{__S2: __node_ty___run(this_v1.__S2,[]).obj});
                var subExp_200=[1,this_v2,0];
                return subExp_200;
            }
            var _else_3 = function(){
                var subExp_201=[1,this_v1,0];
                return subExp_201;
            }
            var eval_if_2 = function(){
                var subExp_205=node_0==2;
                var tmp = Queue_size(this_v1.__S2.Q_in,[]);
                var subExp_206 = tmp.res;
                var new___S2=_.assign({},this_v1.__S2,{Q_in:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S2: new___S2});
                var subExp_202=subExp_205&&subExp_206;
                if(subExp_202){
                    var subExp_203=_if_4([]);
                    return subExp_203;
                }
                else{
                    var subExp_204=_else_3([]);
                    return subExp_204;
                }
            }
            var _ret_2=eval_if_2([]);
            var this_v1=_ret_2[+1];
            var _if_5 = function(){
                var this_v2 = _.assign({},this_v1,{__S3: __node_ty___run(this_v1.__S3,[]).obj});
                var subExp_207=[1,this_v2,0];
                return subExp_207;
            }
            var _else_4 = function(){
                var subExp_208=[1,this_v1,0];
                return subExp_208;
            }
            var eval_if_3 = function(){
                var subExp_212=node_0==3;
                var tmp = Queue_size(this_v1.__S3.Q_in,[]);
                var subExp_213 = tmp.res;
                var new___S3=_.assign({},this_v1.__S3,{Q_in:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S3: new___S3});
                var subExp_209=subExp_212&&subExp_213;
                if(subExp_209){
                    var subExp_210=_if_5([]);
                    return subExp_210;
                }
                else{
                    var subExp_211=_else_4([]);
                    return subExp_211;
                }
            }
            var _ret_3=eval_if_3([]);
            var this_v1=_ret_3[+1];
            var subExp_214=[1,this_v1,0];
            return subExp_214;
        }
        var eval_if_0 = function(){
            if(action_0){
                var subExp_215=_if_1([]);
                return subExp_215;
            }
            else{
                var subExp_216=_else_0([]);
                return subExp_216;
            }
        }
        var _ret_0=eval_if_0([]);
        var this_v1=_ret_0[+1];
        var subExp_217=[1,this_v1,0];
        return subExp_217;
    }
    var _else_0 = function(){
        var subExp_218=[1,this_v0,0];
        return subExp_218;
    }
    var eval_if_0 = function(){
        var tmp = Queue_size(this_v0.__S0.Q_in,[]);
        var subExp_234 = tmp.res;
        var new___S0=_.assign({},this_v0.__S0,{Q_in:tmp.obj});
        var this_v1 = _.assign({},this_v0,{__S0: new___S0});
        var tmp = Queue_size(this_v1.__S0.Q_out,[]);
        var subExp_235 = tmp.res;
        var new___S0=_.assign({},this_v1.__S0,{Q_out:tmp.obj});
        var this_v2 = _.assign({},this_v1,{__S0: new___S0});
        var subExp_232=subExp_234||subExp_235;
        var tmp = Queue_size(this_v2.__S1.Q_in,[]);
        var subExp_233 = tmp.res;
        var new___S1=_.assign({},this_v2.__S1,{Q_in:tmp.obj});
        var this_v3 = _.assign({},this_v2,{__S1: new___S1});
        var subExp_230=subExp_232||subExp_233;
        var tmp = Queue_size(this_v3.__S1.Q_out,[]);
        var subExp_231 = tmp.res;
        var new___S1=_.assign({},this_v3.__S1,{Q_out:tmp.obj});
        var this_v4 = _.assign({},this_v3,{__S1: new___S1});
        var subExp_228=subExp_230||subExp_231;
        var tmp = Queue_size(this_v4.__S2.Q_in,[]);
        var subExp_229 = tmp.res;
        var new___S2=_.assign({},this_v4.__S2,{Q_in:tmp.obj});
        var this_v5 = _.assign({},this_v4,{__S2: new___S2});
        var subExp_226=subExp_228||subExp_229;
        var tmp = Queue_size(this_v5.__S2.Q_out,[]);
        var subExp_227 = tmp.res;
        var new___S2=_.assign({},this_v5.__S2,{Q_out:tmp.obj});
        var this_v6 = _.assign({},this_v5,{__S2: new___S2});
        var subExp_224=subExp_226||subExp_227;
        var tmp = Queue_size(this_v6.__S3.Q_in,[]);
        var subExp_225 = tmp.res;
        var new___S3=_.assign({},this_v6.__S3,{Q_in:tmp.obj});
        var this_v7 = _.assign({},this_v6,{__S3: new___S3});
        var subExp_222=subExp_224||subExp_225;
        var tmp = Queue_size(this_v7.__S3.Q_out,[]);
        var subExp_223 = tmp.res;
        var new___S3=_.assign({},this_v7.__S3,{Q_out:tmp.obj});
        var this_v8 = _.assign({},this_v7,{__S3: new___S3});
        var subExp_219=subExp_222||subExp_223;
        if(subExp_219){
            var subExp_220=_if_0([]);
            return subExp_220;
        }
        else{
            var subExp_221=_else_0([]);
            return subExp_221;
        }
    }
    var _ret_0=eval_if_0([]);
    var this_v0=_ret_0[+1];
    var subExp_236=[];
    return {res:subExp_236,obj:this_v0};
}

translating meaning of __S0
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
__S0
 
Expression of type Identifier:
__first_ty
 
Expression of type VarDecl:
__S0: __first_ty
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
__S0: __first_ty
TODO 'VarDecl' not translated yet. You might want to insert:
override Expression visit(VarDecl e){
    code~=;
    visit(e.dtype);
    code~=;
    return e;
}


translating meaning of __S1
normalizing SyntacticSugar..undefined
.
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
__S1
 
Expression of type Identifier:
__node_ty
 
Expression of type VarDecl:
__S1: __node_ty
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
__S1: __node_ty
TODO 'VarDecl' not translated yet. You might want to insert:
override Expression visit(VarDecl e){
    code~=;
    visit(e.dtype);
    code~=;
    return e;
}


translating meaning of __S2
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
__S2
 
Expression of type Identifier:
__node_ty
 
Expression of type VarDecl:
__S2: __node_ty
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
__S2: __node_ty
TODO 'VarDecl' not translated yet. You might want to insert:
override Expression visit(VarDecl e){
    code~=;
    visit(e.dtype);
    code~=;
    return e;
}


translating meaning of __S3
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
__S3
 
Expression of type Identifier:
__node_ty
 
Expression of type VarDecl:
__S3: __node_ty
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
__S3: __node_ty
TODO 'VarDecl' not translated yet. You might want to insert:
override Expression visit(VarDecl e){
    code~=;
    visit(e.dtype);
    code~=;
    return e;
}


running webppl
E[r] = (3.4890000000000000*10^+00)

real	0m10.995s
user	0m10.920s
sys	0m0.812s
