normalizing...
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
main
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__D'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__D'()
 
Expression of type ABinaryExp:
__d := __D'()
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
__d.__H0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
__d.__H0.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
__d.__H0.Q_in.pushBack
 
Expression of type Identifier:
Packet'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Packet'()
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
((Packet'(),0))
 
Expression of type CallExp:
__d.__H0.Q_in.pushBack((Packet'(),0))
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
__d.__H0
 
Expression of type Identifier:
__run
 
Expression of type FieldExp:
__d.__H0.__run
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__H0.__run()
 
Expression of type LiteralExp:
40
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__step
 
Expression of type FieldExp:
__d.__step
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__step()
 
Expression of type RepeatExp:
repeat 40 {
    __d.__step();
}
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
__d.__H0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
__d.__H0.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
__d.__H0.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__H0.Q_in.size()
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
__d.__H0
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
__d.__H0.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
__d.__H0.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__H0.Q_out.size()
 
Expression of type ABinaryExp:
__d.__H0.Q_in.size() || __d.__H0.Q_out.size()
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__H1
 
Expression of type FieldExp:
__d.__H1
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
__d.__H1.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
__d.__H1.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__H1.Q_in.size()
 
Expression of type ABinaryExp:
__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__H1.Q_in.size()
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__H1
 
Expression of type FieldExp:
__d.__H1
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
__d.__H1.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
__d.__H1.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__H1.Q_out.size()
 
Expression of type ABinaryExp:
__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__H1.Q_in.size() || __d.__H1.Q_out.size()
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
__d.__S0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
__d.__S0.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
__d.__S0.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__S0.Q_in.size()
 
Expression of type ABinaryExp:
__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__H1.Q_in.size() || __d.__H1.Q_out.size() || __d.__S0.Q_in.size()
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
__d.__S0
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
__d.__S0.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
__d.__S0.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__S0.Q_out.size()
 
Expression of type ABinaryExp:
__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__H1.Q_in.size() || __d.__H1.Q_out.size() || __d.__S0.Q_in.size() || __d.__S0.Q_out.size()
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
__d.__S1
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
__d.__S1.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
__d.__S1.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__S1.Q_in.size()
 
Expression of type ABinaryExp:
__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__H1.Q_in.size() || __d.__H1.Q_out.size() || __d.__S0.Q_in.size() || __d.__S0.Q_out.size() || __d.__S1.Q_in.size()
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
__d.__S1
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
__d.__S1.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
__d.__S1.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__S1.Q_out.size()
 
Expression of type ABinaryExp:
__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__H1.Q_in.size() || __d.__H1.Q_out.size() || __d.__S0.Q_in.size() || __d.__S0.Q_out.size() || __d.__S1.Q_in.size() || __d.__S1.Q_out.size()
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
__d.__S2
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
__d.__S2.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
__d.__S2.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__S2.Q_in.size()
 
Expression of type ABinaryExp:
__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__H1.Q_in.size() || __d.__H1.Q_out.size() || __d.__S0.Q_in.size() || __d.__S0.Q_out.size() || __d.__S1.Q_in.size() || __d.__S1.Q_out.size() || __d.__S2.Q_in.size()
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
__d.__S2
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
__d.__S2.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
__d.__S2.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__S2.Q_out.size()
 
Expression of type ABinaryExp:
__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__H1.Q_in.size() || __d.__H1.Q_out.size() || __d.__S0.Q_in.size() || __d.__S0.Q_out.size() || __d.__S1.Q_in.size() || __d.__S1.Q_out.size() || __d.__S2.Q_in.size() || __d.__S2.Q_out.size()
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
__d.__S3
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
__d.__S3.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
__d.__S3.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__S3.Q_in.size()
 
Expression of type ABinaryExp:
__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__H1.Q_in.size() || __d.__H1.Q_out.size() || __d.__S0.Q_in.size() || __d.__S0.Q_out.size() || __d.__S1.Q_in.size() || __d.__S1.Q_out.size() || __d.__S2.Q_in.size() || __d.__S2.Q_out.size() || __d.__S3.Q_in.size()
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
__d.__S3
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
__d.__S3.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
__d.__S3.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__S3.Q_out.size()
 
Expression of type ABinaryExp:
(__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__H1.Q_in.size() || __d.__H1.Q_out.size() || __d.__S0.Q_in.size() || __d.__S0.Q_out.size() || __d.__S1.Q_in.size() || __d.__S1.Q_out.size() || __d.__S2.Q_in.size() || __d.__S2.Q_out.size() || __d.__S3.Q_in.size() || __d.__S3.Q_out.size())
 
Expression of type AUnaryExp:
!(__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__H1.Q_in.size() || __d.__H1.Q_out.size() || __d.__S0.Q_in.size() || __d.__S0.Q_out.size() || __d.__S1.Q_in.size() || __d.__S1.Q_out.size() || __d.__S2.Q_in.size() || __d.__S2.Q_out.size() || __d.__S3.Q_in.size() || __d.__S3.Q_out.size())
 
Expression of type AssertExp:
assert(!(__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__H1.Q_in.size() || __d.__H1.Q_out.size() || __d.__S0.Q_in.size() || __d.__S0.Q_out.size() || __d.__S1.Q_in.size() || __d.__S1.Q_out.size() || __d.__S2.Q_in.size() || __d.__S2.Q_out.size() || __d.__S3.Q_in.size() || __d.__S3.Q_out.size()))
 
Expression of type Identifier:
q1
 
Expression of type Identifier:
Expectation
 
Expression of type LiteralExp:
1
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
1 == 0
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
__d.__H0
 
Expression of type Identifier:
pkt_count
 
Expression of type FieldExp:
__d.__H0.pkt_count
 
Expression of type LiteralExp:
1
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
1 == 1
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__H1
 
Expression of type FieldExp:
__d.__H1
 
Expression of type Identifier:
pkt_count
 
Expression of type FieldExp:
__d.__H1.pkt_count
 
Expression of type LiteralExp:
0
 
Expression of type AssertExp:
assert(0)
 
Expression of type IteExp:
if 1 == 1 {
    __d.__H1.pkt_count;
} else {
    assert(0);
}
 
Expression of type IteExp:
(if 1 == 0 {
    __d.__H0.pkt_count;
} else if 1 == 1 {
    __d.__H1.pkt_count;
} else {
    assert(0);
})
 
Expression of type LiteralExp:
3
 
Expression of type ABinaryExp:
((if 1 == 0 {
    __d.__H0.pkt_count;
} else if 1 == 1 {
    __d.__H1.pkt_count;
} else {
    assert(0);
}) < 3)
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
(((if 1 == 0 {
    __d.__H0.pkt_count;
} else if 1 == 1 {
    __d.__H1.pkt_count;
} else {
    assert(0);
}) < 3) != 0)
 
Expression of type CallExp:
Expectation(((if 1 == 0 {
    __d.__H0.pkt_count;
} else if 1 == 1 {
    __d.__H1.pkt_count;
} else {
    assert(0);
}) < 3) != 0)
 
Expression of type ABinaryExp:
q1 := Expectation(((if 1 == 0 {
    __d.__H0.pkt_count;
} else if 1 == 1 {
    __d.__H1.pkt_count;
} else {
    assert(0);
}) < 3) != 0)
 
Expression of type Identifier:
(q1)
 
Expression of type ReturnExp:
return (q1)
 
Expression of type FunctionDef:
def main(){
    __d := __D'();
    __d.__H0.Q_in.pushBack((Packet'(),0));
    __d.__H0.__run();
    repeat 40 {
        __d.__step();
    }
    assert(!(__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__H1.Q_in.size() || __d.__H1.Q_out.size() || __d.__S0.Q_in.size() || __d.__S0.Q_out.size() || __d.__S1.Q_in.size() || __d.__S1.Q_out.size() || __d.__S2.Q_in.size() || __d.__S2.Q_out.size() || __d.__S3.Q_in.size() || __d.__S3.Q_out.size()));
    q1 := Expectation(((if 1 == 0 {
        __d.__H0.pkt_count;
    } else if 1 == 1 {
        __d.__H1.pkt_count;
    } else {
        assert(0);
    }) < 3) != 0);
    return (q1);
}
 
done with forToWhile
whileToRec normalization...
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
done with whileToRec
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
done with tuplesNormalizer
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
done with unreachableNormalizer
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
webppl translation...
translating meaning of __D
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
__D
 
Expression of type Identifier:
__H0
 
Expression of type Identifier:
__h0_ty
 
Expression of type VarDecl:
__H0: __h0_ty
 
Expression of type Identifier:
__H1
 
Expression of type Identifier:
__h1_ty
 
Expression of type VarDecl:
__H1: __h1_ty
 
Expression of type ABinaryExp:
__H0: __h0_ty , __H1: __h1_ty
 
Expression of type Identifier:
__S0
 
Expression of type Identifier:
__s0_ty
 
Expression of type VarDecl:
__S0: __s0_ty
 
Expression of type ABinaryExp:
__H0: __h0_ty , __H1: __h1_ty , __S0: __s0_ty
 
Expression of type Identifier:
__S1
 
Expression of type Identifier:
__s1_ty
 
Expression of type VarDecl:
__S1: __s1_ty
 
Expression of type ABinaryExp:
__H0: __h0_ty , __H1: __h1_ty , __S0: __s0_ty , __S1: __s1_ty
 
Expression of type Identifier:
__S2
 
Expression of type Identifier:
__s2_ty
 
Expression of type VarDecl:
__S2: __s2_ty
 
Expression of type ABinaryExp:
__H0: __h0_ty , __H1: __h1_ty , __S0: __s0_ty , __S1: __s1_ty , __S2: __s2_ty
 
Expression of type Identifier:
__S3
 
Expression of type Identifier:
__s3_ty
 
Expression of type VarDecl:
__S3: __s3_ty
 
Expression of type ABinaryExp:
__H0: __h0_ty , __H1: __h1_ty , __S0: __s0_ty , __S1: __s1_ty , __S2: __s2_ty , __S3: __s3_ty
 
Expression of type Identifier:
__D
 
Expression of type Identifier:
this
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
this.__H0
 
Expression of type Identifier:
__h0_ty'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__h0_ty'()
 
Expression of type ABinaryExp:
this.__H0 = __h0_ty'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
__H1
 
Expression of type FieldExp:
this.__H1
 
Expression of type Identifier:
__h1_ty'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__h1_ty'()
 
Expression of type ABinaryExp:
this.__H1 = __h1_ty'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this.__S0
 
Expression of type Identifier:
__s0_ty'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__s0_ty'()
 
Expression of type ABinaryExp:
this.__S0 = __s0_ty'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this.__S1
 
Expression of type Identifier:
__s1_ty'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__s1_ty'()
 
Expression of type ABinaryExp:
this.__S1 = __s1_ty'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this.__S2
 
Expression of type Identifier:
__s2_ty'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__s2_ty'()
 
Expression of type ABinaryExp:
this.__S2 = __s2_ty'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
this.__S3
 
Expression of type Identifier:
__s3_ty'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__s3_ty'()
 
Expression of type ABinaryExp:
this.__S3 = __s3_ty'()
 
Expression of type Identifier:
this
 
Expression of type ReturnExp:
return this
 
Expression of type FunctionDef:
def __D'(){
    this.__H0 = __h0_ty'();
    this.__H1 = __h1_ty'();
    this.__S0 = __s0_ty'();
    this.__S1 = __s1_ty'();
    this.__S2 = __s2_ty'();
    this.__S3 = __s3_ty'();
    return this;
}
 
Expression of type Identifier:
scheduler
 
Expression of type Identifier:
actions
 
Expression of type ArrayExp:
[]
 
Expression of type Identifier:
R
 
Expression of type Identifier:
R
 
Expression of type ABinaryExp:
(R × R)
 
Expression of type IndexExp:
(R × R)[]
 
Expression of type TypeAnnotationExp:
([]: (R × R)[])
 
Expression of type ABinaryExp:
actions := ([]: (R × R)[])
 
Expression of type Identifier:
i
 
Expression of type LiteralExp:
0
 
Expression of type LiteralExp:
6
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
actions
 
Expression of type Identifier:
actions
 
Expression of type LiteralExp:
0
 
Expression of type Identifier:
i
 
Expression of type TupleExp:
(0,i)
 
Expression of type ArrayExp:
[(0,i)]
 
Expression of type ABinaryExp:
actions ~ [(0,i)]
 
Expression of type ABinaryExp:
actions = actions ~ [(0,i)]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
actions
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,actions,0)
 
Expression of type ReturnExp:
return (1,actions,0)
 
Expression of type FunctionDef:
def _if(){
    actions = actions ~ [(0,i)];
    return (1,actions,0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
actions
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,actions,0)
 
Expression of type ReturnExp:
return (1,actions,0)
 
Expression of type FunctionDef:
def _else(){
    return (1,actions,0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
i
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
i == 0
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
this'.__H0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__H0.Q_in
 
Expression of type Identifier:
i
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
i == 1
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H1
 
Expression of type FieldExp:
this'.__H1
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__H1.Q_in
 
Expression of type Identifier:
i
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
i == 2
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S0.Q_in
 
Expression of type Identifier:
i
 
Expression of type LiteralExp:
3
 
Expression of type ABinaryExp:
i == 3
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this'.__S1
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S1.Q_in
 
Expression of type Identifier:
i
 
Expression of type LiteralExp:
4
 
Expression of type ABinaryExp:
i == 4
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this'.__S2
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S2.Q_in
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
this'.__S3
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S3.Q_in
 
Expression of type IteExp:
if i == 4 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}
 
Expression of type IteExp:
if i == 3 {
    this'.__S1.Q_in;
} else if i == 4 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}
 
Expression of type IteExp:
if i == 2 {
    this'.__S0.Q_in;
} else if i == 3 {
    this'.__S1.Q_in;
} else if i == 4 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}
 
Expression of type IteExp:
if i == 1 {
    this'.__H1.Q_in;
} else if i == 2 {
    this'.__S0.Q_in;
} else if i == 3 {
    this'.__S1.Q_in;
} else if i == 4 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}
 
Expression of type IteExp:
(if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__H1.Q_in;
} else if i == 2 {
    this'.__S0.Q_in;
} else if i == 3 {
    this'.__S1.Q_in;
} else if i == 4 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
})
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
(if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__H1.Q_in;
} else if i == 2 {
    this'.__S0.Q_in;
} else if i == 3 {
    this'.__S1.Q_in;
} else if i == 4 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
(if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__H1.Q_in;
} else if i == 2 {
    this'.__S0.Q_in;
} else if i == 3 {
    this'.__S1.Q_in;
} else if i == 4 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size()
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
(if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__H1.Q_in;
} else if i == 2 {
    this'.__S0.Q_in;
} else if i == 3 {
    this'.__S1.Q_in;
} else if i == 4 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__H1.Q_in;
} else if i == 2 {
    this'.__S0.Q_in;
} else if i == 3 {
    this'.__S1.Q_in;
} else if i == 4 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__H1.Q_in;
    } else if i == 2 {
        this'.__S0.Q_in;
    } else if i == 3 {
        this'.__S1.Q_in;
    } else if i == 4 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
actions
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
actions = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
actions
 
Expression of type Identifier:
actions
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
i
 
Expression of type TupleExp:
(1,i)
 
Expression of type ArrayExp:
[(1,i)]
 
Expression of type ABinaryExp:
actions ~ [(1,i)]
 
Expression of type ABinaryExp:
actions = actions ~ [(1,i)]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
actions
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,actions,0)
 
Expression of type ReturnExp:
return (1,actions,0)
 
Expression of type FunctionDef:
def _if(){
    actions = actions ~ [(1,i)];
    return (1,actions,0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
actions
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,actions,0)
 
Expression of type ReturnExp:
return (1,actions,0)
 
Expression of type FunctionDef:
def _else(){
    return (1,actions,0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
i
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
i == 0
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
this'.__H0
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__H0.Q_out
 
Expression of type Identifier:
i
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
i == 1
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H1
 
Expression of type FieldExp:
this'.__H1
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__H1.Q_out
 
Expression of type Identifier:
i
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
i == 2
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S0.Q_out
 
Expression of type Identifier:
i
 
Expression of type LiteralExp:
3
 
Expression of type ABinaryExp:
i == 3
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this'.__S1
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S1.Q_out
 
Expression of type Identifier:
i
 
Expression of type LiteralExp:
4
 
Expression of type ABinaryExp:
i == 4
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this'.__S2
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S2.Q_out
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
this'.__S3
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S3.Q_out
 
Expression of type IteExp:
if i == 4 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}
 
Expression of type IteExp:
if i == 3 {
    this'.__S1.Q_out;
} else if i == 4 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}
 
Expression of type IteExp:
if i == 2 {
    this'.__S0.Q_out;
} else if i == 3 {
    this'.__S1.Q_out;
} else if i == 4 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}
 
Expression of type IteExp:
if i == 1 {
    this'.__H1.Q_out;
} else if i == 2 {
    this'.__S0.Q_out;
} else if i == 3 {
    this'.__S1.Q_out;
} else if i == 4 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}
 
Expression of type IteExp:
(if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__H1.Q_out;
} else if i == 2 {
    this'.__S0.Q_out;
} else if i == 3 {
    this'.__S1.Q_out;
} else if i == 4 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
})
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
(if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__H1.Q_out;
} else if i == 2 {
    this'.__S0.Q_out;
} else if i == 3 {
    this'.__S1.Q_out;
} else if i == 4 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
(if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__H1.Q_out;
} else if i == 2 {
    this'.__S0.Q_out;
} else if i == 3 {
    this'.__S1.Q_out;
} else if i == 4 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size()
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
(if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__H1.Q_out;
} else if i == 2 {
    this'.__S0.Q_out;
} else if i == 3 {
    this'.__S1.Q_out;
} else if i == 4 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__H1.Q_out;
} else if i == 2 {
    this'.__S0.Q_out;
} else if i == 3 {
    this'.__S1.Q_out;
} else if i == 4 {
    this'.__S2.Q_out;
} else {
    this'.__S3.Q_out;
}).size() > 0 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__H1.Q_out;
    } else if i == 2 {
        this'.__S0.Q_out;
    } else if i == 3 {
        this'.__S1.Q_out;
    } else if i == 4 {
        this'.__S2.Q_out;
    } else {
        this'.__S3.Q_out;
    }).size() > 0 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
actions
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
actions = _ret[1]
 
Expression of type ForExp:
for i in [0..6){
    def _if(){
        actions = actions ~ [(0,i)];
        return (1,actions,0);
    }
    def _else(){
        return (1,actions,0);
    }
    def eval_if(){
        if (if i == 0 {
            this'.__H0.Q_in;
        } else if i == 1 {
            this'.__H1.Q_in;
        } else if i == 2 {
            this'.__S0.Q_in;
        } else if i == 3 {
            this'.__S1.Q_in;
        } else if i == 4 {
            this'.__S2.Q_in;
        } else {
            this'.__S3.Q_in;
        }).size() > 0 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    actions = _ret[1];
    def _if(){
        actions = actions ~ [(1,i)];
        return (1,actions,0);
    }
    def _else(){
        return (1,actions,0);
    }
    def eval_if(){
        if (if i == 0 {
            this'.__H0.Q_out;
        } else if i == 1 {
            this'.__H1.Q_out;
        } else if i == 2 {
            this'.__S0.Q_out;
        } else if i == 3 {
            this'.__S1.Q_out;
        } else if i == 4 {
            this'.__S2.Q_out;
        } else {
            this'.__S3.Q_out;
        }).size() > 0 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    actions = _ret[1];
}
 
Expression of type Identifier:
actions
 
Expression of type Identifier:
uniformInt
 
Expression of type LiteralExp:
0
 
Expression of type Identifier:
actions
 
Expression of type Identifier:
length
 
Expression of type FieldExp:
actions.length
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
actions.length - 1
 
Expression of type TupleExp:
(0,actions.length - 1)
 
Expression of type CallExp:
uniformInt(0,actions.length - 1)
 
Expression of type IndexExp:
actions[uniformInt(0,actions.length - 1)]
 
Expression of type ReturnExp:
return actions[uniformInt(0,actions.length - 1)]
 
Expression of type FunctionDef:
def scheduler(){
    actions := ([]: (R × R)[]);
    for i in [0..6){
        def _if(){
            actions = actions ~ [(0,i)];
            return (1,actions,0);
        }
        def _else(){
            return (1,actions,0);
        }
        def eval_if(){
            if (if i == 0 {
                this'.__H0.Q_in;
            } else if i == 1 {
                this'.__H1.Q_in;
            } else if i == 2 {
                this'.__S0.Q_in;
            } else if i == 3 {
                this'.__S1.Q_in;
            } else if i == 4 {
                this'.__S2.Q_in;
            } else {
                this'.__S3.Q_in;
            }).size() > 0 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        actions = _ret[1];
        def _if(){
            actions = actions ~ [(1,i)];
            return (1,actions,0);
        }
        def _else(){
            return (1,actions,0);
        }
        def eval_if(){
            if (if i == 0 {
                this'.__H0.Q_out;
            } else if i == 1 {
                this'.__H1.Q_out;
            } else if i == 2 {
                this'.__S0.Q_out;
            } else if i == 3 {
                this'.__S1.Q_out;
            } else if i == 4 {
                this'.__S2.Q_out;
            } else {
                this'.__S3.Q_out;
            }).size() > 0 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        actions = _ret[1];
    }
    return actions[uniformInt(0,actions.length - 1)];
}
 
Expression of type Identifier:
__step
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
action
 
Expression of type Identifier:
node
 
Expression of type TupleExp:
(action,node)
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
scheduler
 
Expression of type FieldExp:
this'.scheduler
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.scheduler()
 
Expression of type ABinaryExp:
(action,node) := this'.scheduler()
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
pkt
 
Expression of type Identifier:
port
 
Expression of type TupleExp:
(pkt,port)
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
this'.__H0
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__H0.Q_out
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.__H0.Q_out.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__H0.Q_out.takeFront()
 
Expression of type ABinaryExp:
(pkt,port) := this'.__H0.Q_out.takeFront()
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S0.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__S0.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
1
 
Expression of type TupleExp:
((pkt,1))
 
Expression of type CallExp:
this'.__S0.Q_in.pushBack((pkt,1))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S0.Q_in.pushBack((pkt,1));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
port == 1
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 1 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 1 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    (pkt,port) := this'.__H0.Q_out.takeFront();
    def _if(){
        this'.__S0.Q_in.pushBack((pkt,1));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 1 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
node
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
node == 0
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
this'.__H0
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__H0.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__H0.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__H0.Q_out.size()
 
Expression of type ABinaryExp:
node == 0 && this'.__H0.Q_out.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if node == 0 && this'.__H0.Q_out.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if node == 0 && this'.__H0.Q_out.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
pkt
 
Expression of type Identifier:
port
 
Expression of type TupleExp:
(pkt,port)
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H1
 
Expression of type FieldExp:
this'.__H1
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__H1.Q_out
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.__H1.Q_out.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__H1.Q_out.takeFront()
 
Expression of type ABinaryExp:
(pkt,port) := this'.__H1.Q_out.takeFront()
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
this'.__S3
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S3.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__S3.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
3
 
Expression of type TupleExp:
((pkt,3))
 
Expression of type CallExp:
this'.__S3.Q_in.pushBack((pkt,3))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S3.Q_in.pushBack((pkt,3));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
port == 1
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 1 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 1 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    (pkt,port) := this'.__H1.Q_out.takeFront();
    def _if(){
        this'.__S3.Q_in.pushBack((pkt,3));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 1 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
node
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
node == 1
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H1
 
Expression of type FieldExp:
this'.__H1
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__H1.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__H1.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__H1.Q_out.size()
 
Expression of type ABinaryExp:
node == 1 && this'.__H1.Q_out.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if node == 1 && this'.__H1.Q_out.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if node == 1 && this'.__H1.Q_out.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
pkt
 
Expression of type Identifier:
port
 
Expression of type TupleExp:
(pkt,port)
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S0.Q_out
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.__S0.Q_out.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S0.Q_out.takeFront()
 
Expression of type ABinaryExp:
(pkt,port) := this'.__S0.Q_out.takeFront()
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
this'.__H0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__H0.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__H0.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
1
 
Expression of type TupleExp:
((pkt,1))
 
Expression of type CallExp:
this'.__H0.Q_in.pushBack((pkt,1))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__H0.Q_in.pushBack((pkt,1));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
port == 1
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 1 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 1 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this'.__S1
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S1.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__S1.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
1
 
Expression of type TupleExp:
((pkt,1))
 
Expression of type CallExp:
this'.__S1.Q_in.pushBack((pkt,1))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S1.Q_in.pushBack((pkt,1));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
port == 2
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 2 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 2 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
this'.__S3
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S3.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__S3.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
1
 
Expression of type TupleExp:
((pkt,1))
 
Expression of type CallExp:
this'.__S3.Q_in.pushBack((pkt,1))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S3.Q_in.pushBack((pkt,1));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
3
 
Expression of type ABinaryExp:
port == 3
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 3 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 3 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this'.__S2
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S2.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__S2.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
1
 
Expression of type TupleExp:
((pkt,1))
 
Expression of type CallExp:
this'.__S2.Q_in.pushBack((pkt,1))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S2.Q_in.pushBack((pkt,1));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
4
 
Expression of type ABinaryExp:
port == 4
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 4 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 4 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    (pkt,port) := this'.__S0.Q_out.takeFront();
    def _if(){
        this'.__H0.Q_in.pushBack((pkt,1));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 1 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__S1.Q_in.pushBack((pkt,1));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 2 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__S3.Q_in.pushBack((pkt,1));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 3 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__S2.Q_in.pushBack((pkt,1));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 4 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
node
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
node == 2
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S0.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S0.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S0.Q_out.size()
 
Expression of type ABinaryExp:
node == 2 && this'.__S0.Q_out.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if node == 2 && this'.__S0.Q_out.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if node == 2 && this'.__S0.Q_out.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
pkt
 
Expression of type Identifier:
port
 
Expression of type TupleExp:
(pkt,port)
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this'.__S1
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S1.Q_out
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.__S1.Q_out.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S1.Q_out.takeFront()
 
Expression of type ABinaryExp:
(pkt,port) := this'.__S1.Q_out.takeFront()
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S0.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__S0.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
2
 
Expression of type TupleExp:
((pkt,2))
 
Expression of type CallExp:
this'.__S0.Q_in.pushBack((pkt,2))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S0.Q_in.pushBack((pkt,2));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
port == 1
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 1 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 1 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this'.__S2
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S2.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__S2.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
2
 
Expression of type TupleExp:
((pkt,2))
 
Expression of type CallExp:
this'.__S2.Q_in.pushBack((pkt,2))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S2.Q_in.pushBack((pkt,2));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
port == 2
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 2 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 2 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    (pkt,port) := this'.__S1.Q_out.takeFront();
    def _if(){
        this'.__S0.Q_in.pushBack((pkt,2));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 1 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__S2.Q_in.pushBack((pkt,2));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 2 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
node
 
Expression of type LiteralExp:
3
 
Expression of type ABinaryExp:
node == 3
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this'.__S1
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S1.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S1.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S1.Q_out.size()
 
Expression of type ABinaryExp:
node == 3 && this'.__S1.Q_out.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if node == 3 && this'.__S1.Q_out.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if node == 3 && this'.__S1.Q_out.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
pkt
 
Expression of type Identifier:
port
 
Expression of type TupleExp:
(pkt,port)
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this'.__S2
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S2.Q_out
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.__S2.Q_out.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S2.Q_out.takeFront()
 
Expression of type ABinaryExp:
(pkt,port) := this'.__S2.Q_out.takeFront()
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S0.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__S0.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
4
 
Expression of type TupleExp:
((pkt,4))
 
Expression of type CallExp:
this'.__S0.Q_in.pushBack((pkt,4))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S0.Q_in.pushBack((pkt,4));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
port == 1
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 1 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 1 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this'.__S1
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S1.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__S1.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
2
 
Expression of type TupleExp:
((pkt,2))
 
Expression of type CallExp:
this'.__S1.Q_in.pushBack((pkt,2))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S1.Q_in.pushBack((pkt,2));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
port == 2
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 2 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 2 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
this'.__S3
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S3.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__S3.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
2
 
Expression of type TupleExp:
((pkt,2))
 
Expression of type CallExp:
this'.__S3.Q_in.pushBack((pkt,2))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S3.Q_in.pushBack((pkt,2));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
3
 
Expression of type ABinaryExp:
port == 3
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 3 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 3 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    (pkt,port) := this'.__S2.Q_out.takeFront();
    def _if(){
        this'.__S0.Q_in.pushBack((pkt,4));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 1 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__S1.Q_in.pushBack((pkt,2));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 2 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__S3.Q_in.pushBack((pkt,2));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 3 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
node
 
Expression of type LiteralExp:
4
 
Expression of type ABinaryExp:
node == 4
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this'.__S2
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S2.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S2.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S2.Q_out.size()
 
Expression of type ABinaryExp:
node == 4 && this'.__S2.Q_out.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if node == 4 && this'.__S2.Q_out.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if node == 4 && this'.__S2.Q_out.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
pkt
 
Expression of type Identifier:
port
 
Expression of type TupleExp:
(pkt,port)
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
this'.__S3
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S3.Q_out
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.__S3.Q_out.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S3.Q_out.takeFront()
 
Expression of type ABinaryExp:
(pkt,port) := this'.__S3.Q_out.takeFront()
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S0.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__S0.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
3
 
Expression of type TupleExp:
((pkt,3))
 
Expression of type CallExp:
this'.__S0.Q_in.pushBack((pkt,3))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S0.Q_in.pushBack((pkt,3));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
port == 1
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 1 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 1 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this'.__S2
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S2.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__S2.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
3
 
Expression of type TupleExp:
((pkt,3))
 
Expression of type CallExp:
this'.__S2.Q_in.pushBack((pkt,3))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S2.Q_in.pushBack((pkt,3));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
port == 2
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 2 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 2 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H1
 
Expression of type FieldExp:
this'.__H1
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__H1.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__H1.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
1
 
Expression of type TupleExp:
((pkt,1))
 
Expression of type CallExp:
this'.__H1.Q_in.pushBack((pkt,1))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__H1.Q_in.pushBack((pkt,1));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
3
 
Expression of type ABinaryExp:
port == 3
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 3 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 3 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    (pkt,port) := this'.__S3.Q_out.takeFront();
    def _if(){
        this'.__S0.Q_in.pushBack((pkt,3));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 1 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__S2.Q_in.pushBack((pkt,3));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 2 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__H1.Q_in.pushBack((pkt,1));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 3 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
node
 
Expression of type LiteralExp:
5
 
Expression of type ABinaryExp:
node == 5
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
this'.__S3
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S3.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S3.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S3.Q_out.size()
 
Expression of type ABinaryExp:
node == 5 && this'.__S3.Q_out.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if node == 5 && this'.__S3.Q_out.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if node == 5 && this'.__S3.Q_out.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    def _if(){
        (pkt,port) := this'.__H0.Q_out.takeFront();
        def _if(){
            this'.__S0.Q_in.pushBack((pkt,1));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 1 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if node == 0 && this'.__H0.Q_out.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        (pkt,port) := this'.__H1.Q_out.takeFront();
        def _if(){
            this'.__S3.Q_in.pushBack((pkt,3));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 1 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if node == 1 && this'.__H1.Q_out.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        (pkt,port) := this'.__S0.Q_out.takeFront();
        def _if(){
            this'.__H0.Q_in.pushBack((pkt,1));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 1 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__S1.Q_in.pushBack((pkt,1));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 2 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__S3.Q_in.pushBack((pkt,1));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 3 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__S2.Q_in.pushBack((pkt,1));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 4 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if node == 2 && this'.__S0.Q_out.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        (pkt,port) := this'.__S1.Q_out.takeFront();
        def _if(){
            this'.__S0.Q_in.pushBack((pkt,2));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 1 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__S2.Q_in.pushBack((pkt,2));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 2 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if node == 3 && this'.__S1.Q_out.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        (pkt,port) := this'.__S2.Q_out.takeFront();
        def _if(){
            this'.__S0.Q_in.pushBack((pkt,4));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 1 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__S1.Q_in.pushBack((pkt,2));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 2 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__S3.Q_in.pushBack((pkt,2));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 3 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if node == 4 && this'.__S2.Q_out.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        (pkt,port) := this'.__S3.Q_out.takeFront();
        def _if(){
            this'.__S0.Q_in.pushBack((pkt,3));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 1 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__S2.Q_in.pushBack((pkt,3));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 2 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__H1.Q_in.pushBack((pkt,1));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 3 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if node == 5 && this'.__S3.Q_out.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
this'.__H0
 
Expression of type Identifier:
__run
 
Expression of type FieldExp:
this'.__H0.__run
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__H0.__run()
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__H0.__run();
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
node
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
node == 0
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
this'.__H0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__H0.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__H0.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__H0.Q_in.size()
 
Expression of type ABinaryExp:
node == 0 && this'.__H0.Q_in.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if node == 0 && this'.__H0.Q_in.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if node == 0 && this'.__H0.Q_in.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H1
 
Expression of type FieldExp:
this'.__H1
 
Expression of type Identifier:
__run
 
Expression of type FieldExp:
this'.__H1.__run
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__H1.__run()
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__H1.__run();
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
node
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
node == 1
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H1
 
Expression of type FieldExp:
this'.__H1
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__H1.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__H1.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__H1.Q_in.size()
 
Expression of type ABinaryExp:
node == 1 && this'.__H1.Q_in.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if node == 1 && this'.__H1.Q_in.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if node == 1 && this'.__H1.Q_in.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
__run
 
Expression of type FieldExp:
this'.__S0.__run
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S0.__run()
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S0.__run();
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
node
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
node == 2
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S0.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S0.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S0.Q_in.size()
 
Expression of type ABinaryExp:
node == 2 && this'.__S0.Q_in.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if node == 2 && this'.__S0.Q_in.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if node == 2 && this'.__S0.Q_in.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this'.__S1
 
Expression of type Identifier:
__run
 
Expression of type FieldExp:
this'.__S1.__run
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S1.__run()
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S1.__run();
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
node
 
Expression of type LiteralExp:
3
 
Expression of type ABinaryExp:
node == 3
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this'.__S1
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S1.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S1.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S1.Q_in.size()
 
Expression of type ABinaryExp:
node == 3 && this'.__S1.Q_in.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if node == 3 && this'.__S1.Q_in.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if node == 3 && this'.__S1.Q_in.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this'.__S2
 
Expression of type Identifier:
__run
 
Expression of type FieldExp:
this'.__S2.__run
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S2.__run()
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S2.__run();
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
node
 
Expression of type LiteralExp:
4
 
Expression of type ABinaryExp:
node == 4
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this'.__S2
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S2.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S2.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S2.Q_in.size()
 
Expression of type ABinaryExp:
node == 4 && this'.__S2.Q_in.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if node == 4 && this'.__S2.Q_in.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if node == 4 && this'.__S2.Q_in.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
this'.__S3
 
Expression of type Identifier:
__run
 
Expression of type FieldExp:
this'.__S3.__run
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S3.__run()
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S3.__run();
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
node
 
Expression of type LiteralExp:
5
 
Expression of type ABinaryExp:
node == 5
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
this'.__S3
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S3.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S3.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S3.Q_in.size()
 
Expression of type ABinaryExp:
node == 5 && this'.__S3.Q_in.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if node == 5 && this'.__S3.Q_in.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if node == 5 && this'.__S3.Q_in.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    def _if(){
        this'.__H0.__run();
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if node == 0 && this'.__H0.Q_in.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__H1.__run();
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if node == 1 && this'.__H1.Q_in.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__S0.__run();
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if node == 2 && this'.__S0.Q_in.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__S1.__run();
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if node == 3 && this'.__S1.Q_in.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__S2.__run();
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if node == 4 && this'.__S2.Q_in.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__S3.__run();
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if node == 5 && this'.__S3.Q_in.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
action
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if action {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if action {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    (action,node) := this'.scheduler();
    def _if(){
        def _if(){
            (pkt,port) := this'.__H0.Q_out.takeFront();
            def _if(){
                this'.__S0.Q_in.pushBack((pkt,1));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 1 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if node == 0 && this'.__H0.Q_out.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            (pkt,port) := this'.__H1.Q_out.takeFront();
            def _if(){
                this'.__S3.Q_in.pushBack((pkt,3));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 1 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if node == 1 && this'.__H1.Q_out.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            (pkt,port) := this'.__S0.Q_out.takeFront();
            def _if(){
                this'.__H0.Q_in.pushBack((pkt,1));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 1 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__S1.Q_in.pushBack((pkt,1));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 2 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__S3.Q_in.pushBack((pkt,1));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 3 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__S2.Q_in.pushBack((pkt,1));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 4 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if node == 2 && this'.__S0.Q_out.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            (pkt,port) := this'.__S1.Q_out.takeFront();
            def _if(){
                this'.__S0.Q_in.pushBack((pkt,2));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 1 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__S2.Q_in.pushBack((pkt,2));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 2 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if node == 3 && this'.__S1.Q_out.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            (pkt,port) := this'.__S2.Q_out.takeFront();
            def _if(){
                this'.__S0.Q_in.pushBack((pkt,4));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 1 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__S1.Q_in.pushBack((pkt,2));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 2 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__S3.Q_in.pushBack((pkt,2));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 3 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if node == 4 && this'.__S2.Q_out.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            (pkt,port) := this'.__S3.Q_out.takeFront();
            def _if(){
                this'.__S0.Q_in.pushBack((pkt,3));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 1 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__S2.Q_in.pushBack((pkt,3));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 2 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__H1.Q_in.pushBack((pkt,1));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 3 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if node == 5 && this'.__S3.Q_out.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def _else(){
        def _if(){
            this'.__H0.__run();
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if node == 0 && this'.__H0.Q_in.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__H1.__run();
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if node == 1 && this'.__H1.Q_in.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__S0.__run();
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if node == 2 && this'.__S0.Q_in.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__S1.__run();
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if node == 3 && this'.__S1.Q_in.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__S2.__run();
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if node == 4 && this'.__S2.Q_in.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__S3.__run();
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if node == 5 && this'.__S3.Q_in.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def eval_if(){
        if action {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
this'.__H0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__H0.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__H0.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__H0.Q_in.size()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
this'.__H0
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__H0.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__H0.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__H0.Q_out.size()
 
Expression of type ABinaryExp:
this'.__H0.Q_in.size() || this'.__H0.Q_out.size()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H1
 
Expression of type FieldExp:
this'.__H1
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__H1.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__H1.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__H1.Q_in.size()
 
Expression of type ABinaryExp:
this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H1
 
Expression of type FieldExp:
this'.__H1
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__H1.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__H1.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__H1.Q_out.size()
 
Expression of type ABinaryExp:
this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S0.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S0.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S0.Q_in.size()
 
Expression of type ABinaryExp:
this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() || this'.__S0.Q_in.size()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S0.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S0.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S0.Q_out.size()
 
Expression of type ABinaryExp:
this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() || this'.__S0.Q_in.size() || this'.__S0.Q_out.size()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this'.__S1
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S1.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S1.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S1.Q_in.size()
 
Expression of type ABinaryExp:
this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() || this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this'.__S1
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S1.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S1.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S1.Q_out.size()
 
Expression of type ABinaryExp:
this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() || this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this'.__S2
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S2.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S2.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S2.Q_in.size()
 
Expression of type ABinaryExp:
this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() || this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this'.__S2
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S2.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S2.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S2.Q_out.size()
 
Expression of type ABinaryExp:
this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() || this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
this'.__S3
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S3.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S3.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S3.Q_in.size()
 
Expression of type ABinaryExp:
this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() || this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S3
 
Expression of type FieldExp:
this'.__S3
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S3.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S3.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S3.Q_out.size()
 
Expression of type ABinaryExp:
this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() || this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() || this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() || this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type TupleExp:
()
 
Expression of type ReturnExp:
return ()
 
Expression of type FunctionDef:
def __step(){
    def _if(){
        (action,node) := this'.scheduler();
        def _if(){
            def _if(){
                (pkt,port) := this'.__H0.Q_out.takeFront();
                def _if(){
                    this'.__S0.Q_in.pushBack((pkt,1));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 1 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if node == 0 && this'.__H0.Q_out.size() {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                (pkt,port) := this'.__H1.Q_out.takeFront();
                def _if(){
                    this'.__S3.Q_in.pushBack((pkt,3));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 1 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if node == 1 && this'.__H1.Q_out.size() {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                (pkt,port) := this'.__S0.Q_out.takeFront();
                def _if(){
                    this'.__H0.Q_in.pushBack((pkt,1));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 1 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S1.Q_in.pushBack((pkt,1));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 2 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S3.Q_in.pushBack((pkt,1));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 3 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S2.Q_in.pushBack((pkt,1));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 4 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if node == 2 && this'.__S0.Q_out.size() {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                (pkt,port) := this'.__S1.Q_out.takeFront();
                def _if(){
                    this'.__S0.Q_in.pushBack((pkt,2));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 1 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S2.Q_in.pushBack((pkt,2));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 2 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if node == 3 && this'.__S1.Q_out.size() {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                (pkt,port) := this'.__S2.Q_out.takeFront();
                def _if(){
                    this'.__S0.Q_in.pushBack((pkt,4));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 1 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S1.Q_in.pushBack((pkt,2));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 2 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S3.Q_in.pushBack((pkt,2));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 3 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if node == 4 && this'.__S2.Q_out.size() {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                (pkt,port) := this'.__S3.Q_out.takeFront();
                def _if(){
                    this'.__S0.Q_in.pushBack((pkt,3));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 1 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S2.Q_in.pushBack((pkt,3));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 2 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__H1.Q_in.pushBack((pkt,1));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 3 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if node == 5 && this'.__S3.Q_out.size() {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def _else(){
            def _if(){
                this'.__H0.__run();
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if node == 0 && this'.__H0.Q_in.size() {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__H1.__run();
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if node == 1 && this'.__H1.Q_in.size() {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__S0.__run();
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if node == 2 && this'.__S0.Q_in.size() {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__S1.__run();
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if node == 3 && this'.__S1.Q_in.size() {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__S2.__run();
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if node == 4 && this'.__S2.Q_in.size() {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__S3.__run();
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if node == 5 && this'.__S3.Q_in.size() {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def eval_if(){
            if action {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() || this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return ();
}
 
Expression of type CompoundDecl:
{
    __H0: __h0_ty , __H1: __h1_ty , __S0: __s0_ty , __S1: __s1_ty , __S2: __s2_ty , __S3: __s3_ty;
    def __D'(){
        this.__H0 = __h0_ty'();
        this.__H1 = __h1_ty'();
        this.__S0 = __s0_ty'();
        this.__S1 = __s1_ty'();
        this.__S2 = __s2_ty'();
        this.__S3 = __s3_ty'();
        return this;
    }
    def scheduler(){
        actions := ([]: (R × R)[]);
        for i in [0..6){
            def _if(){
                actions = actions ~ [(0,i)];
                return (1,actions,0);
            }
            def _else(){
                return (1,actions,0);
            }
            def eval_if(){
                if (if i == 0 {
                    this'.__H0.Q_in;
                } else if i == 1 {
                    this'.__H1.Q_in;
                } else if i == 2 {
                    this'.__S0.Q_in;
                } else if i == 3 {
                    this'.__S1.Q_in;
                } else if i == 4 {
                    this'.__S2.Q_in;
                } else {
                    this'.__S3.Q_in;
                }).size() > 0 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            actions = _ret[1];
            def _if(){
                actions = actions ~ [(1,i)];
                return (1,actions,0);
            }
            def _else(){
                return (1,actions,0);
            }
            def eval_if(){
                if (if i == 0 {
                    this'.__H0.Q_out;
                } else if i == 1 {
                    this'.__H1.Q_out;
                } else if i == 2 {
                    this'.__S0.Q_out;
                } else if i == 3 {
                    this'.__S1.Q_out;
                } else if i == 4 {
                    this'.__S2.Q_out;
                } else {
                    this'.__S3.Q_out;
                }).size() > 0 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            actions = _ret[1];
        }
        return actions[uniformInt(0,actions.length - 1)];
    }
    def __step(){
        def _if(){
            (action,node) := this'.scheduler();
            def _if(){
                def _if(){
                    (pkt,port) := this'.__H0.Q_out.takeFront();
                    def _if(){
                        this'.__S0.Q_in.pushBack((pkt,1));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 1 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 0 && this'.__H0.Q_out.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    (pkt,port) := this'.__H1.Q_out.takeFront();
                    def _if(){
                        this'.__S3.Q_in.pushBack((pkt,3));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 1 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 1 && this'.__H1.Q_out.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    (pkt,port) := this'.__S0.Q_out.takeFront();
                    def _if(){
                        this'.__H0.Q_in.pushBack((pkt,1));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 1 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S1.Q_in.pushBack((pkt,1));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 2 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S3.Q_in.pushBack((pkt,1));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 3 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S2.Q_in.pushBack((pkt,1));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 4 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 2 && this'.__S0.Q_out.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    (pkt,port) := this'.__S1.Q_out.takeFront();
                    def _if(){
                        this'.__S0.Q_in.pushBack((pkt,2));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 1 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S2.Q_in.pushBack((pkt,2));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 2 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 3 && this'.__S1.Q_out.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    (pkt,port) := this'.__S2.Q_out.takeFront();
                    def _if(){
                        this'.__S0.Q_in.pushBack((pkt,4));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 1 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S1.Q_in.pushBack((pkt,2));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 2 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S3.Q_in.pushBack((pkt,2));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 3 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 4 && this'.__S2.Q_out.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    (pkt,port) := this'.__S3.Q_out.takeFront();
                    def _if(){
                        this'.__S0.Q_in.pushBack((pkt,3));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 1 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S2.Q_in.pushBack((pkt,3));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 2 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__H1.Q_in.pushBack((pkt,1));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 3 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 5 && this'.__S3.Q_out.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def _else(){
                def _if(){
                    this'.__H0.__run();
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 0 && this'.__H0.Q_in.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__H1.__run();
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 1 && this'.__H1.Q_in.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S0.__run();
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 2 && this'.__S0.Q_in.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S1.__run();
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 3 && this'.__S1.Q_in.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S2.__run();
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 4 && this'.__S2.Q_in.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S3.__run();
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 5 && this'.__S3.Q_in.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def eval_if(){
                if action {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() || this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return ();
    }
}
 
Expression of type DatDecl:
dat __D{
    __H0: __h0_ty , __H1: __h1_ty , __S0: __s0_ty , __S1: __s1_ty , __S2: __s2_ty , __S3: __s3_ty;
    def __D'(){
        this.__H0 = __h0_ty'();
        this.__H1 = __h1_ty'();
        this.__S0 = __s0_ty'();
        this.__S1 = __s1_ty'();
        this.__S2 = __s2_ty'();
        this.__S3 = __s3_ty'();
        return this;
    }
    def scheduler(){
        actions := ([]: (R × R)[]);
        for i in [0..6){
            def _if(){
                actions = actions ~ [(0,i)];
                return (1,actions,0);
            }
            def _else(){
                return (1,actions,0);
            }
            def eval_if(){
                if (if i == 0 {
                    this'.__H0.Q_in;
                } else if i == 1 {
                    this'.__H1.Q_in;
                } else if i == 2 {
                    this'.__S0.Q_in;
                } else if i == 3 {
                    this'.__S1.Q_in;
                } else if i == 4 {
                    this'.__S2.Q_in;
                } else {
                    this'.__S3.Q_in;
                }).size() > 0 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            actions = _ret[1];
            def _if(){
                actions = actions ~ [(1,i)];
                return (1,actions,0);
            }
            def _else(){
                return (1,actions,0);
            }
            def eval_if(){
                if (if i == 0 {
                    this'.__H0.Q_out;
                } else if i == 1 {
                    this'.__H1.Q_out;
                } else if i == 2 {
                    this'.__S0.Q_out;
                } else if i == 3 {
                    this'.__S1.Q_out;
                } else if i == 4 {
                    this'.__S2.Q_out;
                } else {
                    this'.__S3.Q_out;
                }).size() > 0 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            actions = _ret[1];
        }
        return actions[uniformInt(0,actions.length - 1)];
    }
    def __step(){
        def _if(){
            (action,node) := this'.scheduler();
            def _if(){
                def _if(){
                    (pkt,port) := this'.__H0.Q_out.takeFront();
                    def _if(){
                        this'.__S0.Q_in.pushBack((pkt,1));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 1 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 0 && this'.__H0.Q_out.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    (pkt,port) := this'.__H1.Q_out.takeFront();
                    def _if(){
                        this'.__S3.Q_in.pushBack((pkt,3));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 1 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 1 && this'.__H1.Q_out.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    (pkt,port) := this'.__S0.Q_out.takeFront();
                    def _if(){
                        this'.__H0.Q_in.pushBack((pkt,1));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 1 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S1.Q_in.pushBack((pkt,1));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 2 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S3.Q_in.pushBack((pkt,1));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 3 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S2.Q_in.pushBack((pkt,1));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 4 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 2 && this'.__S0.Q_out.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    (pkt,port) := this'.__S1.Q_out.takeFront();
                    def _if(){
                        this'.__S0.Q_in.pushBack((pkt,2));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 1 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S2.Q_in.pushBack((pkt,2));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 2 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 3 && this'.__S1.Q_out.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    (pkt,port) := this'.__S2.Q_out.takeFront();
                    def _if(){
                        this'.__S0.Q_in.pushBack((pkt,4));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 1 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S1.Q_in.pushBack((pkt,2));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 2 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S3.Q_in.pushBack((pkt,2));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 3 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 4 && this'.__S2.Q_out.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    (pkt,port) := this'.__S3.Q_out.takeFront();
                    def _if(){
                        this'.__S0.Q_in.pushBack((pkt,3));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 1 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S2.Q_in.pushBack((pkt,3));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 2 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__H1.Q_in.pushBack((pkt,1));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 3 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 5 && this'.__S3.Q_out.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def _else(){
                def _if(){
                    this'.__H0.__run();
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 0 && this'.__H0.Q_in.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__H1.__run();
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 1 && this'.__H1.Q_in.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S0.__run();
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 2 && this'.__S0.Q_in.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S1.__run();
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 3 && this'.__S1.Q_in.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S2.__run();
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 4 && this'.__S2.Q_in.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S3.__run();
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 5 && this'.__S3.Q_in.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def eval_if(){
                if action {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() || this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return ();
    }
}
 
done with forToWhile
whileToRec normalization...
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
done with whileToRec
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
done with tuplesNormalizer
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
done with unreachableNormalizer
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
the following needs to be in a var:
(0,i_1)
the following needs to be in a var:
(1,i_1)
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
def outside of main:(normalized)
dat __D{
    __H0: __h0_ty , __H1: __h1_ty , __S0: __s0_ty , __S1: __s1_ty , __S2: __s2_ty , __S3: __s3_ty;
    def __D'(){
        subExp_CallExp_1 := __h0_ty();
        this.__H0 = subExp_CallExp_1;
        subExp_CallExp_2 := __h1_ty();
        this.__H1 = subExp_CallExp_2;
        subExp_CallExp_3 := __s0_ty();
        this.__S0 = subExp_CallExp_3;
        subExp_CallExp_4 := __s1_ty();
        this.__S1 = subExp_CallExp_4;
        subExp_CallExp_5 := __s2_ty();
        this.__S2 = subExp_CallExp_5;
        subExp_CallExp_6 := __s3_ty();
        this.__S3 = subExp_CallExp_6;
        return this;
    }
    def scheduler(){
        actions_0 := ([]: (R × R)[]);
        i_0 := 0;
        def loop_body_0(_args_0: ℝ × (ℝ × ℝ)[]){
            _tuple_0 := _args_0;
            i_1 := _tuple_0[0];
            actions_1 := _tuple_0[1];
            subExp_7 := i_1 < 6;
            if subExp_7 {
                def _if_0(){
                    subExpArr_9 := (0,i_1);
                    subExp_8 := [subExpArr_9];
                    actions_2 := actions_1 ~ subExp_8;
                    subExp_10 := (1,actions_2,0);
                    return subExp_10;
                }
                def _else_0(){
                    subExp_11 := (1,actions_1,0);
                    return subExp_11;
                }
                def eval_if_0(){
                    subExp_15 := (if i_1 == 0 {
                        this.__H0.Q_in;
                    } else if i_1 == 1 {
                        this.__H1.Q_in;
                    } else if i_1 == 2 {
                        this.__S0.Q_in;
                    } else if i_1 == 3 {
                        this.__S1.Q_in;
                    } else if i_1 == 4 {
                        this.__S2.Q_in;
                    } else {
                        this.__S3.Q_in;
                    }).size();
                    subExp_12 := subExp_15 > 0;
                    if subExp_12 {
                        subExp_13 := _if_0();
                        return subExp_13;
                    } else {
                        subExp_14 := _else_0();
                        return subExp_14;
                    }
                }
                _ret_0 := eval_if_0();
                actions_2 := _ret_0[1];
                def _if_1(){
                    subExpArr_17 := (1,i_1);
                    subExp_16 := [subExpArr_17];
                    actions_3 := actions_2 ~ subExp_16;
                    subExp_18 := (1,actions_3,0);
                    return subExp_18;
                }
                def _else_1(){
                    subExp_19 := (1,actions_2,0);
                    return subExp_19;
                }
                def eval_if_1(){
                    subExp_23 := (if i_1 == 0 {
                        this.__H0.Q_out;
                    } else if i_1 == 1 {
                        this.__H1.Q_out;
                    } else if i_1 == 2 {
                        this.__S0.Q_out;
                    } else if i_1 == 3 {
                        this.__S1.Q_out;
                    } else if i_1 == 4 {
                        this.__S2.Q_out;
                    } else {
                        this.__S3.Q_out;
                    }).size();
                    subExp_20 := subExp_23 > 0;
                    if subExp_20 {
                        subExp_21 := _if_1();
                        return subExp_21;
                    } else {
                        subExp_22 := _else_1();
                        return subExp_22;
                    }
                }
                _ret_1 := eval_if_1();
                actions_3 := _ret_1[1];
                i_2 := i_1 + 1;
                _new_args_0 := (i_2,actions_3);
                subExp_24 := (0,_new_args_0,0);
                return subExp_24;
            } else {
                subExp_25 := (1,_args_0,0);
                return subExp_25;
            }
        }
        def _loop_0(arg_0){
            loop_body_1 := arg_0[0];
            args_0 := arg_0[1];
            k_0 := loop_body_1(args_0);
            subExp_27 := k_0[0];
            subExp_26 := subExp_27 != 0;
            if subExp_26 {
                return k_0;
            }
            subExp_arg_29 := k_0[1];
            subExp_28 := _loop_0(loop_body_1,subExp_arg_29);
            return subExp_28;
        }
        _args_0 := (i_0,actions_0);
        _ret_0 := _loop_0(loop_body_0,_args_0);
        _tuple_0 := _ret_0[1];
        i_1 := _tuple_0[0];
        actions_1 := _tuple_0[1];
        subExp_arg_32 := 0;
        subExp_34 := actions_1.length;
        subExp_arg_33 := subExp_34 - 1;
        subExpArr_31 := uniformInt(subExp_arg_32,subExp_arg_33);
        subExp_30 := actions_1[subExpArr_31];
        return subExp_30;
    }
    def __step(){
        def _if_0(){
            _tuple_0 := this.scheduler();
            action_0 := _tuple_0[0];
            node_0 := _tuple_0[1];
            def _if_1(){
                def _if_2(){
                    _tuple_1 := this.__H0.Q_out.takeFront();
                    pkt_0 := _tuple_1[0];
                    port_0 := _tuple_1[1];
                    def _if_3(){
                        subExp_arg_35 := 1;
                        this.__S0.Q_in.pushBack(pkt_0,subExp_arg_35);
                        subExp_36 := (1,this,0);
                        return subExp_36;
                    }
                    def _else_0(){
                        subExp_37 := (1,this,0);
                        return subExp_37;
                    }
                    def eval_if_0(){
                        subExp_38 := port_0 == 1;
                        if subExp_38 {
                            subExp_39 := _if_3();
                            return subExp_39;
                        } else {
                            subExp_40 := _else_0();
                            return subExp_40;
                        }
                    }
                    _ret_0 := eval_if_0();
                    this = _ret_0[1];
                    subExp_41 := (1,this,0);
                    return subExp_41;
                }
                def _else_0(){
                    subExp_42 := (1,this,0);
                    return subExp_42;
                }
                def eval_if_0(){
                    subExp_46 := node_0 == 0;
                    subExp_47 := this.__H0.Q_out.size();
                    subExp_43 := subExp_46 && subExp_47;
                    if subExp_43 {
                        subExp_44 := _if_2();
                        return subExp_44;
                    } else {
                        subExp_45 := _else_0();
                        return subExp_45;
                    }
                }
                _ret_0 := eval_if_0();
                this = _ret_0[1];
                def _if_3(){
                    _tuple_1 := this.__H1.Q_out.takeFront();
                    pkt_0 := _tuple_1[0];
                    port_0 := _tuple_1[1];
                    def _if_4(){
                        subExp_arg_48 := 3;
                        this.__S3.Q_in.pushBack(pkt_0,subExp_arg_48);
                        subExp_49 := (1,this,0);
                        return subExp_49;
                    }
                    def _else_1(){
                        subExp_50 := (1,this,0);
                        return subExp_50;
                    }
                    def eval_if_1(){
                        subExp_51 := port_0 == 1;
                        if subExp_51 {
                            subExp_52 := _if_4();
                            return subExp_52;
                        } else {
                            subExp_53 := _else_1();
                            return subExp_53;
                        }
                    }
                    _ret_1 := eval_if_1();
                    this = _ret_1[1];
                    subExp_54 := (1,this,0);
                    return subExp_54;
                }
                def _else_1(){
                    subExp_55 := (1,this,0);
                    return subExp_55;
                }
                def eval_if_1(){
                    subExp_59 := node_0 == 1;
                    subExp_60 := this.__H1.Q_out.size();
                    subExp_56 := subExp_59 && subExp_60;
                    if subExp_56 {
                        subExp_57 := _if_3();
                        return subExp_57;
                    } else {
                        subExp_58 := _else_1();
                        return subExp_58;
                    }
                }
                _ret_1 := eval_if_1();
                this = _ret_1[1];
                def _if_4(){
                    _tuple_1 := this.__S0.Q_out.takeFront();
                    pkt_0 := _tuple_1[0];
                    port_0 := _tuple_1[1];
                    def _if_5(){
                        subExp_arg_61 := 1;
                        this.__H0.Q_in.pushBack(pkt_0,subExp_arg_61);
                        subExp_62 := (1,this,0);
                        return subExp_62;
                    }
                    def _else_2(){
                        subExp_63 := (1,this,0);
                        return subExp_63;
                    }
                    def eval_if_2(){
                        subExp_64 := port_0 == 1;
                        if subExp_64 {
                            subExp_65 := _if_5();
                            return subExp_65;
                        } else {
                            subExp_66 := _else_2();
                            return subExp_66;
                        }
                    }
                    _ret_2 := eval_if_2();
                    this = _ret_2[1];
                    def _if_6(){
                        subExp_arg_67 := 1;
                        this.__S1.Q_in.pushBack(pkt_0,subExp_arg_67);
                        subExp_68 := (1,this,0);
                        return subExp_68;
                    }
                    def _else_3(){
                        subExp_69 := (1,this,0);
                        return subExp_69;
                    }
                    def eval_if_3(){
                        subExp_70 := port_0 == 2;
                        if subExp_70 {
                            subExp_71 := _if_6();
                            return subExp_71;
                        } else {
                            subExp_72 := _else_3();
                            return subExp_72;
                        }
                    }
                    _ret_3 := eval_if_3();
                    this = _ret_3[1];
                    def _if_7(){
                        subExp_arg_73 := 1;
                        this.__S3.Q_in.pushBack(pkt_0,subExp_arg_73);
                        subExp_74 := (1,this,0);
                        return subExp_74;
                    }
                    def _else_4(){
                        subExp_75 := (1,this,0);
                        return subExp_75;
                    }
                    def eval_if_4(){
                        subExp_76 := port_0 == 3;
                        if subExp_76 {
                            subExp_77 := _if_7();
                            return subExp_77;
                        } else {
                            subExp_78 := _else_4();
                            return subExp_78;
                        }
                    }
                    _ret_4 := eval_if_4();
                    this = _ret_4[1];
                    def _if_8(){
                        subExp_arg_79 := 1;
                        this.__S2.Q_in.pushBack(pkt_0,subExp_arg_79);
                        subExp_80 := (1,this,0);
                        return subExp_80;
                    }
                    def _else_5(){
                        subExp_81 := (1,this,0);
                        return subExp_81;
                    }
                    def eval_if_5(){
                        subExp_82 := port_0 == 4;
                        if subExp_82 {
                            subExp_83 := _if_8();
                            return subExp_83;
                        } else {
                            subExp_84 := _else_5();
                            return subExp_84;
                        }
                    }
                    _ret_5 := eval_if_5();
                    this = _ret_5[1];
                    subExp_85 := (1,this,0);
                    return subExp_85;
                }
                def _else_2(){
                    subExp_86 := (1,this,0);
                    return subExp_86;
                }
                def eval_if_2(){
                    subExp_90 := node_0 == 2;
                    subExp_91 := this.__S0.Q_out.size();
                    subExp_87 := subExp_90 && subExp_91;
                    if subExp_87 {
                        subExp_88 := _if_4();
                        return subExp_88;
                    } else {
                        subExp_89 := _else_2();
                        return subExp_89;
                    }
                }
                _ret_2 := eval_if_2();
                this = _ret_2[1];
                def _if_5(){
                    _tuple_1 := this.__S1.Q_out.takeFront();
                    pkt_0 := _tuple_1[0];
                    port_0 := _tuple_1[1];
                    def _if_6(){
                        subExp_arg_92 := 2;
                        this.__S0.Q_in.pushBack(pkt_0,subExp_arg_92);
                        subExp_93 := (1,this,0);
                        return subExp_93;
                    }
                    def _else_3(){
                        subExp_94 := (1,this,0);
                        return subExp_94;
                    }
                    def eval_if_3(){
                        subExp_95 := port_0 == 1;
                        if subExp_95 {
                            subExp_96 := _if_6();
                            return subExp_96;
                        } else {
                            subExp_97 := _else_3();
                            return subExp_97;
                        }
                    }
                    _ret_3 := eval_if_3();
                    this = _ret_3[1];
                    def _if_7(){
                        subExp_arg_98 := 2;
                        this.__S2.Q_in.pushBack(pkt_0,subExp_arg_98);
                        subExp_99 := (1,this,0);
                        return subExp_99;
                    }
                    def _else_4(){
                        subExp_100 := (1,this,0);
                        return subExp_100;
                    }
                    def eval_if_4(){
                        subExp_101 := port_0 == 2;
                        if subExp_101 {
                            subExp_102 := _if_7();
                            return subExp_102;
                        } else {
                            subExp_103 := _else_4();
                            return subExp_103;
                        }
                    }
                    _ret_4 := eval_if_4();
                    this = _ret_4[1];
                    subExp_104 := (1,this,0);
                    return subExp_104;
                }
                def _else_3(){
                    subExp_105 := (1,this,0);
                    return subExp_105;
                }
                def eval_if_3(){
                    subExp_109 := node_0 == 3;
                    subExp_110 := this.__S1.Q_out.size();
                    subExp_106 := subExp_109 && subExp_110;
                    if subExp_106 {
                        subExp_107 := _if_5();
                        return subExp_107;
                    } else {
                        subExp_108 := _else_3();
                        return subExp_108;
                    }
                }
                _ret_3 := eval_if_3();
                this = _ret_3[1];
                def _if_6(){
                    _tuple_1 := this.__S2.Q_out.takeFront();
                    pkt_0 := _tuple_1[0];
                    port_0 := _tuple_1[1];
                    def _if_7(){
                        subExp_arg_111 := 4;
                        this.__S0.Q_in.pushBack(pkt_0,subExp_arg_111);
                        subExp_112 := (1,this,0);
                        return subExp_112;
                    }
                    def _else_4(){
                        subExp_113 := (1,this,0);
                        return subExp_113;
                    }
                    def eval_if_4(){
                        subExp_114 := port_0 == 1;
                        if subExp_114 {
                            subExp_115 := _if_7();
                            return subExp_115;
                        } else {
                            subExp_116 := _else_4();
                            return subExp_116;
                        }
                    }
                    _ret_4 := eval_if_4();
                    this = _ret_4[1];
                    def _if_8(){
                        subExp_arg_117 := 2;
                        this.__S1.Q_in.pushBack(pkt_0,subExp_arg_117);
                        subExp_118 := (1,this,0);
                        return subExp_118;
                    }
                    def _else_5(){
                        subExp_119 := (1,this,0);
                        return subExp_119;
                    }
                    def eval_if_5(){
                        subExp_120 := port_0 == 2;
                        if subExp_120 {
                            subExp_121 := _if_8();
                            return subExp_121;
                        } else {
                            subExp_122 := _else_5();
                            return subExp_122;
                        }
                    }
                    _ret_5 := eval_if_5();
                    this = _ret_5[1];
                    def _if_9(){
                        subExp_arg_123 := 2;
                        this.__S3.Q_in.pushBack(pkt_0,subExp_arg_123);
                        subExp_124 := (1,this,0);
                        return subExp_124;
                    }
                    def _else_6(){
                        subExp_125 := (1,this,0);
                        return subExp_125;
                    }
                    def eval_if_6(){
                        subExp_126 := port_0 == 3;
                        if subExp_126 {
                            subExp_127 := _if_9();
                            return subExp_127;
                        } else {
                            subExp_128 := _else_6();
                            return subExp_128;
                        }
                    }
                    _ret_6 := eval_if_6();
                    this = _ret_6[1];
                    subExp_129 := (1,this,0);
                    return subExp_129;
                }
                def _else_4(){
                    subExp_130 := (1,this,0);
                    return subExp_130;
                }
                def eval_if_4(){
                    subExp_134 := node_0 == 4;
                    subExp_135 := this.__S2.Q_out.size();
                    subExp_131 := subExp_134 && subExp_135;
                    if subExp_131 {
                        subExp_132 := _if_6();
                        return subExp_132;
                    } else {
                        subExp_133 := _else_4();
                        return subExp_133;
                    }
                }
                _ret_4 := eval_if_4();
                this = _ret_4[1];
                def _if_7(){
                    _tuple_1 := this.__S3.Q_out.takeFront();
                    pkt_0 := _tuple_1[0];
                    port_0 := _tuple_1[1];
                    def _if_8(){
                        subExp_arg_136 := 3;
                        this.__S0.Q_in.pushBack(pkt_0,subExp_arg_136);
                        subExp_137 := (1,this,0);
                        return subExp_137;
                    }
                    def _else_5(){
                        subExp_138 := (1,this,0);
                        return subExp_138;
                    }
                    def eval_if_5(){
                        subExp_139 := port_0 == 1;
                        if subExp_139 {
                            subExp_140 := _if_8();
                            return subExp_140;
                        } else {
                            subExp_141 := _else_5();
                            return subExp_141;
                        }
                    }
                    _ret_5 := eval_if_5();
                    this = _ret_5[1];
                    def _if_9(){
                        subExp_arg_142 := 3;
                        this.__S2.Q_in.pushBack(pkt_0,subExp_arg_142);
                        subExp_143 := (1,this,0);
                        return subExp_143;
                    }
                    def _else_6(){
                        subExp_144 := (1,this,0);
                        return subExp_144;
                    }
                    def eval_if_6(){
                        subExp_145 := port_0 == 2;
                        if subExp_145 {
                            subExp_146 := _if_9();
                            return subExp_146;
                        } else {
                            subExp_147 := _else_6();
                            return subExp_147;
                        }
                    }
                    _ret_6 := eval_if_6();
                    this = _ret_6[1];
                    def _if_10(){
                        subExp_arg_148 := 1;
                        this.__H1.Q_in.pushBack(pkt_0,subExp_arg_148);
                        subExp_149 := (1,this,0);
                        return subExp_149;
                    }
                    def _else_7(){
                        subExp_150 := (1,this,0);
                        return subExp_150;
                    }
                    def eval_if_7(){
                        subExp_151 := port_0 == 3;
                        if subExp_151 {
                            subExp_152 := _if_10();
                            return subExp_152;
                        } else {
                            subExp_153 := _else_7();
                            return subExp_153;
                        }
                    }
                    _ret_7 := eval_if_7();
                    this = _ret_7[1];
                    subExp_154 := (1,this,0);
                    return subExp_154;
                }
                def _else_5(){
                    subExp_155 := (1,this,0);
                    return subExp_155;
                }
                def eval_if_5(){
                    subExp_159 := node_0 == 5;
                    subExp_160 := this.__S3.Q_out.size();
                    subExp_156 := subExp_159 && subExp_160;
                    if subExp_156 {
                        subExp_157 := _if_7();
                        return subExp_157;
                    } else {
                        subExp_158 := _else_5();
                        return subExp_158;
                    }
                }
                _ret_5 := eval_if_5();
                this = _ret_5[1];
                subExp_161 := (1,this,0);
                return subExp_161;
            }
            def _else_0(){
                def _if_2(){
                    this.__H0.__run();
                    subExp_162 := (1,this,0);
                    return subExp_162;
                }
                def _else_1(){
                    subExp_163 := (1,this,0);
                    return subExp_163;
                }
                def eval_if_0(){
                    subExp_167 := node_0 == 0;
                    subExp_168 := this.__H0.Q_in.size();
                    subExp_164 := subExp_167 && subExp_168;
                    if subExp_164 {
                        subExp_165 := _if_2();
                        return subExp_165;
                    } else {
                        subExp_166 := _else_1();
                        return subExp_166;
                    }
                }
                _ret_0 := eval_if_0();
                this = _ret_0[1];
                def _if_3(){
                    this.__H1.__run();
                    subExp_169 := (1,this,0);
                    return subExp_169;
                }
                def _else_2(){
                    subExp_170 := (1,this,0);
                    return subExp_170;
                }
                def eval_if_1(){
                    subExp_174 := node_0 == 1;
                    subExp_175 := this.__H1.Q_in.size();
                    subExp_171 := subExp_174 && subExp_175;
                    if subExp_171 {
                        subExp_172 := _if_3();
                        return subExp_172;
                    } else {
                        subExp_173 := _else_2();
                        return subExp_173;
                    }
                }
                _ret_1 := eval_if_1();
                this = _ret_1[1];
                def _if_4(){
                    this.__S0.__run();
                    subExp_176 := (1,this,0);
                    return subExp_176;
                }
                def _else_3(){
                    subExp_177 := (1,this,0);
                    return subExp_177;
                }
                def eval_if_2(){
                    subExp_181 := node_0 == 2;
                    subExp_182 := this.__S0.Q_in.size();
                    subExp_178 := subExp_181 && subExp_182;
                    if subExp_178 {
                        subExp_179 := _if_4();
                        return subExp_179;
                    } else {
                        subExp_180 := _else_3();
                        return subExp_180;
                    }
                }
                _ret_2 := eval_if_2();
                this = _ret_2[1];
                def _if_5(){
                    this.__S1.__run();
                    subExp_183 := (1,this,0);
                    return subExp_183;
                }
                def _else_4(){
                    subExp_184 := (1,this,0);
                    return subExp_184;
                }
                def eval_if_3(){
                    subExp_188 := node_0 == 3;
                    subExp_189 := this.__S1.Q_in.size();
                    subExp_185 := subExp_188 && subExp_189;
                    if subExp_185 {
                        subExp_186 := _if_5();
                        return subExp_186;
                    } else {
                        subExp_187 := _else_4();
                        return subExp_187;
                    }
                }
                _ret_3 := eval_if_3();
                this = _ret_3[1];
                def _if_6(){
                    this.__S2.__run();
                    subExp_190 := (1,this,0);
                    return subExp_190;
                }
                def _else_5(){
                    subExp_191 := (1,this,0);
                    return subExp_191;
                }
                def eval_if_4(){
                    subExp_195 := node_0 == 4;
                    subExp_196 := this.__S2.Q_in.size();
                    subExp_192 := subExp_195 && subExp_196;
                    if subExp_192 {
                        subExp_193 := _if_6();
                        return subExp_193;
                    } else {
                        subExp_194 := _else_5();
                        return subExp_194;
                    }
                }
                _ret_4 := eval_if_4();
                this = _ret_4[1];
                def _if_7(){
                    this.__S3.__run();
                    subExp_197 := (1,this,0);
                    return subExp_197;
                }
                def _else_6(){
                    subExp_198 := (1,this,0);
                    return subExp_198;
                }
                def eval_if_5(){
                    subExp_202 := node_0 == 5;
                    subExp_203 := this.__S3.Q_in.size();
                    subExp_199 := subExp_202 && subExp_203;
                    if subExp_199 {
                        subExp_200 := _if_7();
                        return subExp_200;
                    } else {
                        subExp_201 := _else_6();
                        return subExp_201;
                    }
                }
                _ret_5 := eval_if_5();
                this = _ret_5[1];
                subExp_204 := (1,this,0);
                return subExp_204;
            }
            def eval_if_0(){
                if action_0 {
                    subExp_205 := _if_1();
                    return subExp_205;
                } else {
                    subExp_206 := _else_0();
                    return subExp_206;
                }
            }
            _ret_0 := eval_if_0();
            this = _ret_0[1];
            subExp_207 := (1,this,0);
            return subExp_207;
        }
        def _else_0(){
            subExp_208 := (1,this,0);
            return subExp_208;
        }
        def eval_if_0(){
            subExp_232 := this.__H0.Q_in.size();
            subExp_233 := this.__H0.Q_out.size();
            subExp_230 := subExp_232 || subExp_233;
            subExp_231 := this.__H1.Q_in.size();
            subExp_228 := subExp_230 || subExp_231;
            subExp_229 := this.__H1.Q_out.size();
            subExp_226 := subExp_228 || subExp_229;
            subExp_227 := this.__S0.Q_in.size();
            subExp_224 := subExp_226 || subExp_227;
            subExp_225 := this.__S0.Q_out.size();
            subExp_222 := subExp_224 || subExp_225;
            subExp_223 := this.__S1.Q_in.size();
            subExp_220 := subExp_222 || subExp_223;
            subExp_221 := this.__S1.Q_out.size();
            subExp_218 := subExp_220 || subExp_221;
            subExp_219 := this.__S2.Q_in.size();
            subExp_216 := subExp_218 || subExp_219;
            subExp_217 := this.__S2.Q_out.size();
            subExp_214 := subExp_216 || subExp_217;
            subExp_215 := this.__S3.Q_in.size();
            subExp_212 := subExp_214 || subExp_215;
            subExp_213 := this.__S3.Q_out.size();
            subExp_209 := subExp_212 || subExp_213;
            if subExp_209 {
                subExp_210 := _if_0();
                return subExp_210;
            } else {
                subExp_211 := _else_0();
                return subExp_211;
            }
        }
        _ret_0 := eval_if_0();
        this = _ret_0[1];
        subExp_234 := ();
        return subExp_234;
    }
}
illegal thing in data declaration:
__H0: __h0_ty , __H1: __h1_ty , __S0: __s0_ty , __S1: __s1_ty , __S2: __s2_ty , __S3: __s3_ty

translating meaning of __h0_ty
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
done with ifElseFunctional
Expression of type Identifier:
__h0_ty
 
Expression of type Identifier:
Q_in
 
Expression of type Identifier:
Queue
 
Expression of type VarDecl:
Q_in: Queue
 
Expression of type Identifier:
Q_out
 
Expression of type Identifier:
Queue
 
Expression of type VarDecl:
Q_out: Queue
 
Expression of type ABinaryExp:
Q_in: Queue , Q_out: Queue
 
Expression of type Identifier:
pkt_count
 
Expression of type Identifier:
ℝ
 
Expression of type VarDecl:
pkt_count: ℝ
 
Expression of type Identifier:
__h0_ty
 
Expression of type Identifier:
this
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this.Q_in
 
Expression of type Identifier:
Queue'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Queue'()
 
Expression of type ABinaryExp:
this.Q_in = Queue'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this.Q_out
 
Expression of type Identifier:
Queue'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Queue'()
 
Expression of type ABinaryExp:
this.Q_out = Queue'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
pkt_count
 
Expression of type FieldExp:
this.pkt_count
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
this.pkt_count = 0
 
Expression of type Identifier:
this
 
Expression of type ReturnExp:
return this
 
Expression of type FunctionDef:
def __h0_ty'(){
    this.Q_in = Queue'();
    this.Q_out = Queue'();
    this.pkt_count = 0;
    return this;
}
 
Expression of type Identifier:
__run
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
pushFront
 
Expression of type FieldExp:
this'.Q_in.pushFront
 
Expression of type Identifier:
Packet'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Packet'()
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
((Packet'(),0))
 
Expression of type CallExp:
this'.Q_in.pushFront((Packet'(),0))
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
pushFront
 
Expression of type FieldExp:
this'.Q_in.pushFront
 
Expression of type Identifier:
Packet'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Packet'()
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
((Packet'(),0))
 
Expression of type CallExp:
this'.Q_in.pushFront((Packet'(),0))
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
pkt_count
 
Expression of type FieldExp:
this'.pkt_count
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
pkt_count
 
Expression of type FieldExp:
this'.pkt_count
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
(this'.pkt_count + 1)
 
Expression of type ABinaryExp:
this'.pkt_count = (this'.pkt_count + 1)
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.Q_out
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.Q_out.pushBack
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.Q_in.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.Q_in.takeFront()
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.takeFront()[0]
 
Expression of type LiteralExp:
1
 
Expression of type TupleExp:
((this'.Q_in.takeFront()[0],1))
 
Expression of type CallExp:
this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.Q_in.pushFront((Packet'(),0));
    this'.pkt_count = (this'.pkt_count + 1);
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
popFront
 
Expression of type FieldExp:
this'.Q_in.popFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.Q_in.popFront()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
popFront
 
Expression of type FieldExp:
this'.Q_in.popFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.Q_in.popFront()
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    this'.Q_in.popFront();
    this'.Q_in.popFront();
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
pkt_count
 
Expression of type FieldExp:
this'.pkt_count
 
Expression of type LiteralExp:
3
 
Expression of type ABinaryExp:
(this'.pkt_count < 3)
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if (this'.pkt_count < 3) {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if (this'.pkt_count < 3) {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type TupleExp:
()
 
Expression of type ReturnExp:
return ()
 
Expression of type FunctionDef:
def __run(){
    this'.Q_in.pushFront((Packet'(),0));
    def _if(){
        this'.Q_in.pushFront((Packet'(),0));
        this'.pkt_count = (this'.pkt_count + 1);
        this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
        return (1,this',0);
    }
    def _else(){
        this'.Q_in.popFront();
        this'.Q_in.popFront();
        return (1,this',0);
    }
    def eval_if(){
        if (this'.pkt_count < 3) {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return ();
}
 
Expression of type CompoundDecl:
{
    Q_in: Queue , Q_out: Queue;
    pkt_count: ℝ;
    def __h0_ty'(){
        this.Q_in = Queue'();
        this.Q_out = Queue'();
        this.pkt_count = 0;
        return this;
    }
    def __run(){
        this'.Q_in.pushFront((Packet'(),0));
        def _if(){
            this'.Q_in.pushFront((Packet'(),0));
            this'.pkt_count = (this'.pkt_count + 1);
            this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
            return (1,this',0);
        }
        def _else(){
            this'.Q_in.popFront();
            this'.Q_in.popFront();
            return (1,this',0);
        }
        def eval_if(){
            if (this'.pkt_count < 3) {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return ();
    }
}
 
Expression of type DatDecl:
dat __h0_ty{
    Q_in: Queue , Q_out: Queue;
    pkt_count: ℝ;
    def __h0_ty'(){
        this.Q_in = Queue'();
        this.Q_out = Queue'();
        this.pkt_count = 0;
        return this;
    }
    def __run(){
        this'.Q_in.pushFront((Packet'(),0));
        def _if(){
            this'.Q_in.pushFront((Packet'(),0));
            this'.pkt_count = (this'.pkt_count + 1);
            this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
            return (1,this',0);
        }
        def _else(){
            this'.Q_in.popFront();
            this'.Q_in.popFront();
            return (1,this',0);
        }
        def eval_if(){
            if (this'.pkt_count < 3) {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return ();
    }
}
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
dat __h0_ty{
    Q_in: Queue , Q_out: Queue;
    pkt_count: ℝ;
    def __h0_ty'(){
        subExp_CallExp_1 := Queue();
        this.Q_in = subExp_CallExp_1;
        subExp_CallExp_2 := Queue();
        this.Q_out = subExp_CallExp_2;
        this.pkt_count = 0;
        return this;
    }
    def __run(){
        subExp_arg_3 := Packet();
        subExp_arg_4 := 0;
        this.Q_in.pushFront(subExp_arg_3,subExp_arg_4);
        def _if_0(){
            subExp_arg_5 := Packet();
            subExp_arg_6 := 0;
            this.Q_in.pushFront(subExp_arg_5,subExp_arg_6);
            subExp_7 := this.pkt_count;
            this.pkt_count = (subExp_7 + 1);
            subExp_10 := this.Q_in.takeFront();
            subExp_arg_8 := subExp_10[0];
            subExp_arg_9 := 1;
            this.Q_out.pushBack(subExp_arg_8,subExp_arg_9);
            subExp_11 := (1,this,0);
            return subExp_11;
        }
        def _else_0(){
            this.Q_in.popFront();
            this.Q_in.popFront();
            subExp_12 := (1,this,0);
            return subExp_12;
        }
        def eval_if_0(){
            subExp_16 := this.pkt_count;
            subExp_13 := (subExp_16 < 3);
            if subExp_13 {
                subExp_14 := _if_0();
                return subExp_14;
            } else {
                subExp_15 := _else_0();
                return subExp_15;
            }
        }
        _ret_0 := eval_if_0();
        this = _ret_0[1];
        subExp_17 := ();
        return subExp_17;
    }
}
illegal thing in data declaration:
Q_in: Queue , Q_out: Queue

translating meaning of Queue
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
Queue
 
Expression of type Identifier:
data
 
Expression of type Identifier:
Packet
 
Expression of type Identifier:
ℝ
 
Expression of type ABinaryExp:
(Packet × ℝ)
 
Expression of type IndexExp:
(Packet × ℝ)[]
 
Expression of type VarDecl:
data: (Packet × ℝ)[]
 
Expression of type Identifier:
Queue
 
Expression of type Identifier:
this
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this.data
 
Expression of type ArrayExp:
[]
 
Expression of type Identifier:
Packet
 
Expression of type Identifier:
ℝ
 
Expression of type ABinaryExp:
(Packet × ℝ)
 
Expression of type IndexExp:
(Packet × ℝ)[]
 
Expression of type TypeAnnotationExp:
([]: (Packet × ℝ)[])
 
Expression of type ABinaryExp:
this.data = ([]: (Packet × ℝ)[])
 
Expression of type Identifier:
this
 
Expression of type ReturnExp:
return this
 
Expression of type FunctionDef:
def Queue'(){
    this.data = ([]: (Packet × ℝ)[]);
    return this;
}
 
Expression of type Identifier:
pushFront
 
Expression of type Identifier:
x
 
Expression of type Parameter:
x: Packet × ℝ
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type Identifier:
x
 
Expression of type ArrayExp:
[x]
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type ABinaryExp:
[x] ~ this'.data
 
Expression of type ABinaryExp:
this'.data = [x] ~ this'.data
 
Expression of type TupleExp:
()
 
Expression of type ReturnExp:
return ()
 
Expression of type FunctionDef:
def pushFront(x: Packet × ℝ){
    this'.data = [x] ~ this'.data;
    return ();
}
 
Expression of type Identifier:
pushBack
 
Expression of type Identifier:
x
 
Expression of type Parameter:
x: Packet × ℝ
 
Expression of type Identifier:
_if
 
Expression of type LiteralExp:
2
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
()
 
Expression of type TupleExp:
(2,0,())
 
Expression of type ReturnExp:
return (2,0,())
 
Expression of type LiteralExp:
1
 
Expression of type TupleExp:
()
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,(),0)
 
Expression of type ReturnExp:
return (1,(),0)
 
Expression of type FunctionDef:
def _if(){
    return (2,0,());
    return (1,(),0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type TupleExp:
()
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,(),0)
 
Expression of type ReturnExp:
return (1,(),0)
 
Expression of type FunctionDef:
def _else(){
    return (1,(),0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.size()
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
this'.size() >= 2
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if this'.size() >= 2 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if this'.size() >= 2 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
_ret[0]
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
_ret[0] == 2
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
2
 
Expression of type IndexExp:
_ret[2]
 
Expression of type ReturnExp:
return _ret[2]
 
Expression of type IteExp:
if _ret[0] == 2 {
    return _ret[2];
}
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type Identifier:
x
 
Expression of type ArrayExp:
[x]
 
Expression of type ABinaryExp:
this'.data ~ [x]
 
Expression of type ABinaryExp:
this'.data = this'.data ~ [x]
 
Expression of type TupleExp:
()
 
Expression of type ReturnExp:
return ()
 
Expression of type FunctionDef:
def pushBack(x: Packet × ℝ){
    def _if(){
        return (2,0,());
        return (1,(),0);
    }
    def _else(){
        return (1,(),0);
    }
    def eval_if(){
        if this'.size() >= 2 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    if _ret[0] == 2 {
        return _ret[2];
    }
    this'.data = this'.data ~ [x];
    return ();
}
 
Expression of type Identifier:
takeFront
 
Expression of type Identifier:
r
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
front
 
Expression of type FieldExp:
this'.front
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.front()
 
Expression of type ABinaryExp:
r := this'.front()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
popFront
 
Expression of type FieldExp:
this'.popFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.popFront()
 
Expression of type Identifier:
r
 
Expression of type ReturnExp:
return r
 
Expression of type FunctionDef:
def takeFront(){
    r := this'.front();
    this'.popFront();
    return r;
}
 
Expression of type Identifier:
takeBack
 
Expression of type Identifier:
r
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.size()
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
this'.size() - 1
 
Expression of type IndexExp:
this'.data[this'.size() - 1]
 
Expression of type ABinaryExp:
r := this'.data[this'.size() - 1]
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type LiteralExp:
0
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.size()
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
this'.size() - 1
 
Expression of type SliceExp:
this'.data[0..this'.size() - 1]
 
Expression of type ABinaryExp:
this'.data = this'.data[0..this'.size() - 1]
 
Expression of type Identifier:
r
 
Expression of type ReturnExp:
return r
 
Expression of type FunctionDef:
def takeBack(){
    r := this'.data[this'.size() - 1];
    this'.data = this'.data[0..this'.size() - 1];
    return r;
}
 
Expression of type Identifier:
size
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type Identifier:
length
 
Expression of type FieldExp:
this'.data.length
 
Expression of type ReturnExp:
return this'.data.length
 
Expression of type FunctionDef:
def size(){
    return this'.data.length;
}
 
Expression of type Identifier:
front
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.data[0]
 
Expression of type ReturnExp:
return this'.data[0]
 
Expression of type FunctionDef:
def front(){
    return this'.data[0];
}
 
Expression of type Identifier:
dupFront
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
pushFront
 
Expression of type FieldExp:
this'.pushFront
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
front
 
Expression of type FieldExp:
this'.front
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
(this'.front())
 
Expression of type CallExp:
this'.pushFront(this'.front())
 
Expression of type TupleExp:
()
 
Expression of type ReturnExp:
return ()
 
Expression of type FunctionDef:
def dupFront(){
    this'.pushFront(this'.front());
    return ();
}
 
Expression of type Identifier:
popFront
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.size()
 
Expression of type SliceExp:
this'.data[1..this'.size()]
 
Expression of type ABinaryExp:
this'.data = this'.data[1..this'.size()]
 
Expression of type TupleExp:
()
 
Expression of type ReturnExp:
return ()
 
Expression of type FunctionDef:
def popFront(){
    this'.data = this'.data[1..this'.size()];
    return ();
}
 
Expression of type CompoundDecl:
{
    data: (Packet × ℝ)[];
    def Queue'(){
        this.data = ([]: (Packet × ℝ)[]);
        return this;
    }
    def pushFront(x: Packet × ℝ){
        this'.data = [x] ~ this'.data;
        return ();
    }
    def pushBack(x: Packet × ℝ){
        def _if(){
            return (2,0,());
            return (1,(),0);
        }
        def _else(){
            return (1,(),0);
        }
        def eval_if(){
            if this'.size() >= 2 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        if _ret[0] == 2 {
            return _ret[2];
        }
        this'.data = this'.data ~ [x];
        return ();
    }
    def takeFront(){
        r := this'.front();
        this'.popFront();
        return r;
    }
    def takeBack(){
        r := this'.data[this'.size() - 1];
        this'.data = this'.data[0..this'.size() - 1];
        return r;
    }
    def size(){
        return this'.data.length;
    }
    def front(){
        return this'.data[0];
    }
    def dupFront(){
        this'.pushFront(this'.front());
        return ();
    }
    def popFront(){
        this'.data = this'.data[1..this'.size()];
        return ();
    }
}
 
Expression of type DatDecl:
dat Queue{
    data: (Packet × ℝ)[];
    def Queue'(){
        this.data = ([]: (Packet × ℝ)[]);
        return this;
    }
    def pushFront(x: Packet × ℝ){
        this'.data = [x] ~ this'.data;
        return ();
    }
    def pushBack(x: Packet × ℝ){
        def _if(){
            return (2,0,());
            return (1,(),0);
        }
        def _else(){
            return (1,(),0);
        }
        def eval_if(){
            if this'.size() >= 2 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        if _ret[0] == 2 {
            return _ret[2];
        }
        this'.data = this'.data ~ [x];
        return ();
    }
    def takeFront(){
        r := this'.front();
        this'.popFront();
        return r;
    }
    def takeBack(){
        r := this'.data[this'.size() - 1];
        this'.data = this'.data[0..this'.size() - 1];
        return r;
    }
    def size(){
        return this'.data.length;
    }
    def front(){
        return this'.data[0];
    }
    def dupFront(){
        this'.pushFront(this'.front());
        return ();
    }
    def popFront(){
        this'.data = this'.data[1..this'.size()];
        return ();
    }
}
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
the following needs to be in a var:
()
the following needs to be in a var:
()
def outside of main:(normalized)
dat Queue{
    data: (Packet × ℝ)[];
    def Queue'(){
        this.data = ([]: (Packet × ℝ)[]);
        return this;
    }
    def pushFront(x_0: Packet × ℝ){
        subExp_1 := [x_0];
        subExp_2 := this.data;
        this.data = subExp_1 ~ subExp_2;
        subExp_3 := ();
        return subExp_3;
    }
    def pushBack(x_0: Packet × ℝ){
        def _if_0(){
            subExpArr_5 := ();
            subExp_4 := (2,0,subExpArr_5);
            return subExp_4;
        }
        def _else_0(){
            subExpArr_7 := ();
            subExp_6 := (1,subExpArr_7,0);
            return subExp_6;
        }
        def eval_if_0(){
            subExp_11 := this.size();
            subExp_8 := subExp_11 >= 2;
            if subExp_8 {
                subExp_9 := _if_0();
                return subExp_9;
            } else {
                subExp_10 := _else_0();
                return subExp_10;
            }
        }
        _ret_0 := eval_if_0();
        subExp_14 := _ret_0[0];
        subExp_12 := subExp_14 == 2;
        if subExp_12 {
            subExp_13 := _ret_0[2];
            return subExp_13;
        }
        subExp_15 := this.data;
        subExp_16 := [x_0];
        this.data = subExp_15 ~ subExp_16;
        subExp_17 := ();
        return subExp_17;
    }
    def takeFront(){
        r_0 := this.front();
        this.popFront();
        return r_0;
    }
    def takeBack(){
        subExp_18 := this.data;
        subExp_20 := this.size();
        subExpArr_19 := subExp_20 - 1;
        r_0 := subExp_18[subExpArr_19];
        subExp_21 := this.data;
        subExp_23 := this.size();
        subExp_22 := subExp_23 - 1;
        this.data = subExp_21[0..subExp_22];
        return r_0;
    }
    def size(){
        subExp_24 := this.data.length;
        return subExp_24;
    }
    def front(){
        subExp_26 := this.data;
        subExp_25 := subExp_26[0];
        return subExp_25;
    }
    def dupFront(){
        subExp_27 := (this.front());
        this.pushFront(subExp_27);
        subExp_28 := ();
        return subExp_28;
    }
    def popFront(){
        subExp_29 := this.data;
        subExp_30 := this.size();
        this.data = subExp_29[1..subExp_30];
        subExp_31 := ();
        return subExp_31;
    }
}
var Queue = function(){
    var this_v0 = {};
    var this_v1 = _.assign({},this_v0,{data: []});
    return {res:this_v1,obj:this_v1};
}
var Queue_pushFront = function(this_v0, x_0){
    var subExp_1=[x_0];
    var subExp_2=this_v0.data;
    var this_v1 = _.assign({},this_v0,{data: [].concat(subExp_1,subExp_2)});
    var subExp_3=[];
    return {res:subExp_3,obj:this_v1};
}
var Queue_pushBack = function(this_v0, x_0){
    var _if_0 = function(){
        var subExpArr_5=[];
        var subExp_4=[2,0,subExpArr_5];
        return subExp_4;
    }
    var _else_0 = function(){
        var subExpArr_7=[];
        var subExp_6=[1,subExpArr_7,0];
        return subExp_6;
    }
    var eval_if_0 = function(){
        var tmp = Queue_size(this_v0,[]);
        var subExp_11 = tmp.res;
        var this_v1 = tmp.obj;
        var subExp_8=subExp_11>=2;
        if(subExp_8){
            var subExp_9=_if_0([]);
            return subExp_9;
        }
        else{
            var subExp_10=_else_0([]);
            return subExp_10;
        }
    }
    var _ret_0=eval_if_0([]);
    var subExp_14=_ret_0[+0];
    var subExp_12=subExp_14==2;
    if(subExp_12){
        var subExp_13=_ret_0[+2];
        return {res:subExp_13,obj:this_v0};
    }
    var subExp_15=this_v0.data;
    var subExp_16=[x_0];
    var this_v1 = _.assign({},this_v0,{data: [].concat(subExp_15,subExp_16)});
    var subExp_17=[];
    return {res:subExp_17,obj:this_v1};
}
var Queue_takeFront = function(this_v0){
    var tmp = Queue_front(this_v0,[]);
    var r_0 = tmp.res;
    var this_v1 = tmp.obj;
    var this_v2 = Queue_popFront(this_v1,[]).obj;
    return {res:r_0,obj:this_v2};
}
var Queue_takeBack = function(this_v0){
    var subExp_18=this_v0.data;
    var tmp = Queue_size(this_v0,[]);
    var subExp_20 = tmp.res;
    var this_v1 = tmp.obj;
    var subExpArr_19=subExp_20-1;
    var r_0=subExp_18[+subExpArr_19];
    var subExp_21=this_v1.data;
    var tmp = Queue_size(this_v1,[]);
    var subExp_23 = tmp.res;
    var this_v2 = tmp.obj;
    var subExp_22=subExp_23-1;
    var this_v3 = _.assign({},this_v2,{data: ([].concat(subExp_21)).slice(0,subExp_22)});
    return {res:r_0,obj:this_v3};
}
var Queue_size = function(this_v0){
    var subExp_24=this_v0.data.length;
    return {res:subExp_24,obj:this_v0};
}
var Queue_front = function(this_v0){
    var subExp_26=this_v0.data;
    var subExp_25=subExp_26[+0];
    return {res:subExp_25,obj:this_v0};
}
var Queue_dupFront = function(this_v0){
    var tmp = Queue_front(this_v0,[]);
    var subExp_27 = tmp.res;
    var this_v1 = tmp.obj;
    var this_v2 = Queue_pushFront(this_v1,subExp_27).obj;
    var subExp_28=[];
    return {res:subExp_28,obj:this_v2};
}
var Queue_popFront = function(this_v0){
    var subExp_29=this_v0.data;
    var tmp = Queue_size(this_v0,[]);
    var subExp_30 = tmp.res;
    var this_v1 = tmp.obj;
    var this_v2 = _.assign({},this_v1,{data: ([].concat(subExp_29)).slice(1,subExp_30)});
    var subExp_31=[];
    return {res:subExp_31,obj:this_v2};
}

translating meaning of Packet
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
Packet
 
Expression of type Identifier:
Packet
 
Expression of type Identifier:
this
 
Expression of type ReturnExp:
return this
 
Expression of type FunctionDef:
def Packet'(){
    return this;
}
 
Expression of type CompoundDecl:
{
    def Packet'(){
        return this;
    }
}
 
Expression of type DatDecl:
dat Packet{
    def Packet'(){
        return this;
    }
}
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
dat Packet{
    def Packet'(){
        return this;
    }
}
var Packet = function(){
    var this_v0 = {};
    return {res:this_v0,obj:this_v0};
}

var Packet = function(){
    var this_v0 = {};
    return {res:this_v0,obj:this_v0};
}
var Queue = function(){
    var this_v0 = {};
    var this_v1 = _.assign({},this_v0,{data: []});
    return {res:this_v1,obj:this_v1};
}
var Queue_pushFront = function(this_v0, x_0){
    var subExp_1=[x_0];
    var subExp_2=this_v0.data;
    var this_v1 = _.assign({},this_v0,{data: [].concat(subExp_1,subExp_2)});
    var subExp_3=[];
    return {res:subExp_3,obj:this_v1};
}
var Queue_pushBack = function(this_v0, x_0){
    var _if_0 = function(){
        var subExpArr_5=[];
        var subExp_4=[2,0,subExpArr_5];
        return subExp_4;
    }
    var _else_0 = function(){
        var subExpArr_7=[];
        var subExp_6=[1,subExpArr_7,0];
        return subExp_6;
    }
    var eval_if_0 = function(){
        var tmp = Queue_size(this_v0,[]);
        var subExp_11 = tmp.res;
        var this_v1 = tmp.obj;
        var subExp_8=subExp_11>=2;
        if(subExp_8){
            var subExp_9=_if_0([]);
            return subExp_9;
        }
        else{
            var subExp_10=_else_0([]);
            return subExp_10;
        }
    }
    var _ret_0=eval_if_0([]);
    var subExp_14=_ret_0[+0];
    var subExp_12=subExp_14==2;
    if(subExp_12){
        var subExp_13=_ret_0[+2];
        return {res:subExp_13,obj:this_v0};
    }
    var subExp_15=this_v0.data;
    var subExp_16=[x_0];
    var this_v1 = _.assign({},this_v0,{data: [].concat(subExp_15,subExp_16)});
    var subExp_17=[];
    return {res:subExp_17,obj:this_v1};
}
var Queue_takeFront = function(this_v0){
    var tmp = Queue_front(this_v0,[]);
    var r_0 = tmp.res;
    var this_v1 = tmp.obj;
    var this_v2 = Queue_popFront(this_v1,[]).obj;
    return {res:r_0,obj:this_v2};
}
var Queue_takeBack = function(this_v0){
    var subExp_18=this_v0.data;
    var tmp = Queue_size(this_v0,[]);
    var subExp_20 = tmp.res;
    var this_v1 = tmp.obj;
    var subExpArr_19=subExp_20-1;
    var r_0=subExp_18[+subExpArr_19];
    var subExp_21=this_v1.data;
    var tmp = Queue_size(this_v1,[]);
    var subExp_23 = tmp.res;
    var this_v2 = tmp.obj;
    var subExp_22=subExp_23-1;
    var this_v3 = _.assign({},this_v2,{data: ([].concat(subExp_21)).slice(0,subExp_22)});
    return {res:r_0,obj:this_v3};
}
var Queue_size = function(this_v0){
    var subExp_24=this_v0.data.length;
    return {res:subExp_24,obj:this_v0};
}
var Queue_front = function(this_v0){
    var subExp_26=this_v0.data;
    var subExp_25=subExp_26[+0];
    return {res:subExp_25,obj:this_v0};
}
var Queue_dupFront = function(this_v0){
    var tmp = Queue_front(this_v0,[]);
    var subExp_27 = tmp.res;
    var this_v1 = tmp.obj;
    var this_v2 = Queue_pushFront(this_v1,subExp_27).obj;
    var subExp_28=[];
    return {res:subExp_28,obj:this_v2};
}
var Queue_popFront = function(this_v0){
    var subExp_29=this_v0.data;
    var tmp = Queue_size(this_v0,[]);
    var subExp_30 = tmp.res;
    var this_v1 = tmp.obj;
    var this_v2 = _.assign({},this_v1,{data: ([].concat(subExp_29)).slice(1,subExp_30)});
    var subExp_31=[];
    return {res:subExp_31,obj:this_v2};
}
var __h0_ty = function(){
    var this_v0 = {};
    var subExp_CallExp_1_v0 = Queue([]).obj;
    var this_v1 = _.assign({},this_v0,{Q_in: subExp_CallExp_1_v0});
    var subExp_CallExp_2_v0 = Queue([]).obj;
    var this_v2 = _.assign({},this_v1,{Q_out: subExp_CallExp_2_v0});
    var this_v3 = _.assign({},this_v2,{pkt_count: 0});
    return {res:this_v3,obj:this_v3};
}
var __h0_ty___run = function(this_v0){
    var subExp_arg_3_v0 = Packet([]).obj;
    var subExp_arg_4=0;
    var this_v1 = _.assign({},this_v0,{Q_in: Queue_pushFront(this_v0.Q_in,[subExp_arg_3_v0,subExp_arg_4]).obj});
    var _if_0 = function(){
        var subExp_arg_5_v0 = Packet([]).obj;
        var subExp_arg_6=0;
        var this_v2 = _.assign({},this_v1,{Q_in: Queue_pushFront(this_v1.Q_in,[subExp_arg_5_v0,subExp_arg_6]).obj});
        var subExp_7=this_v2.pkt_count;
        var this_v3 = _.assign({},this_v2,{pkt_count: (subExp_7+1)});
        var tmp = Queue_takeFront(this_v3.Q_in,[]);
        var subExp_10 = tmp.res;
        var this_v4 = _.assign({},this_v3,{Q_in: tmp.obj});
        var subExp_arg_8=subExp_10[+0];
        var subExp_arg_9=1;
        var this_v5 = _.assign({},this_v4,{Q_out: Queue_pushBack(this_v4.Q_out,[subExp_arg_8,subExp_arg_9]).obj});
        var subExp_11=[1,this_v5,0];
        return subExp_11;
    }
    var _else_0 = function(){
        var this_v2 = _.assign({},this_v1,{Q_in: Queue_popFront(this_v1.Q_in,[]).obj});
        var this_v3 = _.assign({},this_v2,{Q_in: Queue_popFront(this_v2.Q_in,[]).obj});
        var subExp_12=[1,this_v3,0];
        return subExp_12;
    }
    var eval_if_0 = function(){
        var subExp_16=this_v1.pkt_count;
        var subExp_13=(subExp_16<3);
        if(subExp_13){
            var subExp_14=_if_0([]);
            return subExp_14;
        }
        else{
            var subExp_15=_else_0([]);
            return subExp_15;
        }
    }
    var _ret_0=eval_if_0([]);
    var this_v1=_ret_0[+1];
    var subExp_17=[];
    return {res:subExp_17,obj:this_v1};
}

translating meaning of __h1_ty
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
__h1_ty
 
Expression of type Identifier:
Q_in
 
Expression of type Identifier:
Queue
 
Expression of type VarDecl:
Q_in: Queue
 
Expression of type Identifier:
Q_out
 
Expression of type Identifier:
Queue
 
Expression of type VarDecl:
Q_out: Queue
 
Expression of type ABinaryExp:
Q_in: Queue , Q_out: Queue
 
Expression of type Identifier:
pkt_count
 
Expression of type Identifier:
ℝ
 
Expression of type VarDecl:
pkt_count: ℝ
 
Expression of type Identifier:
__h1_ty
 
Expression of type Identifier:
this
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this.Q_in
 
Expression of type Identifier:
Queue'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Queue'()
 
Expression of type ABinaryExp:
this.Q_in = Queue'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this.Q_out
 
Expression of type Identifier:
Queue'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Queue'()
 
Expression of type ABinaryExp:
this.Q_out = Queue'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
pkt_count
 
Expression of type FieldExp:
this.pkt_count
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
this.pkt_count = 0
 
Expression of type Identifier:
this
 
Expression of type ReturnExp:
return this
 
Expression of type FunctionDef:
def __h1_ty'(){
    this.Q_in = Queue'();
    this.Q_out = Queue'();
    this.pkt_count = 0;
    return this;
}
 
Expression of type Identifier:
__run
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
pkt_count
 
Expression of type FieldExp:
this'.pkt_count
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
pkt_count
 
Expression of type FieldExp:
this'.pkt_count
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
(this'.pkt_count + 1)
 
Expression of type ABinaryExp:
this'.pkt_count = (this'.pkt_count + 1)
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
popFront
 
Expression of type FieldExp:
this'.Q_in.popFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.Q_in.popFront()
 
Expression of type TupleExp:
()
 
Expression of type ReturnExp:
return ()
 
Expression of type FunctionDef:
def __run(){
    this'.pkt_count = (this'.pkt_count + 1);
    this'.Q_in.popFront();
    return ();
}
 
Expression of type CompoundDecl:
{
    Q_in: Queue , Q_out: Queue;
    pkt_count: ℝ;
    def __h1_ty'(){
        this.Q_in = Queue'();
        this.Q_out = Queue'();
        this.pkt_count = 0;
        return this;
    }
    def __run(){
        this'.pkt_count = (this'.pkt_count + 1);
        this'.Q_in.popFront();
        return ();
    }
}
 
Expression of type DatDecl:
dat __h1_ty{
    Q_in: Queue , Q_out: Queue;
    pkt_count: ℝ;
    def __h1_ty'(){
        this.Q_in = Queue'();
        this.Q_out = Queue'();
        this.pkt_count = 0;
        return this;
    }
    def __run(){
        this'.pkt_count = (this'.pkt_count + 1);
        this'.Q_in.popFront();
        return ();
    }
}
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
dat __h1_ty{
    Q_in: Queue , Q_out: Queue;
    pkt_count: ℝ;
    def __h1_ty'(){
        subExp_CallExp_1 := Queue();
        this.Q_in = subExp_CallExp_1;
        subExp_CallExp_2 := Queue();
        this.Q_out = subExp_CallExp_2;
        this.pkt_count = 0;
        return this;
    }
    def __run(){
        subExp_3 := this.pkt_count;
        this.pkt_count = (subExp_3 + 1);
        this.Q_in.popFront();
        subExp_4 := ();
        return subExp_4;
    }
}
illegal thing in data declaration:
Q_in: Queue , Q_out: Queue

var __h1_ty = function(){
    var this_v0 = {};
    var subExp_CallExp_1_v0 = Queue([]).obj;
    var this_v1 = _.assign({},this_v0,{Q_in: subExp_CallExp_1_v0});
    var subExp_CallExp_2_v0 = Queue([]).obj;
    var this_v2 = _.assign({},this_v1,{Q_out: subExp_CallExp_2_v0});
    var this_v3 = _.assign({},this_v2,{pkt_count: 0});
    return {res:this_v3,obj:this_v3};
}
var __h1_ty___run = function(this_v0){
    var subExp_3=this_v0.pkt_count;
    var this_v1 = _.assign({},this_v0,{pkt_count: (subExp_3+1)});
    var this_v2 = _.assign({},this_v1,{Q_in: Queue_popFront(this_v1.Q_in,[]).obj});
    var subExp_4=[];
    return {res:subExp_4,obj:this_v2};
}

translating meaning of __s0_ty
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
done with ifElseFunctional
Expression of type Identifier:
__s0_ty
 
Expression of type Identifier:
Q_in
 
Expression of type Identifier:
Queue
 
Expression of type VarDecl:
Q_in: Queue
 
Expression of type Identifier:
Q_out
 
Expression of type Identifier:
Queue
 
Expression of type VarDecl:
Q_out: Queue
 
Expression of type ABinaryExp:
Q_in: Queue , Q_out: Queue
 
Expression of type Identifier:
route1
 
Expression of type Identifier:
ℝ
 
Expression of type VarDecl:
route1: ℝ
 
Expression of type Identifier:
route2
 
Expression of type Identifier:
ℝ
 
Expression of type VarDecl:
route2: ℝ
 
Expression of type ABinaryExp:
route1: ℝ , route2: ℝ
 
Expression of type Identifier:
route3
 
Expression of type Identifier:
ℝ
 
Expression of type VarDecl:
route3: ℝ
 
Expression of type ABinaryExp:
route1: ℝ , route2: ℝ , route3: ℝ
 
Expression of type Identifier:
shortest1
 
Expression of type Identifier:
ℝ
 
Expression of type VarDecl:
shortest1: ℝ
 
Expression of type ABinaryExp:
route1: ℝ , route2: ℝ , route3: ℝ , shortest1: ℝ
 
Expression of type Identifier:
shortest2
 
Expression of type Identifier:
ℝ
 
Expression of type VarDecl:
shortest2: ℝ
 
Expression of type ABinaryExp:
route1: ℝ , route2: ℝ , route3: ℝ , shortest1: ℝ , shortest2: ℝ
 
Expression of type Identifier:
shortest3
 
Expression of type Identifier:
ℝ
 
Expression of type VarDecl:
shortest3: ℝ
 
Expression of type ABinaryExp:
route1: ℝ , route2: ℝ , route3: ℝ , shortest1: ℝ , shortest2: ℝ , shortest3: ℝ
 
Expression of type Identifier:
nshortest
 
Expression of type Identifier:
ℝ
 
Expression of type VarDecl:
nshortest: ℝ
 
Expression of type ABinaryExp:
route1: ℝ , route2: ℝ , route3: ℝ , shortest1: ℝ , shortest2: ℝ , shortest3: ℝ , nshortest: ℝ
 
Expression of type Identifier:
which
 
Expression of type Identifier:
ℝ
 
Expression of type VarDecl:
which: ℝ
 
Expression of type ABinaryExp:
route1: ℝ , route2: ℝ , route3: ℝ , shortest1: ℝ , shortest2: ℝ , shortest3: ℝ , nshortest: ℝ , which: ℝ
 
Expression of type Identifier:
__s0_ty
 
Expression of type Identifier:
this
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this.Q_in
 
Expression of type Identifier:
Queue'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Queue'()
 
Expression of type ABinaryExp:
this.Q_in = Queue'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this.Q_out
 
Expression of type Identifier:
Queue'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Queue'()
 
Expression of type ABinaryExp:
this.Q_out = Queue'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
route1
 
Expression of type FieldExp:
this.route1
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
this.route1 = 0
 
Expression of type Identifier:
this
 
Expression of type Identifier:
route2
 
Expression of type FieldExp:
this.route2
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
this.route2 = 0
 
Expression of type Identifier:
this
 
Expression of type Identifier:
route3
 
Expression of type FieldExp:
this.route3
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
this.route3 = 0
 
Expression of type Identifier:
this
 
Expression of type Identifier:
shortest1
 
Expression of type FieldExp:
this.shortest1
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
this.shortest1 = 0
 
Expression of type Identifier:
this
 
Expression of type Identifier:
shortest2
 
Expression of type FieldExp:
this.shortest2
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
this.shortest2 = 0
 
Expression of type Identifier:
this
 
Expression of type Identifier:
shortest3
 
Expression of type FieldExp:
this.shortest3
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
this.shortest3 = 0
 
Expression of type Identifier:
this
 
Expression of type Identifier:
nshortest
 
Expression of type FieldExp:
this.nshortest
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
this.nshortest = 0
 
Expression of type Identifier:
this
 
Expression of type Identifier:
which
 
Expression of type FieldExp:
this.which
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
this.which = 0
 
Expression of type Identifier:
this
 
Expression of type ReturnExp:
return this
 
Expression of type FunctionDef:
def __s0_ty'(){
    this.Q_in = Queue'();
    this.Q_out = Queue'();
    this.route1 = 0;
    this.route2 = 0;
    this.route3 = 0;
    this.shortest1 = 0;
    this.shortest2 = 0;
    this.shortest3 = 0;
    this.nshortest = 0;
    this.which = 0;
    return this;
}
 
Expression of type Identifier:
__run
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
route1
 
Expression of type FieldExp:
this'.route1
 
Expression of type LiteralExp:
1
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
(1 + 1)
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
((1 + 1) + 1)
 
Expression of type ABinaryExp:
this'.route1 = ((1 + 1) + 1)
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
route2
 
Expression of type FieldExp:
this'.route2
 
Expression of type LiteralExp:
3
 
Expression of type ABinaryExp:
this'.route2 = 3
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
route3
 
Expression of type FieldExp:
this'.route3
 
Expression of type LiteralExp:
2
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
(2 + 1)
 
Expression of type ABinaryExp:
this'.route3 = (2 + 1)
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
shortest1
 
Expression of type FieldExp:
this'.shortest1
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
route1
 
Expression of type FieldExp:
this'.route1
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
route2
 
Expression of type FieldExp:
this'.route2
 
Expression of type ABinaryExp:
(this'.route1 <= this'.route2)
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
route2
 
Expression of type FieldExp:
this'.route2
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
route3
 
Expression of type FieldExp:
this'.route3
 
Expression of type ABinaryExp:
(this'.route2 <= this'.route3)
 
Expression of type ABinaryExp:
((this'.route1 <= this'.route2) && (this'.route2 <= this'.route3))
 
Expression of type ABinaryExp:
this'.shortest1 = ((this'.route1 <= this'.route2) && (this'.route2 <= this'.route3))
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
shortest2
 
Expression of type FieldExp:
this'.shortest2
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
route2
 
Expression of type FieldExp:
this'.route2
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
route1
 
Expression of type FieldExp:
this'.route1
 
Expression of type ABinaryExp:
(this'.route2 <= this'.route1)
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
route2
 
Expression of type FieldExp:
this'.route2
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
route3
 
Expression of type FieldExp:
this'.route3
 
Expression of type ABinaryExp:
(this'.route2 <= this'.route3)
 
Expression of type ABinaryExp:
((this'.route2 <= this'.route1) && (this'.route2 <= this'.route3))
 
Expression of type ABinaryExp:
this'.shortest2 = ((this'.route2 <= this'.route1) && (this'.route2 <= this'.route3))
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
shortest3
 
Expression of type FieldExp:
this'.shortest3
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
route3
 
Expression of type FieldExp:
this'.route3
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
route1
 
Expression of type FieldExp:
this'.route1
 
Expression of type ABinaryExp:
(this'.route3 <= this'.route1)
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
route3
 
Expression of type FieldExp:
this'.route3
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
route2
 
Expression of type FieldExp:
this'.route2
 
Expression of type ABinaryExp:
(this'.route3 <= this'.route2)
 
Expression of type ABinaryExp:
((this'.route3 <= this'.route1) && (this'.route3 <= this'.route2))
 
Expression of type ABinaryExp:
this'.shortest3 = ((this'.route3 <= this'.route1) && (this'.route3 <= this'.route2))
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
nshortest
 
Expression of type FieldExp:
this'.nshortest
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
shortest1
 
Expression of type FieldExp:
this'.shortest1
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
shortest2
 
Expression of type FieldExp:
this'.shortest2
 
Expression of type ABinaryExp:
(this'.shortest1 + this'.shortest2)
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
shortest3
 
Expression of type FieldExp:
this'.shortest3
 
Expression of type ABinaryExp:
((this'.shortest1 + this'.shortest2) + this'.shortest3)
 
Expression of type ABinaryExp:
this'.nshortest = ((this'.shortest1 + this'.shortest2) + this'.shortest3)
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
which
 
Expression of type FieldExp:
this'.which
 
Expression of type Identifier:
uniformInt
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
nshortest
 
Expression of type FieldExp:
this'.nshortest
 
Expression of type TupleExp:
(1,this'.nshortest)
 
Expression of type CallExp:
uniformInt(1,this'.nshortest)
 
Expression of type ABinaryExp:
this'.which = uniformInt(1,this'.nshortest)
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.Q_out
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.Q_out.pushBack
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.Q_in.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.Q_in.takeFront()
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.takeFront()[0]
 
Expression of type LiteralExp:
2
 
Expression of type TupleExp:
((this'.Q_in.takeFront()[0],2))
 
Expression of type CallExp:
this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.Q_out
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.Q_out.pushBack
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.Q_in.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.Q_in.takeFront()
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.takeFront()[0]
 
Expression of type LiteralExp:
3
 
Expression of type TupleExp:
((this'.Q_in.takeFront()[0],3))
 
Expression of type CallExp:
this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.Q_out
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.Q_out.pushBack
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.Q_in.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.Q_in.takeFront()
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.takeFront()[0]
 
Expression of type LiteralExp:
4
 
Expression of type TupleExp:
((this'.Q_in.takeFront()[0],4))
 
Expression of type CallExp:
this'.Q_out.pushBack((this'.Q_in.takeFront()[0],4))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],4));
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
which
 
Expression of type FieldExp:
this'.which
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
shortest1
 
Expression of type FieldExp:
this'.shortest1
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
shortest2
 
Expression of type FieldExp:
this'.shortest2
 
Expression of type ABinaryExp:
(this'.shortest1 + this'.shortest2)
 
Expression of type ABinaryExp:
(this'.which == (this'.shortest1 + this'.shortest2))
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if (this'.which == (this'.shortest1 + this'.shortest2)) {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if (this'.which == (this'.shortest1 + this'.shortest2)) {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    def _if(){
        this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
        return (1,this',0);
    }
    def _else(){
        this'.Q_out.pushBack((this'.Q_in.takeFront()[0],4));
        return (1,this',0);
    }
    def eval_if(){
        if (this'.which == (this'.shortest1 + this'.shortest2)) {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
which
 
Expression of type FieldExp:
this'.which
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
shortest1
 
Expression of type FieldExp:
this'.shortest1
 
Expression of type ABinaryExp:
(this'.which == this'.shortest1)
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if (this'.which == this'.shortest1) {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if (this'.which == this'.shortest1) {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.route1 = ((1 + 1) + 1);
    this'.route2 = 3;
    this'.route3 = (2 + 1);
    this'.shortest1 = ((this'.route1 <= this'.route2) && (this'.route2 <= this'.route3));
    this'.shortest2 = ((this'.route2 <= this'.route1) && (this'.route2 <= this'.route3));
    this'.shortest3 = ((this'.route3 <= this'.route1) && (this'.route3 <= this'.route2));
    this'.nshortest = ((this'.shortest1 + this'.shortest2) + this'.shortest3);
    this'.which = uniformInt(1,this'.nshortest);
    def _if(){
        this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
        return (1,this',0);
    }
    def _else(){
        def _if(){
            this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
            return (1,this',0);
        }
        def _else(){
            this'.Q_out.pushBack((this'.Q_in.takeFront()[0],4));
            return (1,this',0);
        }
        def eval_if(){
            if (this'.which == (this'.shortest1 + this'.shortest2)) {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def eval_if(){
        if (this'.which == this'.shortest1) {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.Q_in.data
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.data[0]
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
this'.Q_in.data[0][1]
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
(this'.Q_in.data[0][1] == 1)
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if (this'.Q_in.data[0][1] == 1) {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if (this'.Q_in.data[0][1] == 1) {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type TupleExp:
()
 
Expression of type ReturnExp:
return ()
 
Expression of type FunctionDef:
def __run(){
    def _if(){
        this'.route1 = ((1 + 1) + 1);
        this'.route2 = 3;
        this'.route3 = (2 + 1);
        this'.shortest1 = ((this'.route1 <= this'.route2) && (this'.route2 <= this'.route3));
        this'.shortest2 = ((this'.route2 <= this'.route1) && (this'.route2 <= this'.route3));
        this'.shortest3 = ((this'.route3 <= this'.route1) && (this'.route3 <= this'.route2));
        this'.nshortest = ((this'.shortest1 + this'.shortest2) + this'.shortest3);
        this'.which = uniformInt(1,this'.nshortest);
        def _if(){
            this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
            return (1,this',0);
        }
        def _else(){
            def _if(){
                this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
                return (1,this',0);
            }
            def _else(){
                this'.Q_out.pushBack((this'.Q_in.takeFront()[0],4));
                return (1,this',0);
            }
            def eval_if(){
                if (this'.which == (this'.shortest1 + this'.shortest2)) {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def eval_if(){
            if (this'.which == this'.shortest1) {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if (this'.Q_in.data[0][1] == 1) {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return ();
}
 
Expression of type CompoundDecl:
{
    Q_in: Queue , Q_out: Queue;
    route1: ℝ , route2: ℝ , route3: ℝ , shortest1: ℝ , shortest2: ℝ , shortest3: ℝ , nshortest: ℝ , which: ℝ;
    def __s0_ty'(){
        this.Q_in = Queue'();
        this.Q_out = Queue'();
        this.route1 = 0;
        this.route2 = 0;
        this.route3 = 0;
        this.shortest1 = 0;
        this.shortest2 = 0;
        this.shortest3 = 0;
        this.nshortest = 0;
        this.which = 0;
        return this;
    }
    def __run(){
        def _if(){
            this'.route1 = ((1 + 1) + 1);
            this'.route2 = 3;
            this'.route3 = (2 + 1);
            this'.shortest1 = ((this'.route1 <= this'.route2) && (this'.route2 <= this'.route3));
            this'.shortest2 = ((this'.route2 <= this'.route1) && (this'.route2 <= this'.route3));
            this'.shortest3 = ((this'.route3 <= this'.route1) && (this'.route3 <= this'.route2));
            this'.nshortest = ((this'.shortest1 + this'.shortest2) + this'.shortest3);
            this'.which = uniformInt(1,this'.nshortest);
            def _if(){
                this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
                return (1,this',0);
            }
            def _else(){
                def _if(){
                    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
                    return (1,this',0);
                }
                def _else(){
                    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],4));
                    return (1,this',0);
                }
                def eval_if(){
                    if (this'.which == (this'.shortest1 + this'.shortest2)) {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def eval_if(){
                if (this'.which == this'.shortest1) {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if (this'.Q_in.data[0][1] == 1) {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return ();
    }
}
 
Expression of type DatDecl:
dat __s0_ty{
    Q_in: Queue , Q_out: Queue;
    route1: ℝ , route2: ℝ , route3: ℝ , shortest1: ℝ , shortest2: ℝ , shortest3: ℝ , nshortest: ℝ , which: ℝ;
    def __s0_ty'(){
        this.Q_in = Queue'();
        this.Q_out = Queue'();
        this.route1 = 0;
        this.route2 = 0;
        this.route3 = 0;
        this.shortest1 = 0;
        this.shortest2 = 0;
        this.shortest3 = 0;
        this.nshortest = 0;
        this.which = 0;
        return this;
    }
    def __run(){
        def _if(){
            this'.route1 = ((1 + 1) + 1);
            this'.route2 = 3;
            this'.route3 = (2 + 1);
            this'.shortest1 = ((this'.route1 <= this'.route2) && (this'.route2 <= this'.route3));
            this'.shortest2 = ((this'.route2 <= this'.route1) && (this'.route2 <= this'.route3));
            this'.shortest3 = ((this'.route3 <= this'.route1) && (this'.route3 <= this'.route2));
            this'.nshortest = ((this'.shortest1 + this'.shortest2) + this'.shortest3);
            this'.which = uniformInt(1,this'.nshortest);
            def _if(){
                this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
                return (1,this',0);
            }
            def _else(){
                def _if(){
                    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
                    return (1,this',0);
                }
                def _else(){
                    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],4));
                    return (1,this',0);
                }
                def eval_if(){
                    if (this'.which == (this'.shortest1 + this'.shortest2)) {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def eval_if(){
                if (this'.which == this'.shortest1) {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if (this'.Q_in.data[0][1] == 1) {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return ();
    }
}
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
dat __s0_ty{
    Q_in: Queue , Q_out: Queue;
    route1: ℝ , route2: ℝ , route3: ℝ , shortest1: ℝ , shortest2: ℝ , shortest3: ℝ , nshortest: ℝ , which: ℝ;
    def __s0_ty'(){
        subExp_CallExp_1 := Queue();
        this.Q_in = subExp_CallExp_1;
        subExp_CallExp_2 := Queue();
        this.Q_out = subExp_CallExp_2;
        this.route1 = 0;
        this.route2 = 0;
        this.route3 = 0;
        this.shortest1 = 0;
        this.shortest2 = 0;
        this.shortest3 = 0;
        this.nshortest = 0;
        this.which = 0;
        return this;
    }
    def __run(){
        def _if_0(){
            subExp_3 := (1 + 1);
            this.route1 = (subExp_3 + 1);
            this.route2 = 3;
            this.route3 = (2 + 1);
            subExp_6 := this.route1;
            subExp_7 := this.route2;
            subExp_4 := (subExp_6 <= subExp_7);
            subExp_8 := this.route2;
            subExp_9 := this.route3;
            subExp_5 := (subExp_8 <= subExp_9);
            this.shortest1 = (subExp_4 && subExp_5);
            subExp_12 := this.route2;
            subExp_13 := this.route1;
            subExp_10 := (subExp_12 <= subExp_13);
            subExp_14 := this.route2;
            subExp_15 := this.route3;
            subExp_11 := (subExp_14 <= subExp_15);
            this.shortest2 = (subExp_10 && subExp_11);
            subExp_18 := this.route3;
            subExp_19 := this.route1;
            subExp_16 := (subExp_18 <= subExp_19);
            subExp_20 := this.route3;
            subExp_21 := this.route2;
            subExp_17 := (subExp_20 <= subExp_21);
            this.shortest3 = (subExp_16 && subExp_17);
            subExp_24 := this.shortest1;
            subExp_25 := this.shortest2;
            subExp_22 := (subExp_24 + subExp_25);
            subExp_23 := this.shortest3;
            this.nshortest = (subExp_22 + subExp_23);
            subExp_arg_26 := 1;
            subExp_arg_27 := this.nshortest;
            subExp_CallExp_28 := uniformInt(subExp_arg_26,subExp_arg_27);
            this.which = subExp_CallExp_28;
            def _if_1(){
                subExp_31 := this.Q_in.takeFront();
                subExp_arg_29 := subExp_31[0];
                subExp_arg_30 := 2;
                this.Q_out.pushBack(subExp_arg_29,subExp_arg_30);
                subExp_32 := (1,this,0);
                return subExp_32;
            }
            def _else_0(){
                def _if_2(){
                    subExp_35 := this.Q_in.takeFront();
                    subExp_arg_33 := subExp_35[0];
                    subExp_arg_34 := 3;
                    this.Q_out.pushBack(subExp_arg_33,subExp_arg_34);
                    subExp_36 := (1,this,0);
                    return subExp_36;
                }
                def _else_1(){
                    subExp_39 := this.Q_in.takeFront();
                    subExp_arg_37 := subExp_39[0];
                    subExp_arg_38 := 4;
                    this.Q_out.pushBack(subExp_arg_37,subExp_arg_38);
                    subExp_40 := (1,this,0);
                    return subExp_40;
                }
                def eval_if_0(){
                    subExp_44 := this.which;
                    subExp_46 := this.shortest1;
                    subExp_47 := this.shortest2;
                    subExp_45 := (subExp_46 + subExp_47);
                    subExp_41 := (subExp_44 == subExp_45);
                    if subExp_41 {
                        subExp_42 := _if_2();
                        return subExp_42;
                    } else {
                        subExp_43 := _else_1();
                        return subExp_43;
                    }
                }
                _ret_0 := eval_if_0();
                this = _ret_0[1];
                subExp_48 := (1,this,0);
                return subExp_48;
            }
            def eval_if_0(){
                subExp_52 := this.which;
                subExp_53 := this.shortest1;
                subExp_49 := (subExp_52 == subExp_53);
                if subExp_49 {
                    subExp_50 := _if_1();
                    return subExp_50;
                } else {
                    subExp_51 := _else_0();
                    return subExp_51;
                }
            }
            _ret_0 := eval_if_0();
            this = _ret_0[1];
            subExp_54 := (1,this,0);
            return subExp_54;
        }
        def _else_0(){
            subExp_55 := (1,this,0);
            return subExp_55;
        }
        def eval_if_0(){
            subExp_61 := this.Q_in.data;
            subExp_60 := subExp_61[0];
            subExp_59 := subExp_60[1];
            subExp_56 := (subExp_59 == 1);
            if subExp_56 {
                subExp_57 := _if_0();
                return subExp_57;
            } else {
                subExp_58 := _else_0();
                return subExp_58;
            }
        }
        _ret_0 := eval_if_0();
        this = _ret_0[1];
        subExp_62 := ();
        return subExp_62;
    }
}
illegal thing in data declaration:
Q_in: Queue , Q_out: Queue

illegal thing in data declaration:
route1: ℝ , route2: ℝ , route3: ℝ , shortest1: ℝ , shortest2: ℝ , shortest3: ℝ , nshortest: ℝ , which: ℝ

var __s0_ty = function(){
    var this_v0 = {};
    var subExp_CallExp_1_v0 = Queue([]).obj;
    var this_v1 = _.assign({},this_v0,{Q_in: subExp_CallExp_1_v0});
    var subExp_CallExp_2_v0 = Queue([]).obj;
    var this_v2 = _.assign({},this_v1,{Q_out: subExp_CallExp_2_v0});
    var this_v3 = _.assign({},this_v2,{route1: 0});
    var this_v4 = _.assign({},this_v3,{route2: 0});
    var this_v5 = _.assign({},this_v4,{route3: 0});
    var this_v6 = _.assign({},this_v5,{shortest1: 0});
    var this_v7 = _.assign({},this_v6,{shortest2: 0});
    var this_v8 = _.assign({},this_v7,{shortest3: 0});
    var this_v9 = _.assign({},this_v8,{nshortest: 0});
    var this_v10 = _.assign({},this_v9,{which: 0});
    return {res:this_v10,obj:this_v10};
}
var __s0_ty___run = function(this_v0){
    var _if_0 = function(){
        var subExp_3=(1+1);
        var this_v1 = _.assign({},this_v0,{route1: (subExp_3+1)});
        var this_v2 = _.assign({},this_v1,{route2: 3});
        var this_v3 = _.assign({},this_v2,{route3: (2+1)});
        var subExp_6=this_v3.route1;
        var subExp_7=this_v3.route2;
        var subExp_4=(subExp_6<=subExp_7);
        var subExp_8=this_v3.route2;
        var subExp_9=this_v3.route3;
        var subExp_5=(subExp_8<=subExp_9);
        var this_v4 = _.assign({},this_v3,{shortest1: (subExp_4&&subExp_5)});
        var subExp_12=this_v4.route2;
        var subExp_13=this_v4.route1;
        var subExp_10=(subExp_12<=subExp_13);
        var subExp_14=this_v4.route2;
        var subExp_15=this_v4.route3;
        var subExp_11=(subExp_14<=subExp_15);
        var this_v5 = _.assign({},this_v4,{shortest2: (subExp_10&&subExp_11)});
        var subExp_18=this_v5.route3;
        var subExp_19=this_v5.route1;
        var subExp_16=(subExp_18<=subExp_19);
        var subExp_20=this_v5.route3;
        var subExp_21=this_v5.route2;
        var subExp_17=(subExp_20<=subExp_21);
        var this_v6 = _.assign({},this_v5,{shortest3: (subExp_16&&subExp_17)});
        var subExp_24=this_v6.shortest1;
        var subExp_25=this_v6.shortest2;
        var subExp_22=(subExp_24+subExp_25);
        var subExp_23=this_v6.shortest3;
        var this_v7 = _.assign({},this_v6,{nshortest: (subExp_22+subExp_23)});
        var subExp_arg_26=1;
        var subExp_arg_27=this_v7.nshortest;
        var subExp_CallExp_28=sample(RandomInteger({n:((subExp_arg_27)-(subExp_arg_26)+1)}))+(subExp_arg_26);
        var this_v8 = _.assign({},this_v7,{which: subExp_CallExp_28});
        var _if_1 = function(){
            var tmp = Queue_takeFront(this_v8.Q_in,[]);
            var subExp_31 = tmp.res;
            var this_v9 = _.assign({},this_v8,{Q_in: tmp.obj});
            var subExp_arg_29=subExp_31[+0];
            var subExp_arg_30=2;
            var this_v10 = _.assign({},this_v9,{Q_out: Queue_pushBack(this_v9.Q_out,[subExp_arg_29,subExp_arg_30]).obj});
            var subExp_32=[1,this_v10,0];
            return subExp_32;
        }
        var _else_0 = function(){
            var _if_2 = function(){
                var tmp = Queue_takeFront(this_v8.Q_in,[]);
                var subExp_35 = tmp.res;
                var this_v9 = _.assign({},this_v8,{Q_in: tmp.obj});
                var subExp_arg_33=subExp_35[+0];
                var subExp_arg_34=3;
                var this_v10 = _.assign({},this_v9,{Q_out: Queue_pushBack(this_v9.Q_out,[subExp_arg_33,subExp_arg_34]).obj});
                var subExp_36=[1,this_v10,0];
                return subExp_36;
            }
            var _else_1 = function(){
                var tmp = Queue_takeFront(this_v8.Q_in,[]);
                var subExp_39 = tmp.res;
                var this_v9 = _.assign({},this_v8,{Q_in: tmp.obj});
                var subExp_arg_37=subExp_39[+0];
                var subExp_arg_38=4;
                var this_v10 = _.assign({},this_v9,{Q_out: Queue_pushBack(this_v9.Q_out,[subExp_arg_37,subExp_arg_38]).obj});
                var subExp_40=[1,this_v10,0];
                return subExp_40;
            }
            var eval_if_0 = function(){
                var subExp_44=this_v8.which;
                var subExp_46=this_v8.shortest1;
                var subExp_47=this_v8.shortest2;
                var subExp_45=(subExp_46+subExp_47);
                var subExp_41=(subExp_44==subExp_45);
                if(subExp_41){
                    var subExp_42=_if_2([]);
                    return subExp_42;
                }
                else{
                    var subExp_43=_else_1([]);
                    return subExp_43;
                }
            }
            var _ret_0=eval_if_0([]);
            var this_v8=_ret_0[+1];
            var subExp_48=[1,this_v8,0];
            return subExp_48;
        }
        var eval_if_0 = function(){
            var subExp_52=this_v8.which;
            var subExp_53=this_v8.shortest1;
            var subExp_49=(subExp_52==subExp_53);
            if(subExp_49){
                var subExp_50=_if_1([]);
                return subExp_50;
            }
            else{
                var subExp_51=_else_0([]);
                return subExp_51;
            }
        }
        var _ret_0=eval_if_0([]);
        var this_v8=_ret_0[+1];
        var subExp_54=[1,this_v8,0];
        return subExp_54;
    }
    var _else_0 = function(){
        var subExp_55=[1,this_v0,0];
        return subExp_55;
    }
    var eval_if_0 = function(){
        var subExp_61=this_v0.Q_in.data;
        var subExp_60=subExp_61[+0];
        var subExp_59=subExp_60[+1];
        var subExp_56=(subExp_59==1);
        if(subExp_56){
            var subExp_57=_if_0([]);
            return subExp_57;
        }
        else{
            var subExp_58=_else_0([]);
            return subExp_58;
        }
    }
    var _ret_0=eval_if_0([]);
    var this_v0=_ret_0[+1];
    var subExp_62=[];
    return {res:subExp_62,obj:this_v0};
}

translating meaning of __s1_ty
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
__s1_ty
 
Expression of type Identifier:
Q_in
 
Expression of type Identifier:
Queue
 
Expression of type VarDecl:
Q_in: Queue
 
Expression of type Identifier:
Q_out
 
Expression of type Identifier:
Queue
 
Expression of type VarDecl:
Q_out: Queue
 
Expression of type ABinaryExp:
Q_in: Queue , Q_out: Queue
 
Expression of type Identifier:
__s1_ty
 
Expression of type Identifier:
this
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this.Q_in
 
Expression of type Identifier:
Queue'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Queue'()
 
Expression of type ABinaryExp:
this.Q_in = Queue'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this.Q_out
 
Expression of type Identifier:
Queue'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Queue'()
 
Expression of type ABinaryExp:
this.Q_out = Queue'()
 
Expression of type Identifier:
this
 
Expression of type ReturnExp:
return this
 
Expression of type FunctionDef:
def __s1_ty'(){
    this.Q_in = Queue'();
    this.Q_out = Queue'();
    return this;
}
 
Expression of type Identifier:
__run
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.Q_out
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.Q_out.pushBack
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.Q_in.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.Q_in.takeFront()
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.takeFront()[0]
 
Expression of type LiteralExp:
2
 
Expression of type TupleExp:
((this'.Q_in.takeFront()[0],2))
 
Expression of type CallExp:
this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.Q_in.data
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.data[0]
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
this'.Q_in.data[0][1]
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
(this'.Q_in.data[0][1] == 1)
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if (this'.Q_in.data[0][1] == 1) {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if (this'.Q_in.data[0][1] == 1) {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type TupleExp:
()
 
Expression of type ReturnExp:
return ()
 
Expression of type FunctionDef:
def __run(){
    def _if(){
        this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if (this'.Q_in.data[0][1] == 1) {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return ();
}
 
Expression of type CompoundDecl:
{
    Q_in: Queue , Q_out: Queue;
    def __s1_ty'(){
        this.Q_in = Queue'();
        this.Q_out = Queue'();
        return this;
    }
    def __run(){
        def _if(){
            this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if (this'.Q_in.data[0][1] == 1) {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return ();
    }
}
 
Expression of type DatDecl:
dat __s1_ty{
    Q_in: Queue , Q_out: Queue;
    def __s1_ty'(){
        this.Q_in = Queue'();
        this.Q_out = Queue'();
        return this;
    }
    def __run(){
        def _if(){
            this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if (this'.Q_in.data[0][1] == 1) {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return ();
    }
}
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
dat __s1_ty{
    Q_in: Queue , Q_out: Queue;
    def __s1_ty'(){
        subExp_CallExp_1 := Queue();
        this.Q_in = subExp_CallExp_1;
        subExp_CallExp_2 := Queue();
        this.Q_out = subExp_CallExp_2;
        return this;
    }
    def __run(){
        def _if_0(){
            subExp_5 := this.Q_in.takeFront();
            subExp_arg_3 := subExp_5[0];
            subExp_arg_4 := 2;
            this.Q_out.pushBack(subExp_arg_3,subExp_arg_4);
            subExp_6 := (1,this,0);
            return subExp_6;
        }
        def _else_0(){
            subExp_7 := (1,this,0);
            return subExp_7;
        }
        def eval_if_0(){
            subExp_13 := this.Q_in.data;
            subExp_12 := subExp_13[0];
            subExp_11 := subExp_12[1];
            subExp_8 := (subExp_11 == 1);
            if subExp_8 {
                subExp_9 := _if_0();
                return subExp_9;
            } else {
                subExp_10 := _else_0();
                return subExp_10;
            }
        }
        _ret_0 := eval_if_0();
        this = _ret_0[1];
        subExp_14 := ();
        return subExp_14;
    }
}
illegal thing in data declaration:
Q_in: Queue , Q_out: Queue

var __s1_ty = function(){
    var this_v0 = {};
    var subExp_CallExp_1_v0 = Queue([]).obj;
    var this_v1 = _.assign({},this_v0,{Q_in: subExp_CallExp_1_v0});
    var subExp_CallExp_2_v0 = Queue([]).obj;
    var this_v2 = _.assign({},this_v1,{Q_out: subExp_CallExp_2_v0});
    return {res:this_v2,obj:this_v2};
}
var __s1_ty___run = function(this_v0){
    var _if_0 = function(){
        var tmp = Queue_takeFront(this_v0.Q_in,[]);
        var subExp_5 = tmp.res;
        var this_v1 = _.assign({},this_v0,{Q_in: tmp.obj});
        var subExp_arg_3=subExp_5[+0];
        var subExp_arg_4=2;
        var this_v2 = _.assign({},this_v1,{Q_out: Queue_pushBack(this_v1.Q_out,[subExp_arg_3,subExp_arg_4]).obj});
        var subExp_6=[1,this_v2,0];
        return subExp_6;
    }
    var _else_0 = function(){
        var subExp_7=[1,this_v0,0];
        return subExp_7;
    }
    var eval_if_0 = function(){
        var subExp_13=this_v0.Q_in.data;
        var subExp_12=subExp_13[+0];
        var subExp_11=subExp_12[+1];
        var subExp_8=(subExp_11==1);
        if(subExp_8){
            var subExp_9=_if_0([]);
            return subExp_9;
        }
        else{
            var subExp_10=_else_0([]);
            return subExp_10;
        }
    }
    var _ret_0=eval_if_0([]);
    var this_v0=_ret_0[+1];
    var subExp_14=[];
    return {res:subExp_14,obj:this_v0};
}

translating meaning of __s2_ty
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
__s2_ty
 
Expression of type Identifier:
Q_in
 
Expression of type Identifier:
Queue
 
Expression of type VarDecl:
Q_in: Queue
 
Expression of type Identifier:
Q_out
 
Expression of type Identifier:
Queue
 
Expression of type VarDecl:
Q_out: Queue
 
Expression of type ABinaryExp:
Q_in: Queue , Q_out: Queue
 
Expression of type Identifier:
__s2_ty
 
Expression of type Identifier:
this
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this.Q_in
 
Expression of type Identifier:
Queue'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Queue'()
 
Expression of type ABinaryExp:
this.Q_in = Queue'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this.Q_out
 
Expression of type Identifier:
Queue'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Queue'()
 
Expression of type ABinaryExp:
this.Q_out = Queue'()
 
Expression of type Identifier:
this
 
Expression of type ReturnExp:
return this
 
Expression of type FunctionDef:
def __s2_ty'(){
    this.Q_in = Queue'();
    this.Q_out = Queue'();
    return this;
}
 
Expression of type Identifier:
__run
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.Q_out
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.Q_out.pushBack
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.Q_in.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.Q_in.takeFront()
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.takeFront()[0]
 
Expression of type LiteralExp:
3
 
Expression of type TupleExp:
((this'.Q_in.takeFront()[0],3))
 
Expression of type CallExp:
this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.Q_in.data
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.data[0]
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
this'.Q_in.data[0][1]
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
(this'.Q_in.data[0][1] == 1)
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.Q_in.data
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.data[0]
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
this'.Q_in.data[0][1]
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
(this'.Q_in.data[0][1] == 2)
 
Expression of type ABinaryExp:
((this'.Q_in.data[0][1] == 1) || (this'.Q_in.data[0][1] == 2))
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if ((this'.Q_in.data[0][1] == 1) || (this'.Q_in.data[0][1] == 2)) {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if ((this'.Q_in.data[0][1] == 1) || (this'.Q_in.data[0][1] == 2)) {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type TupleExp:
()
 
Expression of type ReturnExp:
return ()
 
Expression of type FunctionDef:
def __run(){
    def _if(){
        this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if ((this'.Q_in.data[0][1] == 1) || (this'.Q_in.data[0][1] == 2)) {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return ();
}
 
Expression of type CompoundDecl:
{
    Q_in: Queue , Q_out: Queue;
    def __s2_ty'(){
        this.Q_in = Queue'();
        this.Q_out = Queue'();
        return this;
    }
    def __run(){
        def _if(){
            this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if ((this'.Q_in.data[0][1] == 1) || (this'.Q_in.data[0][1] == 2)) {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return ();
    }
}
 
Expression of type DatDecl:
dat __s2_ty{
    Q_in: Queue , Q_out: Queue;
    def __s2_ty'(){
        this.Q_in = Queue'();
        this.Q_out = Queue'();
        return this;
    }
    def __run(){
        def _if(){
            this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if ((this'.Q_in.data[0][1] == 1) || (this'.Q_in.data[0][1] == 2)) {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return ();
    }
}
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
dat __s2_ty{
    Q_in: Queue , Q_out: Queue;
    def __s2_ty'(){
        subExp_CallExp_1 := Queue();
        this.Q_in = subExp_CallExp_1;
        subExp_CallExp_2 := Queue();
        this.Q_out = subExp_CallExp_2;
        return this;
    }
    def __run(){
        def _if_0(){
            subExp_5 := this.Q_in.takeFront();
            subExp_arg_3 := subExp_5[0];
            subExp_arg_4 := 3;
            this.Q_out.pushBack(subExp_arg_3,subExp_arg_4);
            subExp_6 := (1,this,0);
            return subExp_6;
        }
        def _else_0(){
            subExp_7 := (1,this,0);
            return subExp_7;
        }
        def eval_if_0(){
            subExp_15 := this.Q_in.data;
            subExp_14 := subExp_15[0];
            subExp_13 := subExp_14[1];
            subExp_11 := (subExp_13 == 1);
            subExp_18 := this.Q_in.data;
            subExp_17 := subExp_18[0];
            subExp_16 := subExp_17[1];
            subExp_12 := (subExp_16 == 2);
            subExp_8 := (subExp_11 || subExp_12);
            if subExp_8 {
                subExp_9 := _if_0();
                return subExp_9;
            } else {
                subExp_10 := _else_0();
                return subExp_10;
            }
        }
        _ret_0 := eval_if_0();
        this = _ret_0[1];
        subExp_19 := ();
        return subExp_19;
    }
}
illegal thing in data declaration:
Q_in: Queue , Q_out: Queue

var __s2_ty = function(){
    var this_v0 = {};
    var subExp_CallExp_1_v0 = Queue([]).obj;
    var this_v1 = _.assign({},this_v0,{Q_in: subExp_CallExp_1_v0});
    var subExp_CallExp_2_v0 = Queue([]).obj;
    var this_v2 = _.assign({},this_v1,{Q_out: subExp_CallExp_2_v0});
    return {res:this_v2,obj:this_v2};
}
var __s2_ty___run = function(this_v0){
    var _if_0 = function(){
        var tmp = Queue_takeFront(this_v0.Q_in,[]);
        var subExp_5 = tmp.res;
        var this_v1 = _.assign({},this_v0,{Q_in: tmp.obj});
        var subExp_arg_3=subExp_5[+0];
        var subExp_arg_4=3;
        var this_v2 = _.assign({},this_v1,{Q_out: Queue_pushBack(this_v1.Q_out,[subExp_arg_3,subExp_arg_4]).obj});
        var subExp_6=[1,this_v2,0];
        return subExp_6;
    }
    var _else_0 = function(){
        var subExp_7=[1,this_v0,0];
        return subExp_7;
    }
    var eval_if_0 = function(){
        var subExp_15=this_v0.Q_in.data;
        var subExp_14=subExp_15[+0];
        var subExp_13=subExp_14[+1];
        var subExp_11=(subExp_13==1);
        var subExp_18=this_v0.Q_in.data;
        var subExp_17=subExp_18[+0];
        var subExp_16=subExp_17[+1];
        var subExp_12=(subExp_16==2);
        var subExp_8=(subExp_11||subExp_12);
        if(subExp_8){
            var subExp_9=_if_0([]);
            return subExp_9;
        }
        else{
            var subExp_10=_else_0([]);
            return subExp_10;
        }
    }
    var _ret_0=eval_if_0([]);
    var this_v0=_ret_0[+1];
    var subExp_19=[];
    return {res:subExp_19,obj:this_v0};
}

translating meaning of __s3_ty
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
__s3_ty
 
Expression of type Identifier:
Q_in
 
Expression of type Identifier:
Queue
 
Expression of type VarDecl:
Q_in: Queue
 
Expression of type Identifier:
Q_out
 
Expression of type Identifier:
Queue
 
Expression of type VarDecl:
Q_out: Queue
 
Expression of type ABinaryExp:
Q_in: Queue , Q_out: Queue
 
Expression of type Identifier:
__s3_ty
 
Expression of type Identifier:
this
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this.Q_in
 
Expression of type Identifier:
Queue'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Queue'()
 
Expression of type ABinaryExp:
this.Q_in = Queue'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this.Q_out
 
Expression of type Identifier:
Queue'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Queue'()
 
Expression of type ABinaryExp:
this.Q_out = Queue'()
 
Expression of type Identifier:
this
 
Expression of type ReturnExp:
return this
 
Expression of type FunctionDef:
def __s3_ty'(){
    this.Q_in = Queue'();
    this.Q_out = Queue'();
    return this;
}
 
Expression of type Identifier:
__run
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.Q_out
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.Q_out.pushBack
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.Q_in.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.Q_in.takeFront()
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.takeFront()[0]
 
Expression of type LiteralExp:
3
 
Expression of type TupleExp:
((this'.Q_in.takeFront()[0],3))
 
Expression of type CallExp:
this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.Q_in.data
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.data[0]
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
this'.Q_in.data[0][1]
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
(this'.Q_in.data[0][1] == 1)
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.Q_in.data
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.data[0]
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
this'.Q_in.data[0][1]
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
(this'.Q_in.data[0][1] == 2)
 
Expression of type ABinaryExp:
((this'.Q_in.data[0][1] == 1) || (this'.Q_in.data[0][1] == 2))
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if ((this'.Q_in.data[0][1] == 1) || (this'.Q_in.data[0][1] == 2)) {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if ((this'.Q_in.data[0][1] == 1) || (this'.Q_in.data[0][1] == 2)) {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type TupleExp:
()
 
Expression of type ReturnExp:
return ()
 
Expression of type FunctionDef:
def __run(){
    def _if(){
        this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if ((this'.Q_in.data[0][1] == 1) || (this'.Q_in.data[0][1] == 2)) {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return ();
}
 
Expression of type CompoundDecl:
{
    Q_in: Queue , Q_out: Queue;
    def __s3_ty'(){
        this.Q_in = Queue'();
        this.Q_out = Queue'();
        return this;
    }
    def __run(){
        def _if(){
            this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if ((this'.Q_in.data[0][1] == 1) || (this'.Q_in.data[0][1] == 2)) {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return ();
    }
}
 
Expression of type DatDecl:
dat __s3_ty{
    Q_in: Queue , Q_out: Queue;
    def __s3_ty'(){
        this.Q_in = Queue'();
        this.Q_out = Queue'();
        return this;
    }
    def __run(){
        def _if(){
            this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if ((this'.Q_in.data[0][1] == 1) || (this'.Q_in.data[0][1] == 2)) {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return ();
    }
}
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
dat __s3_ty{
    Q_in: Queue , Q_out: Queue;
    def __s3_ty'(){
        subExp_CallExp_1 := Queue();
        this.Q_in = subExp_CallExp_1;
        subExp_CallExp_2 := Queue();
        this.Q_out = subExp_CallExp_2;
        return this;
    }
    def __run(){
        def _if_0(){
            subExp_5 := this.Q_in.takeFront();
            subExp_arg_3 := subExp_5[0];
            subExp_arg_4 := 3;
            this.Q_out.pushBack(subExp_arg_3,subExp_arg_4);
            subExp_6 := (1,this,0);
            return subExp_6;
        }
        def _else_0(){
            subExp_7 := (1,this,0);
            return subExp_7;
        }
        def eval_if_0(){
            subExp_15 := this.Q_in.data;
            subExp_14 := subExp_15[0];
            subExp_13 := subExp_14[1];
            subExp_11 := (subExp_13 == 1);
            subExp_18 := this.Q_in.data;
            subExp_17 := subExp_18[0];
            subExp_16 := subExp_17[1];
            subExp_12 := (subExp_16 == 2);
            subExp_8 := (subExp_11 || subExp_12);
            if subExp_8 {
                subExp_9 := _if_0();
                return subExp_9;
            } else {
                subExp_10 := _else_0();
                return subExp_10;
            }
        }
        _ret_0 := eval_if_0();
        this = _ret_0[1];
        subExp_19 := ();
        return subExp_19;
    }
}
illegal thing in data declaration:
Q_in: Queue , Q_out: Queue

var __s3_ty = function(){
    var this_v0 = {};
    var subExp_CallExp_1_v0 = Queue([]).obj;
    var this_v1 = _.assign({},this_v0,{Q_in: subExp_CallExp_1_v0});
    var subExp_CallExp_2_v0 = Queue([]).obj;
    var this_v2 = _.assign({},this_v1,{Q_out: subExp_CallExp_2_v0});
    return {res:this_v2,obj:this_v2};
}
var __s3_ty___run = function(this_v0){
    var _if_0 = function(){
        var tmp = Queue_takeFront(this_v0.Q_in,[]);
        var subExp_5 = tmp.res;
        var this_v1 = _.assign({},this_v0,{Q_in: tmp.obj});
        var subExp_arg_3=subExp_5[+0];
        var subExp_arg_4=3;
        var this_v2 = _.assign({},this_v1,{Q_out: Queue_pushBack(this_v1.Q_out,[subExp_arg_3,subExp_arg_4]).obj});
        var subExp_6=[1,this_v2,0];
        return subExp_6;
    }
    var _else_0 = function(){
        var subExp_7=[1,this_v0,0];
        return subExp_7;
    }
    var eval_if_0 = function(){
        var subExp_15=this_v0.Q_in.data;
        var subExp_14=subExp_15[+0];
        var subExp_13=subExp_14[+1];
        var subExp_11=(subExp_13==1);
        var subExp_18=this_v0.Q_in.data;
        var subExp_17=subExp_18[+0];
        var subExp_16=subExp_17[+1];
        var subExp_12=(subExp_16==2);
        var subExp_8=(subExp_11||subExp_12);
        if(subExp_8){
            var subExp_9=_if_0([]);
            return subExp_9;
        }
        else{
            var subExp_10=_else_0([]);
            return subExp_10;
        }
    }
    var _ret_0=eval_if_0([]);
    var this_v0=_ret_0[+1];
    var subExp_19=[];
    return {res:subExp_19,obj:this_v0};
}

var __s3_ty = function(){
    var this_v0 = {};
    var subExp_CallExp_1_v0 = Queue([]).obj;
    var this_v1 = _.assign({},this_v0,{Q_in: subExp_CallExp_1_v0});
    var subExp_CallExp_2_v0 = Queue([]).obj;
    var this_v2 = _.assign({},this_v1,{Q_out: subExp_CallExp_2_v0});
    return {res:this_v2,obj:this_v2};
}
var __s3_ty___run = function(this_v0){
    var _if_0 = function(){
        var tmp = Queue_takeFront(this_v0.Q_in,[]);
        var subExp_5 = tmp.res;
        var this_v1 = _.assign({},this_v0,{Q_in: tmp.obj});
        var subExp_arg_3=subExp_5[+0];
        var subExp_arg_4=3;
        var this_v2 = _.assign({},this_v1,{Q_out: Queue_pushBack(this_v1.Q_out,[subExp_arg_3,subExp_arg_4]).obj});
        var subExp_6=[1,this_v2,0];
        return subExp_6;
    }
    var _else_0 = function(){
        var subExp_7=[1,this_v0,0];
        return subExp_7;
    }
    var eval_if_0 = function(){
        var subExp_15=this_v0.Q_in.data;
        var subExp_14=subExp_15[+0];
        var subExp_13=subExp_14[+1];
        var subExp_11=(subExp_13==1);
        var subExp_18=this_v0.Q_in.data;
        var subExp_17=subExp_18[+0];
        var subExp_16=subExp_17[+1];
        var subExp_12=(subExp_16==2);
        var subExp_8=(subExp_11||subExp_12);
        if(subExp_8){
            var subExp_9=_if_0([]);
            return subExp_9;
        }
        else{
            var subExp_10=_else_0([]);
            return subExp_10;
        }
    }
    var _ret_0=eval_if_0([]);
    var this_v0=_ret_0[+1];
    var subExp_19=[];
    return {res:subExp_19,obj:this_v0};
}
var __s2_ty = function(){
    var this_v0 = {};
    var subExp_CallExp_1_v0 = Queue([]).obj;
    var this_v1 = _.assign({},this_v0,{Q_in: subExp_CallExp_1_v0});
    var subExp_CallExp_2_v0 = Queue([]).obj;
    var this_v2 = _.assign({},this_v1,{Q_out: subExp_CallExp_2_v0});
    return {res:this_v2,obj:this_v2};
}
var __s2_ty___run = function(this_v0){
    var _if_0 = function(){
        var tmp = Queue_takeFront(this_v0.Q_in,[]);
        var subExp_5 = tmp.res;
        var this_v1 = _.assign({},this_v0,{Q_in: tmp.obj});
        var subExp_arg_3=subExp_5[+0];
        var subExp_arg_4=3;
        var this_v2 = _.assign({},this_v1,{Q_out: Queue_pushBack(this_v1.Q_out,[subExp_arg_3,subExp_arg_4]).obj});
        var subExp_6=[1,this_v2,0];
        return subExp_6;
    }
    var _else_0 = function(){
        var subExp_7=[1,this_v0,0];
        return subExp_7;
    }
    var eval_if_0 = function(){
        var subExp_15=this_v0.Q_in.data;
        var subExp_14=subExp_15[+0];
        var subExp_13=subExp_14[+1];
        var subExp_11=(subExp_13==1);
        var subExp_18=this_v0.Q_in.data;
        var subExp_17=subExp_18[+0];
        var subExp_16=subExp_17[+1];
        var subExp_12=(subExp_16==2);
        var subExp_8=(subExp_11||subExp_12);
        if(subExp_8){
            var subExp_9=_if_0([]);
            return subExp_9;
        }
        else{
            var subExp_10=_else_0([]);
            return subExp_10;
        }
    }
    var _ret_0=eval_if_0([]);
    var this_v0=_ret_0[+1];
    var subExp_19=[];
    return {res:subExp_19,obj:this_v0};
}
var __s1_ty = function(){
    var this_v0 = {};
    var subExp_CallExp_1_v0 = Queue([]).obj;
    var this_v1 = _.assign({},this_v0,{Q_in: subExp_CallExp_1_v0});
    var subExp_CallExp_2_v0 = Queue([]).obj;
    var this_v2 = _.assign({},this_v1,{Q_out: subExp_CallExp_2_v0});
    return {res:this_v2,obj:this_v2};
}
var __s1_ty___run = function(this_v0){
    var _if_0 = function(){
        var tmp = Queue_takeFront(this_v0.Q_in,[]);
        var subExp_5 = tmp.res;
        var this_v1 = _.assign({},this_v0,{Q_in: tmp.obj});
        var subExp_arg_3=subExp_5[+0];
        var subExp_arg_4=2;
        var this_v2 = _.assign({},this_v1,{Q_out: Queue_pushBack(this_v1.Q_out,[subExp_arg_3,subExp_arg_4]).obj});
        var subExp_6=[1,this_v2,0];
        return subExp_6;
    }
    var _else_0 = function(){
        var subExp_7=[1,this_v0,0];
        return subExp_7;
    }
    var eval_if_0 = function(){
        var subExp_13=this_v0.Q_in.data;
        var subExp_12=subExp_13[+0];
        var subExp_11=subExp_12[+1];
        var subExp_8=(subExp_11==1);
        if(subExp_8){
            var subExp_9=_if_0([]);
            return subExp_9;
        }
        else{
            var subExp_10=_else_0([]);
            return subExp_10;
        }
    }
    var _ret_0=eval_if_0([]);
    var this_v0=_ret_0[+1];
    var subExp_14=[];
    return {res:subExp_14,obj:this_v0};
}
var __s0_ty = function(){
    var this_v0 = {};
    var subExp_CallExp_1_v0 = Queue([]).obj;
    var this_v1 = _.assign({},this_v0,{Q_in: subExp_CallExp_1_v0});
    var subExp_CallExp_2_v0 = Queue([]).obj;
    var this_v2 = _.assign({},this_v1,{Q_out: subExp_CallExp_2_v0});
    var this_v3 = _.assign({},this_v2,{route1: 0});
    var this_v4 = _.assign({},this_v3,{route2: 0});
    var this_v5 = _.assign({},this_v4,{route3: 0});
    var this_v6 = _.assign({},this_v5,{shortest1: 0});
    var this_v7 = _.assign({},this_v6,{shortest2: 0});
    var this_v8 = _.assign({},this_v7,{shortest3: 0});
    var this_v9 = _.assign({},this_v8,{nshortest: 0});
    var this_v10 = _.assign({},this_v9,{which: 0});
    return {res:this_v10,obj:this_v10};
}
var __s0_ty___run = function(this_v0){
    var _if_0 = function(){
        var subExp_3=(1+1);
        var this_v1 = _.assign({},this_v0,{route1: (subExp_3+1)});
        var this_v2 = _.assign({},this_v1,{route2: 3});
        var this_v3 = _.assign({},this_v2,{route3: (2+1)});
        var subExp_6=this_v3.route1;
        var subExp_7=this_v3.route2;
        var subExp_4=(subExp_6<=subExp_7);
        var subExp_8=this_v3.route2;
        var subExp_9=this_v3.route3;
        var subExp_5=(subExp_8<=subExp_9);
        var this_v4 = _.assign({},this_v3,{shortest1: (subExp_4&&subExp_5)});
        var subExp_12=this_v4.route2;
        var subExp_13=this_v4.route1;
        var subExp_10=(subExp_12<=subExp_13);
        var subExp_14=this_v4.route2;
        var subExp_15=this_v4.route3;
        var subExp_11=(subExp_14<=subExp_15);
        var this_v5 = _.assign({},this_v4,{shortest2: (subExp_10&&subExp_11)});
        var subExp_18=this_v5.route3;
        var subExp_19=this_v5.route1;
        var subExp_16=(subExp_18<=subExp_19);
        var subExp_20=this_v5.route3;
        var subExp_21=this_v5.route2;
        var subExp_17=(subExp_20<=subExp_21);
        var this_v6 = _.assign({},this_v5,{shortest3: (subExp_16&&subExp_17)});
        var subExp_24=this_v6.shortest1;
        var subExp_25=this_v6.shortest2;
        var subExp_22=(subExp_24+subExp_25);
        var subExp_23=this_v6.shortest3;
        var this_v7 = _.assign({},this_v6,{nshortest: (subExp_22+subExp_23)});
        var subExp_arg_26=1;
        var subExp_arg_27=this_v7.nshortest;
        var subExp_CallExp_28=sample(RandomInteger({n:((subExp_arg_27)-(subExp_arg_26)+1)}))+(subExp_arg_26);
        var this_v8 = _.assign({},this_v7,{which: subExp_CallExp_28});
        var _if_1 = function(){
            var tmp = Queue_takeFront(this_v8.Q_in,[]);
            var subExp_31 = tmp.res;
            var this_v9 = _.assign({},this_v8,{Q_in: tmp.obj});
            var subExp_arg_29=subExp_31[+0];
            var subExp_arg_30=2;
            var this_v10 = _.assign({},this_v9,{Q_out: Queue_pushBack(this_v9.Q_out,[subExp_arg_29,subExp_arg_30]).obj});
            var subExp_32=[1,this_v10,0];
            return subExp_32;
        }
        var _else_0 = function(){
            var _if_2 = function(){
                var tmp = Queue_takeFront(this_v8.Q_in,[]);
                var subExp_35 = tmp.res;
                var this_v9 = _.assign({},this_v8,{Q_in: tmp.obj});
                var subExp_arg_33=subExp_35[+0];
                var subExp_arg_34=3;
                var this_v10 = _.assign({},this_v9,{Q_out: Queue_pushBack(this_v9.Q_out,[subExp_arg_33,subExp_arg_34]).obj});
                var subExp_36=[1,this_v10,0];
                return subExp_36;
            }
            var _else_1 = function(){
                var tmp = Queue_takeFront(this_v8.Q_in,[]);
                var subExp_39 = tmp.res;
                var this_v9 = _.assign({},this_v8,{Q_in: tmp.obj});
                var subExp_arg_37=subExp_39[+0];
                var subExp_arg_38=4;
                var this_v10 = _.assign({},this_v9,{Q_out: Queue_pushBack(this_v9.Q_out,[subExp_arg_37,subExp_arg_38]).obj});
                var subExp_40=[1,this_v10,0];
                return subExp_40;
            }
            var eval_if_0 = function(){
                var subExp_44=this_v8.which;
                var subExp_46=this_v8.shortest1;
                var subExp_47=this_v8.shortest2;
                var subExp_45=(subExp_46+subExp_47);
                var subExp_41=(subExp_44==subExp_45);
                if(subExp_41){
                    var subExp_42=_if_2([]);
                    return subExp_42;
                }
                else{
                    var subExp_43=_else_1([]);
                    return subExp_43;
                }
            }
            var _ret_0=eval_if_0([]);
            var this_v8=_ret_0[+1];
            var subExp_48=[1,this_v8,0];
            return subExp_48;
        }
        var eval_if_0 = function(){
            var subExp_52=this_v8.which;
            var subExp_53=this_v8.shortest1;
            var subExp_49=(subExp_52==subExp_53);
            if(subExp_49){
                var subExp_50=_if_1([]);
                return subExp_50;
            }
            else{
                var subExp_51=_else_0([]);
                return subExp_51;
            }
        }
        var _ret_0=eval_if_0([]);
        var this_v8=_ret_0[+1];
        var subExp_54=[1,this_v8,0];
        return subExp_54;
    }
    var _else_0 = function(){
        var subExp_55=[1,this_v0,0];
        return subExp_55;
    }
    var eval_if_0 = function(){
        var subExp_61=this_v0.Q_in.data;
        var subExp_60=subExp_61[+0];
        var subExp_59=subExp_60[+1];
        var subExp_56=(subExp_59==1);
        if(subExp_56){
            var subExp_57=_if_0([]);
            return subExp_57;
        }
        else{
            var subExp_58=_else_0([]);
            return subExp_58;
        }
    }
    var _ret_0=eval_if_0([]);
    var this_v0=_ret_0[+1];
    var subExp_62=[];
    return {res:subExp_62,obj:this_v0};
}
var __h1_ty = function(){
    var this_v0 = {};
    var subExp_CallExp_1_v0 = Queue([]).obj;
    var this_v1 = _.assign({},this_v0,{Q_in: subExp_CallExp_1_v0});
    var subExp_CallExp_2_v0 = Queue([]).obj;
    var this_v2 = _.assign({},this_v1,{Q_out: subExp_CallExp_2_v0});
    var this_v3 = _.assign({},this_v2,{pkt_count: 0});
    return {res:this_v3,obj:this_v3};
}
var __h1_ty___run = function(this_v0){
    var subExp_3=this_v0.pkt_count;
    var this_v1 = _.assign({},this_v0,{pkt_count: (subExp_3+1)});
    var this_v2 = _.assign({},this_v1,{Q_in: Queue_popFront(this_v1.Q_in,[]).obj});
    var subExp_4=[];
    return {res:subExp_4,obj:this_v2};
}
var Packet = function(){
    var this_v0 = {};
    return {res:this_v0,obj:this_v0};
}
var Queue = function(){
    var this_v0 = {};
    var this_v1 = _.assign({},this_v0,{data: []});
    return {res:this_v1,obj:this_v1};
}
var Queue_pushFront = function(this_v0, x_0){
    var subExp_1=[x_0];
    var subExp_2=this_v0.data;
    var this_v1 = _.assign({},this_v0,{data: [].concat(subExp_1,subExp_2)});
    var subExp_3=[];
    return {res:subExp_3,obj:this_v1};
}
var Queue_pushBack = function(this_v0, x_0){
    var _if_0 = function(){
        var subExpArr_5=[];
        var subExp_4=[2,0,subExpArr_5];
        return subExp_4;
    }
    var _else_0 = function(){
        var subExpArr_7=[];
        var subExp_6=[1,subExpArr_7,0];
        return subExp_6;
    }
    var eval_if_0 = function(){
        var tmp = Queue_size(this_v0,[]);
        var subExp_11 = tmp.res;
        var this_v1 = tmp.obj;
        var subExp_8=subExp_11>=2;
        if(subExp_8){
            var subExp_9=_if_0([]);
            return subExp_9;
        }
        else{
            var subExp_10=_else_0([]);
            return subExp_10;
        }
    }
    var _ret_0=eval_if_0([]);
    var subExp_14=_ret_0[+0];
    var subExp_12=subExp_14==2;
    if(subExp_12){
        var subExp_13=_ret_0[+2];
        return {res:subExp_13,obj:this_v0};
    }
    var subExp_15=this_v0.data;
    var subExp_16=[x_0];
    var this_v1 = _.assign({},this_v0,{data: [].concat(subExp_15,subExp_16)});
    var subExp_17=[];
    return {res:subExp_17,obj:this_v1};
}
var Queue_takeFront = function(this_v0){
    var tmp = Queue_front(this_v0,[]);
    var r_0 = tmp.res;
    var this_v1 = tmp.obj;
    var this_v2 = Queue_popFront(this_v1,[]).obj;
    return {res:r_0,obj:this_v2};
}
var Queue_takeBack = function(this_v0){
    var subExp_18=this_v0.data;
    var tmp = Queue_size(this_v0,[]);
    var subExp_20 = tmp.res;
    var this_v1 = tmp.obj;
    var subExpArr_19=subExp_20-1;
    var r_0=subExp_18[+subExpArr_19];
    var subExp_21=this_v1.data;
    var tmp = Queue_size(this_v1,[]);
    var subExp_23 = tmp.res;
    var this_v2 = tmp.obj;
    var subExp_22=subExp_23-1;
    var this_v3 = _.assign({},this_v2,{data: ([].concat(subExp_21)).slice(0,subExp_22)});
    return {res:r_0,obj:this_v3};
}
var Queue_size = function(this_v0){
    var subExp_24=this_v0.data.length;
    return {res:subExp_24,obj:this_v0};
}
var Queue_front = function(this_v0){
    var subExp_26=this_v0.data;
    var subExp_25=subExp_26[+0];
    return {res:subExp_25,obj:this_v0};
}
var Queue_dupFront = function(this_v0){
    var tmp = Queue_front(this_v0,[]);
    var subExp_27 = tmp.res;
    var this_v1 = tmp.obj;
    var this_v2 = Queue_pushFront(this_v1,subExp_27).obj;
    var subExp_28=[];
    return {res:subExp_28,obj:this_v2};
}
var Queue_popFront = function(this_v0){
    var subExp_29=this_v0.data;
    var tmp = Queue_size(this_v0,[]);
    var subExp_30 = tmp.res;
    var this_v1 = tmp.obj;
    var this_v2 = _.assign({},this_v1,{data: ([].concat(subExp_29)).slice(1,subExp_30)});
    var subExp_31=[];
    return {res:subExp_31,obj:this_v2};
}
var __h0_ty = function(){
    var this_v0 = {};
    var subExp_CallExp_1_v0 = Queue([]).obj;
    var this_v1 = _.assign({},this_v0,{Q_in: subExp_CallExp_1_v0});
    var subExp_CallExp_2_v0 = Queue([]).obj;
    var this_v2 = _.assign({},this_v1,{Q_out: subExp_CallExp_2_v0});
    var this_v3 = _.assign({},this_v2,{pkt_count: 0});
    return {res:this_v3,obj:this_v3};
}
var __h0_ty___run = function(this_v0){
    var subExp_arg_3_v0 = Packet([]).obj;
    var subExp_arg_4=0;
    var this_v1 = _.assign({},this_v0,{Q_in: Queue_pushFront(this_v0.Q_in,[subExp_arg_3_v0,subExp_arg_4]).obj});
    var _if_0 = function(){
        var subExp_arg_5_v0 = Packet([]).obj;
        var subExp_arg_6=0;
        var this_v2 = _.assign({},this_v1,{Q_in: Queue_pushFront(this_v1.Q_in,[subExp_arg_5_v0,subExp_arg_6]).obj});
        var subExp_7=this_v2.pkt_count;
        var this_v3 = _.assign({},this_v2,{pkt_count: (subExp_7+1)});
        var tmp = Queue_takeFront(this_v3.Q_in,[]);
        var subExp_10 = tmp.res;
        var this_v4 = _.assign({},this_v3,{Q_in: tmp.obj});
        var subExp_arg_8=subExp_10[+0];
        var subExp_arg_9=1;
        var this_v5 = _.assign({},this_v4,{Q_out: Queue_pushBack(this_v4.Q_out,[subExp_arg_8,subExp_arg_9]).obj});
        var subExp_11=[1,this_v5,0];
        return subExp_11;
    }
    var _else_0 = function(){
        var this_v2 = _.assign({},this_v1,{Q_in: Queue_popFront(this_v1.Q_in,[]).obj});
        var this_v3 = _.assign({},this_v2,{Q_in: Queue_popFront(this_v2.Q_in,[]).obj});
        var subExp_12=[1,this_v3,0];
        return subExp_12;
    }
    var eval_if_0 = function(){
        var subExp_16=this_v1.pkt_count;
        var subExp_13=(subExp_16<3);
        if(subExp_13){
            var subExp_14=_if_0([]);
            return subExp_14;
        }
        else{
            var subExp_15=_else_0([]);
            return subExp_15;
        }
    }
    var _ret_0=eval_if_0([]);
    var this_v1=_ret_0[+1];
    var subExp_17=[];
    return {res:subExp_17,obj:this_v1};
}
var __D = function(){
    var this_v0 = {};
    var subExp_CallExp_1_v0 = __h0_ty([]).obj;
    var this_v1 = _.assign({},this_v0,{__H0: subExp_CallExp_1_v0});
    var subExp_CallExp_2_v0 = __h1_ty([]).obj;
    var this_v2 = _.assign({},this_v1,{__H1: subExp_CallExp_2_v0});
    var subExp_CallExp_3_v0 = __s0_ty([]).obj;
    var this_v3 = _.assign({},this_v2,{__S0: subExp_CallExp_3_v0});
    var subExp_CallExp_4_v0 = __s1_ty([]).obj;
    var this_v4 = _.assign({},this_v3,{__S1: subExp_CallExp_4_v0});
    var subExp_CallExp_5_v0 = __s2_ty([]).obj;
    var this_v5 = _.assign({},this_v4,{__S2: subExp_CallExp_5_v0});
    var subExp_CallExp_6_v0 = __s3_ty([]).obj;
    var this_v6 = _.assign({},this_v5,{__S3: subExp_CallExp_6_v0});
    return {res:this_v6,obj:this_v6};
}
var __D_scheduler = function(this_v0){
    var actions_0=[];
    var i_0=0;
    var loop_body_0 = function(_args_0){
        var _tuple_0=_args_0;
        var i_1=_tuple_0[+0];
        var actions_1=_tuple_0[+1];
        var subExp_7=i_1<6;
        if(subExp_7){
            var _if_0 = function(){
                var subExpArr_9=[0,i_1];
                var subExp_8=[subExpArr_9];
                var actions_2=[].concat(actions_1,subExp_8);
                var subExp_10=[1,actions_2,0];
                return subExp_10;
            }
            var _else_0 = function(){
                var subExp_11=[1,actions_1,0];
                return subExp_11;
            }
            var eval_if_0 = function(){
                var tmp = Queue_size((function(){if(i_1==0){ return this_v0.__H0.Q_in} else{ return (function(){if(i_1==1){ return this_v0.__H1.Q_in} else{ return (function(){if(i_1==2){ return this_v0.__S0.Q_in} else{ return (function(){if(i_1==3){ return this_v0.__S1.Q_in} else{ return (function(){if(i_1==4){ return this_v0.__S2.Q_in} else{ return this_v0.__S3.Q_in}})()}})()}})()}})()}})(),[]);
                var subExp_15/*might have an error:*/ = tmp.res;
                
                var subExp_12=subExp_15>0;
                if(subExp_12){
                    var subExp_13=_if_0([]);
                    return subExp_13;
                }
                else{
                    var subExp_14=_else_0([]);
                    return subExp_14;
                }
            }
            var _ret_0=eval_if_0([]);
            var actions_2=_ret_0[+1];
            var _if_1 = function(){
                var subExpArr_17=[1,i_1];
                var subExp_16=[subExpArr_17];
                var actions_3=[].concat(actions_2,subExp_16);
                var subExp_18=[1,actions_3,0];
                return subExp_18;
            }
            var _else_1 = function(){
                var subExp_19=[1,actions_2,0];
                return subExp_19;
            }
            var eval_if_1 = function(){
                var tmp = Queue_size((function(){if(i_1==0){ return this_v0.__H0.Q_out} else{ return (function(){if(i_1==1){ return this_v0.__H1.Q_out} else{ return (function(){if(i_1==2){ return this_v0.__S0.Q_out} else{ return (function(){if(i_1==3){ return this_v0.__S1.Q_out} else{ return (function(){if(i_1==4){ return this_v0.__S2.Q_out} else{ return this_v0.__S3.Q_out}})()}})()}})()}})()}})(),[]);
                var subExp_23/*might have an error:*/ = tmp.res;
                
                var subExp_20=subExp_23>0;
                if(subExp_20){
                    var subExp_21=_if_1([]);
                    return subExp_21;
                }
                else{
                    var subExp_22=_else_1([]);
                    return subExp_22;
                }
            }
            var _ret_1=eval_if_1([]);
            var actions_3=_ret_1[+1];
            var i_2=i_1+1;
            var _new_args_0=[i_2,actions_3];
            var subExp_24=[0,_new_args_0,0];
            return subExp_24;
        }
        else{
            var subExp_25=[1,_args_0,0];
            return subExp_25;
        }
    }
    var _loop_0 = function(arg_0){
        var loop_body_1=arg_0[+0];
        var args_0=arg_0[+1];
        var k_0=loop_body_1(args_0);
        var subExp_27=k_0[+0];
        var subExp_26=subExp_27!=0;
        if(subExp_26){
            return k_0;
        }
        var subExp_arg_29=k_0[+1];
        var subExp_28=_loop_0([loop_body_1,subExp_arg_29]);
        return subExp_28;
    }
    var _args_0=[i_0,actions_0];
    var _ret_0=_loop_0([loop_body_0,_args_0]);
    var _tuple_0=_ret_0[+1];
    var i_1=_tuple_0[+0];
    var actions_1=_tuple_0[+1];
    var subExp_arg_32=0;
    var subExp_34=actions_1.length;
    var subExp_arg_33=subExp_34-1;
    var subExpArr_31=sample(RandomInteger({n:((subExp_arg_33)-(subExp_arg_32)+1)}))+(subExp_arg_32);
    var subExp_30=actions_1[+subExpArr_31];
    return {res:subExp_30,obj:this_v0};
}
var __D___step = function(this_v0){
    var _if_0 = function(){
        var tmp = __D_scheduler(this_v0,[]);
        var _tuple_0 = tmp.res;
        var this_v1 = tmp.obj;
        var action_0=_tuple_0[+0];
        var node_0=_tuple_0[+1];
        var _if_1 = function(){
            var _if_2 = function(){
                var tmp = Queue_takeFront(this_v1.__H0.Q_out,[]);
                var _tuple_1 = tmp.res;
                var new___H0=_.assign({},this_v1.__H0,{Q_out:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__H0: new___H0});
                var pkt_0=_tuple_1[+0];
                var port_0=_tuple_1[+1];
                var _if_3 = function(){
                    var subExp_arg_35=1;
                    var new___S0=_.assign({},this_v2.__S0,{Q_in:Queue_pushBack(this_v2.__S0.Q_in,[pkt_0,subExp_arg_35]).obj});
                    var this_v3 = _.assign({},this_v2,{__S0: new___S0});
                    var subExp_36=[1,this_v3,0];
                    return subExp_36;
                }
                var _else_0 = function(){
                    var subExp_37=[1,this_v2,0];
                    return subExp_37;
                }
                var eval_if_0 = function(){
                    var subExp_38=port_0==1;
                    if(subExp_38){
                        var subExp_39=_if_3([]);
                        return subExp_39;
                    }
                    else{
                        var subExp_40=_else_0([]);
                        return subExp_40;
                    }
                }
                var _ret_0=eval_if_0([]);
                var this_v2=_ret_0[+1];
                var subExp_41=[1,this_v2,0];
                return subExp_41;
            }
            var _else_0 = function(){
                var subExp_42=[1,this_v1,0];
                return subExp_42;
            }
            var eval_if_0 = function(){
                var subExp_46=node_0==0;
                var tmp = Queue_size(this_v1.__H0.Q_out,[]);
                var subExp_47 = tmp.res;
                var new___H0=_.assign({},this_v1.__H0,{Q_out:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__H0: new___H0});
                var subExp_43=subExp_46&&subExp_47;
                if(subExp_43){
                    var subExp_44=_if_2([]);
                    return subExp_44;
                }
                else{
                    var subExp_45=_else_0([]);
                    return subExp_45;
                }
            }
            var _ret_0=eval_if_0([]);
            var this_v1=_ret_0[+1];
            var _if_3 = function(){
                var tmp = Queue_takeFront(this_v1.__H1.Q_out,[]);
                var _tuple_1 = tmp.res;
                var new___H1=_.assign({},this_v1.__H1,{Q_out:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__H1: new___H1});
                var pkt_0=_tuple_1[+0];
                var port_0=_tuple_1[+1];
                var _if_4 = function(){
                    var subExp_arg_48=3;
                    var new___S3=_.assign({},this_v2.__S3,{Q_in:Queue_pushBack(this_v2.__S3.Q_in,[pkt_0,subExp_arg_48]).obj});
                    var this_v3 = _.assign({},this_v2,{__S3: new___S3});
                    var subExp_49=[1,this_v3,0];
                    return subExp_49;
                }
                var _else_1 = function(){
                    var subExp_50=[1,this_v2,0];
                    return subExp_50;
                }
                var eval_if_1 = function(){
                    var subExp_51=port_0==1;
                    if(subExp_51){
                        var subExp_52=_if_4([]);
                        return subExp_52;
                    }
                    else{
                        var subExp_53=_else_1([]);
                        return subExp_53;
                    }
                }
                var _ret_1=eval_if_1([]);
                var this_v2=_ret_1[+1];
                var subExp_54=[1,this_v2,0];
                return subExp_54;
            }
            var _else_1 = function(){
                var subExp_55=[1,this_v1,0];
                return subExp_55;
            }
            var eval_if_1 = function(){
                var subExp_59=node_0==1;
                var tmp = Queue_size(this_v1.__H1.Q_out,[]);
                var subExp_60 = tmp.res;
                var new___H1=_.assign({},this_v1.__H1,{Q_out:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__H1: new___H1});
                var subExp_56=subExp_59&&subExp_60;
                if(subExp_56){
                    var subExp_57=_if_3([]);
                    return subExp_57;
                }
                else{
                    var subExp_58=_else_1([]);
                    return subExp_58;
                }
            }
            var _ret_1=eval_if_1([]);
            var this_v1=_ret_1[+1];
            var _if_4 = function(){
                var tmp = Queue_takeFront(this_v1.__S0.Q_out,[]);
                var _tuple_1 = tmp.res;
                var new___S0=_.assign({},this_v1.__S0,{Q_out:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S0: new___S0});
                var pkt_0=_tuple_1[+0];
                var port_0=_tuple_1[+1];
                var _if_5 = function(){
                    var subExp_arg_61=1;
                    var new___H0=_.assign({},this_v2.__H0,{Q_in:Queue_pushBack(this_v2.__H0.Q_in,[pkt_0,subExp_arg_61]).obj});
                    var this_v3 = _.assign({},this_v2,{__H0: new___H0});
                    var subExp_62=[1,this_v3,0];
                    return subExp_62;
                }
                var _else_2 = function(){
                    var subExp_63=[1,this_v2,0];
                    return subExp_63;
                }
                var eval_if_2 = function(){
                    var subExp_64=port_0==1;
                    if(subExp_64){
                        var subExp_65=_if_5([]);
                        return subExp_65;
                    }
                    else{
                        var subExp_66=_else_2([]);
                        return subExp_66;
                    }
                }
                var _ret_2=eval_if_2([]);
                var this_v2=_ret_2[+1];
                var _if_6 = function(){
                    var subExp_arg_67=1;
                    var new___S1=_.assign({},this_v2.__S1,{Q_in:Queue_pushBack(this_v2.__S1.Q_in,[pkt_0,subExp_arg_67]).obj});
                    var this_v3 = _.assign({},this_v2,{__S1: new___S1});
                    var subExp_68=[1,this_v3,0];
                    return subExp_68;
                }
                var _else_3 = function(){
                    var subExp_69=[1,this_v2,0];
                    return subExp_69;
                }
                var eval_if_3 = function(){
                    var subExp_70=port_0==2;
                    if(subExp_70){
                        var subExp_71=_if_6([]);
                        return subExp_71;
                    }
                    else{
                        var subExp_72=_else_3([]);
                        return subExp_72;
                    }
                }
                var _ret_3=eval_if_3([]);
                var this_v2=_ret_3[+1];
                var _if_7 = function(){
                    var subExp_arg_73=1;
                    var new___S3=_.assign({},this_v2.__S3,{Q_in:Queue_pushBack(this_v2.__S3.Q_in,[pkt_0,subExp_arg_73]).obj});
                    var this_v3 = _.assign({},this_v2,{__S3: new___S3});
                    var subExp_74=[1,this_v3,0];
                    return subExp_74;
                }
                var _else_4 = function(){
                    var subExp_75=[1,this_v2,0];
                    return subExp_75;
                }
                var eval_if_4 = function(){
                    var subExp_76=port_0==3;
                    if(subExp_76){
                        var subExp_77=_if_7([]);
                        return subExp_77;
                    }
                    else{
                        var subExp_78=_else_4([]);
                        return subExp_78;
                    }
                }
                var _ret_4=eval_if_4([]);
                var this_v2=_ret_4[+1];
                var _if_8 = function(){
                    var subExp_arg_79=1;
                    var new___S2=_.assign({},this_v2.__S2,{Q_in:Queue_pushBack(this_v2.__S2.Q_in,[pkt_0,subExp_arg_79]).obj});
                    var this_v3 = _.assign({},this_v2,{__S2: new___S2});
                    var subExp_80=[1,this_v3,0];
                    return subExp_80;
                }
                var _else_5 = function(){
                    var subExp_81=[1,this_v2,0];
                    return subExp_81;
                }
                var eval_if_5 = function(){
                    var subExp_82=port_0==4;
                    if(subExp_82){
                        var subExp_83=_if_8([]);
                        return subExp_83;
                    }
                    else{
                        var subExp_84=_else_5([]);
                        return subExp_84;
                    }
                }
                var _ret_5=eval_if_5([]);
                var this_v2=_ret_5[+1];
                var subExp_85=[1,this_v2,0];
                return subExp_85;
            }
            var _else_2 = function(){
                var subExp_86=[1,this_v1,0];
                return subExp_86;
            }
            var eval_if_2 = function(){
                var subExp_90=node_0==2;
                var tmp = Queue_size(this_v1.__S0.Q_out,[]);
                var subExp_91 = tmp.res;
                var new___S0=_.assign({},this_v1.__S0,{Q_out:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S0: new___S0});
                var subExp_87=subExp_90&&subExp_91;
                if(subExp_87){
                    var subExp_88=_if_4([]);
                    return subExp_88;
                }
                else{
                    var subExp_89=_else_2([]);
                    return subExp_89;
                }
            }
            var _ret_2=eval_if_2([]);
            var this_v1=_ret_2[+1];
            var _if_5 = function(){
                var tmp = Queue_takeFront(this_v1.__S1.Q_out,[]);
                var _tuple_1 = tmp.res;
                var new___S1=_.assign({},this_v1.__S1,{Q_out:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S1: new___S1});
                var pkt_0=_tuple_1[+0];
                var port_0=_tuple_1[+1];
                var _if_6 = function(){
                    var subExp_arg_92=2;
                    var new___S0=_.assign({},this_v2.__S0,{Q_in:Queue_pushBack(this_v2.__S0.Q_in,[pkt_0,subExp_arg_92]).obj});
                    var this_v3 = _.assign({},this_v2,{__S0: new___S0});
                    var subExp_93=[1,this_v3,0];
                    return subExp_93;
                }
                var _else_3 = function(){
                    var subExp_94=[1,this_v2,0];
                    return subExp_94;
                }
                var eval_if_3 = function(){
                    var subExp_95=port_0==1;
                    if(subExp_95){
                        var subExp_96=_if_6([]);
                        return subExp_96;
                    }
                    else{
                        var subExp_97=_else_3([]);
                        return subExp_97;
                    }
                }
                var _ret_3=eval_if_3([]);
                var this_v2=_ret_3[+1];
                var _if_7 = function(){
                    var subExp_arg_98=2;
                    var new___S2=_.assign({},this_v2.__S2,{Q_in:Queue_pushBack(this_v2.__S2.Q_in,[pkt_0,subExp_arg_98]).obj});
                    var this_v3 = _.assign({},this_v2,{__S2: new___S2});
                    var subExp_99=[1,this_v3,0];
                    return subExp_99;
                }
                var _else_4 = function(){
                    var subExp_100=[1,this_v2,0];
                    return subExp_100;
                }
                var eval_if_4 = function(){
                    var subExp_101=port_0==2;
                    if(subExp_101){
                        var subExp_102=_if_7([]);
                        return subExp_102;
                    }
                    else{
                        var subExp_103=_else_4([]);
                        return subExp_103;
                    }
                }
                var _ret_4=eval_if_4([]);
                var this_v2=_ret_4[+1];
                var subExp_104=[1,this_v2,0];
                return subExp_104;
            }
            var _else_3 = function(){
                var subExp_105=[1,this_v1,0];
                return subExp_105;
            }
            var eval_if_3 = function(){
                var subExp_109=node_0==3;
                var tmp = Queue_size(this_v1.__S1.Q_out,[]);
                var subExp_110 = tmp.res;
                var new___S1=_.assign({},this_v1.__S1,{Q_out:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S1: new___S1});
                var subExp_106=subExp_109&&subExp_110;
                if(subExp_106){
                    var subExp_107=_if_5([]);
                    return subExp_107;
                }
                else{
                    var subExp_108=_else_3([]);
                    return subExp_108;
                }
            }
            var _ret_3=eval_if_3([]);
            var this_v1=_ret_3[+1];
            var _if_6 = function(){
                var tmp = Queue_takeFront(this_v1.__S2.Q_out,[]);
                var _tuple_1 = tmp.res;
                var new___S2=_.assign({},this_v1.__S2,{Q_out:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S2: new___S2});
                var pkt_0=_tuple_1[+0];
                var port_0=_tuple_1[+1];
                var _if_7 = function(){
                    var subExp_arg_111=4;
                    var new___S0=_.assign({},this_v2.__S0,{Q_in:Queue_pushBack(this_v2.__S0.Q_in,[pkt_0,subExp_arg_111]).obj});
                    var this_v3 = _.assign({},this_v2,{__S0: new___S0});
                    var subExp_112=[1,this_v3,0];
                    return subExp_112;
                }
                var _else_4 = function(){
                    var subExp_113=[1,this_v2,0];
                    return subExp_113;
                }
                var eval_if_4 = function(){
                    var subExp_114=port_0==1;
                    if(subExp_114){
                        var subExp_115=_if_7([]);
                        return subExp_115;
                    }
                    else{
                        var subExp_116=_else_4([]);
                        return subExp_116;
                    }
                }
                var _ret_4=eval_if_4([]);
                var this_v2=_ret_4[+1];
                var _if_8 = function(){
                    var subExp_arg_117=2;
                    var new___S1=_.assign({},this_v2.__S1,{Q_in:Queue_pushBack(this_v2.__S1.Q_in,[pkt_0,subExp_arg_117]).obj});
                    var this_v3 = _.assign({},this_v2,{__S1: new___S1});
                    var subExp_118=[1,this_v3,0];
                    return subExp_118;
                }
                var _else_5 = function(){
                    var subExp_119=[1,this_v2,0];
                    return subExp_119;
                }
                var eval_if_5 = function(){
                    var subExp_120=port_0==2;
                    if(subExp_120){
                        var subExp_121=_if_8([]);
                        return subExp_121;
                    }
                    else{
                        var subExp_122=_else_5([]);
                        return subExp_122;
                    }
                }
                var _ret_5=eval_if_5([]);
                var this_v2=_ret_5[+1];
                var _if_9 = function(){
                    var subExp_arg_123=2;
                    var new___S3=_.assign({},this_v2.__S3,{Q_in:Queue_pushBack(this_v2.__S3.Q_in,[pkt_0,subExp_arg_123]).obj});
                    var this_v3 = _.assign({},this_v2,{__S3: new___S3});
                    var subExp_124=[1,this_v3,0];
                    return subExp_124;
                }
                var _else_6 = function(){
                    var subExp_125=[1,this_v2,0];
                    return subExp_125;
                }
                var eval_if_6 = function(){
                    var subExp_126=port_0==3;
                    if(subExp_126){
                        var subExp_127=_if_9([]);
                        return subExp_127;
                    }
                    else{
                        var subExp_128=_else_6([]);
                        return subExp_128;
                    }
                }
                var _ret_6=eval_if_6([]);
                var this_v2=_ret_6[+1];
                var subExp_129=[1,this_v2,0];
                return subExp_129;
            }
            var _else_4 = function(){
                var subExp_130=[1,this_v1,0];
                return subExp_130;
            }
            var eval_if_4 = function(){
                var subExp_134=node_0==4;
                var tmp = Queue_size(this_v1.__S2.Q_out,[]);
                var subExp_135 = tmp.res;
                var new___S2=_.assign({},this_v1.__S2,{Q_out:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S2: new___S2});
                var subExp_131=subExp_134&&subExp_135;
                if(subExp_131){
                    var subExp_132=_if_6([]);
                    return subExp_132;
                }
                else{
                    var subExp_133=_else_4([]);
                    return subExp_133;
                }
            }
            var _ret_4=eval_if_4([]);
            var this_v1=_ret_4[+1];
            var _if_7 = function(){
                var tmp = Queue_takeFront(this_v1.__S3.Q_out,[]);
                var _tuple_1 = tmp.res;
                var new___S3=_.assign({},this_v1.__S3,{Q_out:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S3: new___S3});
                var pkt_0=_tuple_1[+0];
                var port_0=_tuple_1[+1];
                var _if_8 = function(){
                    var subExp_arg_136=3;
                    var new___S0=_.assign({},this_v2.__S0,{Q_in:Queue_pushBack(this_v2.__S0.Q_in,[pkt_0,subExp_arg_136]).obj});
                    var this_v3 = _.assign({},this_v2,{__S0: new___S0});
                    var subExp_137=[1,this_v3,0];
                    return subExp_137;
                }
                var _else_5 = function(){
                    var subExp_138=[1,this_v2,0];
                    return subExp_138;
                }
                var eval_if_5 = function(){
                    var subExp_139=port_0==1;
                    if(subExp_139){
                        var subExp_140=_if_8([]);
                        return subExp_140;
                    }
                    else{
                        var subExp_141=_else_5([]);
                        return subExp_141;
                    }
                }
                var _ret_5=eval_if_5([]);
                var this_v2=_ret_5[+1];
                var _if_9 = function(){
                    var subExp_arg_142=3;
                    var new___S2=_.assign({},this_v2.__S2,{Q_in:Queue_pushBack(this_v2.__S2.Q_in,[pkt_0,subExp_arg_142]).obj});
                    var this_v3 = _.assign({},this_v2,{__S2: new___S2});
                    var subExp_143=[1,this_v3,0];
                    return subExp_143;
                }
                var _else_6 = function(){
                    var subExp_144=[1,this_v2,0];
                    return subExp_144;
                }
                var eval_if_6 = function(){
                    var subExp_145=port_0==2;
                    if(subExp_145){
                        var subExp_146=_if_9([]);
                        return subExp_146;
                    }
                    else{
                        var subExp_147=_else_6([]);
                        return subExp_147;
                    }
                }
                var _ret_6=eval_if_6([]);
                var this_v2=_ret_6[+1];
                var _if_10 = function(){
                    var subExp_arg_148=1;
                    var new___H1=_.assign({},this_v2.__H1,{Q_in:Queue_pushBack(this_v2.__H1.Q_in,[pkt_0,subExp_arg_148]).obj});
                    var this_v3 = _.assign({},this_v2,{__H1: new___H1});
                    var subExp_149=[1,this_v3,0];
                    return subExp_149;
                }
                var _else_7 = function(){
                    var subExp_150=[1,this_v2,0];
                    return subExp_150;
                }
                var eval_if_7 = function(){
                    var subExp_151=port_0==3;
                    if(subExp_151){
                        var subExp_152=_if_10([]);
                        return subExp_152;
                    }
                    else{
                        var subExp_153=_else_7([]);
                        return subExp_153;
                    }
                }
                var _ret_7=eval_if_7([]);
                var this_v2=_ret_7[+1];
                var subExp_154=[1,this_v2,0];
                return subExp_154;
            }
            var _else_5 = function(){
                var subExp_155=[1,this_v1,0];
                return subExp_155;
            }
            var eval_if_5 = function(){
                var subExp_159=node_0==5;
                var tmp = Queue_size(this_v1.__S3.Q_out,[]);
                var subExp_160 = tmp.res;
                var new___S3=_.assign({},this_v1.__S3,{Q_out:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S3: new___S3});
                var subExp_156=subExp_159&&subExp_160;
                if(subExp_156){
                    var subExp_157=_if_7([]);
                    return subExp_157;
                }
                else{
                    var subExp_158=_else_5([]);
                    return subExp_158;
                }
            }
            var _ret_5=eval_if_5([]);
            var this_v1=_ret_5[+1];
            var subExp_161=[1,this_v1,0];
            return subExp_161;
        }
        var _else_0 = function(){
            var _if_2 = function(){
                var this_v2 = _.assign({},this_v1,{__H0: __h0_ty___run(this_v1.__H0,[]).obj});
                var subExp_162=[1,this_v2,0];
                return subExp_162;
            }
            var _else_1 = function(){
                var subExp_163=[1,this_v1,0];
                return subExp_163;
            }
            var eval_if_0 = function(){
                var subExp_167=node_0==0;
                var tmp = Queue_size(this_v1.__H0.Q_in,[]);
                var subExp_168 = tmp.res;
                var new___H0=_.assign({},this_v1.__H0,{Q_in:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__H0: new___H0});
                var subExp_164=subExp_167&&subExp_168;
                if(subExp_164){
                    var subExp_165=_if_2([]);
                    return subExp_165;
                }
                else{
                    var subExp_166=_else_1([]);
                    return subExp_166;
                }
            }
            var _ret_0=eval_if_0([]);
            var this_v1=_ret_0[+1];
            var _if_3 = function(){
                var this_v2 = _.assign({},this_v1,{__H1: __h1_ty___run(this_v1.__H1,[]).obj});
                var subExp_169=[1,this_v2,0];
                return subExp_169;
            }
            var _else_2 = function(){
                var subExp_170=[1,this_v1,0];
                return subExp_170;
            }
            var eval_if_1 = function(){
                var subExp_174=node_0==1;
                var tmp = Queue_size(this_v1.__H1.Q_in,[]);
                var subExp_175 = tmp.res;
                var new___H1=_.assign({},this_v1.__H1,{Q_in:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__H1: new___H1});
                var subExp_171=subExp_174&&subExp_175;
                if(subExp_171){
                    var subExp_172=_if_3([]);
                    return subExp_172;
                }
                else{
                    var subExp_173=_else_2([]);
                    return subExp_173;
                }
            }
            var _ret_1=eval_if_1([]);
            var this_v1=_ret_1[+1];
            var _if_4 = function(){
                var this_v2 = _.assign({},this_v1,{__S0: __s0_ty___run(this_v1.__S0,[]).obj});
                var subExp_176=[1,this_v2,0];
                return subExp_176;
            }
            var _else_3 = function(){
                var subExp_177=[1,this_v1,0];
                return subExp_177;
            }
            var eval_if_2 = function(){
                var subExp_181=node_0==2;
                var tmp = Queue_size(this_v1.__S0.Q_in,[]);
                var subExp_182 = tmp.res;
                var new___S0=_.assign({},this_v1.__S0,{Q_in:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S0: new___S0});
                var subExp_178=subExp_181&&subExp_182;
                if(subExp_178){
                    var subExp_179=_if_4([]);
                    return subExp_179;
                }
                else{
                    var subExp_180=_else_3([]);
                    return subExp_180;
                }
            }
            var _ret_2=eval_if_2([]);
            var this_v1=_ret_2[+1];
            var _if_5 = function(){
                var this_v2 = _.assign({},this_v1,{__S1: __s1_ty___run(this_v1.__S1,[]).obj});
                var subExp_183=[1,this_v2,0];
                return subExp_183;
            }
            var _else_4 = function(){
                var subExp_184=[1,this_v1,0];
                return subExp_184;
            }
            var eval_if_3 = function(){
                var subExp_188=node_0==3;
                var tmp = Queue_size(this_v1.__S1.Q_in,[]);
                var subExp_189 = tmp.res;
                var new___S1=_.assign({},this_v1.__S1,{Q_in:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S1: new___S1});
                var subExp_185=subExp_188&&subExp_189;
                if(subExp_185){
                    var subExp_186=_if_5([]);
                    return subExp_186;
                }
                else{
                    var subExp_187=_else_4([]);
                    return subExp_187;
                }
            }
            var _ret_3=eval_if_3([]);
            var this_v1=_ret_3[+1];
            var _if_6 = function(){
                var this_v2 = _.assign({},this_v1,{__S2: __s2_ty___run(this_v1.__S2,[]).obj});
                var subExp_190=[1,this_v2,0];
                return subExp_190;
            }
            var _else_5 = function(){
                var subExp_191=[1,this_v1,0];
                return subExp_191;
            }
            var eval_if_4 = function(){
                var subExp_195=node_0==4;
                var tmp = Queue_size(this_v1.__S2.Q_in,[]);
                var subExp_196 = tmp.res;
                var new___S2=_.assign({},this_v1.__S2,{Q_in:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S2: new___S2});
                var subExp_192=subExp_195&&subExp_196;
                if(subExp_192){
                    var subExp_193=_if_6([]);
                    return subExp_193;
                }
                else{
                    var subExp_194=_else_5([]);
                    return subExp_194;
                }
            }
            var _ret_4=eval_if_4([]);
            var this_v1=_ret_4[+1];
            var _if_7 = function(){
                var this_v2 = _.assign({},this_v1,{__S3: __s3_ty___run(this_v1.__S3,[]).obj});
                var subExp_197=[1,this_v2,0];
                return subExp_197;
            }
            var _else_6 = function(){
                var subExp_198=[1,this_v1,0];
                return subExp_198;
            }
            var eval_if_5 = function(){
                var subExp_202=node_0==5;
                var tmp = Queue_size(this_v1.__S3.Q_in,[]);
                var subExp_203 = tmp.res;
                var new___S3=_.assign({},this_v1.__S3,{Q_in:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S3: new___S3});
                var subExp_199=subExp_202&&subExp_203;
                if(subExp_199){
                    var subExp_200=_if_7([]);
                    return subExp_200;
                }
                else{
                    var subExp_201=_else_6([]);
                    return subExp_201;
                }
            }
            var _ret_5=eval_if_5([]);
            var this_v1=_ret_5[+1];
            var subExp_204=[1,this_v1,0];
            return subExp_204;
        }
        var eval_if_0 = function(){
            if(action_0){
                var subExp_205=_if_1([]);
                return subExp_205;
            }
            else{
                var subExp_206=_else_0([]);
                return subExp_206;
            }
        }
        var _ret_0=eval_if_0([]);
        var this_v1=_ret_0[+1];
        var subExp_207=[1,this_v1,0];
        return subExp_207;
    }
    var _else_0 = function(){
        var subExp_208=[1,this_v0,0];
        return subExp_208;
    }
    var eval_if_0 = function(){
        var tmp = Queue_size(this_v0.__H0.Q_in,[]);
        var subExp_232 = tmp.res;
        var new___H0=_.assign({},this_v0.__H0,{Q_in:tmp.obj});
        var this_v1 = _.assign({},this_v0,{__H0: new___H0});
        var tmp = Queue_size(this_v1.__H0.Q_out,[]);
        var subExp_233 = tmp.res;
        var new___H0=_.assign({},this_v1.__H0,{Q_out:tmp.obj});
        var this_v2 = _.assign({},this_v1,{__H0: new___H0});
        var subExp_230=subExp_232||subExp_233;
        var tmp = Queue_size(this_v2.__H1.Q_in,[]);
        var subExp_231 = tmp.res;
        var new___H1=_.assign({},this_v2.__H1,{Q_in:tmp.obj});
        var this_v3 = _.assign({},this_v2,{__H1: new___H1});
        var subExp_228=subExp_230||subExp_231;
        var tmp = Queue_size(this_v3.__H1.Q_out,[]);
        var subExp_229 = tmp.res;
        var new___H1=_.assign({},this_v3.__H1,{Q_out:tmp.obj});
        var this_v4 = _.assign({},this_v3,{__H1: new___H1});
        var subExp_226=subExp_228||subExp_229;
        var tmp = Queue_size(this_v4.__S0.Q_in,[]);
        var subExp_227 = tmp.res;
        var new___S0=_.assign({},this_v4.__S0,{Q_in:tmp.obj});
        var this_v5 = _.assign({},this_v4,{__S0: new___S0});
        var subExp_224=subExp_226||subExp_227;
        var tmp = Queue_size(this_v5.__S0.Q_out,[]);
        var subExp_225 = tmp.res;
        var new___S0=_.assign({},this_v5.__S0,{Q_out:tmp.obj});
        var this_v6 = _.assign({},this_v5,{__S0: new___S0});
        var subExp_222=subExp_224||subExp_225;
        var tmp = Queue_size(this_v6.__S1.Q_in,[]);
        var subExp_223 = tmp.res;
        var new___S1=_.assign({},this_v6.__S1,{Q_in:tmp.obj});
        var this_v7 = _.assign({},this_v6,{__S1: new___S1});
        var subExp_220=subExp_222||subExp_223;
        var tmp = Queue_size(this_v7.__S1.Q_out,[]);
        var subExp_221 = tmp.res;
        var new___S1=_.assign({},this_v7.__S1,{Q_out:tmp.obj});
        var this_v8 = _.assign({},this_v7,{__S1: new___S1});
        var subExp_218=subExp_220||subExp_221;
        var tmp = Queue_size(this_v8.__S2.Q_in,[]);
        var subExp_219 = tmp.res;
        var new___S2=_.assign({},this_v8.__S2,{Q_in:tmp.obj});
        var this_v9 = _.assign({},this_v8,{__S2: new___S2});
        var subExp_216=subExp_218||subExp_219;
        var tmp = Queue_size(this_v9.__S2.Q_out,[]);
        var subExp_217 = tmp.res;
        var new___S2=_.assign({},this_v9.__S2,{Q_out:tmp.obj});
        var this_v10 = _.assign({},this_v9,{__S2: new___S2});
        var subExp_214=subExp_216||subExp_217;
        var tmp = Queue_size(this_v10.__S3.Q_in,[]);
        var subExp_215 = tmp.res;
        var new___S3=_.assign({},this_v10.__S3,{Q_in:tmp.obj});
        var this_v11 = _.assign({},this_v10,{__S3: new___S3});
        var subExp_212=subExp_214||subExp_215;
        var tmp = Queue_size(this_v11.__S3.Q_out,[]);
        var subExp_213 = tmp.res;
        var new___S3=_.assign({},this_v11.__S3,{Q_out:tmp.obj});
        var this_v12 = _.assign({},this_v11,{__S3: new___S3});
        var subExp_209=subExp_212||subExp_213;
        if(subExp_209){
            var subExp_210=_if_0([]);
            return subExp_210;
        }
        else{
            var subExp_211=_else_0([]);
            return subExp_211;
        }
    }
    var _ret_0=eval_if_0([]);
    var this_v0=_ret_0[+1];
    var subExp_234=[];
    return {res:subExp_234,obj:this_v0};
}

translating meaning of __H0
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
__H0
 
Expression of type Identifier:
__h0_ty
 
Expression of type VarDecl:
__H0: __h0_ty
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
__H0: __h0_ty
TODO 'VarDecl' not translated yet. You might want to insert:
override Expression visit(VarDecl e){
    code~=;
    visit(e.dtype);
    code~=;
    return e;
}


translating meaning of __H1
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
__H1
 
Expression of type Identifier:
__h1_ty
 
Expression of type VarDecl:
__H1: __h1_ty
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
__H1: __h1_ty
TODO 'VarDecl' not translated yet. You might want to insert:
override Expression visit(VarDecl e){
    code~=;
    visit(e.dtype);
    code~=;
    return e;
}


translating meaning of __S0
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
__S0
 
Expression of type Identifier:
__s0_ty
 
Expression of type VarDecl:
__S0: __s0_ty
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
__S0: __s0_ty
TODO 'VarDecl' not translated yet. You might want to insert:
override Expression visit(VarDecl e){
    code~=;
    visit(e.dtype);
    code~=;
    return e;
}


translating meaning of __S1
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
__S1
 
Expression of type Identifier:
__s1_ty
 
Expression of type VarDecl:
__S1: __s1_ty
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
__S1: __s1_ty
TODO 'VarDecl' not translated yet. You might want to insert:
override Expression visit(VarDecl e){
    code~=;
    visit(e.dtype);
    code~=;
    return e;
}


translating meaning of __S2
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
__S2
 
Expression of type Identifier:
__s2_ty
 
Expression of type VarDecl:
__S2: __s2_ty
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormaliundefined
zer...
VarsNormalizer DONE
def outside of main:(normalized)
__S2: __s2_ty
TODO 'VarDecl' not translated yet. You might want to insert:
override Expression visit(VarDecl e){
    code~=;
    visit(e.dtype);
    code~=;
    return e;
}


translating meaning of __S3
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
__S3
 
Expression of type Identifier:
__s3_ty
 
Expression of type VarDecl:
__S3: __s3_ty
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
__S3: __s3_ty
TODO 'VarDecl' not translated yet. You might want to insert:
override Expression visit(VarDecl e){
    code~=;
    visit(e.dtype);
    code~=;
    return e;
}


running webppl
E[r] = (4.6500000000000001*10^-01)

real	0m28.905s
user	0m27.468s
sys	0m2.300s
