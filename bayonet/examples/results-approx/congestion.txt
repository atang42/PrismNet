normalizing...
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
main
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__D'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__D'()
 
Expression of type ABinaryExp:
__d := __D'()
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
__d.__H0
 
Expression of type Identifier:
__run
 
Expression of type FieldExp:
__d.__H0.__run
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__H0.__run()
 
Expression of type LiteralExp:
30
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__step
 
Expression of type FieldExp:
__d.__step
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__step()
 
Expression of type RepeatExp:
repeat 30 {
    __d.__step();
}
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
__d.__H0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
__d.__H0.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
__d.__H0.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__H0.Q_in.size()
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
__d.__H0
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
__d.__H0.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
__d.__H0.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__H0.Q_out.size()
 
Expression of type ABinaryExp:
__d.__H0.Q_in.size() || __d.__H0.Q_out.size()
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__H1
 
Expression of type FieldExp:
__d.__H1
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
__d.__H1.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
__d.__H1.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__H1.Q_in.size()
 
Expression of type ABinaryExp:
__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__H1.Q_in.size()
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__H1
 
Expression of type FieldExp:
__d.__H1
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
__d.__H1.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
__d.__H1.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__H1.Q_out.size()
 
Expression of type ABinaryExp:
__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__H1.Q_in.size() || __d.__H1.Q_out.size()
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
__d.__S0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
__d.__S0.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
__d.__S0.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__S0.Q_in.size()
 
Expression of type ABinaryExp:
__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__H1.Q_in.size() || __d.__H1.Q_out.size() || __d.__S0.Q_in.size()
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
__d.__S0
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
__d.__S0.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
__d.__S0.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__S0.Q_out.size()
 
Expression of type ABinaryExp:
__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__H1.Q_in.size() || __d.__H1.Q_out.size() || __d.__S0.Q_in.size() || __d.__S0.Q_out.size()
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
__d.__S1
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
__d.__S1.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
__d.__S1.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__S1.Q_in.size()
 
Expression of type ABinaryExp:
__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__H1.Q_in.size() || __d.__H1.Q_out.size() || __d.__S0.Q_in.size() || __d.__S0.Q_out.size() || __d.__S1.Q_in.size()
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
__d.__S1
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
__d.__S1.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
__d.__S1.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__S1.Q_out.size()
 
Expression of type ABinaryExp:
__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__H1.Q_in.size() || __d.__H1.Q_out.size() || __d.__S0.Q_in.size() || __d.__S0.Q_out.size() || __d.__S1.Q_in.size() || __d.__S1.Q_out.size()
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
__d.__S2
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
__d.__S2.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
__d.__S2.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__S2.Q_in.size()
 
Expression of type ABinaryExp:
__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__H1.Q_in.size() || __d.__H1.Q_out.size() || __d.__S0.Q_in.size() || __d.__S0.Q_out.size() || __d.__S1.Q_in.size() || __d.__S1.Q_out.size() || __d.__S2.Q_in.size()
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
__d.__S2
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
__d.__S2.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
__d.__S2.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__d.__S2.Q_out.size()
 
Expression of type ABinaryExp:
(__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__H1.Q_in.size() || __d.__H1.Q_out.size() || __d.__S0.Q_in.size() || __d.__S0.Q_out.size() || __d.__S1.Q_in.size() || __d.__S1.Q_out.size() || __d.__S2.Q_in.size() || __d.__S2.Q_out.size())
 
Expression of type AUnaryExp:
!(__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__H1.Q_in.size() || __d.__H1.Q_out.size() || __d.__S0.Q_in.size() || __d.__S0.Q_out.size() || __d.__S1.Q_in.size() || __d.__S1.Q_out.size() || __d.__S2.Q_in.size() || __d.__S2.Q_out.size())
 
Expression of type AssertExp:
assert(!(__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__H1.Q_in.size() || __d.__H1.Q_out.size() || __d.__S0.Q_in.size() || __d.__S0.Q_out.size() || __d.__S1.Q_in.size() || __d.__S1.Q_out.size() || __d.__S2.Q_in.size() || __d.__S2.Q_out.size()))
 
Expression of type Identifier:
q1
 
Expression of type Identifier:
Expectation
 
Expression of type LiteralExp:
1
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
1 == 0
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
__d.__H0
 
Expression of type Identifier:
pkt_count
 
Expression of type FieldExp:
__d.__H0.pkt_count
 
Expression of type LiteralExp:
1
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
1 == 1
 
Expression of type Identifier:
__d
 
Expression of type Identifier:
__H1
 
Expression of type FieldExp:
__d.__H1
 
Expression of type Identifier:
pkt_count
 
Expression of type FieldExp:
__d.__H1.pkt_count
 
Expression of type LiteralExp:
0
 
Expression of type AssertExp:
assert(0)
 
Expression of type IteExp:
if 1 == 1 {
    __d.__H1.pkt_count;
} else {
    assert(0);
}
 
Expression of type IteExp:
(if 1 == 0 {
    __d.__H0.pkt_count;
} else if 1 == 1 {
    __d.__H1.pkt_count;
} else {
    assert(0);
})
 
Expression of type LiteralExp:
3
 
Expression of type ABinaryExp:
((if 1 == 0 {
    __d.__H0.pkt_count;
} else if 1 == 1 {
    __d.__H1.pkt_count;
} else {
    assert(0);
}) < 3)
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
(((if 1 == 0 {
    __d.__H0.pkt_count;
} else if 1 == 1 {
    __d.__H1.pkt_count;
} else {
    assert(0);
}) < 3) != 0)
 
Expression of type CallExp:
Expectation(((if 1 == 0 {
    __d.__H0.pkt_count;
} else if 1 == 1 {
    __d.__H1.pkt_count;
} else {
    assert(0);
}) < 3) != 0)
 
Expression of type ABinaryExp:
q1 := Expectation(((if 1 == 0 {
    __d.__H0.pkt_count;
} else if 1 == 1 {
    __d.__H1.pkt_count;
} else {
    assert(0);
}) < 3) != 0)
 
Expression of type Identifier:
(q1)
 
Expression of type ReturnExp:
return (q1)
 
Expression of type FunctionDef:
def main(){
    __d := __D'();
    __d.__H0.__run();
    repeat 30 {
        __d.__step();
    }
    assert(!(__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__H1.Q_in.size() || __d.__H1.Q_out.size() || __d.__S0.Q_in.size() || __d.__S0.Q_out.size() || __d.__S1.Q_in.size() || __d.__S1.Q_out.size() || __d.__S2.Q_in.size() || __d.__S2.Q_out.size()));
    q1 := Expectation(((if 1 == 0 {
        __d.__H0.pkt_count;
    } else if 1 == 1 {
        __d.__H1.pkt_count;
    } else {
        assert(0);
    }) < 3) != 0);
    return (q1);
}
 
done with forToWhile
whileToRec normalization...
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
done with whileToRec
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
done with tuplesNormalizer
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
done with unreachableNormalizer
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
TODO: not all types of Expression covered:
ℝ × __D
webppl translation...
translating meaning of __D
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
__D
 
Expression of type Identifier:
__H0
 
Expression of type Identifier:
__h0_ty
 
Expression of type VarDecl:
__H0: __h0_ty
 
Expression of type Identifier:
__H1
 
Expression of type Identifier:
__h1_ty
 
Expression of type VarDecl:
__H1: __h1_ty
 
Expression of type ABinaryExp:
__H0: __h0_ty , __H1: __h1_ty
 
Expression of type Identifier:
__S0
 
Expression of type Identifier:
__s0_ty
 
Expression of type VarDecl:
__S0: __s0_ty
 
Expression of type ABinaryExp:
__H0: __h0_ty , __H1: __h1_ty , __S0: __s0_ty
 
Expression of type Identifier:
__S1
 
Expression of type Identifier:
__s1_ty
 
Expression of type VarDecl:
__S1: __s1_ty
 
Expression of type ABinaryExp:
__H0: __h0_ty , __H1: __h1_ty , __S0: __s0_ty , __S1: __s1_ty
 
Expression of type Identifier:
__S2
 
Expression of type Identifier:
__s2_ty
 
Expression of type VarDecl:
__S2: __s2_ty
 
Expression of type ABinaryExp:
__H0: __h0_ty , __H1: __h1_ty , __S0: __s0_ty , __S1: __s1_ty , __S2: __s2_ty
 
Expression of type Identifier:
curAction
 
Expression of type Identifier:
ℝ
 
Expression of type VarDecl:
curAction: ℝ
 
Expression of type Identifier:
__D
 
Expression of type Identifier:
this
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
this.__H0
 
Expression of type Identifier:
__h0_ty'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__h0_ty'()
 
Expression of type ABinaryExp:
this.__H0 = __h0_ty'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
__H1
 
Expression of type FieldExp:
this.__H1
 
Expression of type Identifier:
__h1_ty'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__h1_ty'()
 
Expression of type ABinaryExp:
this.__H1 = __h1_ty'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this.__S0
 
Expression of type Identifier:
__s0_ty'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__s0_ty'()
 
Expression of type ABinaryExp:
this.__S0 = __s0_ty'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this.__S1
 
Expression of type Identifier:
__s1_ty'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__s1_ty'()
 
Expression of type ABinaryExp:
this.__S1 = __s1_ty'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this.__S2
 
Expression of type Identifier:
__s2_ty'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
__s2_ty'()
 
Expression of type ABinaryExp:
this.__S2 = __s2_ty'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
curAction
 
Expression of type FieldExp:
this.curAction
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
this.curAction = 0
 
Expression of type Identifier:
this
 
Expression of type ReturnExp:
return this
 
Expression of type FunctionDef:
def __D'(){
    this.__H0 = __h0_ty'();
    this.__H1 = __h1_ty'();
    this.__S0 = __s0_ty'();
    this.__S1 = __s1_ty'();
    this.__S2 = __s2_ty'();
    this.curAction = 0;
    return this;
}
 
Expression of type Identifier:
scheduler
 
Expression of type Identifier:
actions
 
Expression of type ArrayExp:
[]
 
Expression of type Identifier:
R
 
Expression of type Identifier:
R
 
Expression of type ABinaryExp:
(R × R)
 
Expression of type IndexExp:
(R × R)[]
 
Expression of type TypeAnnotationExp:
([]: (R × R)[])
 
Expression of type ABinaryExp:
actions := ([]: (R × R)[])
 
Expression of type Identifier:
i
 
Expression of type LiteralExp:
0
 
Expression of type LiteralExp:
5
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
actions
 
Expression of type Identifier:
actions
 
Expression of type LiteralExp:
0
 
Expression of type Identifier:
i
 
Expression of type TupleExp:
(0,i)
 
Expression of type ArrayExp:
[(0,i)]
 
Expression of type ABinaryExp:
actions ~ [(0,i)]
 
Expression of type ABinaryExp:
actions = actions ~ [(0,i)]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
actions
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,actions,0)
 
Expression of type ReturnExp:
return (1,actions,0)
 
Expression of type FunctionDef:
def _if(){
    actions = actions ~ [(0,i)];
    return (1,actions,0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
actions
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,actions,0)
 
Expression of type ReturnExp:
return (1,actions,0)
 
Expression of type FunctionDef:
def _else(){
    return (1,actions,0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
i
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
i == 0
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
this'.__H0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__H0.Q_in
 
Expression of type Identifier:
i
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
i == 1
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H1
 
Expression of type FieldExp:
this'.__H1
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__H1.Q_in
 
Expression of type Identifier:
i
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
i == 2
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S0.Q_in
 
Expression of type Identifier:
i
 
Expression of type LiteralExp:
3
 
Expression of type ABinaryExp:
i == 3
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this'.__S1
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S1.Q_in
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this'.__S2
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S2.Q_in
 
Expression of type IteExp:
if i == 3 {
    this'.__S1.Q_in;
} else {
    this'.__S2.Q_in;
}
 
Expression of type IteExp:
if i == 2 {
    this'.__S0.Q_in;
} else if i == 3 {
    this'.__S1.Q_in;
} else {
    this'.__S2.Q_in;
}
 
Expression of type IteExp:
if i == 1 {
    this'.__H1.Q_in;
} else if i == 2 {
    this'.__S0.Q_in;
} else if i == 3 {
    this'.__S1.Q_in;
} else {
    this'.__S2.Q_in;
}
 
Expression of type IteExp:
(if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__H1.Q_in;
} else if i == 2 {
    this'.__S0.Q_in;
} else if i == 3 {
    this'.__S1.Q_in;
} else {
    this'.__S2.Q_in;
})
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
(if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__H1.Q_in;
} else if i == 2 {
    this'.__S0.Q_in;
} else if i == 3 {
    this'.__S1.Q_in;
} else {
    this'.__S2.Q_in;
}).size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
(if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__H1.Q_in;
} else if i == 2 {
    this'.__S0.Q_in;
} else if i == 3 {
    this'.__S1.Q_in;
} else {
    this'.__S2.Q_in;
}).size()
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
(if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__H1.Q_in;
} else if i == 2 {
    this'.__S0.Q_in;
} else if i == 3 {
    this'.__S1.Q_in;
} else {
    this'.__S2.Q_in;
}).size() > 0
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if (if i == 0 {
    this'.__H0.Q_in;
} else if i == 1 {
    this'.__H1.Q_in;
} else if i == 2 {
    this'.__S0.Q_in;
} else if i == 3 {
    this'.__S1.Q_in;
} else {
    this'.__S2.Q_in;
}).size() > 0 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if (if i == 0 {
        this'.__H0.Q_in;
    } else if i == 1 {
        this'.__H1.Q_in;
    } else if i == 2 {
        this'.__S0.Q_in;
    } else if i == 3 {
        this'.__S1.Q_in;
    } else {
        this'.__S2.Q_in;
    }).size() > 0 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
actions
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
actions = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
actions
 
Expression of type Identifier:
actions
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
i
 
Expression of type TupleExp:
(1,i)
 
Expression of type ArrayExp:
[(1,i)]
 
Expression of type ABinaryExp:
actions ~ [(1,i)]
 
Expression of type ABinaryExp:
actions = actions ~ [(1,i)]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
actions
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,actions,0)
 
Expression of type ReturnExp:
return (1,actions,0)
 
Expression of type FunctionDef:
def _if(){
    actions = actions ~ [(1,i)];
    return (1,actions,0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
actions
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,actions,0)
 
Expression of type ReturnExp:
return (1,actions,0)
 
Expression of type FunctionDef:
def _else(){
    return (1,actions,0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
i
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
i == 0
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
this'.__H0
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__H0.Q_out
 
Expression of type Identifier:
i
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
i == 1
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H1
 
Expression of type FieldExp:
this'.__H1
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__H1.Q_out
 
Expression of type Identifier:
i
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
i == 2
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S0.Q_out
 
Expression of type Identifier:
i
 
Expression of type LiteralExp:
3
 
Expression of type ABinaryExp:
i == 3
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this'.__S1
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S1.Q_out
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this'.__S2
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S2.Q_out
 
Expression of type IteExp:
if i == 3 {
    this'.__S1.Q_out;
} else {
    this'.__S2.Q_out;
}
 
Expression of type IteExp:
if i == 2 {
    this'.__S0.Q_out;
} else if i == 3 {
    this'.__S1.Q_out;
} else {
    this'.__S2.Q_out;
}
 
Expression of type IteExp:
if i == 1 {
    this'.__H1.Q_out;
} else if i == 2 {
    this'.__S0.Q_out;
} else if i == 3 {
    this'.__S1.Q_out;
} else {
    this'.__S2.Q_out;
}
 
Expression of type IteExp:
(if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__H1.Q_out;
} else if i == 2 {
    this'.__S0.Q_out;
} else if i == 3 {
    this'.__S1.Q_out;
} else {
    this'.__S2.Q_out;
})
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
(if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__H1.Q_out;
} else if i == 2 {
    this'.__S0.Q_out;
} else if i == 3 {
    this'.__S1.Q_out;
} else {
    this'.__S2.Q_out;
}).size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
(if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__H1.Q_out;
} else if i == 2 {
    this'.__S0.Q_out;
} else if i == 3 {
    this'.__S1.Q_out;
} else {
    this'.__S2.Q_out;
}).size()
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
(if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__H1.Q_out;
} else if i == 2 {
    this'.__S0.Q_out;
} else if i == 3 {
    this'.__S1.Q_out;
} else {
    this'.__S2.Q_out;
}).size() > 0
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if (if i == 0 {
    this'.__H0.Q_out;
} else if i == 1 {
    this'.__H1.Q_out;
} else if i == 2 {
    this'.__S0.Q_out;
} else if i == 3 {
    this'.__S1.Q_out;
} else {
    this'.__S2.Q_out;
}).size() > 0 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if (if i == 0 {
        this'.__H0.Q_out;
    } else if i == 1 {
        this'.__H1.Q_out;
    } else if i == 2 {
        this'.__S0.Q_out;
    } else if i == 3 {
        this'.__S1.Q_out;
    } else {
        this'.__S2.Q_out;
    }).size() > 0 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
actions
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
actions = _ret[1]
 
Expression of type ForExp:
for i in [0..5){
    def _if(){
        actions = actions ~ [(0,i)];
        return (1,actions,0);
    }
    def _else(){
        return (1,actions,0);
    }
    def eval_if(){
        if (if i == 0 {
            this'.__H0.Q_in;
        } else if i == 1 {
            this'.__H1.Q_in;
        } else if i == 2 {
            this'.__S0.Q_in;
        } else if i == 3 {
            this'.__S1.Q_in;
        } else {
            this'.__S2.Q_in;
        }).size() > 0 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    actions = _ret[1];
    def _if(){
        actions = actions ~ [(1,i)];
        return (1,actions,0);
    }
    def _else(){
        return (1,actions,0);
    }
    def eval_if(){
        if (if i == 0 {
            this'.__H0.Q_out;
        } else if i == 1 {
            this'.__H1.Q_out;
        } else if i == 2 {
            this'.__S0.Q_out;
        } else if i == 3 {
            this'.__S1.Q_out;
        } else {
            this'.__S2.Q_out;
        }).size() > 0 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    actions = _ret[1];
}
 
Expression of type Identifier:
actions
 
Expression of type Identifier:
uniformInt
 
Expression of type LiteralExp:
0
 
Expression of type Identifier:
actions
 
Expression of type Identifier:
length
 
Expression of type FieldExp:
actions.length
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
actions.length - 1
 
Expression of type TupleExp:
(0,actions.length - 1)
 
Expression of type CallExp:
uniformInt(0,actions.length - 1)
 
Expression of type IndexExp:
actions[uniformInt(0,actions.length - 1)]
 
Expression of type ReturnExp:
return actions[uniformInt(0,actions.length - 1)]
 
Expression of type FunctionDef:
def scheduler(){
    actions := ([]: (R × R)[]);
    for i in [0..5){
        def _if(){
            actions = actions ~ [(0,i)];
            return (1,actions,0);
        }
        def _else(){
            return (1,actions,0);
        }
        def eval_if(){
            if (if i == 0 {
                this'.__H0.Q_in;
            } else if i == 1 {
                this'.__H1.Q_in;
            } else if i == 2 {
                this'.__S0.Q_in;
            } else if i == 3 {
                this'.__S1.Q_in;
            } else {
                this'.__S2.Q_in;
            }).size() > 0 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        actions = _ret[1];
        def _if(){
            actions = actions ~ [(1,i)];
            return (1,actions,0);
        }
        def _else(){
            return (1,actions,0);
        }
        def eval_if(){
            if (if i == 0 {
                this'.__H0.Q_out;
            } else if i == 1 {
                this'.__H1.Q_out;
            } else if i == 2 {
                this'.__S0.Q_out;
            } else if i == 3 {
                this'.__S1.Q_out;
            } else {
                this'.__S2.Q_out;
            }).size() > 0 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        actions = _ret[1];
    }
    return actions[uniformInt(0,actions.length - 1)];
}
 
Expression of type Identifier:
__step
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
action
 
Expression of type Identifier:
node
 
Expression of type TupleExp:
(action,node)
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
scheduler
 
Expression of type FieldExp:
this'.scheduler
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.scheduler()
 
Expression of type ABinaryExp:
(action,node) := this'.scheduler()
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
pkt
 
Expression of type Identifier:
port
 
Expression of type TupleExp:
(pkt,port)
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
this'.__H0
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__H0.Q_out
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.__H0.Q_out.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__H0.Q_out.takeFront()
 
Expression of type ABinaryExp:
(pkt,port) := this'.__H0.Q_out.takeFront()
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S0.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__S0.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
3
 
Expression of type TupleExp:
((pkt,3))
 
Expression of type CallExp:
this'.__S0.Q_in.pushBack((pkt,3))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S0.Q_in.pushBack((pkt,3));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
port == 1
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 1 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 1 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    (pkt,port) := this'.__H0.Q_out.takeFront();
    def _if(){
        this'.__S0.Q_in.pushBack((pkt,3));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 1 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
node
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
node == 0
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
this'.__H0
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__H0.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__H0.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__H0.Q_out.size()
 
Expression of type ABinaryExp:
node == 0 && this'.__H0.Q_out.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if node == 0 && this'.__H0.Q_out.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if node == 0 && this'.__H0.Q_out.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
pkt
 
Expression of type Identifier:
port
 
Expression of type TupleExp:
(pkt,port)
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H1
 
Expression of type FieldExp:
this'.__H1
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__H1.Q_out
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.__H1.Q_out.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__H1.Q_out.takeFront()
 
Expression of type ABinaryExp:
(pkt,port) := this'.__H1.Q_out.takeFront()
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this'.__S1
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S1.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__S1.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
3
 
Expression of type TupleExp:
((pkt,3))
 
Expression of type CallExp:
this'.__S1.Q_in.pushBack((pkt,3))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S1.Q_in.pushBack((pkt,3));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
port == 1
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 1 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 1 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    (pkt,port) := this'.__H1.Q_out.takeFront();
    def _if(){
        this'.__S1.Q_in.pushBack((pkt,3));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 1 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
node
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
node == 1
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H1
 
Expression of type FieldExp:
this'.__H1
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__H1.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__H1.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__H1.Q_out.size()
 
Expression of type ABinaryExp:
node == 1 && this'.__H1.Q_out.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if node == 1 && this'.__H1.Q_out.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if node == 1 && this'.__H1.Q_out.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
pkt
 
Expression of type Identifier:
port
 
Expression of type TupleExp:
(pkt,port)
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S0.Q_out
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.__S0.Q_out.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S0.Q_out.takeFront()
 
Expression of type ABinaryExp:
(pkt,port) := this'.__S0.Q_out.takeFront()
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this'.__S1
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S1.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__S1.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
1
 
Expression of type TupleExp:
((pkt,1))
 
Expression of type CallExp:
this'.__S1.Q_in.pushBack((pkt,1))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S1.Q_in.pushBack((pkt,1));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
port == 1
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 1 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 1 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this'.__S2
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S2.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__S2.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
1
 
Expression of type TupleExp:
((pkt,1))
 
Expression of type CallExp:
this'.__S2.Q_in.pushBack((pkt,1))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S2.Q_in.pushBack((pkt,1));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
port == 2
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 2 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 2 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
this'.__H0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__H0.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__H0.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
1
 
Expression of type TupleExp:
((pkt,1))
 
Expression of type CallExp:
this'.__H0.Q_in.pushBack((pkt,1))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__H0.Q_in.pushBack((pkt,1));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
3
 
Expression of type ABinaryExp:
port == 3
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 3 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 3 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    (pkt,port) := this'.__S0.Q_out.takeFront();
    def _if(){
        this'.__S1.Q_in.pushBack((pkt,1));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 1 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__S2.Q_in.pushBack((pkt,1));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 2 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__H0.Q_in.pushBack((pkt,1));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 3 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
node
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
node == 2
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S0.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S0.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S0.Q_out.size()
 
Expression of type ABinaryExp:
node == 2 && this'.__S0.Q_out.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if node == 2 && this'.__S0.Q_out.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if node == 2 && this'.__S0.Q_out.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
pkt
 
Expression of type Identifier:
port
 
Expression of type TupleExp:
(pkt,port)
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this'.__S1
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S1.Q_out
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.__S1.Q_out.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S1.Q_out.takeFront()
 
Expression of type ABinaryExp:
(pkt,port) := this'.__S1.Q_out.takeFront()
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S0.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__S0.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
1
 
Expression of type TupleExp:
((pkt,1))
 
Expression of type CallExp:
this'.__S0.Q_in.pushBack((pkt,1))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S0.Q_in.pushBack((pkt,1));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
port == 1
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 1 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 1 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this'.__S2
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S2.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__S2.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
2
 
Expression of type TupleExp:
((pkt,2))
 
Expression of type CallExp:
this'.__S2.Q_in.pushBack((pkt,2))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S2.Q_in.pushBack((pkt,2));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
port == 2
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 2 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 2 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H1
 
Expression of type FieldExp:
this'.__H1
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__H1.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__H1.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
1
 
Expression of type TupleExp:
((pkt,1))
 
Expression of type CallExp:
this'.__H1.Q_in.pushBack((pkt,1))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__H1.Q_in.pushBack((pkt,1));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
3
 
Expression of type ABinaryExp:
port == 3
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 3 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 3 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    (pkt,port) := this'.__S1.Q_out.takeFront();
    def _if(){
        this'.__S0.Q_in.pushBack((pkt,1));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 1 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__S2.Q_in.pushBack((pkt,2));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 2 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__H1.Q_in.pushBack((pkt,1));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 3 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
node
 
Expression of type LiteralExp:
3
 
Expression of type ABinaryExp:
node == 3
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this'.__S1
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S1.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S1.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S1.Q_out.size()
 
Expression of type ABinaryExp:
node == 3 && this'.__S1.Q_out.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if node == 3 && this'.__S1.Q_out.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if node == 3 && this'.__S1.Q_out.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
pkt
 
Expression of type Identifier:
port
 
Expression of type TupleExp:
(pkt,port)
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this'.__S2
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S2.Q_out
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.__S2.Q_out.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S2.Q_out.takeFront()
 
Expression of type ABinaryExp:
(pkt,port) := this'.__S2.Q_out.takeFront()
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S0.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__S0.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
2
 
Expression of type TupleExp:
((pkt,2))
 
Expression of type CallExp:
this'.__S0.Q_in.pushBack((pkt,2))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S0.Q_in.pushBack((pkt,2));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
port == 1
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 1 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 1 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this'.__S1
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S1.Q_in
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.__S1.Q_in.pushBack
 
Expression of type Identifier:
pkt
 
Expression of type LiteralExp:
2
 
Expression of type TupleExp:
((pkt,2))
 
Expression of type CallExp:
this'.__S1.Q_in.pushBack((pkt,2))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S1.Q_in.pushBack((pkt,2));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
port
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
port == 2
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if port == 2 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if port == 2 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    (pkt,port) := this'.__S2.Q_out.takeFront();
    def _if(){
        this'.__S0.Q_in.pushBack((pkt,2));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 1 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__S1.Q_in.pushBack((pkt,2));
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if port == 2 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
node
 
Expression of type LiteralExp:
4
 
Expression of type ABinaryExp:
node == 4
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this'.__S2
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S2.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S2.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S2.Q_out.size()
 
Expression of type ABinaryExp:
node == 4 && this'.__S2.Q_out.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if node == 4 && this'.__S2.Q_out.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if node == 4 && this'.__S2.Q_out.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    def _if(){
        (pkt,port) := this'.__H0.Q_out.takeFront();
        def _if(){
            this'.__S0.Q_in.pushBack((pkt,3));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 1 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if node == 0 && this'.__H0.Q_out.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        (pkt,port) := this'.__H1.Q_out.takeFront();
        def _if(){
            this'.__S1.Q_in.pushBack((pkt,3));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 1 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if node == 1 && this'.__H1.Q_out.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        (pkt,port) := this'.__S0.Q_out.takeFront();
        def _if(){
            this'.__S1.Q_in.pushBack((pkt,1));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 1 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__S2.Q_in.pushBack((pkt,1));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 2 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__H0.Q_in.pushBack((pkt,1));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 3 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if node == 2 && this'.__S0.Q_out.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        (pkt,port) := this'.__S1.Q_out.takeFront();
        def _if(){
            this'.__S0.Q_in.pushBack((pkt,1));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 1 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__S2.Q_in.pushBack((pkt,2));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 2 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__H1.Q_in.pushBack((pkt,1));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 3 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if node == 3 && this'.__S1.Q_out.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        (pkt,port) := this'.__S2.Q_out.takeFront();
        def _if(){
            this'.__S0.Q_in.pushBack((pkt,2));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 1 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__S1.Q_in.pushBack((pkt,2));
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if port == 2 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if node == 4 && this'.__S2.Q_out.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
this'.__H0
 
Expression of type Identifier:
__run
 
Expression of type FieldExp:
this'.__H0.__run
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__H0.__run()
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__H0.__run();
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
node
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
node == 0
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
this'.__H0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__H0.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__H0.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__H0.Q_in.size()
 
Expression of type ABinaryExp:
node == 0 && this'.__H0.Q_in.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if node == 0 && this'.__H0.Q_in.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if node == 0 && this'.__H0.Q_in.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H1
 
Expression of type FieldExp:
this'.__H1
 
Expression of type Identifier:
__run
 
Expression of type FieldExp:
this'.__H1.__run
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__H1.__run()
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__H1.__run();
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
node
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
node == 1
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H1
 
Expression of type FieldExp:
this'.__H1
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__H1.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__H1.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__H1.Q_in.size()
 
Expression of type ABinaryExp:
node == 1 && this'.__H1.Q_in.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if node == 1 && this'.__H1.Q_in.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if node == 1 && this'.__H1.Q_in.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
__run
 
Expression of type FieldExp:
this'.__S0.__run
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S0.__run()
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S0.__run();
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
node
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
node == 2
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S0.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S0.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S0.Q_in.size()
 
Expression of type ABinaryExp:
node == 2 && this'.__S0.Q_in.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if node == 2 && this'.__S0.Q_in.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if node == 2 && this'.__S0.Q_in.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this'.__S1
 
Expression of type Identifier:
__run
 
Expression of type FieldExp:
this'.__S1.__run
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S1.__run()
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S1.__run();
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
node
 
Expression of type LiteralExp:
3
 
Expression of type ABinaryExp:
node == 3
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this'.__S1
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S1.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S1.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S1.Q_in.size()
 
Expression of type ABinaryExp:
node == 3 && this'.__S1.Q_in.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if node == 3 && this'.__S1.Q_in.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if node == 3 && this'.__S1.Q_in.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this'.__S2
 
Expression of type Identifier:
__run
 
Expression of type FieldExp:
this'.__S2.__run
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S2.__run()
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.__S2.__run();
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
node
 
Expression of type LiteralExp:
4
 
Expression of type ABinaryExp:
node == 4
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this'.__S2
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S2.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S2.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S2.Q_in.size()
 
Expression of type ABinaryExp:
node == 4 && this'.__S2.Q_in.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if node == 4 && this'.__S2.Q_in.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if node == 4 && this'.__S2.Q_in.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    def _if(){
        this'.__H0.__run();
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if node == 0 && this'.__H0.Q_in.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__H1.__run();
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if node == 1 && this'.__H1.Q_in.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__S0.__run();
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if node == 2 && this'.__S0.Q_in.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__S1.__run();
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if node == 3 && this'.__S1.Q_in.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    def _if(){
        this'.__S2.__run();
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if node == 4 && this'.__S2.Q_in.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
action
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if action {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if action {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    (action,node) := this'.scheduler();
    def _if(){
        def _if(){
            (pkt,port) := this'.__H0.Q_out.takeFront();
            def _if(){
                this'.__S0.Q_in.pushBack((pkt,3));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 1 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if node == 0 && this'.__H0.Q_out.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            (pkt,port) := this'.__H1.Q_out.takeFront();
            def _if(){
                this'.__S1.Q_in.pushBack((pkt,3));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 1 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if node == 1 && this'.__H1.Q_out.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            (pkt,port) := this'.__S0.Q_out.takeFront();
            def _if(){
                this'.__S1.Q_in.pushBack((pkt,1));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 1 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__S2.Q_in.pushBack((pkt,1));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 2 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__H0.Q_in.pushBack((pkt,1));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 3 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if node == 2 && this'.__S0.Q_out.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            (pkt,port) := this'.__S1.Q_out.takeFront();
            def _if(){
                this'.__S0.Q_in.pushBack((pkt,1));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 1 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__S2.Q_in.pushBack((pkt,2));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 2 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__H1.Q_in.pushBack((pkt,1));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 3 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if node == 3 && this'.__S1.Q_out.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            (pkt,port) := this'.__S2.Q_out.takeFront();
            def _if(){
                this'.__S0.Q_in.pushBack((pkt,2));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 1 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__S1.Q_in.pushBack((pkt,2));
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if port == 2 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if node == 4 && this'.__S2.Q_out.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def _else(){
        def _if(){
            this'.__H0.__run();
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if node == 0 && this'.__H0.Q_in.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__H1.__run();
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if node == 1 && this'.__H1.Q_in.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__S0.__run();
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if node == 2 && this'.__S0.Q_in.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__S1.__run();
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if node == 3 && this'.__S1.Q_in.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        def _if(){
            this'.__S2.__run();
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if node == 4 && this'.__S2.Q_in.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def eval_if(){
        if action {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
this'.__H0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__H0.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__H0.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__H0.Q_in.size()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H0
 
Expression of type FieldExp:
this'.__H0
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__H0.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__H0.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__H0.Q_out.size()
 
Expression of type ABinaryExp:
this'.__H0.Q_in.size() || this'.__H0.Q_out.size()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H1
 
Expression of type FieldExp:
this'.__H1
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__H1.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__H1.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__H1.Q_in.size()
 
Expression of type ABinaryExp:
this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__H1
 
Expression of type FieldExp:
this'.__H1
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__H1.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__H1.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__H1.Q_out.size()
 
Expression of type ABinaryExp:
this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S0.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S0.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S0.Q_in.size()
 
Expression of type ABinaryExp:
this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() || this'.__S0.Q_in.size()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S0
 
Expression of type FieldExp:
this'.__S0
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S0.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S0.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S0.Q_out.size()
 
Expression of type ABinaryExp:
this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() || this'.__S0.Q_in.size() || this'.__S0.Q_out.size()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this'.__S1
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S1.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S1.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S1.Q_in.size()
 
Expression of type ABinaryExp:
this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() || this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S1
 
Expression of type FieldExp:
this'.__S1
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S1.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S1.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S1.Q_out.size()
 
Expression of type ABinaryExp:
this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() || this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this'.__S2
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.__S2.Q_in
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S2.Q_in.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S2.Q_in.size()
 
Expression of type ABinaryExp:
this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() || this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
__S2
 
Expression of type FieldExp:
this'.__S2
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.__S2.Q_out
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.__S2.Q_out.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.__S2.Q_out.size()
 
Expression of type ABinaryExp:
this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() || this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size()
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() || this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() || this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type TupleExp:
()
 
Expression of type ReturnExp:
return ()
 
Expression of type FunctionDef:
def __step(){
    def _if(){
        (action,node) := this'.scheduler();
        def _if(){
            def _if(){
                (pkt,port) := this'.__H0.Q_out.takeFront();
                def _if(){
                    this'.__S0.Q_in.pushBack((pkt,3));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 1 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if node == 0 && this'.__H0.Q_out.size() {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                (pkt,port) := this'.__H1.Q_out.takeFront();
                def _if(){
                    this'.__S1.Q_in.pushBack((pkt,3));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 1 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if node == 1 && this'.__H1.Q_out.size() {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                (pkt,port) := this'.__S0.Q_out.takeFront();
                def _if(){
                    this'.__S1.Q_in.pushBack((pkt,1));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 1 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S2.Q_in.pushBack((pkt,1));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 2 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__H0.Q_in.pushBack((pkt,1));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 3 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if node == 2 && this'.__S0.Q_out.size() {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                (pkt,port) := this'.__S1.Q_out.takeFront();
                def _if(){
                    this'.__S0.Q_in.pushBack((pkt,1));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 1 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S2.Q_in.pushBack((pkt,2));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 2 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__H1.Q_in.pushBack((pkt,1));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 3 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if node == 3 && this'.__S1.Q_out.size() {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                (pkt,port) := this'.__S2.Q_out.takeFront();
                def _if(){
                    this'.__S0.Q_in.pushBack((pkt,2));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 1 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S1.Q_in.pushBack((pkt,2));
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if port == 2 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if node == 4 && this'.__S2.Q_out.size() {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def _else(){
            def _if(){
                this'.__H0.__run();
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if node == 0 && this'.__H0.Q_in.size() {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__H1.__run();
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if node == 1 && this'.__H1.Q_in.size() {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__S0.__run();
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if node == 2 && this'.__S0.Q_in.size() {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__S1.__run();
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if node == 3 && this'.__S1.Q_in.size() {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            def _if(){
                this'.__S2.__run();
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if node == 4 && this'.__S2.Q_in.size() {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def eval_if(){
            if action {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() || this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return ();
}
 
Expression of type CompoundDecl:
{
    __H0: __h0_ty , __H1: __h1_ty , __S0: __s0_ty , __S1: __s1_ty , __S2: __s2_ty;
    curAction: ℝ;
    def __D'(){
        this.__H0 = __h0_ty'();
        this.__H1 = __h1_ty'();
        this.__S0 = __s0_ty'();
        this.__S1 = __s1_ty'();
        this.__S2 = __s2_ty'();
        this.curAction = 0;
        return this;
    }
    def scheduler(){
        actions := ([]: (R × R)[]);
        for i in [0..5){
            def _if(){
                actions = actions ~ [(0,i)];
                return (1,actions,0);
            }
            def _else(){
                return (1,actions,0);
            }
            def eval_if(){
                if (if i == 0 {
                    this'.__H0.Q_in;
                } else if i == 1 {
                    this'.__H1.Q_in;
                } else if i == 2 {
                    this'.__S0.Q_in;
                } else if i == 3 {
                    this'.__S1.Q_in;
                } else {
                    this'.__S2.Q_in;
                }).size() > 0 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            actions = _ret[1];
            def _if(){
                actions = actions ~ [(1,i)];
                return (1,actions,0);
            }
            def _else(){
                return (1,actions,0);
            }
            def eval_if(){
                if (if i == 0 {
                    this'.__H0.Q_out;
                } else if i == 1 {
                    this'.__H1.Q_out;
                } else if i == 2 {
                    this'.__S0.Q_out;
                } else if i == 3 {
                    this'.__S1.Q_out;
                } else {
                    this'.__S2.Q_out;
                }).size() > 0 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            actions = _ret[1];
        }
        return actions[uniformInt(0,actions.length - 1)];
    }
    def __step(){
        def _if(){
            (action,node) := this'.scheduler();
            def _if(){
                def _if(){
                    (pkt,port) := this'.__H0.Q_out.takeFront();
                    def _if(){
                        this'.__S0.Q_in.pushBack((pkt,3));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 1 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 0 && this'.__H0.Q_out.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    (pkt,port) := this'.__H1.Q_out.takeFront();
                    def _if(){
                        this'.__S1.Q_in.pushBack((pkt,3));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 1 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 1 && this'.__H1.Q_out.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    (pkt,port) := this'.__S0.Q_out.takeFront();
                    def _if(){
                        this'.__S1.Q_in.pushBack((pkt,1));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 1 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S2.Q_in.pushBack((pkt,1));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 2 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__H0.Q_in.pushBack((pkt,1));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 3 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 2 && this'.__S0.Q_out.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    (pkt,port) := this'.__S1.Q_out.takeFront();
                    def _if(){
                        this'.__S0.Q_in.pushBack((pkt,1));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 1 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S2.Q_in.pushBack((pkt,2));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 2 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__H1.Q_in.pushBack((pkt,1));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 3 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 3 && this'.__S1.Q_out.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    (pkt,port) := this'.__S2.Q_out.takeFront();
                    def _if(){
                        this'.__S0.Q_in.pushBack((pkt,2));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 1 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S1.Q_in.pushBack((pkt,2));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 2 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 4 && this'.__S2.Q_out.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def _else(){
                def _if(){
                    this'.__H0.__run();
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 0 && this'.__H0.Q_in.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__H1.__run();
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 1 && this'.__H1.Q_in.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S0.__run();
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 2 && this'.__S0.Q_in.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S1.__run();
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 3 && this'.__S1.Q_in.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S2.__run();
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 4 && this'.__S2.Q_in.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def eval_if(){
                if action {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() || this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return ();
    }
}
 
Expression of type DatDecl:
dat __D{
    __H0: __h0_ty , __H1: __h1_ty , __S0: __s0_ty , __S1: __s1_ty , __S2: __s2_ty;
    curAction: ℝ;
    def __D'(){
        this.__H0 = __h0_ty'();
        this.__H1 = __h1_ty'();
        this.__S0 = __s0_ty'();
        this.__S1 = __s1_ty'();
        this.__S2 = __s2_ty'();
        this.curAction = 0;
        return this;
    }
    def scheduler(){
        actions := ([]: (R × R)[]);
        for i in [0..5){
            def _if(){
                actions = actions ~ [(0,i)];
                return (1,actions,0);
            }
            def _else(){
                return (1,actions,0);
            }
            def eval_if(){
                if (if i == 0 {
                    this'.__H0.Q_in;
                } else if i == 1 {
                    this'.__H1.Q_in;
                } else if i == 2 {
                    this'.__S0.Q_in;
                } else if i == 3 {
                    this'.__S1.Q_in;
                } else {
                    this'.__S2.Q_in;
                }).size() > 0 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            actions = _ret[1];
            def _if(){
                actions = actions ~ [(1,i)];
                return (1,actions,0);
            }
            def _else(){
                return (1,actions,0);
            }
            def eval_if(){
                if (if i == 0 {
                    this'.__H0.Q_out;
                } else if i == 1 {
                    this'.__H1.Q_out;
                } else if i == 2 {
                    this'.__S0.Q_out;
                } else if i == 3 {
                    this'.__S1.Q_out;
                } else {
                    this'.__S2.Q_out;
                }).size() > 0 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            actions = _ret[1];
        }
        return actions[uniformInt(0,actions.length - 1)];
    }
    def __step(){
        def _if(){
            (action,node) := this'.scheduler();
            def _if(){
                def _if(){
                    (pkt,port) := this'.__H0.Q_out.takeFront();
                    def _if(){
                        this'.__S0.Q_in.pushBack((pkt,3));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 1 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 0 && this'.__H0.Q_out.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    (pkt,port) := this'.__H1.Q_out.takeFront();
                    def _if(){
                        this'.__S1.Q_in.pushBack((pkt,3));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 1 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 1 && this'.__H1.Q_out.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    (pkt,port) := this'.__S0.Q_out.takeFront();
                    def _if(){
                        this'.__S1.Q_in.pushBack((pkt,1));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 1 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S2.Q_in.pushBack((pkt,1));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 2 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__H0.Q_in.pushBack((pkt,1));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 3 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 2 && this'.__S0.Q_out.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    (pkt,port) := this'.__S1.Q_out.takeFront();
                    def _if(){
                        this'.__S0.Q_in.pushBack((pkt,1));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 1 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S2.Q_in.pushBack((pkt,2));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 2 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__H1.Q_in.pushBack((pkt,1));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 3 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 3 && this'.__S1.Q_out.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    (pkt,port) := this'.__S2.Q_out.takeFront();
                    def _if(){
                        this'.__S0.Q_in.pushBack((pkt,2));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 1 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    def _if(){
                        this'.__S1.Q_in.pushBack((pkt,2));
                        return (1,this',0);
                    }
                    def _else(){
                        return (1,this',0);
                    }
                    def eval_if(){
                        if port == 2 {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 4 && this'.__S2.Q_out.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def _else(){
                def _if(){
                    this'.__H0.__run();
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 0 && this'.__H0.Q_in.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__H1.__run();
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 1 && this'.__H1.Q_in.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S0.__run();
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 2 && this'.__S0.Q_in.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S1.__run();
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 3 && this'.__S1.Q_in.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                def _if(){
                    this'.__S2.__run();
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if node == 4 && this'.__S2.Q_in.size() {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def eval_if(){
                if action {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if this'.__H0.Q_in.size() || this'.__H0.Q_out.size() || this'.__H1.Q_in.size() || this'.__H1.Q_out.size() || this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return ();
    }
}
 
done with forToWhile
whileToRec normalization...
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
done with whileToRec
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
done with tuplesNormalizer
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
done with unreachableNormalizer
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
the following needs to be in a var:
(0,i_1)
the following needs to be in a var:
(1,i_1)
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
TODO: not all types of Expression covered:
ℝ × (ℝ × ℝ)[]
def outside of main:(normalized)
dat __D{
    __H0: __h0_ty , __H1: __h1_ty , __S0: __s0_ty , __S1: __s1_ty , __S2: __s2_ty;
    curAction: ℝ;
    def __D'(){
        subExp_CallExp_1 := __h0_ty();
        this.__H0 = subExp_CallExp_1;
        subExp_CallExp_2 := __h1_ty();
        this.__H1 = subExp_CallExp_2;
        subExp_CallExp_3 := __s0_ty();
        this.__S0 = subExp_CallExp_3;
        subExp_CallExp_4 := __s1_ty();
        this.__S1 = subExp_CallExp_4;
        subExp_CallExp_5 := __s2_ty();
        this.__S2 = subExp_CallExp_5;
        this.curAction = 0;
        return this;
    }
    def scheduler(){
        actions_0 := ([]: (R × R)[]);
        i_0 := 0;
        def loop_body_0(_args_0: ℝ × (ℝ × ℝ)[]){
            _tuple_0 := _args_0;
            i_1 := _tuple_0[0];
            actions_1 := _tuple_0[1];
            subExp_6 := i_1 < 5;
            if subExp_6 {
                def _if_0(){
                    subExpArr_8 := (0,i_1);
                    subExp_7 := [subExpArr_8];
                    actions_2 := actions_1 ~ subExp_7;
                    subExp_9 := (1,actions_2,0);
                    return subExp_9;
                }
                def _else_0(){
                    subExp_10 := (1,actions_1,0);
                    return subExp_10;
                }
                def eval_if_0(){
                    subExp_14 := (if i_1 == 0 {
                        this.__H0.Q_in;
                    } else if i_1 == 1 {
                        this.__H1.Q_in;
                    } else if i_1 == 2 {
                        this.__S0.Q_in;
                    } else if i_1 == 3 {
                        this.__S1.Q_in;
                    } else {
                        this.__S2.Q_in;
                    }).size();
                    subExp_11 := subExp_14 > 0;
                    if subExp_11 {
                        subExp_12 := _if_0();
                        return subExp_12;
                    } else {
                        subExp_13 := _else_0();
                        return subExp_13;
                    }
                }
                _ret_0 := eval_if_0();
                actions_2 := _ret_0[1];
                def _if_1(){
                    subExpArr_16 := (1,i_1);
                    subExp_15 := [subExpArr_16];
                    actions_3 := actions_2 ~ subExp_15;
                    subExp_17 := (1,actions_3,0);
                    return subExp_17;
                }
                def _else_1(){
                    subExp_18 := (1,actions_2,0);
                    return subExp_18;
                }
                def eval_if_1(){
                    subExp_22 := (if i_1 == 0 {
                        this.__H0.Q_out;
                    } else if i_1 == 1 {
                        this.__H1.Q_out;
                    } else if i_1 == 2 {
                        this.__S0.Q_out;
                    } else if i_1 == 3 {
                        this.__S1.Q_out;
                    } else {
                        this.__S2.Q_out;
                    }).size();
                    subExp_19 := subExp_22 > 0;
                    if subExp_19 {
                        subExp_20 := _if_1();
                        return subExp_20;
                    } else {
                        subExp_21 := _else_1();
                        return subExp_21;
                    }
                }
                _ret_1 := eval_if_1();
                actions_3 := _ret_1[1];
                i_2 := i_1 + 1;
                _new_args_0 := (i_2,actions_3);
                subExp_23 := (0,_new_args_0,0);
                return subExp_23;
            } else {
                subExp_24 := (1,_args_0,0);
                return subExp_24;
            }
        }
        def _loop_0(arg_0){
            loop_body_1 := arg_0[0];
            args_0 := arg_0[1];
            k_0 := loop_body_1(args_0);
            subExp_26 := k_0[0];
            subExp_25 := subExp_26 != 0;
            if subExp_25 {
                return k_0;
            }
            subExp_arg_28 := k_0[1];
            subExp_27 := _loop_0(loop_body_1,subExp_arg_28);
            return subExp_27;
        }
        _args_0 := (i_0,actions_0);
        _ret_0 := _loop_0(loop_body_0,_args_0);
        _tuple_0 := _ret_0[1];
        i_1 := _tuple_0[0];
        actions_1 := _tuple_0[1];
        subExp_arg_31 := 0;
        subExp_33 := actions_1.length;
        subExp_arg_32 := subExp_33 - 1;
        subExpArr_30 := uniformInt(subExp_arg_31,subExp_arg_32);
        subExp_29 := actions_1[subExpArr_30];
        return subExp_29;
    }
    def __step(){
        def _if_0(){
            _tuple_0 := this.scheduler();
            action_0 := _tuple_0[0];
            node_0 := _tuple_0[1];
            def _if_1(){
                def _if_2(){
                    _tuple_1 := this.__H0.Q_out.takeFront();
                    pkt_0 := _tuple_1[0];
                    port_0 := _tuple_1[1];
                    def _if_3(){
                        subExp_arg_34 := 3;
                        this.__S0.Q_in.pushBack(pkt_0,subExp_arg_34);
                        subExp_35 := (1,this,0);
                        return subExp_35;
                    }
                    def _else_0(){
                        subExp_36 := (1,this,0);
                        return subExp_36;
                    }
                    def eval_if_0(){
                        subExp_37 := port_0 == 1;
                        if subExp_37 {
                            subExp_38 := _if_3();
                            return subExp_38;
                        } else {
                            subExp_39 := _else_0();
                            return subExp_39;
                        }
                    }
                    _ret_0 := eval_if_0();
                    this = _ret_0[1];
                    subExp_40 := (1,this,0);
                    return subExp_40;
                }
                def _else_0(){
                    subExp_41 := (1,this,0);
                    return subExp_41;
                }
                def eval_if_0(){
                    subExp_45 := node_0 == 0;
                    subExp_46 := this.__H0.Q_out.size();
                    subExp_42 := subExp_45 && subExp_46;
                    if subExp_42 {
                        subExp_43 := _if_2();
                        return subExp_43;
                    } else {
                        subExp_44 := _else_0();
                        return subExp_44;
                    }
                }
                _ret_0 := eval_if_0();
                this = _ret_0[1];
                def _if_3(){
                    _tuple_1 := this.__H1.Q_out.takeFront();
                    pkt_0 := _tuple_1[0];
                    port_0 := _tuple_1[1];
                    def _if_4(){
                        subExp_arg_47 := 3;
                        this.__S1.Q_in.pushBack(pkt_0,subExp_arg_47);
                        subExp_48 := (1,this,0);
                        return subExp_48;
                    }
                    def _else_1(){
                        subExp_49 := (1,this,0);
                        return subExp_49;
                    }
                    def eval_if_1(){
                        subExp_50 := port_0 == 1;
                        if subExp_50 {
                            subExp_51 := _if_4();
                            return subExp_51;
                        } else {
                            subExp_52 := _else_1();
                            return subExp_52;
                        }
                    }
                    _ret_1 := eval_if_1();
                    this = _ret_1[1];
                    subExp_53 := (1,this,0);
                    return subExp_53;
                }
                def _else_1(){
                    subExp_54 := (1,this,0);
                    return subExp_54;
                }
                def eval_if_1(){
                    subExp_58 := node_0 == 1;
                    subExp_59 := this.__H1.Q_out.size();
                    subExp_55 := subExp_58 && subExp_59;
                    if subExp_55 {
                        subExp_56 := _if_3();
                        return subExp_56;
                    } else {
                        subExp_57 := _else_1();
                        return subExp_57;
                    }
                }
                _ret_1 := eval_if_1();
                this = _ret_1[1];
                def _if_4(){
                    _tuple_1 := this.__S0.Q_out.takeFront();
                    pkt_0 := _tuple_1[0];
                    port_0 := _tuple_1[1];
                    def _if_5(){
                        subExp_arg_60 := 1;
                        this.__S1.Q_in.pushBack(pkt_0,subExp_arg_60);
                        subExp_61 := (1,this,0);
                        return subExp_61;
                    }
                    def _else_2(){
                        subExp_62 := (1,this,0);
                        return subExp_62;
                    }
                    def eval_if_2(){
                        subExp_63 := port_0 == 1;
                        if subExp_63 {
                            subExp_64 := _if_5();
                            return subExp_64;
                        } else {
                            subExp_65 := _else_2();
                            return subExp_65;
                        }
                    }
                    _ret_2 := eval_if_2();
                    this = _ret_2[1];
                    def _if_6(){
                        subExp_arg_66 := 1;
                        this.__S2.Q_in.pushBack(pkt_0,subExp_arg_66);
                        subExp_67 := (1,this,0);
                        return subExp_67;
                    }
                    def _else_3(){
                        subExp_68 := (1,this,0);
                        return subExp_68;
                    }
                    def eval_if_3(){
                        subExp_69 := port_0 == 2;
                        if subExp_69 {
                            subExp_70 := _if_6();
                            return subExp_70;
                        } else {
                            subExp_71 := _else_3();
                            return subExp_71;
                        }
                    }
                    _ret_3 := eval_if_3();
                    this = _ret_3[1];
                    def _if_7(){
                        subExp_arg_72 := 1;
                        this.__H0.Q_in.pushBack(pkt_0,subExp_arg_72);
                        subExp_73 := (1,this,0);
                        return subExp_73;
                    }
                    def _else_4(){
                        subExp_74 := (1,this,0);
                        return subExp_74;
                    }
                    def eval_if_4(){
                        subExp_75 := port_0 == 3;
                        if subExp_75 {
                            subExp_76 := _if_7();
                            return subExp_76;
                        } else {
                            subExp_77 := _else_4();
                            return subExp_77;
                        }
                    }
                    _ret_4 := eval_if_4();
                    this = _ret_4[1];
                    subExp_78 := (1,this,0);
                    return subExp_78;
                }
                def _else_2(){
                    subExp_79 := (1,this,0);
                    return subExp_79;
                }
                def eval_if_2(){
                    subExp_83 := node_0 == 2;
                    subExp_84 := this.__S0.Q_out.size();
                    subExp_80 := subExp_83 && subExp_84;
                    if subExp_80 {
                        subExp_81 := _if_4();
                        return subExp_81;
                    } else {
                        subExp_82 := _else_2();
                        return subExp_82;
                    }
                }
                _ret_2 := eval_if_2();
                this = _ret_2[1];
                def _if_5(){
                    _tuple_1 := this.__S1.Q_out.takeFront();
                    pkt_0 := _tuple_1[0];
                    port_0 := _tuple_1[1];
                    def _if_6(){
                        subExp_arg_85 := 1;
                        this.__S0.Q_in.pushBack(pkt_0,subExp_arg_85);
                        subExp_86 := (1,this,0);
                        return subExp_86;
                    }
                    def _else_3(){
                        subExp_87 := (1,this,0);
                        return subExp_87;
                    }
                    def eval_if_3(){
                        subExp_88 := port_0 == 1;
                        if subExp_88 {
                            subExp_89 := _if_6();
                            return subExp_89;
                        } else {
                            subExp_90 := _else_3();
                            return subExp_90;
                        }
                    }
                    _ret_3 := eval_if_3();
                    this = _ret_3[1];
                    def _if_7(){
                        subExp_arg_91 := 2;
                        this.__S2.Q_in.pushBack(pkt_0,subExp_arg_91);
                        subExp_92 := (1,this,0);
                        return subExp_92;
                    }
                    def _else_4(){
                        subExp_93 := (1,this,0);
                        return subExp_93;
                    }
                    def eval_if_4(){
                        subExp_94 := port_0 == 2;
                        if subExp_94 {
                            subExp_95 := _if_7();
                            return subExp_95;
                        } else {
                            subExp_96 := _else_4();
                            return subExp_96;
                        }
                    }
                    _ret_4 := eval_if_4();
                    this = _ret_4[1];
                    def _if_8(){
                        subExp_arg_97 := 1;
                        this.__H1.Q_in.pushBack(pkt_0,subExp_arg_97);
                        subExp_98 := (1,this,0);
                        return subExp_98;
                    }
                    def _else_5(){
                        subExp_99 := (1,this,0);
                        return subExp_99;
                    }
                    def eval_if_5(){
                        subExp_100 := port_0 == 3;
                        if subExp_100 {
                            subExp_101 := _if_8();
                            return subExp_101;
                        } else {
                            subExp_102 := _else_5();
                            return subExp_102;
                        }
                    }
                    _ret_5 := eval_if_5();
                    this = _ret_5[1];
                    subExp_103 := (1,this,0);
                    return subExp_103;
                }
                def _else_3(){
                    subExp_104 := (1,this,0);
                    return subExp_104;
                }
                def eval_if_3(){
                    subExp_108 := node_0 == 3;
                    subExp_109 := this.__S1.Q_out.size();
                    subExp_105 := subExp_108 && subExp_109;
                    if subExp_105 {
                        subExp_106 := _if_5();
                        return subExp_106;
                    } else {
                        subExp_107 := _else_3();
                        return subExp_107;
                    }
                }
                _ret_3 := eval_if_3();
                this = _ret_3[1];
                def _if_6(){
                    _tuple_1 := this.__S2.Q_out.takeFront();
                    pkt_0 := _tuple_1[0];
                    port_0 := _tuple_1[1];
                    def _if_7(){
                        subExp_arg_110 := 2;
                        this.__S0.Q_in.pushBack(pkt_0,subExp_arg_110);
                        subExp_111 := (1,this,0);
                        return subExp_111;
                    }
                    def _else_4(){
                        subExp_112 := (1,this,0);
                        return subExp_112;
                    }
                    def eval_if_4(){
                        subExp_113 := port_0 == 1;
                        if subExp_113 {
                            subExp_114 := _if_7();
                            return subExp_114;
                        } else {
                            subExp_115 := _else_4();
                            return subExp_115;
                        }
                    }
                    _ret_4 := eval_if_4();
                    this = _ret_4[1];
                    def _if_8(){
                        subExp_arg_116 := 2;
                        this.__S1.Q_in.pushBack(pkt_0,subExp_arg_116);
                        subExp_117 := (1,this,0);
                        return subExp_117;
                    }
                    def _else_5(){
                        subExp_118 := (1,this,0);
                        return subExp_118;
                    }
                    def eval_if_5(){
                        subExp_119 := port_0 == 2;
                        if subExp_119 {
                            subExp_120 := _if_8();
                            return subExp_120;
                        } else {
                            subExp_121 := _else_5();
                            return subExp_121;
                        }
                    }
                    _ret_5 := eval_if_5();
                    this = _ret_5[1];
                    subExp_122 := (1,this,0);
                    return subExp_122;
                }
                def _else_4(){
                    subExp_123 := (1,this,0);
                    return subExp_123;
                }
                def eval_if_4(){
                    subExp_127 := node_0 == 4;
                    subExp_128 := this.__S2.Q_out.size();
                    subExp_124 := subExp_127 && subExp_128;
                    if subExp_124 {
                        subExp_125 := _if_6();
                        return subExp_125;
                    } else {
                        subExp_126 := _else_4();
                        return subExp_126;
                    }
                }
                _ret_4 := eval_if_4();
                this = _ret_4[1];
                subExp_129 := (1,this,0);
                return subExp_129;
            }
            def _else_0(){
                def _if_2(){
                    this.__H0.__run();
                    subExp_130 := (1,this,0);
                    return subExp_130;
                }
                def _else_1(){
                    subExp_131 := (1,this,0);
                    return subExp_131;
                }
                def eval_if_0(){
                    subExp_135 := node_0 == 0;
                    subExp_136 := this.__H0.Q_in.size();
                    subExp_132 := subExp_135 && subExp_136;
                    if subExp_132 {
                        subExp_133 := _if_2();
                        return subExp_133;
                    } else {
                        subExp_134 := _else_1();
                        return subExp_134;
                    }
                }
                _ret_0 := eval_if_0();
                this = _ret_0[1];
                def _if_3(){
                    this.__H1.__run();
                    subExp_137 := (1,this,0);
                    return subExp_137;
                }
                def _else_2(){
                    subExp_138 := (1,this,0);
                    return subExp_138;
                }
                def eval_if_1(){
                    subExp_142 := node_0 == 1;
                    subExp_143 := this.__H1.Q_in.size();
                    subExp_139 := subExp_142 && subExp_143;
                    if subExp_139 {
                        subExp_140 := _if_3();
                        return subExp_140;
                    } else {
                        subExp_141 := _else_2();
                        return subExp_141;
                    }
                }
                _ret_1 := eval_if_1();
                this = _ret_1[1];
                def _if_4(){
                    this.__S0.__run();
                    subExp_144 := (1,this,0);
                    return subExp_144;
                }
                def _else_3(){
                    subExp_145 := (1,this,0);
                    return subExp_145;
                }
                def eval_if_2(){
                    subExp_149 := node_0 == 2;
                    subExp_150 := this.__S0.Q_in.size();
                    subExp_146 := subExp_149 && subExp_150;
                    if subExp_146 {
                        subExp_147 := _if_4();
                        return subExp_147;
                    } else {
                        subExp_148 := _else_3();
                        return subExp_148;
                    }
                }
                _ret_2 := eval_if_2();
                this = _ret_2[1];
                def _if_5(){
                    this.__S1.__run();
                    subExp_151 := (1,this,0);
                    return subExp_151;
                }
                def _else_4(){
                    subExp_152 := (1,this,0);
                    return subExp_152;
                }
                def eval_if_3(){
                    subExp_156 := node_0 == 3;
                    subExp_157 := this.__S1.Q_in.size();
                    subExp_153 := subExp_156 && subExp_157;
                    if subExp_153 {
                        subExp_154 := _if_5();
                        return subExp_154;
                    } else {
                        subExp_155 := _else_4();
                        return subExp_155;
                    }
                }
                _ret_3 := eval_if_3();
                this = _ret_3[1];
                def _if_6(){
                    this.__S2.__run();
                    subExp_158 := (1,this,0);
                    return subExp_158;
                }
                def _else_5(){
                    subExp_159 := (1,this,0);
                    return subExp_159;
                }
                def eval_if_4(){
                    subExp_163 := node_0 == 4;
                    subExp_164 := this.__S2.Q_in.size();
                    subExp_160 := subExp_163 && subExp_164;
                    if subExp_160 {
                        subExp_161 := _if_6();
                        return subExp_161;
                    } else {
                        subExp_162 := _else_5();
                        return subExp_162;
                    }
                }
                _ret_4 := eval_if_4();
                this = _ret_4[1];
                subExp_165 := (1,this,0);
                return subExp_165;
            }
            def eval_if_0(){
                if action_0 {
                    subExp_166 := _if_1();
                    return subExp_166;
                } else {
                    subExp_167 := _else_0();
                    return subExp_167;
                }
            }
            _ret_0 := eval_if_0();
            this = _ret_0[1];
            subExp_168 := (1,this,0);
            return subExp_168;
        }
        def _else_0(){
            subExp_169 := (1,this,0);
            return subExp_169;
        }
        def eval_if_0(){
            subExp_189 := this.__H0.Q_in.size();
            subExp_190 := this.__H0.Q_out.size();
            subExp_187 := subExp_189 || subExp_190;
            subExp_188 := this.__H1.Q_in.size();
            subExp_185 := subExp_187 || subExp_188;
            subExp_186 := this.__H1.Q_out.size();
            subExp_183 := subExp_185 || subExp_186;
            subExp_184 := this.__S0.Q_in.size();
            subExp_181 := subExp_183 || subExp_184;
            subExp_182 := this.__S0.Q_out.size();
            subExp_179 := subExp_181 || subExp_182;
            subExp_180 := this.__S1.Q_in.size();
            subExp_177 := subExp_179 || subExp_180;
            subExp_178 := this.__S1.Q_out.size();
            subExp_175 := subExp_177 || subExp_178;
            subExp_176 := this.__S2.Q_in.size();
            subExp_173 := subExp_175 || subExp_176;
            subExp_174 := this.__S2.Q_out.size();
            subExp_170 := subExp_173 || subExp_174;
            if subExp_170 {
                subExp_171 := _if_0();
                return subExp_171;
            } else {
                subExp_172 := _else_0();
                return subExp_172;
            }
        }
        _ret_0 := eval_if_0();
        this = _ret_0[1];
        subExp_191 := ();
        return subExp_191;
    }
}
illegal thing in data declaration:
__H0: __h0_ty , __H1: __h1_ty , __S0: __s0_ty , __S1: __s1_ty , __S2: __s2_ty

translating meaning of __h0_ty
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
done with ifElseFunctional
Expression of type Identifier:
__h0_ty
 
Expression of type Identifier:
Q_in
 
Expression of type Identifier:
Queue
 
Expression of type VarDecl:
Q_in: Queue
 
Expression of type Identifier:
Q_out
 
Expression of type Identifier:
Queue
 
Expression of type VarDecl:
Q_out: Queue
 
Expression of type ABinaryExp:
Q_in: Queue , Q_out: Queue
 
Expression of type Identifier:
pkt_count
 
Expression of type Identifier:
ℝ
 
Expression of type VarDecl:
pkt_count: ℝ
 
Expression of type Identifier:
__h0_ty
 
Expression of type Identifier:
this
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this.Q_in
 
Expression of type Identifier:
Queue'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Queue'()
 
Expression of type ABinaryExp:
this.Q_in = Queue'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this.Q_out
 
Expression of type Identifier:
Queue'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Queue'()
 
Expression of type ABinaryExp:
this.Q_out = Queue'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
pkt_count
 
Expression of type FieldExp:
this.pkt_count
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
this.pkt_count = 0
 
Expression of type Identifier:
this
 
Expression of type ReturnExp:
return this
 
Expression of type FunctionDef:
def __h0_ty'(){
    this.Q_in = Queue'();
    this.Q_out = Queue'();
    this.pkt_count = 0;
    return this;
}
 
Expression of type Identifier:
__run
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
pushFront
 
Expression of type FieldExp:
this'.Q_in.pushFront
 
Expression of type Identifier:
Packet'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Packet'()
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
((Packet'(),0))
 
Expression of type CallExp:
this'.Q_in.pushFront((Packet'(),0))
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
pushFront
 
Expression of type FieldExp:
this'.Q_in.pushFront
 
Expression of type Identifier:
Packet'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Packet'()
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
((Packet'(),0))
 
Expression of type CallExp:
this'.Q_in.pushFront((Packet'(),0))
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
pkt_count
 
Expression of type FieldExp:
this'.pkt_count
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
pkt_count
 
Expression of type FieldExp:
this'.pkt_count
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
this'.pkt_count + 1
 
Expression of type ABinaryExp:
this'.pkt_count = this'.pkt_count + 1
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.Q_in.data
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.data[0]
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.data[0][0]
 
Expression of type Identifier:
dst
 
Expression of type FieldExp:
this'.Q_in.data[0][0].dst
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
this'.Q_in.data[0][0].dst = 1
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.Q_out
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.Q_out.pushBack
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.Q_in.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.Q_in.takeFront()
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.takeFront()[0]
 
Expression of type LiteralExp:
1
 
Expression of type TupleExp:
((this'.Q_in.takeFront()[0],1))
 
Expression of type CallExp:
this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.Q_in.pushFront((Packet'(),0));
    this'.pkt_count = this'.pkt_count + 1;
    this'.Q_in.data[0][0].dst = 1;
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
popFront
 
Expression of type FieldExp:
this'.Q_in.popFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.Q_in.popFront()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
popFront
 
Expression of type FieldExp:
this'.Q_in.popFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.Q_in.popFront()
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    this'.Q_in.popFront();
    this'.Q_in.popFront();
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
pkt_count
 
Expression of type FieldExp:
this'.pkt_count
 
Expression of type LiteralExp:
3
 
Expression of type ABinaryExp:
this'.pkt_count < 3
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if this'.pkt_count < 3 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if this'.pkt_count < 3 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type TupleExp:
()
 
Expression of type ReturnExp:
return ()
 
Expression of type FunctionDef:
def __run(){
    this'.Q_in.pushFront((Packet'(),0));
    def _if(){
        this'.Q_in.pushFront((Packet'(),0));
        this'.pkt_count = this'.pkt_count + 1;
        this'.Q_in.data[0][0].dst = 1;
        this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
        return (1,this',0);
    }
    def _else(){
        this'.Q_in.popFront();
        this'.Q_in.popFront();
        return (1,this',0);
    }
    def eval_if(){
        if this'.pkt_count < 3 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return ();
}
 
Expression of type CompoundDecl:
{
    Q_in: Queue , Q_out: Queue;
    pkt_count: ℝ;
    def __h0_ty'(){
        this.Q_in = Queue'();
        this.Q_out = Queue'();
        this.pkt_count = 0;
        return this;
    }
    def __run(){
        this'.Q_in.pushFront((Packet'(),0));
        def _if(){
            this'.Q_in.pushFront((Packet'(),0));
            this'.pkt_count = this'.pkt_count + 1;
            this'.Q_in.data[0][0].dst = 1;
            this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
            return (1,this',0);
        }
        def _else(){
            this'.Q_in.popFront();
            this'.Q_in.popFront();
            return (1,this',0);
        }
        def eval_if(){
            if this'.pkt_count < 3 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return ();
    }
}
 
Expression of type DatDecl:
dat __h0_ty{
    Q_in: Queue , Q_out: Queue;
    pkt_count: ℝ;
    def __h0_ty'(){
        this.Q_in = Queue'();
        this.Q_out = Queue'();
        this.pkt_count = 0;
        return this;
    }
    def __run(){
        this'.Q_in.pushFront((Packet'(),0));
        def _if(){
            this'.Q_in.pushFront((Packet'(),0));
            this'.pkt_count = this'.pkt_count + 1;
            this'.Q_in.data[0][0].dst = 1;
            this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
            return (1,this',0);
        }
        def _else(){
            this'.Q_in.popFront();
            this'.Q_in.popFront();
            return (1,this',0);
        }
        def eval_if(){
            if this'.pkt_count < 3 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return ();
    }
}
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
dat __h0_ty{
    Q_in: Queue , Q_out: Queue;
    pkt_count: ℝ;
    def __h0_ty'(){
        subExp_CallExp_1 := Queue();
        this.Q_in = subExp_CallExp_1;
        subExp_CallExp_2 := Queue();
        this.Q_out = subExp_CallExp_2;
        this.pkt_count = 0;
        return this;
    }
    def __run(){
        subExp_arg_3 := Packet();
        subExp_arg_4 := 0;
        this.Q_in.pushFront(subExp_arg_3,subExp_arg_4);
        def _if_0(){
            subExp_arg_5 := Packet();
            subExp_arg_6 := 0;
            this.Q_in.pushFront(subExp_arg_5,subExp_arg_6);
            subExp_7 := this.pkt_count;
            this.pkt_count = subExp_7 + 1;
            this.Q_in.data[0][0].dst = 1;
            subExp_10 := this.Q_in.takeFront();
            subExp_arg_8 := subExp_10[0];
            subExp_arg_9 := 1;
            this.Q_out.pushBack(subExp_arg_8,subExp_arg_9);
            subExp_11 := (1,this,0);
            return subExp_11;
        }
        def _else_0(){
            this.Q_in.popFront();
            this.Q_in.popFront();
            subExp_12 := (1,this,0);
            return subExp_12;
        }
        def eval_if_0(){
            subExp_16 := this.pkt_count;
            subExp_13 := subExp_16 < 3;
            if subExp_13 {
                subExp_14 := _if_0();
                return subExp_14;
            } else {
                subExp_15 := _else_0();
                return subExp_15;
            }
        }
        _ret_0 := eval_if_0();
        this = _ret_0[1];
        subExp_17 := ();
        return subExp_17;
    }
}
illegal thing in data declaration:
Q_in: Queue , Q_out: Queue

translating meaning of Queue
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
Queue
 
Expression of type Identifier:
data
 
Expression of type Identifier:
Packet
 
Expression of type Identifier:
ℝ
 
Expression of type ABinaryExp:
(Packet × ℝ)
 
Expression of type IndexExp:
(Packet × ℝ)[]
 
Expression of type VarDecl:
data: (Packet × ℝ)[]
 
Expression of type Identifier:
Queue
 
Expression of type Identifier:
this
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this.data
 
Expression of type ArrayExp:
[]
 
Expression of type Identifier:
Packet
 
Expression of type Identifier:
ℝ
 
Expression of type ABinaryExp:
(Packet × ℝ)
 
Expression of type IndexExp:
(Packet × ℝ)[]
 
Expression of type TypeAnnotationExp:
([]: (Packet × ℝ)[])
 
Expression of type ABinaryExp:
this.data = ([]: (Packet × ℝ)[])
 
Expression of type Identifier:
this
 
Expression of type ReturnExp:
return this
 
Expression of type FunctionDef:
def Queue'(){
    this.data = ([]: (Packet × ℝ)[]);
    return this;
}
 
Expression of type Identifier:
pushFront
 
Expression of type Identifier:
x
 
Expression of type Parameter:
x: Packet × ℝ
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type Identifier:
x
 
Expression of type ArrayExp:
[x]
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type ABinaryExp:
[x] ~ this'.data
 
Expression of type ABinaryExp:
this'.data = [x] ~ this'.data
 
Expression of type TupleExp:
()
 
Expression of type ReturnExp:
return ()
 
Expression of type FunctionDef:
def pushFront(x: Packet × ℝ){
    this'.data = [x] ~ this'.data;
    return ();
}
 
Expression of type Identifier:
pushBack
 
Expression of type Identifier:
x
 
Expression of type Parameter:
x: Packet × ℝ
 
Expression of type Identifier:
_if
 
Expression of type LiteralExp:
2
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
()
 
Expression of type TupleExp:
(2,0,())
 
Expression of type ReturnExp:
return (2,0,())
 
Expression of type LiteralExp:
1
 
Expression of type TupleExp:
()
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,(),0)
 
Expression of type ReturnExp:
return (1,(),0)
 
Expression of type FunctionDef:
def _if(){
    return (2,0,());
    return (1,(),0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type TupleExp:
()
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,(),0)
 
Expression of type ReturnExp:
return (1,(),0)
 
Expression of type FunctionDef:
def _else(){
    return (1,(),0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.size()
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
this'.size() >= 2
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if this'.size() >= 2 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if this'.size() >= 2 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
_ret[0]
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
_ret[0] == 2
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
2
 
Expression of type IndexExp:
_ret[2]
 
Expression of type ReturnExp:
return _ret[2]
 
Expression of type IteExp:
if _ret[0] == 2 {
    return _ret[2];
}
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type Identifier:
x
 
Expression of type ArrayExp:
[x]
 
Expression of type ABinaryExp:
this'.data ~ [x]
 
Expression of type ABinaryExp:
this'.data = this'.data ~ [x]
 
Expression of type TupleExp:
()
 
Expression of type ReturnExp:
return ()
 
Expression of type FunctionDef:
def pushBack(x: Packet × ℝ){
    def _if(){
        return (2,0,());
        return (1,(),0);
    }
    def _else(){
        return (1,(),0);
    }
    def eval_if(){
        if this'.size() >= 2 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    if _ret[0] == 2 {
        return _ret[2];
    }
    this'.data = this'.data ~ [x];
    return ();
}
 
Expression of type Identifier:
takeFront
 
Expression of type Identifier:
r
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
front
 
Expression of type FieldExp:
this'.front
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.front()
 
Expression of type ABinaryExp:
r := this'.front()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
popFront
 
Expression of type FieldExp:
this'.popFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.popFront()
 
Expression of type Identifier:
r
 
Expression of type ReturnExp:
return r
 
Expression of type FunctionDef:
def takeFront(){
    r := this'.front();
    this'.popFront();
    return r;
}
 
Expression of type Identifier:
takeBack
 
Expression of type Identifier:
r
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.size()
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
this'.size() - 1
 
Expression of type IndexExp:
this'.data[this'.size() - 1]
 
Expression of type ABinaryExp:
r := this'.data[this'.size() - 1]
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type LiteralExp:
0
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.size()
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
this'.size() - 1
 
Expression of type SliceExp:
this'.data[0..this'.size() - 1]
 
Expression of type ABinaryExp:
this'.data = this'.data[0..this'.size() - 1]
 
Expression of type Identifier:
r
 
Expression of type ReturnExp:
return r
 
Expression of type FunctionDef:
def takeBack(){
    r := this'.data[this'.size() - 1];
    this'.data = this'.data[0..this'.size() - 1];
    return r;
}
 
Expression of type Identifier:
size
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type Identifier:
length
 
Expression of type FieldExp:
this'.data.length
 
Expression of type ReturnExp:
return this'.data.length
 
Expression of type FunctionDef:
def size(){
    return this'.data.length;
}
 
Expression of type Identifier:
front
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.data[0]
 
Expression of type ReturnExp:
return this'.data[0]
 
Expression of type FunctionDef:
def front(){
    return this'.data[0];
}
 
Expression of type Identifier:
popFront
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.data
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
size
 
Expression of type FieldExp:
this'.size
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.size()
 
Expression of type SliceExp:
this'.data[1..this'.size()]
 
Expression of type ABinaryExp:
this'.data = this'.data[1..this'.size()]
 
Expression of type TupleExp:
()
 
Expression of type ReturnExp:
return ()
 
Expression of type FunctionDef:
def popFront(){
    this'.data = this'.data[1..this'.size()];
    return ();
}
 
Expression of type CompoundDecl:
{
    data: (Packet × ℝ)[];
    def Queue'(){
        this.data = ([]: (Packet × ℝ)[]);
        return this;
    }
    def pushFront(x: Packet × ℝ){
        this'.data = [x] ~ this'.data;
        return ();
    }
    def pushBack(x: Packet × ℝ){
        def _if(){
            return (2,0,());
            return (1,(),0);
        }
        def _else(){
            return (1,(),0);
        }
        def eval_if(){
            if this'.size() >= 2 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        if _ret[0] == 2 {
            return _ret[2];
        }
        this'.data = this'.data ~ [x];
        return ();
    }
    def takeFront(){
        r := this'.front();
        this'.popFront();
        return r;
    }
    def takeBack(){
        r := this'.data[this'.size() - 1];
        this'.data = this'.data[0..this'.size() - 1];
        return r;
    }
    def size(){
        return this'.data.length;
    }
    def front(){
        return this'.data[0];
    }
    def popFront(){
        this'.data = this'.data[1..this'.size()];
        return ();
    }
}
 
Expression of type DatDecl:
dat Queue{
    data: (Packet × ℝ)[];
    def Queue'(){
        this.data = ([]: (Packet × ℝ)[]);
        return this;
    }
    def pushFront(x: Packet × ℝ){
        this'.data = [x] ~ this'.data;
        return ();
    }
    def pushBack(x: Packet × ℝ){
        def _if(){
            return (2,0,());
            return (1,(),0);
        }
        def _else(){
            return (1,(),0);
        }
        def eval_if(){
            if this'.size() >= 2 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        if _ret[0] == 2 {
            return _ret[2];
        }
        this'.data = this'.data ~ [x];
        return ();
    }
    def takeFront(){
        r := this'.front();
        this'.popFront();
        return r;
    }
    def takeBack(){
        r := this'.data[this'.size() - 1];
        this'.data = this'.data[0..this'.size() - 1];
        return r;
    }
    def size(){
        return this'.data.length;
    }
    def front(){
        return this'.data[0];
    }
    def popFront(){
        this'.data = this'.data[1..this'.size()];
        return ();
    }
}
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
the following needs to be in a var:
()
the following needs to be in a var:
()
def outside of main:(normalized)
dat Queue{
    data: (Packet × ℝ)[];
    def Queue'(){
        this.data = ([]: (Packet × ℝ)[]);
        return this;
    }
    def pushFront(x_0: Packet × ℝ){
        subExp_1 := [x_0];
        subExp_2 := this.data;
        this.data = subExp_1 ~ subExp_2;
        subExp_3 := ();
        return subExp_3;
    }
    def pushBack(x_0: Packet × ℝ){
        def _if_0(){
            subExpArr_5 := ();
            subExp_4 := (2,0,subExpArr_5);
            return subExp_4;
        }
        def _else_0(){
            subExpArr_7 := ();
            subExp_6 := (1,subExpArr_7,0);
            return subExp_6;
        }
        def eval_if_0(){
            subExp_11 := this.size();
            subExp_8 := subExp_11 >= 2;
            if subExp_8 {
                subExp_9 := _if_0();
                return subExp_9;
            } else {
                subExp_10 := _else_0();
                return subExp_10;
            }
        }
        _ret_0 := eval_if_0();
        subExp_14 := _ret_0[0];
        subExp_12 := subExp_14 == 2;
        if subExp_12 {
            subExp_13 := _ret_0[2];
            return subExp_13;
        }
        subExp_15 := this.data;
        subExp_16 := [x_0];
        this.data = subExp_15 ~ subExp_16;
        subExp_17 := ();
        return subExp_17;
    }
    def takeFront(){
        r_0 := this.front();
        this.popFront();
        return r_0;
    }
    def takeBack(){
        subExp_18 := this.data;
        subExp_20 := this.size();
        subExpArr_19 := subExp_20 - 1;
        r_0 := subExp_18[subExpArr_19];
        subExp_21 := this.data;
        subExp_23 := this.size();
        subExp_22 := subExp_23 - 1;
        this.data = subExp_21[0..subExp_22];
        return r_0;
    }
    def size(){
        subExp_24 := this.data.length;
        return subExp_24;
    }
    def front(){
        subExp_26 := this.data;
        subExp_25 := subExp_26[0];
        return subExp_25;
    }
    def popFront(){
        subExp_27 := this.data;
        subExp_28 := this.size();
        this.data = subExp_27[1..subExp_28];
        subExp_29 := ();
        return subExp_29;
    }
}
var Queue = function(){
    var this_v0 = {};
    var this_v1 = _.assign({},this_v0,{data: []});
    return {res:this_v1,obj:this_v1};
}
var Queue_pushFront = function(this_v0, x_0){
    var subExp_1=[x_0];
    var subExp_2=this_v0.data;
    var this_v1 = _.assign({},this_v0,{data: [].concat(subExp_1,subExp_2)});
    var subExp_3=[];
    return {res:subExp_3,obj:this_v1};
}
var Queue_pushBack = function(this_v0, x_0){
    var _if_0 = function(){
        var subExpArr_5=[];
        var subExp_4=[2,0,subExpArr_5];
        return subExp_4;
    }
    var _else_0 = function(){
        var subExpArr_7=[];
        var subExp_6=[1,subExpArr_7,0];
        return subExp_6;
    }
    var eval_if_0 = function(){
        var tmp = Queue_size(this_v0,[]);
        var subExp_11 = tmp.res;
        var this_v1 = tmp.obj;
        var subExp_8=subExp_11>=2;
        if(subExp_8){
            var subExp_9=_if_0([]);
            return subExp_9;
        }
        else{
            var subExp_10=_else_0([]);
            return subExp_10;
        }
    }
    var _ret_0=eval_if_0([]);
    var subExp_14=_ret_0[+0];
    var subExp_12=subExp_14==2;
    if(subExp_12){
        var subExp_13=_ret_0[+2];
        return {res:subExp_13,obj:this_v0};
    }
    var subExp_15=this_v0.data;
    var subExp_16=[x_0];
    var this_v1 = _.assign({},this_v0,{data: [].concat(subExp_15,subExp_16)});
    var subExp_17=[];
    return {res:subExp_17,obj:this_v1};
}
var Queue_takeFront = function(this_v0){
    var tmp = Queue_front(this_v0,[]);
    var r_0 = tmp.res;
    var this_v1 = tmp.obj;
    var this_v2 = Queue_popFront(this_v1,[]).obj;
    return {res:r_0,obj:this_v2};
}
var Queue_takeBack = function(this_v0){
    var subExp_18=this_v0.data;
    var tmp = Queue_size(this_v0,[]);
    var subExp_20 = tmp.res;
    var this_v1 = tmp.obj;
    var subExpArr_19=subExp_20-1;
    var r_0=subExp_18[+subExpArr_19];
    var subExp_21=this_v1.data;
    var tmp = Queue_size(this_v1,[]);
    var subExp_23 = tmp.res;
    var this_v2 = tmp.obj;
    var subExp_22=subExp_23-1;
    var this_v3 = _.assign({},this_v2,{data: ([].concat(subExp_21)).slice(0,subExp_22)});
    return {res:r_0,obj:this_v3};
}
var Queue_size = function(this_v0){
    var subExp_24=this_v0.data.length;
    return {res:subExp_24,obj:this_v0};
}
var Queue_front = function(this_v0){
    var subExp_26=this_v0.data;
    var subExp_25=subExp_26[+0];
    return {res:subExp_25,obj:this_v0};
}
var Queue_popFront = function(this_v0){
    var subExp_27=this_v0.data;
    var tmp = Queue_size(this_v0,[]);
    var subExp_28 = tmp.res;
    var this_v1 = tmp.obj;
    var this_v2 = _.assign({},this_v1,{data: ([].concat(subExp_27)).slice(1,subExp_28)});
    var subExp_29=[];
    return {res:subExp_29,obj:this_v2};
}

translating meaning of Packet
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
Packet
 
Expression of type Identifier:
dst
 
Expression of type Identifier:
ℝ
 
Expression of type VarDecl:
dst: ℝ
 
Expression of type Identifier:
Packet
 
Expression of type Identifier:
this
 
Expression of type Identifier:
dst
 
Expression of type FieldExp:
this.dst
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
this.dst = 0
 
Expression of type Identifier:
this
 
Expression of type ReturnExp:
return this
 
Expression of type FunctionDef:
def Packet'(){
    this.dst = 0;
    return this;
}
 
Expression of type CompoundDecl:
{
    dst: ℝ;
    def Packet'(){
        this.dst = 0;
        return this;
    }
}
 
Expression of type DatDecl:
dat Packet{
    dst: ℝ;
    def Packet'(){
        this.dst = 0;
        return this;
    }
}
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
dat Packet{
    dst: ℝ;
    def Packet'(){
        this.dst = 0;
        return this;
    }
}
var Packet = function(){
    var this_v0 = {};
    var this_v1 = _.assign({},this_v0,{dst: 0});
    return {res:this_v1,obj:this_v1};
}

var Packet = function(){
    var this_v0 = {};
    var this_v1 = _.assign({},this_v0,{dst: 0});
    return {res:this_v1,obj:this_v1};
}
var Queue = function(){
    var this_v0 = {};
    var this_v1 = _.assign({},this_v0,{data: []});
    return {res:this_v1,obj:this_v1};
}
var Queue_pushFront = function(this_v0, x_0){
    var subExp_1=[x_0];
    var subExp_2=this_v0.data;
    var this_v1 = _.assign({},this_v0,{data: [].concat(subExp_1,subExp_2)});
    var subExp_3=[];
    return {res:subExp_3,obj:this_v1};
}
var Queue_pushBack = function(this_v0, x_0){
    var _if_0 = function(){
        var subExpArr_5=[];
        var subExp_4=[2,0,subExpArr_5];
        return subExp_4;
    }
    var _else_0 = function(){
        var subExpArr_7=[];
        var subExp_6=[1,subExpArr_7,0];
        return subExp_6;
    }
    var eval_if_0 = function(){
        var tmp = Queue_size(this_v0,[]);
        var subExp_11 = tmp.res;
        var this_v1 = tmp.obj;
        var subExp_8=subExp_11>=2;
        if(subExp_8){
            var subExp_9=_if_0([]);
            return subExp_9;
        }
        else{
            var subExp_10=_else_0([]);
            return subExp_10;
        }
    }
    var _ret_0=eval_if_0([]);
    var subExp_14=_ret_0[+0];
    var subExp_12=subExp_14==2;
    if(subExp_12){
        var subExp_13=_ret_0[+2];
        return {res:subExp_13,obj:this_v0};
    }
    var subExp_15=this_v0.data;
    var subExp_16=[x_0];
    var this_v1 = _.assign({},this_v0,{data: [].concat(subExp_15,subExp_16)});
    var subExp_17=[];
    return {res:subExp_17,obj:this_v1};
}
var Queue_takeFront = function(this_v0){
    var tmp = Queue_front(this_v0,[]);
    var r_0 = tmp.res;
    var this_v1 = tmp.obj;
    var this_v2 = Queue_popFront(this_v1,[]).obj;
    return {res:r_0,obj:this_v2};
}
var Queue_takeBack = function(this_v0){
    var subExp_18=this_v0.data;
    var tmp = Queue_size(this_v0,[]);
    var subExp_20 = tmp.res;
    var this_v1 = tmp.obj;
    var subExpArr_19=subExp_20-1;
    var r_0=subExp_18[+subExpArr_19];
    var subExp_21=this_v1.data;
    var tmp = Queue_size(this_v1,[]);
    var subExp_23 = tmp.res;
    var this_v2 = tmp.obj;
    var subExp_22=subExp_23-1;
    var this_v3 = _.assign({},this_v2,{data: ([].concat(subExp_21)).slice(0,subExp_22)});
    return {res:r_0,obj:this_v3};
}
var Queue_size = function(this_v0){
    var subExp_24=this_v0.data.length;
    return {res:subExp_24,obj:this_v0};
}
var Queue_front = function(this_v0){
    var subExp_26=this_v0.data;
    var subExp_25=subExp_26[+0];
    return {res:subExp_25,obj:this_v0};
}
var Queue_popFront = function(this_v0){
    var subExp_27=this_v0.data;
    var tmp = Queue_size(this_v0,[]);
    var subExp_28 = tmp.res;
    var this_v1 = tmp.obj;
    var this_v2 = _.assign({},this_v1,{data: ([].concat(subExp_27)).slice(1,subExp_28)});
    var subExp_29=[];
    return {res:subExp_29,obj:this_v2};
}
var __h0_ty = function(){
    var this_v0 = {};
    var subExp_CallExp_1_v0 = Queue([]).obj;
    var this_v1 = _.assign({},this_v0,{Q_in: subExp_CallExp_1_v0});
    var subExp_CallExp_2_v0 = Queue([]).obj;
    var this_v2 = _.assign({},this_v1,{Q_out: subExp_CallExp_2_v0});
    var this_v3 = _.assign({},this_v2,{pkt_count: 0});
    return {res:this_v3,obj:this_v3};
}
var __h0_ty___run = function(this_v0){
    var subExp_arg_3_v0 = Packet([]).obj;
    var subExp_arg_4=0;
    var this_v1 = _.assign({},this_v0,{Q_in: Queue_pushFront(this_v0.Q_in,[subExp_arg_3_v0,subExp_arg_4]).obj});
    var _if_0 = function(){
        var subExp_arg_5_v0 = Packet([]).obj;
        var subExp_arg_6=0;
        var this_v2 = _.assign({},this_v1,{Q_in: Queue_pushFront(this_v1.Q_in,[subExp_arg_5_v0,subExp_arg_6]).obj});
        var subExp_7=this_v2.pkt_count;
        var this_v3 = _.assign({},this_v2,{pkt_count: subExp_7+1});
        var new_data=_.assign({},this_v3.Q_in.data[0][0],{dst:1});
//updating this.Q_in.data[0]
        var _length = this_v3.Q_in.data[+0].length;
        var _index =0;
        var _left = this_v3.Q_in.data[+0].slice(0,(_index));
        var _right = this_v3.Q_in.data[+0].slice(_index+1,_length);
        var nested_arr = [].concat(_left,[new_data],_right);
        var _length = this_v3.Q_in.data.length;
        var _index =0;
        var _left = this_v3.Q_in.data.slice(0,(_index));
        var _right = this_v3.Q_in.data.slice(_index+1,_length);
        var new_array = [].concat(_left,[nested_arr],_right);
                var new_array_data=_.assign({},this_v3.Q_in.data,{data:new_array});
        var this_v4 = _.assign({},this_v3,{Q_in: new_array_data});
        var tmp = Queue_takeFront(this_v4.Q_in,[]);
        var subExp_10 = tmp.res;
        var this_v5 = _.assign({},this_v4,{Q_in: tmp.obj});
        var subExp_arg_8=subExp_10[+0];
        var subExp_arg_9=1;
        var this_v6 = _.assign({},this_v5,{Q_out: Queue_pushBack(this_v5.Q_out,[subExp_arg_8,subExp_arg_9]).obj});
        var subExp_11=[1,this_v6,0];
        return subExp_11;
    }
    var _else_0 = function(){
        var this_v2 = _.assign({},this_v1,{Q_in: Queue_popFront(this_v1.Q_in,[]).obj});
        var this_v3 = _.assign({},this_v2,{Q_in: Queue_popFront(this_v2.Q_in,[]).obj});
        var subExp_12=[1,this_v3,0];
        return subExp_12;
    }
    var eval_if_0 = function(){
        var subExp_16=this_v1.pkt_count;
        var subExp_13=subExp_16<3;
        if(subExp_13){
            var subExp_14=_if_0([]);
            return subExp_14;
        }
        else{
            var subExp_15=_else_0([]);
            return subExp_15;
        }
    }
    var _ret_0=eval_if_0([]);
    var this_v1=_ret_0[+1];
    var subExp_17=[];
    return {res:subExp_17,obj:this_v1};
}

translating meaning of __h1_ty
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
__h1_ty
 
Expression of type Identifier:
Q_in
 
Expression of type Identifier:
Queue
 
Expression of type VarDecl:
Q_in: Queue
 
Expression of type Identifier:
Q_out
 
Expression of type Identifier:
Queue
 
Expression of type VarDecl:
Q_out: Queue
 
Expression of type ABinaryExp:
Q_in: Queue , Q_out: Queue
 
Expression of type Identifier:
pkt_count
 
Expression of type Identifier:
ℝ
 
Expression of type VarDecl:
pkt_count: ℝ
 
Expression of type Identifier:
__h1_ty
 
Expression of type Identifier:
this
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this.Q_in
 
Expression of type Identifier:
Queue'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Queue'()
 
Expression of type ABinaryExp:
this.Q_in = Queue'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this.Q_out
 
Expression of type Identifier:
Queue'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Queue'()
 
Expression of type ABinaryExp:
this.Q_out = Queue'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
pkt_count
 
Expression of type FieldExp:
this.pkt_count
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
this.pkt_count = 0
 
Expression of type Identifier:
this
 
Expression of type ReturnExp:
return this
 
Expression of type FunctionDef:
def __h1_ty'(){
    this.Q_in = Queue'();
    this.Q_out = Queue'();
    this.pkt_count = 0;
    return this;
}
 
Expression of type Identifier:
__run
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
pkt_count
 
Expression of type FieldExp:
this'.pkt_count
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
pkt_count
 
Expression of type FieldExp:
this'.pkt_count
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
this'.pkt_count + 1
 
Expression of type ABinaryExp:
this'.pkt_count = this'.pkt_count + 1
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
popFront
 
Expression of type FieldExp:
this'.Q_in.popFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.Q_in.popFront()
 
Expression of type TupleExp:
()
 
Expression of type ReturnExp:
return ()
 
Expression of type FunctionDef:
def __run(){
    this'.pkt_count = this'.pkt_count + 1;
    this'.Q_in.popFront();
    return ();
}
 
Expression of type CompoundDecl:
{
    Q_in: Queue , Q_out: Queue;
    pkt_count: ℝ;
    def __h1_ty'(){
        this.Q_in = Queue'();
        this.Q_out = Queue'();
        this.pkt_count = 0;
        return this;
    }
    def __run(){
        this'.pkt_count = this'.pkt_count + 1;
        this'.Q_in.popFront();
        return ();
    }
}
 
Expression of type DatDecl:
dat __h1_ty{
    Q_in: Queue , Q_out: Queue;
    pkt_count: ℝ;
    def __h1_ty'(){
        this.Q_in = Queue'();
        this.Q_out = Queue'();
        this.pkt_count = 0;
        return this;
    }
    def __run(){
        this'.pkt_count = this'.pkt_count + 1;
        this'.Q_in.popFront();
        return ();
    }
}
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
dat __h1_ty{
    Q_in: Queue , Q_out: Queue;
    pkt_count: ℝ;
    def __h1_ty'(){
        subExp_CallExp_1 := Queue();
        this.Q_in = subExp_CallExp_1;
        subExp_CallExp_2 := Queue();
        this.Q_out = subExp_CallExp_2;
        this.pkt_count = 0;
        return this;
    }
    def __run(){
        subExp_3 := this.pkt_count;
        this.pkt_count = subExp_3 + 1;
        this.Q_in.popFront();
        subExp_4 := ();
        return subExp_4;
    }
}
illegal thing in data declaration:
Q_in: Queue , Q_out: Queue

var __h1_ty = function(){
    var this_v0 = {};
    var subExp_CallExp_1_v0 = Queue([]).obj;
    var this_v1 = _.assign({},this_v0,{Q_in: subExp_CallExp_1_v0});
    var subExp_CallExp_2_v0 = Queue([]).obj;
    var this_v2 = _.assign({},this_v1,{Q_out: subExp_CallExp_2_v0});
    var this_v3 = _.assign({},this_v2,{pkt_count: 0});
    return {res:this_v3,obj:this_v3};
}
var __h1_ty___run = function(this_v0){
    var subExp_3=this_v0.pkt_count;
    var this_v1 = _.assign({},this_v0,{pkt_count: subExp_3+1});
    var this_v2 = _.assign({},this_v1,{Q_in: Queue_popFront(this_v1.Q_in,[]).obj});
    var subExp_4=[];
    return {res:subExp_4,obj:this_v2};
}

translating meaning of __s0_ty
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
done with ifElseFunctional
Expression of type Identifier:
__s0_ty
 
Expression of type Identifier:
Q_in
 
Expression of type Identifier:
Queue
 
Expression of type VarDecl:
Q_in: Queue
 
Expression of type Identifier:
Q_out
 
Expression of type Identifier:
Queue
 
Expression of type VarDecl:
Q_out: Queue
 
Expression of type ABinaryExp:
Q_in: Queue , Q_out: Queue
 
Expression of type Identifier:
route1
 
Expression of type Identifier:
ℝ
 
Expression of type VarDecl:
route1: ℝ
 
Expression of type Identifier:
route2
 
Expression of type Identifier:
ℝ
 
Expression of type VarDecl:
route2: ℝ
 
Expression of type ABinaryExp:
route1: ℝ , route2: ℝ
 
Expression of type Identifier:
__s0_ty
 
Expression of type Identifier:
this
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this.Q_in
 
Expression of type Identifier:
Queue'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Queue'()
 
Expression of type ABinaryExp:
this.Q_in = Queue'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this.Q_out
 
Expression of type Identifier:
Queue'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Queue'()
 
Expression of type ABinaryExp:
this.Q_out = Queue'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
route1
 
Expression of type FieldExp:
this.route1
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
this.route1 = 0
 
Expression of type Identifier:
this
 
Expression of type Identifier:
route2
 
Expression of type FieldExp:
this.route2
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
this.route2 = 0
 
Expression of type Identifier:
this
 
Expression of type ReturnExp:
return this
 
Expression of type FunctionDef:
def __s0_ty'(){
    this.Q_in = Queue'();
    this.Q_out = Queue'();
    this.route1 = 0;
    this.route2 = 0;
    return this;
}
 
Expression of type Identifier:
__run
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.Q_out
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.Q_out.pushBack
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.Q_in.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.Q_in.takeFront()
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.takeFront()[0]
 
Expression of type LiteralExp:
3
 
Expression of type TupleExp:
((this'.Q_in.takeFront()[0],3))
 
Expression of type CallExp:
this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.Q_out
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.Q_out.pushBack
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.Q_in.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.Q_in.takeFront()
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.takeFront()[0]
 
Expression of type LiteralExp:
3
 
Expression of type TupleExp:
((this'.Q_in.takeFront()[0],3))
 
Expression of type CallExp:
this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.Q_out
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.Q_out.pushBack
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.Q_in.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.Q_in.takeFront()
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.takeFront()[0]
 
Expression of type LiteralExp:
1
 
Expression of type TupleExp:
((this'.Q_in.takeFront()[0],1))
 
Expression of type CallExp:
this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.Q_in.data
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.data[0]
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.data[0][0]
 
Expression of type Identifier:
dst
 
Expression of type FieldExp:
this'.Q_in.data[0][0].dst
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
this'.Q_in.data[0][0].dst == 0
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if this'.Q_in.data[0][0].dst == 0 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if this'.Q_in.data[0][0].dst == 0 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    def _if(){
        this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
        return (1,this',0);
    }
    def _else(){
        this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
        return (1,this',0);
    }
    def eval_if(){
        if this'.Q_in.data[0][0].dst == 0 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
route1
 
Expression of type FieldExp:
this'.route1
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
this'.route1 = 2
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
route2
 
Expression of type FieldExp:
this'.route2
 
Expression of type LiteralExp:
1
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
1 + 1
 
Expression of type ABinaryExp:
this'.route2 = 1 + 1
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.Q_out
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.Q_out.pushBack
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.Q_in.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.Q_in.takeFront()
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.takeFront()[0]
 
Expression of type LiteralExp:
1
 
Expression of type TupleExp:
((this'.Q_in.takeFront()[0],1))
 
Expression of type CallExp:
this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.Q_out
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.Q_out.pushBack
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.Q_in.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.Q_in.takeFront()
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.takeFront()[0]
 
Expression of type LiteralExp:
2
 
Expression of type TupleExp:
((this'.Q_in.takeFront()[0],2))
 
Expression of type CallExp:
this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
route1
 
Expression of type FieldExp:
this'.route1
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
route2
 
Expression of type FieldExp:
this'.route2
 
Expression of type ABinaryExp:
this'.route1 < this'.route2
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
route1
 
Expression of type FieldExp:
this'.route1
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
route2
 
Expression of type FieldExp:
this'.route2
 
Expression of type ABinaryExp:
this'.route1 == this'.route2
 
Expression of type Identifier:
flip
 
Expression of type LiteralExp:
1
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
(1 / 2)
 
Expression of type CallExp:
flip(1 / 2)
 
Expression of type ABinaryExp:
this'.route1 == this'.route2 && flip(1 / 2)
 
Expression of type ABinaryExp:
this'.route1 < this'.route2 || this'.route1 == this'.route2 && flip(1 / 2)
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if this'.route1 < this'.route2 || this'.route1 == this'.route2 && flip(1 / 2) {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if this'.route1 < this'.route2 || this'.route1 == this'.route2 && flip(1 / 2) {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.route1 = 2;
    this'.route2 = 1 + 1;
    def _if(){
        this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
        return (1,this',0);
    }
    def _else(){
        this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
        return (1,this',0);
    }
    def eval_if(){
        if this'.route1 < this'.route2 || this'.route1 == this'.route2 && flip(1 / 2) {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.Q_in.data
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.data[0]
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
this'.Q_in.data[0][1]
 
Expression of type LiteralExp:
3
 
Expression of type ABinaryExp:
this'.Q_in.data[0][1] == 3
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if this'.Q_in.data[0][1] == 3 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if this'.Q_in.data[0][1] == 3 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    def _if(){
        this'.route1 = 2;
        this'.route2 = 1 + 1;
        def _if(){
            this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
            return (1,this',0);
        }
        def _else(){
            this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
            return (1,this',0);
        }
        def eval_if(){
            if this'.route1 < this'.route2 || this'.route1 == this'.route2 && flip(1 / 2) {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if this'.Q_in.data[0][1] == 3 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.Q_in.data
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.data[0]
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
this'.Q_in.data[0][1]
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
this'.Q_in.data[0][1] == 2
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if this'.Q_in.data[0][1] == 2 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if this'.Q_in.data[0][1] == 2 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    def _if(){
        def _if(){
            this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
            return (1,this',0);
        }
        def _else(){
            this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
            return (1,this',0);
        }
        def eval_if(){
            if this'.Q_in.data[0][0].dst == 0 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def _else(){
        def _if(){
            this'.route1 = 2;
            this'.route2 = 1 + 1;
            def _if(){
                this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
                return (1,this',0);
            }
            def _else(){
                this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
                return (1,this',0);
            }
            def eval_if(){
                if this'.route1 < this'.route2 || this'.route1 == this'.route2 && flip(1 / 2) {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if this'.Q_in.data[0][1] == 3 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def eval_if(){
        if this'.Q_in.data[0][1] == 2 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.Q_in.data
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.data[0]
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
this'.Q_in.data[0][1]
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
this'.Q_in.data[0][1] == 1
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if this'.Q_in.data[0][1] == 1 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if this'.Q_in.data[0][1] == 1 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type TupleExp:
()
 
Expression of type ReturnExp:
return ()
 
Expression of type FunctionDef:
def __run(){
    def _if(){
        this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
        return (1,this',0);
    }
    def _else(){
        def _if(){
            def _if(){
                this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
                return (1,this',0);
            }
            def _else(){
                this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
                return (1,this',0);
            }
            def eval_if(){
                if this'.Q_in.data[0][0].dst == 0 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def _else(){
            def _if(){
                this'.route1 = 2;
                this'.route2 = 1 + 1;
                def _if(){
                    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
                    return (1,this',0);
                }
                def _else(){
                    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
                    return (1,this',0);
                }
                def eval_if(){
                    if this'.route1 < this'.route2 || this'.route1 == this'.route2 && flip(1 / 2) {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if this'.Q_in.data[0][1] == 3 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def eval_if(){
            if this'.Q_in.data[0][1] == 2 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def eval_if(){
        if this'.Q_in.data[0][1] == 1 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return ();
}
 
Expression of type CompoundDecl:
{
    Q_in: Queue , Q_out: Queue;
    route1: ℝ , route2: ℝ;
    def __s0_ty'(){
        this.Q_in = Queue'();
        this.Q_out = Queue'();
        this.route1 = 0;
        this.route2 = 0;
        return this;
    }
    def __run(){
        def _if(){
            this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
            return (1,this',0);
        }
        def _else(){
            def _if(){
                def _if(){
                    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
                    return (1,this',0);
                }
                def _else(){
                    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
                    return (1,this',0);
                }
                def eval_if(){
                    if this'.Q_in.data[0][0].dst == 0 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def _else(){
                def _if(){
                    this'.route1 = 2;
                    this'.route2 = 1 + 1;
                    def _if(){
                        this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
                        return (1,this',0);
                    }
                    def _else(){
                        this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
                        return (1,this',0);
                    }
                    def eval_if(){
                        if this'.route1 < this'.route2 || this'.route1 == this'.route2 && flip(1 / 2) {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if this'.Q_in.data[0][1] == 3 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def eval_if(){
                if this'.Q_in.data[0][1] == 2 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def eval_if(){
            if this'.Q_in.data[0][1] == 1 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return ();
    }
}
 
Expression of type DatDecl:
dat __s0_ty{
    Q_in: Queue , Q_out: Queue;
    route1: ℝ , route2: ℝ;
    def __s0_ty'(){
        this.Q_in = Queue'();
        this.Q_out = Queue'();
        this.route1 = 0;
        this.route2 = 0;
        return this;
    }
    def __run(){
        def _if(){
            this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
            return (1,this',0);
        }
        def _else(){
            def _if(){
                def _if(){
                    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
                    return (1,this',0);
                }
                def _else(){
                    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
                    return (1,this',0);
                }
                def eval_if(){
                    if this'.Q_in.data[0][0].dst == 0 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def _else(){
                def _if(){
                    this'.route1 = 2;
                    this'.route2 = 1 + 1;
                    def _if(){
                        this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
                        return (1,this',0);
                    }
                    def _else(){
                        this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
                        return (1,this',0);
                    }
                    def eval_if(){
                        if this'.route1 < this'.route2 || this'.route1 == this'.route2 && flip(1 / 2) {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if this'.Q_in.data[0][1] == 3 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def eval_if(){
                if this'.Q_in.data[0][1] == 2 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def eval_if(){
            if this'.Q_in.data[0][1] == 1 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return ();
    }
}
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
dat __s0_ty{
    Q_in: Queue , Q_out: Queue;
    route1: ℝ , route2: ℝ;
    def __s0_ty'(){
        subExp_CallExp_1 := Queue();
        this.Q_in = subExp_CallExp_1;
        subExp_CallExp_2 := Queue();
        this.Q_out = subExp_CallExp_2;
        this.route1 = 0;
        this.route2 = 0;
        return this;
    }
    def __run(){
        def _if_0(){
            subExp_5 := this.Q_in.takeFront();
            subExp_arg_3 := subExp_5[0];
            subExp_arg_4 := 3;
            this.Q_out.pushBack(subExp_arg_3,subExp_arg_4);
            subExp_6 := (1,this,0);
            return subExp_6;
        }
        def _else_0(){
            def _if_1(){
                def _if_2(){
                    subExp_9 := this.Q_in.takeFront();
                    subExp_arg_7 := subExp_9[0];
                    subExp_arg_8 := 3;
                    this.Q_out.pushBack(subExp_arg_7,subExp_arg_8);
                    subExp_10 := (1,this,0);
                    return subExp_10;
                }
                def _else_1(){
                    subExp_13 := this.Q_in.takeFront();
                    subExp_arg_11 := subExp_13[0];
                    subExp_arg_12 := 1;
                    this.Q_out.pushBack(subExp_arg_11,subExp_arg_12);
                    subExp_14 := (1,this,0);
                    return subExp_14;
                }
                def eval_if_0(){
                    subExp_18 := this.Q_in.data[0][0].dst;
                    subExp_15 := subExp_18 == 0;
                    if subExp_15 {
                        subExp_16 := _if_2();
                        return subExp_16;
                    } else {
                        subExp_17 := _else_1();
                        return subExp_17;
                    }
                }
                _ret_0 := eval_if_0();
                this = _ret_0[1];
                subExp_19 := (1,this,0);
                return subExp_19;
            }
            def _else_1(){
                def _if_2(){
                    this.route1 = 2;
                    this.route2 = 1 + 1;
                    def _if_3(){
                        subExp_22 := this.Q_in.takeFront();
                        subExp_arg_20 := subExp_22[0];
                        subExp_arg_21 := 1;
                        this.Q_out.pushBack(subExp_arg_20,subExp_arg_21);
                        subExp_23 := (1,this,0);
                        return subExp_23;
                    }
                    def _else_2(){
                        subExp_26 := this.Q_in.takeFront();
                        subExp_arg_24 := subExp_26[0];
                        subExp_arg_25 := 2;
                        this.Q_out.pushBack(subExp_arg_24,subExp_arg_25);
                        subExp_27 := (1,this,0);
                        return subExp_27;
                    }
                    def eval_if_0(){
                        subExp_33 := this.route1;
                        subExp_34 := this.route2;
                        subExp_31 := subExp_33 < subExp_34;
                        subExp_37 := this.route1;
                        subExp_38 := this.route2;
                        subExp_35 := subExp_37 == subExp_38;
                        subExp_39 := (1 / 2);
                        subExp_36 := flip(subExp_39);
                        subExp_32 := subExp_35 && subExp_36;
                        subExp_28 := subExp_31 || subExp_32;
                        if subExp_28 {
                            subExp_29 := _if_3();
                            return subExp_29;
                        } else {
                            subExp_30 := _else_2();
                            return subExp_30;
                        }
                    }
                    _ret_0 := eval_if_0();
                    this = _ret_0[1];
                    subExp_40 := (1,this,0);
                    return subExp_40;
                }
                def _else_2(){
                    subExp_41 := (1,this,0);
                    return subExp_41;
                }
                def eval_if_0(){
                    subExp_47 := this.Q_in.data;
                    subExp_46 := subExp_47[0];
                    subExp_45 := subExp_46[1];
                    subExp_42 := subExp_45 == 3;
                    if subExp_42 {
                        subExp_43 := _if_2();
                        return subExp_43;
                    } else {
                        subExp_44 := _else_2();
                        return subExp_44;
                    }
                }
                _ret_0 := eval_if_0();
                this = _ret_0[1];
                subExp_48 := (1,this,0);
                return subExp_48;
            }
            def eval_if_0(){
                subExp_54 := this.Q_in.data;
                subExp_53 := subExp_54[0];
                subExp_52 := subExp_53[1];
                subExp_49 := subExp_52 == 2;
                if subExp_49 {
                    subExp_50 := _if_1();
                    return subExp_50;
                } else {
                    subExp_51 := _else_1();
                    return subExp_51;
                }
            }
            _ret_0 := eval_if_0();
            this = _ret_0[1];
            subExp_55 := (1,this,0);
            return subExp_55;
        }
        def eval_if_0(){
            subExp_61 := this.Q_in.data;
            subExp_60 := subExp_61[0];
            subExp_59 := subExp_60[1];
            subExp_56 := subExp_59 == 1;
            if subExp_56 {
                subExp_57 := _if_0();
                return subExp_57;
            } else {
                subExp_58 := _else_0();
                return subExp_58;
            }
        }
        _ret_0 := eval_if_0();
        this = _ret_0[1];
        subExp_62 := ();
        return subExp_62;
    }
}
illegal thing in data declaration:
Q_in: Queue , Q_out: Queue

illegal thing in data declaration:
route1: ℝ , route2: ℝ

var __s0_ty = function(){
    var this_v0 = {};
    var subExp_CallExp_1_v0 = Queue([]).obj;
    var this_v1 = _.assign({},this_v0,{Q_in: subExp_CallExp_1_v0});
    var subExp_CallExp_2_v0 = Queue([]).obj;
    var this_v2 = _.assign({},this_v1,{Q_out: subExp_CallExp_2_v0});
    var this_v3 = _.assign({},this_v2,{route1: 0});
    var this_v4 = _.assign({},this_v3,{route2: 0});
    return {res:this_v4,obj:this_v4};
}
var __s0_ty___run = function(this_v0){
    var _if_0 = function(){
        var tmp = Queue_takeFront(this_v0.Q_in,[]);
        var subExp_5 = tmp.res;
        var this_v1 = _.assign({},this_v0,{Q_in: tmp.obj});
        var subExp_arg_3=subExp_5[+0];
        var subExp_arg_4=3;
        var this_v2 = _.assign({},this_v1,{Q_out: Queue_pushBack(this_v1.Q_out,[subExp_arg_3,subExp_arg_4]).obj});
        var subExp_6=[1,this_v2,0];
        return subExp_6;
    }
    var _else_0 = function(){
        var _if_1 = function(){
            var _if_2 = function(){
                var tmp = Queue_takeFront(this_v0.Q_in,[]);
                var subExp_9 = tmp.res;
                var this_v1 = _.assign({},this_v0,{Q_in: tmp.obj});
                var subExp_arg_7=subExp_9[+0];
                var subExp_arg_8=3;
                var this_v2 = _.assign({},this_v1,{Q_out: Queue_pushBack(this_v1.Q_out,[subExp_arg_7,subExp_arg_8]).obj});
                var subExp_10=[1,this_v2,0];
                return subExp_10;
            }
            var _else_1 = function(){
                var tmp = Queue_takeFront(this_v0.Q_in,[]);
                var subExp_13 = tmp.res;
                var this_v1 = _.assign({},this_v0,{Q_in: tmp.obj});
                var subExp_arg_11=subExp_13[+0];
                var subExp_arg_12=1;
                var this_v2 = _.assign({},this_v1,{Q_out: Queue_pushBack(this_v1.Q_out,[subExp_arg_11,subExp_arg_12]).obj});
                var subExp_14=[1,this_v2,0];
                return subExp_14;
            }
            var eval_if_0 = function(){
                var subExp_18=this_v0.Q_in.data[+0][+0].dst;
                var subExp_15=subExp_18==0;
                if(subExp_15){
                    var subExp_16=_if_2([]);
                    return subExp_16;
                }
                else{
                    var subExp_17=_else_1([]);
                    return subExp_17;
                }
            }
            var _ret_0=eval_if_0([]);
            var this_v0=_ret_0[+1];
            var subExp_19=[1,this_v0,0];
            return subExp_19;
        }
        var _else_1 = function(){
            var _if_2 = function(){
                var this_v1 = _.assign({},this_v0,{route1: 2});
                var this_v2 = _.assign({},this_v1,{route2: 1+1});
                var _if_3 = function(){
                    var tmp = Queue_takeFront(this_v2.Q_in,[]);
                    var subExp_22 = tmp.res;
                    var this_v3 = _.assign({},this_v2,{Q_in: tmp.obj});
                    var subExp_arg_20=subExp_22[+0];
                    var subExp_arg_21=1;
                    var this_v4 = _.assign({},this_v3,{Q_out: Queue_pushBack(this_v3.Q_out,[subExp_arg_20,subExp_arg_21]).obj});
                    var subExp_23=[1,this_v4,0];
                    return subExp_23;
                }
                var _else_2 = function(){
                    var tmp = Queue_takeFront(this_v2.Q_in,[]);
                    var subExp_26 = tmp.res;
                    var this_v3 = _.assign({},this_v2,{Q_in: tmp.obj});
                    var subExp_arg_24=subExp_26[+0];
                    var subExp_arg_25=2;
                    var this_v4 = _.assign({},this_v3,{Q_out: Queue_pushBack(this_v3.Q_out,[subExp_arg_24,subExp_arg_25]).obj});
                    var subExp_27=[1,this_v4,0];
                    return subExp_27;
                }
                var eval_if_0 = function(){
                    var subExp_33=this_v2.route1;
                    var subExp_34=this_v2.route2;
                    var subExp_31=subExp_33<subExp_34;
                    var subExp_37=this_v2.route1;
                    var subExp_38=this_v2.route2;
                    var subExp_35=subExp_37==subExp_38;
                    var subExp_39=(1/2);
                    var subExp_36=sample(Bernoulli({p:subExp_39}));
                    var subExp_32=subExp_35&&subExp_36;
                    var subExp_28=subExp_31||subExp_32;
                    if(subExp_28){
                        var subExp_29=_if_3([]);
                        return subExp_29;
                    }
                    else{
                        var subExp_30=_else_2([]);
                        return subExp_30;
                    }
                }
                var _ret_0=eval_if_0([]);
                var this_v2=_ret_0[+1];
                var subExp_40=[1,this_v2,0];
                return subExp_40;
            }
            var _else_2 = function(){
                var subExp_41=[1,this_v0,0];
                return subExp_41;
            }
            var eval_if_0 = function(){
                var subExp_47=this_v0.Q_in.data;
                var subExp_46=subExp_47[+0];
                var subExp_45=subExp_46[+1];
                var subExp_42=subExp_45==3;
                if(subExp_42){
                    var subExp_43=_if_2([]);
                    return subExp_43;
                }
                else{
                    var subExp_44=_else_2([]);
                    return subExp_44;
                }
            }
            var _ret_0=eval_if_0([]);
            var this_v0=_ret_0[+1];
            var subExp_48=[1,this_v0,0];
            return subExp_48;
        }
        var eval_if_0 = function(){
            var subExp_54=this_v0.Q_in.data;
            var subExp_53=subExp_54[+0];
            var subExp_52=subExp_53[+1];
            var subExp_49=subExp_52==2;
            if(subExp_49){
                var subExp_50=_if_1([]);
                return subExp_50;
            }
            else{
                var subExp_51=_else_1([]);
                return subExp_51;
            }
        }
        var _ret_0=eval_if_0([]);
        var this_v0=_ret_0[+1];
        var subExp_55=[1,this_v0,0];
        return subExp_55;
    }
    var eval_if_0 = function(){
        var subExp_61=this_v0.Q_in.data;
        var subExp_60=subExp_61[+0];
        var subExp_59=subExp_60[+1];
        var subExp_56=subExp_59==1;
        if(subExp_56){
            var subExp_57=_if_0([]);
            return subExp_57;
        }
        else{
            var subExp_58=_else_0([]);
            return subExp_58;
        }
    }
    var _ret_0=eval_if_0([]);
    var this_v0=_ret_0[+1];
    var subExp_62=[];
    return {res:subExp_62,obj:this_v0};
}

translating meaning of __s1_ty
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
TODO: VarsGetter encountered '=' but left side is no Identifier/IndexExp.
done with ifElseFunctional
Expression of type Identifier:
__s1_ty
 
Expression of type Identifier:
Q_in
 
Expression of type Identifier:
Queue
 
Expression of type VarDecl:
Q_in: Queue
 
Expression of type Identifier:
Q_out
 
Expression of type Identifier:
Queue
 
Expression of type VarDecl:
Q_out: Queue
 
Expression of type ABinaryExp:
Q_in: Queue , Q_out: Queue
 
Expression of type Identifier:
route1
 
Expression of type Identifier:
ℝ
 
Expression of type VarDecl:
route1: ℝ
 
Expression of type Identifier:
route2
 
Expression of type Identifier:
ℝ
 
Expression of type VarDecl:
route2: ℝ
 
Expression of type ABinaryExp:
route1: ℝ , route2: ℝ
 
Expression of type Identifier:
__s1_ty
 
Expression of type Identifier:
this
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this.Q_in
 
Expression of type Identifier:
Queue'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Queue'()
 
Expression of type ABinaryExp:
this.Q_in = Queue'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this.Q_out
 
Expression of type Identifier:
Queue'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Queue'()
 
Expression of type ABinaryExp:
this.Q_out = Queue'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
route1
 
Expression of type FieldExp:
this.route1
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
this.route1 = 0
 
Expression of type Identifier:
this
 
Expression of type Identifier:
route2
 
Expression of type FieldExp:
this.route2
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
this.route2 = 0
 
Expression of type Identifier:
this
 
Expression of type ReturnExp:
return this
 
Expression of type FunctionDef:
def __s1_ty'(){
    this.Q_in = Queue'();
    this.Q_out = Queue'();
    this.route1 = 0;
    this.route2 = 0;
    return this;
}
 
Expression of type Identifier:
__run
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.Q_out
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.Q_out.pushBack
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.Q_in.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.Q_in.takeFront()
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.takeFront()[0]
 
Expression of type LiteralExp:
3
 
Expression of type TupleExp:
((this'.Q_in.takeFront()[0],3))
 
Expression of type CallExp:
this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.Q_out
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.Q_out.pushBack
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.Q_in.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.Q_in.takeFront()
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.takeFront()[0]
 
Expression of type LiteralExp:
3
 
Expression of type TupleExp:
((this'.Q_in.takeFront()[0],3))
 
Expression of type CallExp:
this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.Q_out
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.Q_out.pushBack
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.Q_in.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.Q_in.takeFront()
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.takeFront()[0]
 
Expression of type LiteralExp:
1
 
Expression of type TupleExp:
((this'.Q_in.takeFront()[0],1))
 
Expression of type CallExp:
this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.Q_in.data
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.data[0]
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.data[0][0]
 
Expression of type Identifier:
dst
 
Expression of type FieldExp:
this'.Q_in.data[0][0].dst
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
this'.Q_in.data[0][0].dst == 1
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if this'.Q_in.data[0][0].dst == 1 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if this'.Q_in.data[0][0].dst == 1 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    def _if(){
        this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
        return (1,this',0);
    }
    def _else(){
        this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
        return (1,this',0);
    }
    def eval_if(){
        if this'.Q_in.data[0][0].dst == 1 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
route1
 
Expression of type FieldExp:
this'.route1
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
this'.route1 = 2
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
route2
 
Expression of type FieldExp:
this'.route2
 
Expression of type LiteralExp:
1
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
1 + 1
 
Expression of type ABinaryExp:
this'.route2 = 1 + 1
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.Q_out
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.Q_out.pushBack
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.Q_in.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.Q_in.takeFront()
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.takeFront()[0]
 
Expression of type LiteralExp:
1
 
Expression of type TupleExp:
((this'.Q_in.takeFront()[0],1))
 
Expression of type CallExp:
this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.Q_out
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.Q_out.pushBack
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.Q_in.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.Q_in.takeFront()
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.takeFront()[0]
 
Expression of type LiteralExp:
2
 
Expression of type TupleExp:
((this'.Q_in.takeFront()[0],2))
 
Expression of type CallExp:
this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
route1
 
Expression of type FieldExp:
this'.route1
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
route2
 
Expression of type FieldExp:
this'.route2
 
Expression of type ABinaryExp:
this'.route1 < this'.route2
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
route1
 
Expression of type FieldExp:
this'.route1
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
route2
 
Expression of type FieldExp:
this'.route2
 
Expression of type ABinaryExp:
this'.route1 == this'.route2
 
Expression of type Identifier:
flip
 
Expression of type LiteralExp:
1
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
(1 / 2)
 
Expression of type CallExp:
flip(1 / 2)
 
Expression of type ABinaryExp:
this'.route1 == this'.route2 && flip(1 / 2)
 
Expression of type ABinaryExp:
this'.route1 < this'.route2 || this'.route1 == this'.route2 && flip(1 / 2)
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if this'.route1 < this'.route2 || this'.route1 == this'.route2 && flip(1 / 2) {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if this'.route1 < this'.route2 || this'.route1 == this'.route2 && flip(1 / 2) {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.route1 = 2;
    this'.route2 = 1 + 1;
    def _if(){
        this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
        return (1,this',0);
    }
    def _else(){
        this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
        return (1,this',0);
    }
    def eval_if(){
        if this'.route1 < this'.route2 || this'.route1 == this'.route2 && flip(1 / 2) {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.Q_in.data
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.data[0]
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
this'.Q_in.data[0][1]
 
Expression of type LiteralExp:
3
 
Expression of type ABinaryExp:
this'.Q_in.data[0][1] == 3
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if this'.Q_in.data[0][1] == 3 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if this'.Q_in.data[0][1] == 3 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    def _if(){
        this'.route1 = 2;
        this'.route2 = 1 + 1;
        def _if(){
            this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
            return (1,this',0);
        }
        def _else(){
            this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
            return (1,this',0);
        }
        def eval_if(){
            if this'.route1 < this'.route2 || this'.route1 == this'.route2 && flip(1 / 2) {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def _else(){
        return (1,this',0);
    }
    def eval_if(){
        if this'.Q_in.data[0][1] == 3 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.Q_in.data
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.data[0]
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
this'.Q_in.data[0][1]
 
Expression of type LiteralExp:
2
 
Expression of type ABinaryExp:
this'.Q_in.data[0][1] == 2
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if this'.Q_in.data[0][1] == 2 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if this'.Q_in.data[0][1] == 2 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    def _if(){
        def _if(){
            this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
            return (1,this',0);
        }
        def _else(){
            this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
            return (1,this',0);
        }
        def eval_if(){
            if this'.Q_in.data[0][0].dst == 1 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def _else(){
        def _if(){
            this'.route1 = 2;
            this'.route2 = 1 + 1;
            def _if(){
                this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
                return (1,this',0);
            }
            def _else(){
                this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
                return (1,this',0);
            }
            def eval_if(){
                if this'.route1 < this'.route2 || this'.route1 == this'.route2 && flip(1 / 2) {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def _else(){
            return (1,this',0);
        }
        def eval_if(){
            if this'.Q_in.data[0][1] == 3 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def eval_if(){
        if this'.Q_in.data[0][1] == 2 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.Q_in.data
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.data[0]
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
this'.Q_in.data[0][1]
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
this'.Q_in.data[0][1] == 1
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if this'.Q_in.data[0][1] == 1 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if this'.Q_in.data[0][1] == 1 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type TupleExp:
()
 
Expression of type ReturnExp:
return ()
 
Expression of type FunctionDef:
def __run(){
    def _if(){
        this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
        return (1,this',0);
    }
    def _else(){
        def _if(){
            def _if(){
                this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
                return (1,this',0);
            }
            def _else(){
                this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
                return (1,this',0);
            }
            def eval_if(){
                if this'.Q_in.data[0][0].dst == 1 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def _else(){
            def _if(){
                this'.route1 = 2;
                this'.route2 = 1 + 1;
                def _if(){
                    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
                    return (1,this',0);
                }
                def _else(){
                    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
                    return (1,this',0);
                }
                def eval_if(){
                    if this'.route1 < this'.route2 || this'.route1 == this'.route2 && flip(1 / 2) {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def _else(){
                return (1,this',0);
            }
            def eval_if(){
                if this'.Q_in.data[0][1] == 3 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def eval_if(){
            if this'.Q_in.data[0][1] == 2 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return (1,this',0);
    }
    def eval_if(){
        if this'.Q_in.data[0][1] == 1 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return ();
}
 
Expression of type CompoundDecl:
{
    Q_in: Queue , Q_out: Queue;
    route1: ℝ , route2: ℝ;
    def __s1_ty'(){
        this.Q_in = Queue'();
        this.Q_out = Queue'();
        this.route1 = 0;
        this.route2 = 0;
        return this;
    }
    def __run(){
        def _if(){
            this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
            return (1,this',0);
        }
        def _else(){
            def _if(){
                def _if(){
                    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
                    return (1,this',0);
                }
                def _else(){
                    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
                    return (1,this',0);
                }
                def eval_if(){
                    if this'.Q_in.data[0][0].dst == 1 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def _else(){
                def _if(){
                    this'.route1 = 2;
                    this'.route2 = 1 + 1;
                    def _if(){
                        this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
                        return (1,this',0);
                    }
                    def _else(){
                        this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
                        return (1,this',0);
                    }
                    def eval_if(){
                        if this'.route1 < this'.route2 || this'.route1 == this'.route2 && flip(1 / 2) {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if this'.Q_in.data[0][1] == 3 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def eval_if(){
                if this'.Q_in.data[0][1] == 2 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def eval_if(){
            if this'.Q_in.data[0][1] == 1 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return ();
    }
}
 
Expression of type DatDecl:
dat __s1_ty{
    Q_in: Queue , Q_out: Queue;
    route1: ℝ , route2: ℝ;
    def __s1_ty'(){
        this.Q_in = Queue'();
        this.Q_out = Queue'();
        this.route1 = 0;
        this.route2 = 0;
        return this;
    }
    def __run(){
        def _if(){
            this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
            return (1,this',0);
        }
        def _else(){
            def _if(){
                def _if(){
                    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],3));
                    return (1,this',0);
                }
                def _else(){
                    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
                    return (1,this',0);
                }
                def eval_if(){
                    if this'.Q_in.data[0][0].dst == 1 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def _else(){
                def _if(){
                    this'.route1 = 2;
                    this'.route2 = 1 + 1;
                    def _if(){
                        this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
                        return (1,this',0);
                    }
                    def _else(){
                        this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
                        return (1,this',0);
                    }
                    def eval_if(){
                        if this'.route1 < this'.route2 || this'.route1 == this'.route2 && flip(1 / 2) {
                            return _if();
                        } else {
                            return _else();
                        }
                    }
                    _ret := eval_if();
                    this' = _ret[1];
                    return (1,this',0);
                }
                def _else(){
                    return (1,this',0);
                }
                def eval_if(){
                    if this'.Q_in.data[0][1] == 3 {
                        return _if();
                    } else {
                        return _else();
                    }
                }
                _ret := eval_if();
                this' = _ret[1];
                return (1,this',0);
            }
            def eval_if(){
                if this'.Q_in.data[0][1] == 2 {
                    return _if();
                } else {
                    return _else();
                }
            }
            _ret := eval_if();
            this' = _ret[1];
            return (1,this',0);
        }
        def eval_if(){
            if this'.Q_in.data[0][1] == 1 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return ();
    }
}
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
dat __s1_ty{
    Q_in: Queue , Q_out: Queue;
    route1: ℝ , route2: ℝ;
    def __s1_ty'(){
        subExp_CallExp_1 := Queue();
        this.Q_in = subExp_CallExp_1;
        subExp_CallExp_2 := Queue();
        this.Q_out = subExp_CallExp_2;
        this.route1 = 0;
        this.route2 = 0;
        return this;
    }
    def __run(){
        def _if_0(){
            subExp_5 := this.Q_in.takeFront();
            subExp_arg_3 := subExp_5[0];
            subExp_arg_4 := 3;
            this.Q_out.pushBack(subExp_arg_3,subExp_arg_4);
            subExp_6 := (1,this,0);
            return subExp_6;
        }
        def _else_0(){
            def _if_1(){
                def _if_2(){
                    subExp_9 := this.Q_in.takeFront();
                    subExp_arg_7 := subExp_9[0];
                    subExp_arg_8 := 3;
                    this.Q_out.pushBack(subExp_arg_7,subExp_arg_8);
                    subExp_10 := (1,this,0);
                    return subExp_10;
                }
                def _else_1(){
                    subExp_13 := this.Q_in.takeFront();
                    subExp_arg_11 := subExp_13[0];
                    subExp_arg_12 := 1;
                    this.Q_out.pushBack(subExp_arg_11,subExp_arg_12);
                    subExp_14 := (1,this,0);
                    return subExp_14;
                }
                def eval_if_0(){
                    subExp_18 := this.Q_in.data[0][0].dst;
                    subExp_15 := subExp_18 == 1;
                    if subExp_15 {
                        subExp_16 := _if_2();
                        return subExp_16;
                    } else {
                        subExp_17 := _else_1();
                        return subExp_17;
                    }
                }
                _ret_0 := eval_if_0();
                this = _ret_0[1];
                subExp_19 := (1,this,0);
                return subExp_19;
            }
            def _else_1(){
                def _if_2(){
                    this.route1 = 2;
                    this.route2 = 1 + 1;
                    def _if_3(){
                        subExp_22 := this.Q_in.takeFront();
                        subExp_arg_20 := subExp_22[0];
                        subExp_arg_21 := 1;
                        this.Q_out.pushBack(subExp_arg_20,subExp_arg_21);
                        subExp_23 := (1,this,0);
                        return subExp_23;
                    }
                    def _else_2(){
                        subExp_26 := this.Q_in.takeFront();
                        subExp_arg_24 := subExp_26[0];
                        subExp_arg_25 := 2;
                        this.Q_out.pushBack(subExp_arg_24,subExp_arg_25);
                        subExp_27 := (1,this,0);
                        return subExp_27;
                    }
                    def eval_if_0(){
                        subExp_33 := this.route1;
                        subExp_34 := this.route2;
                        subExp_31 := subExp_33 < subExp_34;
                        subExp_37 := this.route1;
                        subExp_38 := this.route2;
                        subExp_35 := subExp_37 == subExp_38;
                        subExp_39 := (1 / 2);
                        subExp_36 := flip(subExp_39);
                        subExp_32 := subExp_35 && subExp_36;
                        subExp_28 := subExp_31 || subExp_32;
                        if subExp_28 {
                            subExp_29 := _if_3();
                            return subExp_29;
                        } else {
                            subExp_30 := _else_2();
                            return subExp_30;
                        }
                    }
                    _ret_0 := eval_if_0();
                    this = _ret_0[1];
                    subExp_40 := (1,this,0);
                    return subExp_40;
                }
                def _else_2(){
                    subExp_41 := (1,this,0);
                    return subExp_41;
                }
                def eval_if_0(){
                    subExp_47 := this.Q_in.data;
                    subExp_46 := subExp_47[0];
                    subExp_45 := subExp_46[1];
                    subExp_42 := subExp_45 == 3;
                    if subExp_42 {
                        subExp_43 := _if_2();
                        return subExp_43;
                    } else {
                        subExp_44 := _else_2();
                        return subExp_44;
                    }
                }
                _ret_0 := eval_if_0();
                this = _ret_0[1];
                subExp_48 := (1,this,0);
                return subExp_48;
            }
            def eval_if_0(){
                subExp_54 := this.Q_in.data;
                subExp_53 := subExp_54[0];
                subExp_52 := subExp_53[1];
                subExp_49 := subExp_52 == 2;
                if subExp_49 {
                    subExp_50 := _if_1();
                    return subExp_50;
                } else {
                    subExp_51 := _else_1();
                    return subExp_51;
                }
            }
            _ret_0 := eval_if_0();
            this = _ret_0[1];
            subExp_55 := (1,this,0);
            return subExp_55;
        }
        def eval_if_0(){
            subExp_61 := this.Q_in.data;
            subExp_60 := subExp_61[0];
            subExp_59 := subExp_60[1];
            subExp_56 := subExp_59 == 1;
            if subExp_56 {
                subExp_57 := _if_0();
                return subExp_57;
            } else {
                subExp_58 := _else_0();
                return subExp_58;
            }
        }
        _ret_0 := eval_if_0();
        this = _ret_0[1];
        subExp_62 := ();
        return subExp_62;
    }
}
illegal thing in data declaration:
Q_in: Queue , Q_out: Queue

illegal thing in data declaration:
route1: ℝ , route2: ℝ

var __s1_ty = function(){
    var this_v0 = {};
    var subExp_CallExp_1_v0 = Queue([]).obj;
    var this_v1 = _.assign({},this_v0,{Q_in: subExp_CallExp_1_v0});
    var subExp_CallExp_2_v0 = Queue([]).obj;
    var this_v2 = _.assign({},this_v1,{Q_out: subExp_CallExp_2_v0});
    var this_v3 = _.assign({},this_v2,{route1: 0});
    var this_v4 = _.assign({},this_v3,{route2: 0});
    return {res:this_v4,obj:this_v4};
}
var __s1_ty___run = function(this_v0){
    var _if_0 = function(){
        var tmp = Queue_takeFront(this_v0.Q_in,[]);
        var subExp_5 = tmp.res;
        var this_v1 = _.assign({},this_v0,{Q_in: tmp.obj});
        var subExp_arg_3=subExp_5[+0];
        var subExp_arg_4=3;
        var this_v2 = _.assign({},this_v1,{Q_out: Queue_pushBack(this_v1.Q_out,[subExp_arg_3,subExp_arg_4]).obj});
        var subExp_6=[1,this_v2,0];
        return subExp_6;
    }
    var _else_0 = function(){
        var _if_1 = function(){
            var _if_2 = function(){
                var tmp = Queue_takeFront(this_v0.Q_in,[]);
                var subExp_9 = tmp.res;
                var this_v1 = _.assign({},this_v0,{Q_in: tmp.obj});
                var subExp_arg_7=subExp_9[+0];
                var subExp_arg_8=3;
                var this_v2 = _.assign({},this_v1,{Q_out: Queue_pushBack(this_v1.Q_out,[subExp_arg_7,subExp_arg_8]).obj});
                var subExp_10=[1,this_v2,0];
                return subExp_10;
            }
            var _else_1 = function(){
                var tmp = Queue_takeFront(this_v0.Q_in,[]);
                var subExp_13 = tmp.res;
                var this_v1 = _.assign({},this_v0,{Q_in: tmp.obj});
                var subExp_arg_11=subExp_13[+0];
                var subExp_arg_12=1;
                var this_v2 = _.assign({},this_v1,{Q_out: Queue_pushBack(this_v1.Q_out,[subExp_arg_11,subExp_arg_12]).obj});
                var subExp_14=[1,this_v2,0];
                return subExp_14;
            }
            var eval_if_0 = function(){
                var subExp_18=this_v0.Q_in.data[+0][+0].dst;
                var subExp_15=subExp_18==1;
                if(subExp_15){
                    var subExp_16=_if_2([]);
                    return subExp_16;
                }
                else{
                    var subExp_17=_else_1([]);
                    return subExp_17;
                }
            }
            var _ret_0=eval_if_0([]);
            var this_v0=_ret_0[+1];
            var subExp_19=[1,this_v0,0];
            return subExp_19;
        }
        var _else_1 = function(){
            var _if_2 = function(){
                var this_v1 = _.assign({},this_v0,{route1: 2});
                var this_v2 = _.assign({},this_v1,{route2: 1+1});
                var _if_3 = function(){
                    var tmp = Queue_takeFront(this_v2.Q_in,[]);
                    var subExp_22 = tmp.res;
                    var this_v3 = _.assign({},this_v2,{Q_in: tmp.obj});
                    var subExp_arg_20=subExp_22[+0];
                    var subExp_arg_21=1;
                    var this_v4 = _.assign({},this_v3,{Q_out: Queue_pushBack(this_v3.Q_out,[subExp_arg_20,subExp_arg_21]).obj});
                    var subExp_23=[1,this_v4,0];
                    return subExp_23;
                }
                var _else_2 = function(){
                    var tmp = Queue_takeFront(this_v2.Q_in,[]);
                    var subExp_26 = tmp.res;
                    var this_v3 = _.assign({},this_v2,{Q_in: tmp.obj});
                    var subExp_arg_24=subExp_26[+0];
                    var subExp_arg_25=2;
                    var this_v4 = _.assign({},this_v3,{Q_out: Queue_pushBack(this_v3.Q_out,[subExp_arg_24,subExp_arg_25]).obj});
                    var subExp_27=[1,this_v4,0];
                    return subExp_27;
                }
                var eval_if_0 = function(){
                    var subExp_33=this_v2.route1;
                    var subExp_34=this_v2.route2;
                    var subExp_31=subExp_33<subExp_34;
                    var subExp_37=this_v2.route1;
                    var subExp_38=this_v2.route2;
                    var subExp_35=subExp_37==subExp_38;
                    var subExp_39=(1/2);
                    var subExp_36=sample(Bernoulli({p:subExp_39}));
                    var subExp_32=subExp_35&&subExp_36;
                    var subExp_28=subExp_31||subExp_32;
                    if(subExp_28){
                        var subExp_29=_if_3([]);
                        return subExp_29;
                    }
                    else{
                        var subExp_30=_else_2([]);
                        return subExp_30;
                    }
                }
                var _ret_0=eval_if_0([]);
                var this_v2=_ret_0[+1];
                var subExp_40=[1,this_v2,0];
                return subExp_40;
            }
            var _else_2 = function(){
                var subExp_41=[1,this_v0,0];
                return subExp_41;
            }
            var eval_if_0 = function(){
                var subExp_47=this_v0.Q_in.data;
                var subExp_46=subExp_47[+0];
                var subExp_45=subExp_46[+1];
                var subExp_42=subExp_45==3;
                if(subExp_42){
                    var subExp_43=_if_2([]);
                    return subExp_43;
                }
                else{
                    var subExp_44=_else_2([]);
                    return subExp_44;
                }
            }
            var _ret_0=eval_if_0([]);
            var this_v0=_ret_0[+1];
            var subExp_48=[1,this_v0,0];
            return subExp_48;
        }
        var eval_if_0 = function(){
            var subExp_54=this_v0.Q_in.data;
            var subExp_53=subExp_54[+0];
            var subExp_52=subExp_53[+1];
            var subExp_49=subExp_52==2;
            if(subExp_49){
                var subExp_50=_if_1([]);
                return subExp_50;
            }
            else{
                var subExp_51=_else_1([]);
                return subExp_51;
            }
        }
        var _ret_0=eval_if_0([]);
        var this_v0=_ret_0[+1];
        var subExp_55=[1,this_v0,0];
        return subExp_55;
    }
    var eval_if_0 = function(){
        var subExp_61=this_v0.Q_in.data;
        var subExp_60=subExp_61[+0];
        var subExp_59=subExp_60[+1];
        var subExp_56=subExp_59==1;
        if(subExp_56){
            var subExp_57=_if_0([]);
            return subExp_57;
        }
        else{
            var subExp_58=_else_0([]);
            return subExp_58;
        }
    }
    var _ret_0=eval_if_0([]);
    var this_v0=_ret_0[+1];
    var subExp_62=[];
    return {res:subExp_62,obj:this_v0};
}

translating meaning of __s2_ty
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
__s2_ty
 
Expression of type Identifier:
__state
 
Expression of type Identifier:
ℝ
 
Expression of type VarDecl:
__state: ℝ
 
Expression of type Identifier:
Q_in
 
Expression of type Identifier:
Queue
 
Expression of type VarDecl:
Q_in: Queue
 
Expression of type ABinaryExp:
__state: ℝ , Q_in: Queue
 
Expression of type Identifier:
Q_out
 
Expression of type Identifier:
Queue
 
Expression of type VarDecl:
Q_out: Queue
 
Expression of type ABinaryExp:
__state: ℝ , Q_in: Queue , Q_out: Queue
 
Expression of type Identifier:
__s2_ty
 
Expression of type Identifier:
this
 
Expression of type Identifier:
__state
 
Expression of type FieldExp:
this.__state
 
Expression of type LiteralExp:
0
 
Expression of type ABinaryExp:
this.__state = 0
 
Expression of type Identifier:
this
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this.Q_in
 
Expression of type Identifier:
Queue'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Queue'()
 
Expression of type ABinaryExp:
this.Q_in = Queue'()
 
Expression of type Identifier:
this
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this.Q_out
 
Expression of type Identifier:
Queue'
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
Queue'()
 
Expression of type ABinaryExp:
this.Q_out = Queue'()
 
Expression of type Identifier:
this
 
Expression of type ReturnExp:
return this
 
Expression of type FunctionDef:
def __s2_ty'(){
    this.__state = 0;
    this.Q_in = Queue'();
    this.Q_out = Queue'();
    return this;
}
 
Expression of type Identifier:
__run
 
Expression of type Identifier:
_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.Q_out
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.Q_out.pushBack
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.Q_in.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.Q_in.takeFront()
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.takeFront()[0]
 
Expression of type LiteralExp:
2
 
Expression of type TupleExp:
((this'.Q_in.takeFront()[0],2))
 
Expression of type CallExp:
this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _if(){
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
    return (1,this',0);
}
 
Expression of type Identifier:
_else
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_out
 
Expression of type FieldExp:
this'.Q_out
 
Expression of type Identifier:
pushBack
 
Expression of type FieldExp:
this'.Q_out.pushBack
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
takeFront
 
Expression of type FieldExp:
this'.Q_in.takeFront
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
this'.Q_in.takeFront()
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.takeFront()[0]
 
Expression of type LiteralExp:
1
 
Expression of type TupleExp:
((this'.Q_in.takeFront()[0],1))
 
Expression of type CallExp:
this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1))
 
Expression of type LiteralExp:
1
 
Expression of type Identifier:
this'
 
Expression of type LiteralExp:
0
 
Expression of type TupleExp:
(1,this',0)
 
Expression of type ReturnExp:
return (1,this',0)
 
Expression of type FunctionDef:
def _else(){
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
    return (1,this',0);
}
 
Expression of type Identifier:
eval_if
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
Q_in
 
Expression of type FieldExp:
this'.Q_in
 
Expression of type Identifier:
data
 
Expression of type FieldExp:
this'.Q_in.data
 
Expression of type LiteralExp:
0
 
Expression of type IndexExp:
this'.Q_in.data[0]
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
this'.Q_in.data[0][1]
 
Expression of type LiteralExp:
1
 
Expression of type ABinaryExp:
this'.Q_in.data[0][1] == 1
 
Expression of type Identifier:
_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_if()
 
Expression of type ReturnExp:
return _if()
 
Expression of type Identifier:
_else
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
_else()
 
Expression of type ReturnExp:
return _else()
 
Expression of type IteExp:
if this'.Q_in.data[0][1] == 1 {
    return _if();
} else {
    return _else();
}
 
Expression of type FunctionDef:
def eval_if(){
    if this'.Q_in.data[0][1] == 1 {
        return _if();
    } else {
        return _else();
    }
}
 
Expression of type Identifier:
_ret
 
Expression of type Identifier:
eval_if
 
Expression of type TupleExp:
()
 
Expression of type CallExp:
eval_if()
 
Expression of type ABinaryExp:
_ret := eval_if()
 
Expression of type Identifier:
this'
 
Expression of type Identifier:
_ret
 
Expression of type LiteralExp:
1
 
Expression of type IndexExp:
_ret[1]
 
Expression of type ABinaryExp:
this' = _ret[1]
 
Expression of type TupleExp:
()
 
Expression of type ReturnExp:
return ()
 
Expression of type FunctionDef:
def __run(){
    def _if(){
        this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
        return (1,this',0);
    }
    def _else(){
        this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
        return (1,this',0);
    }
    def eval_if(){
        if this'.Q_in.data[0][1] == 1 {
            return _if();
        } else {
            return _else();
        }
    }
    _ret := eval_if();
    this' = _ret[1];
    return ();
}
 
Expression of type CompoundDecl:
{
    __state: ℝ , Q_in: Queue , Q_out: Queue;
    def __s2_ty'(){
        this.__state = 0;
        this.Q_in = Queue'();
        this.Q_out = Queue'();
        return this;
    }
    def __run(){
        def _if(){
            this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
            return (1,this',0);
        }
        def _else(){
            this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
            return (1,this',0);
        }
        def eval_if(){
            if this'.Q_in.data[0][1] == 1 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return ();
    }
}
 
Expression of type DatDecl:
dat __s2_ty{
    __state: ℝ , Q_in: Queue , Q_out: Queue;
    def __s2_ty'(){
        this.__state = 0;
        this.Q_in = Queue'();
        this.Q_out = Queue'();
        return this;
    }
    def __run(){
        def _if(){
            this'.Q_out.pushBack((this'.Q_in.takeFront()[0],2));
            return (1,this',0);
        }
        def _else(){
            this'.Q_out.pushBack((this'.Q_in.takeFront()[0],1));
            return (1,this',0);
        }
        def eval_if(){
            if this'.Q_in.data[0][1] == 1 {
                return _if();
            } else {
                return _else();
            }
        }
        _ret := eval_if();
        this' = _ret[1];
        return ();
    }
}
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
dat __s2_ty{
    __state: ℝ , Q_in: Queue , Q_out: Queue;
    def __s2_ty'(){
        this.__state = 0;
        subExp_CallExp_1 := Queue();
        this.Q_in = subExp_CallExp_1;
        subExp_CallExp_2 := Queue();
        this.Q_out = subExp_CallExp_2;
        return this;
    }
    def __run(){
        def _if_0(){
            subExp_5 := this.Q_in.takeFront();
            subExp_arg_3 := subExp_5[0];
            subExp_arg_4 := 2;
            this.Q_out.pushBack(subExp_arg_3,subExp_arg_4);
            subExp_6 := (1,this,0);
            return subExp_6;
        }
        def _else_0(){
            subExp_9 := this.Q_in.takeFront();
            subExp_arg_7 := subExp_9[0];
            subExp_arg_8 := 1;
            this.Q_out.pushBack(subExp_arg_7,subExp_arg_8);
            subExp_10 := (1,this,0);
            return subExp_10;
        }
        def eval_if_0(){
            subExp_16 := this.Q_in.data;
            subExp_15 := subExp_16[0];
            subExp_14 := subExp_15[1];
            subExp_11 := subExp_14 == 1;
            if subExp_11 {
                subExp_12 := _if_0();
                return subExp_12;
            } else {
                subExp_13 := _else_0();
                return subExp_13;
            }
        }
        _ret_0 := eval_if_0();
        this = _ret_0[1];
        subExp_17 := ();
        return subExp_17;
    }
}
illegal thing in data declaration:
__state: ℝ , Q_in: Queue , Q_out: Queue

var __s2_ty = function(){
    var this_v0 = {};
    var this_v1 = _.assign({},this_v0,{__state: 0});
    var subExp_CallExp_1_v0 = Queue([]).obj;
    var this_v2 = _.assign({},this_v1,{Q_in: subExp_CallExp_1_v0});
    var subExp_CallExp_2_v0 = Queue([]).obj;
    var this_v3 = _.assign({},this_v2,{Q_out: subExp_CallExp_2_v0});
    return {res:this_v3,obj:this_v3};
}
var __s2_ty___run = function(this_v0){
    var _if_0 = function(){
        var tmp = Queue_takeFront(this_v0.Q_in,[]);
        var subExp_5 = tmp.res;
        var this_v1 = _.assign({},this_v0,{Q_in: tmp.obj});
        var subExp_arg_3=subExp_5[+0];
        var subExp_arg_4=2;
        var this_v2 = _.assign({},this_v1,{Q_out: Queue_pushBack(this_v1.Q_out,[subExp_arg_3,subExp_arg_4]).obj});
        var subExp_6=[1,this_v2,0];
        return subExp_6;
    }
    var _else_0 = function(){
        var tmp = Queue_takeFront(this_v0.Q_in,[]);
        var subExp_9 = tmp.res;
        var this_v1 = _.assign({},this_v0,{Q_in: tmp.obj});
        var subExp_arg_7=subExp_9[+0];
        var subExp_arg_8=1;
        var this_v2 = _.assign({},this_v1,{Q_out: Queue_pushBack(this_v1.Q_out,[subExp_arg_7,subExp_arg_8]).obj});
        var subExp_10=[1,this_v2,0];
        return subExp_10;
    }
    var eval_if_0 = function(){
        var subExp_16=this_v0.Q_in.data;
        var subExp_15=subExp_16[+0];
        var subExp_14=subExp_15[+1];
        var subExp_11=subExp_14==1;
        if(subExp_11){
            var subExp_12=_if_0([]);
            return subExp_12;
        }
        else{
            var subExp_13=_else_0([]);
            return subExp_13;
        }
    }
    var _ret_0=eval_if_0([]);
    var this_v0=_ret_0[+1];
    var subExp_17=[];
    return {res:subExp_17,obj:this_v0};
}

var __s2_ty = function(){
    var this_v0 = {};
    var this_v1 = _.assign({},this_v0,{__state: 0});
    var subExp_CallExp_1_v0 = Queue([]).obj;
    var this_v2 = _.assign({},this_v1,{Q_in: subExp_CallExp_1_v0});
    var subExp_CallExp_2_v0 = Queue([]).obj;
    var this_v3 = _.assign({},this_v2,{Q_out: subExp_CallExp_2_v0});
    return {res:this_v3,obj:this_v3};
}
var __s2_ty___run = function(this_v0){
    var _if_0 = function(){
        var tmp = Queue_takeFront(this_v0.Q_in,[]);
        var subExp_5 = tmp.res;
        var this_v1 = _.assign({},this_v0,{Q_in: tmp.obj});
        var subExp_arg_3=subExp_5[+0];
        var subExp_arg_4=2;
        var this_v2 = _.assign({},this_v1,{Q_out: Queue_pushBack(this_v1.Q_out,[subExp_arg_3,subExp_arg_4]).obj});
        var subExp_6=[1,this_v2,0];
        return subExp_6;
    }
    var _else_0 = function(){
        var tmp = Queue_takeFront(this_v0.Q_in,[]);
        var subExp_9 = tmp.res;
        var this_v1 = _.assign({},this_v0,{Q_in: tmp.obj});
        var subExp_arg_7=subExp_9[+0];
        var subExp_arg_8=1;
        var this_v2 = _.assign({},this_v1,{Q_out: Queue_pushBack(this_v1.Q_out,[subExp_arg_7,subExp_arg_8]).obj});
        var subExp_10=[1,this_v2,0];
        return subExp_10;
    }
    var eval_if_0 = function(){
        var subExp_16=this_v0.Q_in.data;
        var subExp_15=subExp_16[+0];
        var subExp_14=subExp_15[+1];
        var subExp_11=subExp_14==1;
        if(subExp_11){
            var subExp_12=_if_0([]);
            return subExp_12;
        }
        else{
            var subExp_13=_else_0([]);
            return subExp_13;
        }
    }
    var _ret_0=eval_if_0([]);
    var this_v0=_ret_0[+1];
    var subExp_17=[];
    return {res:subExp_17,obj:this_v0};
}
var __s1_ty = function(){
    var this_v0 = {};
    var subExp_CallExp_1_v0 = Queue([]).obj;
    var this_v1 = _.assign({},this_v0,{Q_in: subExp_CallExp_1_v0});
    var subExp_CallExp_2_v0 = Queue([]).obj;
    var this_v2 = _.assign({},this_v1,{Q_out: subExp_CallExp_2_v0});
    var this_v3 = _.assign({},this_v2,{route1: 0});
    var this_v4 = _.assign({},this_v3,{route2: 0});
    return {res:this_v4,obj:this_v4};
}
var __s1_ty___run = function(this_v0){
    var _if_0 = function(){
        var tmp = Queue_takeFront(this_v0.Q_in,[]);
        var subExp_5 = tmp.res;
        var this_v1 = _.assign({},this_v0,{Q_in: tmp.obj});
        var subExp_arg_3=subExp_5[+0];
        var subExp_arg_4=3;
        var this_v2 = _.assign({},this_v1,{Q_out: Queue_pushBack(this_v1.Q_out,[subExp_arg_3,subExp_arg_4]).obj});
        var subExp_6=[1,this_v2,0];
        return subExp_6;
    }
    var _else_0 = function(){
        var _if_1 = function(){
            var _if_2 = function(){
                var tmp = Queue_takeFront(this_v0.Q_in,[]);
                var subExp_9 = tmp.res;
                var this_v1 = _.assign({},this_v0,{Q_in: tmp.obj});
                var subExp_arg_7=subExp_9[+0];
                var subExp_arg_8=3;
                var this_v2 = _.assign({},this_v1,{Q_out: Queue_pushBack(this_v1.Q_out,[subExp_arg_7,subExp_arg_8]).obj});
                var subExp_10=[1,this_v2,0];
                return subExp_10;
            }
            var _else_1 = function(){
                var tmp = Queue_takeFront(this_v0.Q_in,[]);
                var subExp_13 = tmp.res;
                var this_v1 = _.assign({},this_v0,{Q_in: tmp.obj});
                var subExp_arg_11=subExp_13[+0];
                var subExp_arg_12=1;
                var this_v2 = _.assign({},this_v1,{Q_out: Queue_pushBack(this_v1.Q_out,[subExp_arg_11,subExp_arg_12]).obj});
                var subExp_14=[1,this_v2,0];
                return subExp_14;
            }
            var eval_if_0 = function(){
                var subExp_18=this_v0.Q_in.data[+0][+0].dst;
                var subExp_15=subExp_18==1;
                if(subExp_15){
                    var subExp_16=_if_2([]);
                    return subExp_16;
                }
                else{
                    var subExp_17=_else_1([]);
                    return subExp_17;
                }
            }
            var _ret_0=eval_if_0([]);
            var this_v0=_ret_0[+1];
            var subExp_19=[1,this_v0,0];
            return subExp_19;
        }
        var _else_1 = function(){
            var _if_2 = function(){
                var this_v1 = _.assign({},this_v0,{route1: 2});
                var this_v2 = _.assign({},this_v1,{route2: 1+1});
                var _if_3 = function(){
                    var tmp = Queue_takeFront(this_v2.Q_in,[]);
                    var subExp_22 = tmp.res;
                    var this_v3 = _.assign({},this_v2,{Q_in: tmp.obj});
                    var subExp_arg_20=subExp_22[+0];
                    var subExp_arg_21=1;
                    var this_v4 = _.assign({},this_v3,{Q_out: Queue_pushBack(this_v3.Q_out,[subExp_arg_20,subExp_arg_21]).obj});
                    var subExp_23=[1,this_v4,0];
                    return subExp_23;
                }
                var _else_2 = function(){
                    var tmp = Queue_takeFront(this_v2.Q_in,[]);
                    var subExp_26 = tmp.res;
                    var this_v3 = _.assign({},this_v2,{Q_in: tmp.obj});
                    var subExp_arg_24=subExp_26[+0];
                    var subExp_arg_25=2;
                    var this_v4 = _.assign({},this_v3,{Q_out: Queue_pushBack(this_v3.Q_out,[subExp_arg_24,subExp_arg_25]).obj});
                    var subExp_27=[1,this_v4,0];
                    return subExp_27;
                }
                var eval_if_0 = function(){
                    var subExp_33=this_v2.route1;
                    var subExp_34=this_v2.route2;
                    var subExp_31=subExp_33<subExp_34;
                    var subExp_37=this_v2.route1;
                    var subExp_38=this_v2.route2;
                    var subExp_35=subExp_37==subExp_38;
                    var subExp_39=(1/2);
                    var subExp_36=sample(Bernoulli({p:subExp_39}));
                    var subExp_32=subExp_35&&subExp_36;
                    var subExp_28=subExp_31||subExp_32;
                    if(subExp_28){
                        var subExp_29=_if_3([]);
                        return subExp_29;
                    }
                    else{
                        var subExp_30=_else_2([]);
                        return subExp_30;
                    }
                }
                var _ret_0=eval_if_0([]);
                var this_v2=_ret_0[+1];
                var subExp_40=[1,this_v2,0];
                return subExp_40;
            }
            var _else_2 = function(){
                var subExp_41=[1,this_v0,0];
                return subExp_41;
            }
            var eval_if_0 = function(){
                var subExp_47=this_v0.Q_in.data;
                var subExp_46=subExp_47[+0];
                var subExp_45=subExp_46[+1];
                var subExp_42=subExp_45==3;
                if(subExp_42){
                    var subExp_43=_if_2([]);
                    return subExp_43;
                }
                else{
                    var subExp_44=_else_2([]);
                    return subExp_44;
                }
            }
            var _ret_0=eval_if_0([]);
            var this_v0=_ret_0[+1];
            var subExp_48=[1,this_v0,0];
            return subExp_48;
        }
        var eval_if_0 = function(){
            var subExp_54=this_v0.Q_in.data;
            var subExp_53=subExp_54[+0];
            var subExp_52=subExp_53[+1];
            var subExp_49=subExp_52==2;
            if(subExp_49){
                var subExp_50=_if_1([]);
                return subExp_50;
            }
            else{
                var subExp_51=_else_1([]);
                return subExp_51;
            }
        }
        var _ret_0=eval_if_0([]);
        var this_v0=_ret_0[+1];
        var subExp_55=[1,this_v0,0];
        return subExp_55;
    }
    var eval_if_0 = function(){
        var subExp_61=this_v0.Q_in.data;
        var subExp_60=subExp_61[+0];
        var subExp_59=subExp_60[+1];
        var subExp_56=subExp_59==1;
        if(subExp_56){
            var subExp_57=_if_0([]);
            return subExp_57;
        }
        else{
            var subExp_58=_else_0([]);
            return subExp_58;
        }
    }
    var _ret_0=eval_if_0([]);
    var this_v0=_ret_0[+1];
    var subExp_62=[];
    return {res:subExp_62,obj:this_v0};
}
var __s0_ty = function(){
    var this_v0 = {};
    var subExp_CallExp_1_v0 = Queue([]).obj;
    var this_v1 = _.assign({},this_v0,{Q_in: subExp_CallExp_1_v0});
    var subExp_CallExp_2_v0 = Queue([]).obj;
    var this_v2 = _.assign({},this_v1,{Q_out: subExp_CallExp_2_v0});
    var this_v3 = _.assign({},this_v2,{route1: 0});
    var this_v4 = _.assign({},this_v3,{route2: 0});
    return {res:this_v4,obj:this_v4};
}
var __s0_ty___run = function(this_v0){
    var _if_0 = function(){
        var tmp = Queue_takeFront(this_v0.Q_in,[]);
        var subExp_5 = tmp.res;
        var this_v1 = _.assign({},this_v0,{Q_in: tmp.obj});
        var subExp_arg_3=subExp_5[+0];
        var subExp_arg_4=3;
        var this_v2 = _.assign({},this_v1,{Q_out: Queue_pushBack(this_v1.Q_out,[subExp_arg_3,subExp_arg_4]).obj});
        var subExp_6=[1,this_v2,0];
        return subExp_6;
    }
    var _else_0 = function(){
        var _if_1 = function(){
            var _if_2 = function(){
                var tmp = Queue_takeFront(this_v0.Q_in,[]);
                var subExp_9 = tmp.res;
                var this_v1 = _.assign({},this_v0,{Q_in: tmp.obj});
                var subExp_arg_7=subExp_9[+0];
                var subExp_arg_8=3;
                var this_v2 = _.assign({},this_v1,{Q_out: Queue_pushBack(this_v1.Q_out,[subExp_arg_7,subExp_arg_8]).obj});
                var subExp_10=[1,this_v2,0];
                return subExp_10;
            }
            var _else_1 = function(){
                var tmp = Queue_takeFront(this_v0.Q_in,[]);
                var subExp_13 = tmp.res;
                var this_v1 = _.assign({},this_v0,{Q_in: tmp.obj});
                var subExp_arg_11=subExp_13[+0];
                var subExp_arg_12=1;
                var this_v2 = _.assign({},this_v1,{Q_out: Queue_pushBack(this_v1.Q_out,[subExp_arg_11,subExp_arg_12]).obj});
                var subExp_14=[1,this_v2,0];
                return subExp_14;
            }
            var eval_if_0 = function(){
                var subExp_18=this_v0.Q_in.data[+0][+0].dst;
                var subExp_15=subExp_18==0;
                if(subExp_15){
                    var subExp_16=_if_2([]);
                    return subExp_16;
                }
                else{
                    var subExp_17=_else_1([]);
                    return subExp_17;
                }
            }
            var _ret_0=eval_if_0([]);
            var this_v0=_ret_0[+1];
            var subExp_19=[1,this_v0,0];
            return subExp_19;
        }
        var _else_1 = function(){
            var _if_2 = function(){
                var this_v1 = _.assign({},this_v0,{route1: 2});
                var this_v2 = _.assign({},this_v1,{route2: 1+1});
                var _if_3 = function(){
                    var tmp = Queue_takeFront(this_v2.Q_in,[]);
                    var subExp_22 = tmp.res;
                    var this_v3 = _.assign({},this_v2,{Q_in: tmp.obj});
                    var subExp_arg_20=subExp_22[+0];
                    var subExp_arg_21=1;
                    var this_v4 = _.assign({},this_v3,{Q_out: Queue_pushBack(this_v3.Q_out,[subExp_arg_20,subExp_arg_21]).obj});
                    var subExp_23=[1,this_v4,0];
                    return subExp_23;
                }
                var _else_2 = function(){
                    var tmp = Queue_takeFront(this_v2.Q_in,[]);
                    var subExp_26 = tmp.res;
                    var this_v3 = _.assign({},this_v2,{Q_in: tmp.obj});
                    var subExp_arg_24=subExp_26[+0];
                    var subExp_arg_25=2;
                    var this_v4 = _.assign({},this_v3,{Q_out: Queue_pushBack(this_v3.Q_out,[subExp_arg_24,subExp_arg_25]).obj});
                    var subExp_27=[1,this_v4,0];
                    return subExp_27;
                }
                var eval_if_0 = function(){
                    var subExp_33=this_v2.route1;
                    var subExp_34=this_v2.route2;
                    var subExp_31=subExp_33<subExp_34;
                    var subExp_37=this_v2.route1;
                    var subExp_38=this_v2.route2;
                    var subExp_35=subExp_37==subExp_38;
                    var subExp_39=(1/2);
                    var subExp_36=sample(Bernoulli({p:subExp_39}));
                    var subExp_32=subExp_35&&subExp_36;
                    var subExp_28=subExp_31||subExp_32;
                    if(subExp_28){
                        var subExp_29=_if_3([]);
                        return subExp_29;
                    }
                    else{
                        var subExp_30=_else_2([]);
                        return subExp_30;
                    }
                }
                var _ret_0=eval_if_0([]);
                var this_v2=_ret_0[+1];
                var subExp_40=[1,this_v2,0];
                return subExp_40;
            }
            var _else_2 = function(){
                var subExp_41=[1,this_v0,0];
                return subExp_41;
            }
            var eval_if_0 = function(){
                var subExp_47=this_v0.Q_in.data;
                var subExp_46=subExp_47[+0];
                var subExp_45=subExp_46[+1];
                var subExp_42=subExp_45==3;
                if(subExp_42){
                    var subExp_43=_if_2([]);
                    return subExp_43;
                }
                else{
                    var subExp_44=_else_2([]);
                    return subExp_44;
                }
            }
            var _ret_0=eval_if_0([]);
            var this_v0=_ret_0[+1];
            var subExp_48=[1,this_v0,0];
            return subExp_48;
        }
        var eval_if_0 = function(){
            var subExp_54=this_v0.Q_in.data;
            var subExp_53=subExp_54[+0];
            var subExp_52=subExp_53[+1];
            var subExp_49=subExp_52==2;
            if(subExp_49){
                var subExp_50=_if_1([]);
                return subExp_50;
            }
            else{
                var subExp_51=_else_1([]);
                return subExp_51;
            }
        }
        var _ret_0=eval_if_0([]);
        var this_v0=_ret_0[+1];
        var subExp_55=[1,this_v0,0];
        return subExp_55;
    }
    var eval_if_0 = function(){
        var subExp_61=this_v0.Q_in.data;
        var subExp_60=subExp_61[+0];
        var subExp_59=subExp_60[+1];
        var subExp_56=subExp_59==1;
        if(subExp_56){
            var subExp_57=_if_0([]);
            return subExp_57;
        }
        else{
            var subExp_58=_else_0([]);
            return subExp_58;
        }
    }
    var _ret_0=eval_if_0([]);
    var this_v0=_ret_0[+1];
    var subExp_62=[];
    return {res:subExp_62,obj:this_v0};
}
var __h1_ty = function(){
    var this_v0 = {};
    var subExp_CallExp_1_v0 = Queue([]).obj;
    var this_v1 = _.assign({},this_v0,{Q_in: subExp_CallExp_1_v0});
    var subExp_CallExp_2_v0 = Queue([]).obj;
    var this_v2 = _.assign({},this_v1,{Q_out: subExp_CallExp_2_v0});
    var this_v3 = _.assign({},this_v2,{pkt_count: 0});
    return {res:this_v3,obj:this_v3};
}
var __h1_ty___run = function(this_v0){
    var subExp_3=this_v0.pkt_count;
    var this_v1 = _.assign({},this_v0,{pkt_count: subExp_3+1});
    var this_v2 = _.assign({},this_v1,{Q_in: Queue_popFront(this_v1.Q_in,[]).obj});
    var subExp_4=[];
    return {res:subExp_4,obj:this_v2};
}
var Packet = function(){
    var this_v0 = {};
    var this_v1 = _.assign({},this_v0,{dst: 0});
    return {res:this_v1,obj:this_v1};
}
var Queue = function(){
    var this_v0 = {};
    var this_v1 = _.assign({},this_v0,{data: []});
    return {res:this_v1,obj:this_v1};
}
var Queue_pushFront = function(this_v0, x_0){
    var subExp_1=[x_0];
    var subExp_2=this_v0.data;
    var this_v1 = _.assign({},this_v0,{data: [].concat(subExp_1,subExp_2)});
    var subExp_3=[];
    return {res:subExp_3,obj:this_v1};
}
var Queue_pushBack = function(this_v0, x_0){
    var _if_0 = function(){
        var subExpArr_5=[];
        var subExp_4=[2,0,subExpArr_5];
        return subExp_4;
    }
    var _else_0 = function(){
        var subExpArr_7=[];
        var subExp_6=[1,subExpArr_7,0];
        return subExp_6;
    }
    var eval_if_0 = function(){
        var tmp = Queue_size(this_v0,[]);
        var subExp_11 = tmp.res;
        var this_v1 = tmp.obj;
        var subExp_8=subExp_11>=2;
        if(subExp_8){
            var subExp_9=_if_0([]);
            return subExp_9;
        }
        else{
            var subExp_10=_else_0([]);
            return subExp_10;
        }
    }
    var _ret_0=eval_if_0([]);
    var subExp_14=_ret_0[+0];
    var subExp_12=subExp_14==2;
    if(subExp_12){
        var subExp_13=_ret_0[+2];
        return {res:subExp_13,obj:this_v0};
    }
    var subExp_15=this_v0.data;
    var subExp_16=[x_0];
    var this_v1 = _.assign({},this_v0,{data: [].concat(subExp_15,subExp_16)});
    var subExp_17=[];
    return {res:subExp_17,obj:this_v1};
}
var Queue_takeFront = function(this_v0){
    var tmp = Queue_front(this_v0,[]);
    var r_0 = tmp.res;
    var this_v1 = tmp.obj;
    var this_v2 = Queue_popFront(this_v1,[]).obj;
    return {res:r_0,obj:this_v2};
}
var Queue_takeBack = function(this_v0){
    var subExp_18=this_v0.data;
    var tmp = Queue_size(this_v0,[]);
    var subExp_20 = tmp.res;
    var this_v1 = tmp.obj;
    var subExpArr_19=subExp_20-1;
    var r_0=subExp_18[+subExpArr_19];
    var subExp_21=this_v1.data;
    var tmp = Queue_size(this_v1,[]);
    var subExp_23 = tmp.res;
    var this_v2 = tmp.obj;
    var subExp_22=subExp_23-1;
    var this_v3 = _.assign({},this_v2,{data: ([].concat(subExp_21)).slice(0,subExp_22)});
    return {res:r_0,obj:this_v3};
}
var Queue_size = function(this_v0){
    var subExp_24=this_v0.data.length;
    return {res:subExp_24,obj:this_v0};
}
var Queue_front = function(this_v0){
    var subExp_26=this_v0.data;
    var subExp_25=subExp_26[+0];
    return {res:subExp_25,obj:this_v0};
}
var Queue_popFront = function(this_v0){
    var subExp_27=this_v0.data;
    var tmp = Queue_size(this_v0,[]);
    var subExp_28 = tmp.res;
    var this_v1 = tmp.obj;
    var this_v2 = _.assign({},this_v1,{data: ([].concat(subExp_27)).slice(1,subExp_28)});
    var subExp_29=[];
    return {res:subExp_29,obj:this_v2};
}
var __h0_ty = function(){
    var this_v0 = {};
    var subExp_CallExp_1_v0 = Queue([]).obj;
    var this_v1 = _.assign({},this_v0,{Q_in: subExp_CallExp_1_v0});
    var subExp_CallExp_2_v0 = Queue([]).obj;
    var this_v2 = _.assign({},this_v1,{Q_out: subExp_CallExp_2_v0});
    var this_v3 = _.assign({},this_v2,{pkt_count: 0});
    return {res:this_v3,obj:this_v3};
}
var __h0_ty___run = function(this_v0){
    var subExp_arg_3_v0 = Packet([]).obj;
    var subExp_arg_4=0;
    var this_v1 = _.assign({},this_v0,{Q_in: Queue_pushFront(this_v0.Q_in,[subExp_arg_3_v0,subExp_arg_4]).obj});
    var _if_0 = function(){
        var subExp_arg_5_v0 = Packet([]).obj;
        var subExp_arg_6=0;
        var this_v2 = _.assign({},this_v1,{Q_in: Queue_pushFront(this_v1.Q_in,[subExp_arg_5_v0,subExp_arg_6]).obj});
        var subExp_7=this_v2.pkt_count;
        var this_v3 = _.assign({},this_v2,{pkt_count: subExp_7+1});
        var new_data=_.assign({},this_v3.Q_in.data[0][0],{dst:1});
//updating this.Q_in.data[0]
        var _length = this_v3.Q_in.data[+0].length;
        var _index =0;
        var _left = this_v3.Q_in.data[+0].slice(0,(_index));
        var _right = this_v3.Q_in.data[+0].slice(_index+1,_length);
        var nested_arr = [].concat(_left,[new_data],_right);
        var _length = this_v3.Q_in.data.length;
        var _index =0;
        var _left = this_v3.Q_in.data.slice(0,(_index));
        var _right = this_v3.Q_in.data.slice(_index+1,_length);
        var new_array = [].concat(_left,[nested_arr],_right);
                var new_array_data=_.assign({},this_v3.Q_in.data,{data:new_array});
        var this_v4 = _.assign({},this_v3,{Q_in: new_array_data});
        var tmp = Queue_takeFront(this_v4.Q_in,[]);
        var subExp_10 = tmp.res;
        var this_v5 = _.assign({},this_v4,{Q_in: tmp.obj});
        var subExp_arg_8=subExp_10[+0];
        var subExp_arg_9=1;
        var this_v6 = _.assign({},this_v5,{Q_out: Queue_pushBack(this_v5.Q_out,[subExp_arg_8,subExp_arg_9]).obj});
        var subExp_11=[1,this_v6,0];
        return subExp_11;
    }
    var _else_0 = function(){
        var this_v2 = _.assign({},this_v1,{Q_in: Queue_popFront(this_v1.Q_in,[]).obj});
        var this_v3 = _.assign({},this_v2,{Q_in: Queue_popFront(this_v2.Q_in,[]).obj});
        var subExp_12=[1,this_v3,0];
        return subExp_12;
    }
    var eval_if_0 = function(){
        var subExp_16=this_v1.pkt_count;
        var subExp_13=subExp_16<3;
        if(subExp_13){
            var subExp_14=_if_0([]);
            return subExp_14;
        }
        else{
            var subExp_15=_else_0([]);
            return subExp_15;
        }
    }
    var _ret_0=eval_if_0([]);
    var this_v1=_ret_0[+1];
    var subExp_17=[];
    return {res:subExp_17,obj:this_v1};
}
var __D = function(){
    var this_v0 = {};
    var subExp_CallExp_1_v0 = __h0_ty([]).obj;
    var this_v1 = _.assign({},this_v0,{__H0: subExp_CallExp_1_v0});
    var subExp_CallExp_2_v0 = __h1_ty([]).obj;
    var this_v2 = _.assign({},this_v1,{__H1: subExp_CallExp_2_v0});
    var subExp_CallExp_3_v0 = __s0_ty([]).obj;
    var this_v3 = _.assign({},this_v2,{__S0: subExp_CallExp_3_v0});
    var subExp_CallExp_4_v0 = __s1_ty([]).obj;
    var this_v4 = _.assign({},this_v3,{__S1: subExp_CallExp_4_v0});
    var subExp_CallExp_5_v0 = __s2_ty([]).obj;
    var this_v5 = _.assign({},this_v4,{__S2: subExp_CallExp_5_v0});
    var this_v6 = _.assign({},this_v5,{curAction: 0});
    return {res:this_v6,obj:this_v6};
}
var __D_scheduler = function(this_v0){
    var actions_0=[];
    var i_0=0;
    var loop_body_0 = function(_args_0){
        var _tuple_0=_args_0;
        var i_1=_tuple_0[+0];
        var actions_1=_tuple_0[+1];
        var subExp_6=i_1<5;
        if(subExp_6){
            var _if_0 = function(){
                var subExpArr_8=[0,i_1];
                var subExp_7=[subExpArr_8];
                var actions_2=[].concat(actions_1,subExp_7);
                var subExp_9=[1,actions_2,0];
                return subExp_9;
            }
            var _else_0 = function(){
                var subExp_10=[1,actions_1,0];
                return subExp_10;
            }
            var eval_if_0 = function(){
                var tmp = Queue_size((function(){if(i_1==0){ return this_v0.__H0.Q_in} else{ return (function(){if(i_1==1){ return this_v0.__H1.Q_in} else{ return (function(){if(i_1==2){ return this_v0.__S0.Q_in} else{ return (function(){if(i_1==3){ return this_v0.__S1.Q_in} else{ return this_v0.__S2.Q_in}})()}})()}})()}})(),[]);
                var subExp_14/*might have an error:*/ = tmp.res;
                
                var subExp_11=subExp_14>0;
                if(subExp_11){
                    var subExp_12=_if_0([]);
                    return subExp_12;
                }
                else{
                    var subExp_13=_else_0([]);
                    return subExp_13;
                }
            }
            var _ret_0=eval_if_0([]);
            var actions_2=_ret_0[+1];
            var _if_1 = function(){
                var subExpArr_16=[1,i_1];
                var subExp_15=[subExpArr_16];
                var actions_3=[].concat(actions_2,subExp_15);
                var subExp_17=[1,actions_3,0];
                return subExp_17;
            }
            var _else_1 = function(){
                var subExp_18=[1,actions_2,0];
                return subExp_18;
            }
            var eval_if_1 = function(){
                var tmp = Queue_size((function(){if(i_1==0){ return this_v0.__H0.Q_out} else{ return (function(){if(i_1==1){ return this_v0.__H1.Q_out} else{ return (function(){if(i_1==2){ return this_v0.__S0.Q_out} else{ return (function(){if(i_1==3){ return this_v0.__S1.Q_out} else{ return this_v0.__S2.Q_out}})()}})()}})()}})(),[]);
                var subExp_22/*might have an error:*/ = tmp.res;
                
                var subExp_19=subExp_22>0;
                if(subExp_19){
                    var subExp_20=_if_1([]);
                    return subExp_20;
                }
                else{
                    var subExp_21=_else_1([]);
                    return subExp_21;
                }
            }
            var _ret_1=eval_if_1([]);
            var actions_3=_ret_1[+1];
            var i_2=i_1+1;
            var _new_args_0=[i_2,actions_3];
            var subExp_23=[0,_new_args_0,0];
            return subExp_23;
        }
        else{
            var subExp_24=[1,_args_0,0];
            return subExp_24;
        }
    }
    var _loop_0 = function(arg_0){
        var loop_body_1=arg_0[+0];
        var args_0=arg_0[+1];
        var k_0=loop_body_1(args_0);
        var subExp_26=k_0[+0];
        var subExp_25=subExp_26!=0;
        if(subExp_25){
            return k_0;
        }
        var subExp_arg_28=k_0[+1];
        var subExp_27=_loop_0([loop_body_1,subExp_arg_28]);
        return subExp_27;
    }
    var _args_0=[i_0,actions_0];
    var _ret_0=_loop_0([loop_body_0,_args_0]);
    var _tuple_0=_ret_0[+1];
    var i_1=_tuple_0[+0];
    var actions_1=_tuple_0[+1];
    var subExp_arg_31=0;
    var subExp_33=actions_1.length;
    var subExp_arg_32=subExp_33-1;
    var subExpArr_30=sample(RandomInteger({n:((subExp_arg_32)-(subExp_arg_31)+1)}))+(subExp_arg_31);
    var subExp_29=actions_1[+subExpArr_30];
    return {res:subExp_29,obj:this_v0};
}
var __D___step = function(this_v0){
    var _if_0 = function(){
        var tmp = __D_scheduler(this_v0,[]);
        var _tuple_0 = tmp.res;
        var this_v1 = tmp.obj;
        var action_0=_tuple_0[+0];
        var node_0=_tuple_0[+1];
        var _if_1 = function(){
            var _if_2 = function(){
                var tmp = Queue_takeFront(this_v1.__H0.Q_out,[]);
                var _tuple_1 = tmp.res;
                var new___H0=_.assign({},this_v1.__H0,{Q_out:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__H0: new___H0});
                var pkt_0=_tuple_1[+0];
                var port_0=_tuple_1[+1];
                var _if_3 = function(){
                    var subExp_arg_34=3;
                    var new___S0=_.assign({},this_v2.__S0,{Q_in:Queue_pushBack(this_v2.__S0.Q_in,[pkt_0,subExp_arg_34]).obj});
                    var this_v3 = _.assign({},this_v2,{__S0: new___S0});
                    var subExp_35=[1,this_v3,0];
                    return subExp_35;
                }
                var _else_0 = function(){
                    var subExp_36=[1,this_v2,0];
                    return subExp_36;
                }
                var eval_if_0 = function(){
                    var subExp_37=port_0==1;
                    if(subExp_37){
                        var subExp_38=_if_3([]);
                        return subExp_38;
                    }
                    else{
                        var subExp_39=_else_0([]);
                        return subExp_39;
                    }
                }
                var _ret_0=eval_if_0([]);
                var this_v2=_ret_0[+1];
                var subExp_40=[1,this_v2,0];
                return subExp_40;
            }
            var _else_0 = function(){
                var subExp_41=[1,this_v1,0];
                return subExp_41;
            }
            var eval_if_0 = function(){
                var subExp_45=node_0==0;
                var tmp = Queue_size(this_v1.__H0.Q_out,[]);
                var subExp_46 = tmp.res;
                var new___H0=_.assign({},this_v1.__H0,{Q_out:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__H0: new___H0});
                var subExp_42=subExp_45&&subExp_46;
                if(subExp_42){
                    var subExp_43=_if_2([]);
                    return subExp_43;
                }
                else{
                    var subExp_44=_else_0([]);
                    return subExp_44;
                }
            }
            var _ret_0=eval_if_0([]);
            var this_v1=_ret_0[+1];
            var _if_3 = function(){
                var tmp = Queue_takeFront(this_v1.__H1.Q_out,[]);
                var _tuple_1 = tmp.res;
                var new___H1=_.assign({},this_v1.__H1,{Q_out:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__H1: new___H1});
                var pkt_0=_tuple_1[+0];
                var port_0=_tuple_1[+1];
                var _if_4 = function(){
                    var subExp_arg_47=3;
                    var new___S1=_.assign({},this_v2.__S1,{Q_in:Queue_pushBack(this_v2.__S1.Q_in,[pkt_0,subExp_arg_47]).obj});
                    var this_v3 = _.assign({},this_v2,{__S1: new___S1});
                    var subExp_48=[1,this_v3,0];
                    return subExp_48;
                }
                var _else_1 = function(){
                    var subExp_49=[1,this_v2,0];
                    return subExp_49;
                }
                var eval_if_1 = function(){
                    var subExp_50=port_0==1;
                    if(subExp_50){
                        var subExp_51=_if_4([]);
                        return subExp_51;
                    }
                    else{
                        var subExp_52=_else_1([]);
                        return subExp_52;
                    }
                }
                var _ret_1=eval_if_1([]);
                var this_v2=_ret_1[+1];
                var subExp_53=[1,this_v2,0];
                return subExp_53;
            }
            var _else_1 = function(){
                var subExp_54=[1,this_v1,0];
                return subExp_54;
            }
            var eval_if_1 = function(){
                var subExp_58=node_0==1;
                var tmp = Queue_size(this_v1.__H1.Q_out,[]);
                var subExp_59 = tmp.res;
                var new___H1=_.assign({},this_v1.__H1,{Q_out:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__H1: new___H1});
                var subExp_55=subExp_58&&subExp_59;
                if(subExp_55){
                    var subExp_56=_if_3([]);
                    return subExp_56;
                }
                else{
                    var subExp_57=_else_1([]);
                    return subExp_57;
                }
            }
            var _ret_1=eval_if_1([]);
            var this_v1=_ret_1[+1];
            var _if_4 = function(){
                var tmp = Queue_takeFront(this_v1.__S0.Q_out,[]);
                var _tuple_1 = tmp.res;
                var new___S0=_.assign({},this_v1.__S0,{Q_out:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S0: new___S0});
                var pkt_0=_tuple_1[+0];
                var port_0=_tuple_1[+1];
                var _if_5 = function(){
                    var subExp_arg_60=1;
                    var new___S1=_.assign({},this_v2.__S1,{Q_in:Queue_pushBack(this_v2.__S1.Q_in,[pkt_0,subExp_arg_60]).obj});
                    var this_v3 = _.assign({},this_v2,{__S1: new___S1});
                    var subExp_61=[1,this_v3,0];
                    return subExp_61;
                }
                var _else_2 = function(){
                    var subExp_62=[1,this_v2,0];
                    return subExp_62;
                }
                var eval_if_2 = function(){
                    var subExp_63=port_0==1;
                    if(subExp_63){
                        var subExp_64=_if_5([]);
                        return subExp_64;
                    }
                    else{
                        var subExp_65=_else_2([]);
                        return subExp_65;
                    }
                }
                var _ret_2=eval_if_2([]);
                var this_v2=_ret_2[+1];
                var _if_6 = function(){
                    var subExp_arg_66=1;
                    var new___S2=_.assign({},this_v2.__S2,{Q_in:Queue_pushBack(this_v2.__S2.Q_in,[pkt_0,subExp_arg_66]).obj});
                    var this_v3 = _.assign({},this_v2,{__S2: new___S2});
                    var subExp_67=[1,this_v3,0];
                    return subExp_67;
                }
                var _else_3 = function(){
                    var subExp_68=[1,this_v2,0];
                    return subExp_68;
                }
                var eval_if_3 = function(){
                    var subExp_69=port_0==2;
                    if(subExp_69){
                        var subExp_70=_if_6([]);
                        return subExp_70;
                    }
                    else{
                        var subExp_71=_else_3([]);
                        return subExp_71;
                    }
                }
                var _ret_3=eval_if_3([]);
                var this_v2=_ret_3[+1];
                var _if_7 = function(){
                    var subExp_arg_72=1;
                    var new___H0=_.assign({},this_v2.__H0,{Q_in:Queue_pushBack(this_v2.__H0.Q_in,[pkt_0,subExp_arg_72]).obj});
                    var this_v3 = _.assign({},this_v2,{__H0: new___H0});
                    var subExp_73=[1,this_v3,0];
                    return subExp_73;
                }
                var _else_4 = function(){
                    var subExp_74=[1,this_v2,0];
                    return subExp_74;
                }
                var eval_if_4 = function(){
                    var subExp_75=port_0==3;
                    if(subExp_75){
                        var subExp_76=_if_7([]);
                        return subExp_76;
                    }
                    else{
                        var subExp_77=_else_4([]);
                        return subExp_77;
                    }
                }
                var _ret_4=eval_if_4([]);
                var this_v2=_ret_4[+1];
                var subExp_78=[1,this_v2,0];
                return subExp_78;
            }
            var _else_2 = function(){
                var subExp_79=[1,this_v1,0];
                return subExp_79;
            }
            var eval_if_2 = function(){
                var subExp_83=node_0==2;
                var tmp = Queue_size(this_v1.__S0.Q_out,[]);
                var subExp_84 = tmp.res;
                var new___S0=_.assign({},this_v1.__S0,{Q_out:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S0: new___S0});
                var subExp_80=subExp_83&&subExp_84;
                if(subExp_80){
                    var subExp_81=_if_4([]);
                    return subExp_81;
                }
                else{
                    var subExp_82=_else_2([]);
                    return subExp_82;
                }
            }
            var _ret_2=eval_if_2([]);
            var this_v1=_ret_2[+1];
            var _if_5 = function(){
                var tmp = Queue_takeFront(this_v1.__S1.Q_out,[]);
                var _tuple_1 = tmp.res;
                var new___S1=_.assign({},this_v1.__S1,{Q_out:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S1: new___S1});
                var pkt_0=_tuple_1[+0];
                var port_0=_tuple_1[+1];
                var _if_6 = function(){
                    var subExp_arg_85=1;
                    var new___S0=_.assign({},this_v2.__S0,{Q_in:Queue_pushBack(this_v2.__S0.Q_in,[pkt_0,subExp_arg_85]).obj});
                    var this_v3 = _.assign({},this_v2,{__S0: new___S0});
                    var subExp_86=[1,this_v3,0];
                    return subExp_86;
                }
                var _else_3 = function(){
                    var subExp_87=[1,this_v2,0];
                    return subExp_87;
                }
                var eval_if_3 = function(){
                    var subExp_88=port_0==1;
                    if(subExp_88){
                        var subExp_89=_if_6([]);
                        return subExp_89;
                    }
                    else{
                        var subExp_90=_else_3([]);
                        return subExp_90;
                    }
                }
                var _ret_3=eval_if_3([]);
                var this_v2=_ret_3[+1];
                var _if_7 = function(){
                    var subExp_arg_91=2;
                    var new___S2=_.assign({},this_v2.__S2,{Q_in:Queue_pushBack(this_v2.__S2.Q_in,[pkt_0,subExp_arg_91]).obj});
                    var this_v3 = _.assign({},this_v2,{__S2: new___S2});
                    var subExp_92=[1,this_v3,0];
                    return subExp_92;
                }
                var _else_4 = function(){
                    var subExp_93=[1,this_v2,0];
                    return subExp_93;
                }
                var eval_if_4 = function(){
                    var subExp_94=port_0==2;
                    if(subExp_94){
                        var subExp_95=_if_7([]);
                        return subExp_95;
                    }
                    else{
                        var subExp_96=_else_4([]);
                        return subExp_96;
                    }
                }
                var _ret_4=eval_if_4([]);
                var this_v2=_ret_4[+1];
                var _if_8 = function(){
                    var subExp_arg_97=1;
                    var new___H1=_.assign({},this_v2.__H1,{Q_in:Queue_pushBack(this_v2.__H1.Q_in,[pkt_0,subExp_arg_97]).obj});
                    var this_v3 = _.assign({},this_v2,{__H1: new___H1});
                    var subExp_98=[1,this_v3,0];
                    return subExp_98;
                }
                var _else_5 = function(){
                    var subExp_99=[1,this_v2,0];
                    return subExp_99;
                }
                var eval_if_5 = function(){
                    var subExp_100=port_0==3;
                    if(subExp_100){
                        var subExp_101=_if_8([]);
                        return subExp_101;
                    }
                    else{
                        var subExp_102=_else_5([]);
                        return subExp_102;
                    }
                }
                var _ret_5=eval_if_5([]);
                var this_v2=_ret_5[+1];
                var subExp_103=[1,this_v2,0];
                return subExp_103;
            }
            var _else_3 = function(){
                var subExp_104=[1,this_v1,0];
                return subExp_104;
            }
            var eval_if_3 = function(){
                var subExp_108=node_0==3;
                var tmp = Queue_size(this_v1.__S1.Q_out,[]);
                var subExp_109 = tmp.res;
                var new___S1=_.assign({},this_v1.__S1,{Q_out:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S1: new___S1});
                var subExp_105=subExp_108&&subExp_109;
                if(subExp_105){
                    var subExp_106=_if_5([]);
                    return subExp_106;
                }
                else{
                    var subExp_107=_else_3([]);
                    return subExp_107;
                }
            }
            var _ret_3=eval_if_3([]);
            var this_v1=_ret_3[+1];
            var _if_6 = function(){
                var tmp = Queue_takeFront(this_v1.__S2.Q_out,[]);
                var _tuple_1 = tmp.res;
                var new___S2=_.assign({},this_v1.__S2,{Q_out:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S2: new___S2});
                var pkt_0=_tuple_1[+0];
                var port_0=_tuple_1[+1];
                var _if_7 = function(){
                    var subExp_arg_110=2;
                    var new___S0=_.assign({},this_v2.__S0,{Q_in:Queue_pushBack(this_v2.__S0.Q_in,[pkt_0,subExp_arg_110]).obj});
                    var this_v3 = _.assign({},this_v2,{__S0: new___S0});
                    var subExp_111=[1,this_v3,0];
                    return subExp_111;
                }
                var _else_4 = function(){
                    var subExp_112=[1,this_v2,0];
                    return subExp_112;
                }
                var eval_if_4 = function(){
                    var subExp_113=port_0==1;
                    if(subExp_113){
                        var subExp_114=_if_7([]);
                        return subExp_114;
                    }
                    else{
                        var subExp_115=_else_4([]);
                        return subExp_115;
                    }
                }
                var _ret_4=eval_if_4([]);
                var this_v2=_ret_4[+1];
                var _if_8 = function(){
                    var subExp_arg_116=2;
                    var new___S1=_.assign({},this_v2.__S1,{Q_in:Queue_pushBack(this_v2.__S1.Q_in,[pkt_0,subExp_arg_116]).obj});
                    var this_v3 = _.assign({},this_v2,{__S1: new___S1});
                    var subExp_117=[1,this_v3,0];
                    return subExp_117;
                }
                var _else_5 = function(){
                    var subExp_118=[1,this_v2,0];
                    return subExp_118;
                }
                var eval_if_5 = function(){
                    var subExp_119=port_0==2;
                    if(subExp_119){
                        var subExp_120=_if_8([]);
                        return subExp_120;
                    }
                    else{
                        var subExp_121=_else_5([]);
                        return subExp_121;
                    }
                }
                var _ret_5=eval_if_5([]);
                var this_v2=_ret_5[+1];
                var subExp_122=[1,this_v2,0];
                return subExp_122;
            }
            var _else_4 = function(){
                var subExp_123=[1,this_v1,0];
                return subExp_123;
            }
            var eval_if_4 = function(){
                var subExp_127=node_0==4;
                var tmp = Queue_size(this_v1.__S2.Q_out,[]);
                var subExp_128 = tmp.res;
                var new___S2=_.assign({},this_v1.__S2,{Q_out:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S2: new___S2});
                var subExp_124=subExp_127&&subExp_128;
                if(subExp_124){
                    var subExp_125=_if_6([]);
                    return subExp_125;
                }
                else{
                    var subExp_126=_else_4([]);
                    return subExp_126;
                }
            }
            var _ret_4=eval_if_4([]);
            var this_v1=_ret_4[+1];
            var subExp_129=[1,this_v1,0];
            return subExp_129;
        }
        var _else_0 = function(){
            var _if_2 = function(){
                var this_v2 = _.assign({},this_v1,{__H0: __h0_ty___run(this_v1.__H0,[]).obj});
                var subExp_130=[1,this_v2,0];
                return subExp_130;
            }
            var _else_1 = function(){
                var subExp_131=[1,this_v1,0];
                return subExp_131;
            }
            var eval_if_0 = function(){
                var subExp_135=node_0==0;
                var tmp = Queue_size(this_v1.__H0.Q_in,[]);
                var subExp_136 = tmp.res;
                var new___H0=_.assign({},this_v1.__H0,{Q_in:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__H0: new___H0});
                var subExp_132=subExp_135&&subExp_136;
                if(subExp_132){
                    var subExp_133=_if_2([]);
                    return subExp_133;
                }
                else{
                    var subExp_134=_else_1([]);
                    return subExp_134;
                }
            }
            var _ret_0=eval_if_0([]);
            var this_v1=_ret_0[+1];
            var _if_3 = function(){
                var this_v2 = _.assign({},this_v1,{__H1: __h1_ty___run(this_v1.__H1,[]).obj});
                var subExp_137=[1,this_v2,0];
                return subExp_137;
            }
            var _else_2 = function(){
                var subExp_138=[1,this_v1,0];
                return subExp_138;
            }
            var eval_if_1 = function(){
                var subExp_142=node_0==1;
                var tmp = Queue_size(this_v1.__H1.Q_in,[]);
                var subExp_143 = tmp.res;
                var new___H1=_.assign({},this_v1.__H1,{Q_in:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__H1: new___H1});
                var subExp_139=subExp_142&&subExp_143;
                if(subExp_139){
                    var subExp_140=_if_3([]);
                    return subExp_140;
                }
                else{
                    var subExp_141=_else_2([]);
                    return subExp_141;
                }
            }
            var _ret_1=eval_if_1([]);
            var this_v1=_ret_1[+1];
            var _if_4 = function(){
                var this_v2 = _.assign({},this_v1,{__S0: __s0_ty___run(this_v1.__S0,[]).obj});
                var subExp_144=[1,this_v2,0];
                return subExp_144;
            }
            var _else_3 = function(){
                var subExp_145=[1,this_v1,0];
                return subExp_145;
            }
            var eval_if_2 = function(){
                var subExp_149=node_0==2;
                var tmp = Queue_size(this_v1.__S0.Q_in,[]);
                var subExp_150 = tmp.res;
                var new___S0=_.assign({},this_v1.__S0,{Q_in:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S0: new___S0});
                var subExp_146=subExp_149&&subExp_150;
                if(subExp_146){
                    var subExp_147=_if_4([]);
                    return subExp_147;
                }
                else{
                    var subExp_148=_else_3([]);
                    return subExp_148;
                }
            }
            var _ret_2=eval_if_2([]);
            var this_v1=_ret_2[+1];
            var _if_5 = function(){
                var this_v2 = _.assign({},this_v1,{__S1: __s1_ty___run(this_v1.__S1,[]).obj});
                var subExp_151=[1,this_v2,0];
                return subExp_151;
            }
            var _else_4 = function(){
                var subExp_152=[1,this_v1,0];
                return subExp_152;
            }
            var eval_if_3 = function(){
                var subExp_156=node_0==3;
                var tmp = Queue_size(this_v1.__S1.Q_in,[]);
                var subExp_157 = tmp.res;
                var new___S1=_.assign({},this_v1.__S1,{Q_in:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S1: new___S1});
                var subExp_153=subExp_156&&subExp_157;
                if(subExp_153){
                    var subExp_154=_if_5([]);
                    return subExp_154;
                }
                else{
                    var subExp_155=_else_4([]);
                    return subExp_155;
                }
            }
            var _ret_3=eval_if_3([]);
            var this_v1=_ret_3[+1];
            var _if_6 = function(){
                var this_v2 = _.assign({},this_v1,{__S2: __s2_ty___run(this_v1.__S2,[]).obj});
                var subExp_158=[1,this_v2,0];
                return subExp_158;
            }
            var _else_5 = function(){
                var subExp_159=[1,this_v1,0];
                return subExp_159;
            }
            var eval_if_4 = function(){
                var subExp_163=node_0==4;
                var tmp = Queue_size(this_v1.__S2.Q_in,[]);
                var subExp_164 = tmp.res;
                var new___S2=_.assign({},this_v1.__S2,{Q_in:tmp.obj});
                var this_v2 = _.assign({},this_v1,{__S2: new___S2});
                var subExp_160=subExp_163&&subExp_164;
                if(subExp_160){
                    var subExp_161=_if_6([]);
                    return subExp_161;
                }
                else{
                    var subExp_162=_else_5([]);
                    return subExp_162;
                }
            }
            var _ret_4=eval_if_4([]);
            var this_v1=_ret_4[+1];
            var subExp_165=[1,this_v1,0];
            return subExp_165;
        }
        var eval_if_0 = function(){
            if(action_0){
                var subExp_166=_if_1([]);
                return subExp_166;
            }
            else{
                var subExp_167=_else_0([]);
                return subExp_167;
            }
        }
        var _ret_0=eval_if_0([]);
        var this_v1=_ret_0[+1];
        var subExp_168=[1,this_v1,0];
        return subExp_168;
    }
    var _else_0 = function(){
        var subExp_169=[1,this_v0,0];
        return subExp_169;
    }
    var eval_if_0 = function(){
        var tmp = Queue_size(this_v0.__H0.Q_in,[]);
        var subExp_189 = tmp.res;
        var new___H0=_.assign({},this_v0.__H0,{Q_in:tmp.obj});
        var this_v1 = _.assign({},this_v0,{__H0: new___H0});
        var tmp = Queue_size(this_v1.__H0.Q_out,[]);
        var subExp_190 = tmp.res;
        var new___H0=_.assign({},this_v1.__H0,{Q_out:tmp.obj});
        var this_v2 = _.assign({},this_v1,{__H0: new___H0});
        var subExp_187=subExp_189||subExp_190;
        var tmp = Queue_size(this_v2.__H1.Q_in,[]);
        var subExp_188 = tmp.res;
        var new___H1=_.assign({},this_v2.__H1,{Q_in:tmp.obj});
        var this_v3 = _.assign({},this_v2,{__H1: new___H1});
        var subExp_185=subExp_187||subExp_188;
        var tmp = Queue_size(this_v3.__H1.Q_out,[]);
        var subExp_186 = tmp.res;
        var new___H1=_.assign({},this_v3.__H1,{Q_out:tmp.obj});
        var this_v4 = _.assign({},this_v3,{__H1: new___H1});
        var subExp_183=subExp_185||subExp_186;
        var tmp = Queue_size(this_v4.__S0.Q_in,[]);
        var subExp_184 = tmp.res;
        var new___S0=_.assign({},this_v4.__S0,{Q_in:tmp.obj});
        var this_v5 = _.assign({},this_v4,{__S0: new___S0});
        var subExp_181=subExp_183||subExp_184;
        var tmp = Queue_size(this_v5.__S0.Q_out,[]);
        var subExp_182 = tmp.res;
        var new___S0=_.assign({},this_v5.__S0,{Q_out:tmp.obj});
        var this_v6 = _.assign({},this_v5,{__S0: new___S0});
        var subExp_179=subExp_181||subExp_182;
        var tmp = Queue_size(this_v6.__S1.Q_in,[]);
        var subExp_180 = tmp.res;
        var new___S1=_.assign({},this_v6.__S1,{Q_in:tmp.obj});
        var this_v7 = _.assign({},this_v6,{__S1: new___S1});
        var subExp_177=subExp_179||subExp_180;
        var tmp = Queue_size(this_v7.__S1.Q_out,[]);
        var subExp_178 = tmp.res;
        var new___S1=_.assign({},this_v7.__S1,{Q_out:tmp.obj});
        var this_v8 = _.assign({},this_v7,{__S1: new___S1});
        var subExp_175=subExp_177||subExp_178;
        var tmp = Queue_size(this_v8.__S2.Q_in,[]);
        var subExp_176 = tmp.res;
        var new___S2=_.assign({},this_v8.__S2,{Q_in:tmp.obj});
        var this_v9 = _.assign({},this_v8,{__S2: new___S2});
        var subExp_173=subExp_175||subExp_176;
        var tmp = Queue_size(this_v9.__S2.Q_out,[]);
        var subExp_174 = tmp.res;
        var new___S2=_.assign({},this_v9.__S2,{Q_out:tmp.obj});
        var this_v10 = _.assign({},this_v9,{__S2: new___S2});
        var subExp_170=subExp_173||subExp_174;
        if(subExp_170){
            var subExp_171=_if_0([]);
            return subExp_171;
        }
        else{
            var subExp_172=_else_0([]);
            return subExp_172;
        }
    }
    var _ret_0=eval_if_0([]);
    var this_v0=_ret_0[+1];
    var subExp_191=[];
    return {res:subExp_191,obj:this_v0};
}

translating meaning of __H0
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
__H0
 
Expression of type Identifier:
__h0_ty
 
Expression of type VarDecl:
__H0: __h0_ty
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
__H0: __h0_ty
TODO 'VarDecl' not translated yet. You might want to insert:
overundefined
ride Expression visit(VarDecl e){
    code~=;
    visit(e.dtype);
    code~=;
    return e;
}


translating meaning of __H1
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
__H1
 
Expression of type Identifier:
__h1_ty
 
Expression of type VarDecl:
__H1: __h1_ty
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
__H1: __h1_ty
TODO 'VarDecl' not translated yet. You might want to insert:
override Expression visit(VarDecl e){
    code~=;
    visit(e.dtype);
    code~=;
    return e;
}


translating meaning of __S0
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
__S0
 
Expression of type Identifier:
__s0_ty
 
Expression of type VarDecl:
__S0: __s0_ty
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
__S0: __s0_ty
TODO 'VarDecl' not translated yet. You might want to insert:
override Expression visit(VarDecl e){
    code~=;
    visit(e.dtype);
    code~=;
    return e;
}


translating meaning of __S1
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
__S1
 
Expression of type Identifier:
__s1_ty
 
Expression of type VarDecl:
__S1: __s1_ty
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
__S1: __s1_ty
TODO 'VarDecl' not translated yet. You might want to insert:
override Expression visit(VarDecl e){
    code~=;
    visit(e.dtype);
    code~=;
    return e;
}


translating meaning of __S2
normalizing SyntacticSugar...
normalizing SyntacticSugar DONE
normalizing characters
removing Comma operator
doing ifElseFunctional
done with ifElseFunctional
Expression of type Identifier:
__S2
 
Expression of type Identifier:
__s2_ty
 
Expression of type VarDecl:
__S2: __s2_ty
 
done with forToWhile
whileToRec normalization...
done with whileToRec
done with tuplesNormalizer
done with unreachableNormalizer
done with RemoveApostrophes
VarsNormalizer...
VarsNormalizer DONE
def outside of main:(normalized)
__S2: __s2_ty
TODO 'VarDecl' not translated yet. You might want to insert:
override Expression visit(VarDecl e){
    code~=;
    visit(e.dtype);
    code~=;
    return e;
}


running webppl
E[r] = (4.5700000000000000*10^-01)

real	0m21.884s
user	0m21.312s
sys	0m1.416s
