
num_steps 15;

topology{
	nodes { S0, S1, S2, S3 }
	links{
		(S0,pt1) <-> (S1,pt3),
		(S0,pt2) <-> (S2,pt2),
		(S0,pt3) <-> (S3,pt1),
		(S1,pt1) <-> (S2,pt3),
		(S1,pt2) <-> (S3,pt2),
		(S2,pt1) <-> (S3,pt3)
	}
}

packet_fields{ }

programs{ S0 -> first, S1 -> node, S2 -> node, S3 -> node }

//query probability(infected@S0 + infected@S1 + infected@S2 + infected@S3 == 1);
//query probability(infected@S0 + infected@S1 + infected@S2 + infected@S3 == 2);
//query probability(infected@S0 + infected@S1 + infected@S2 + infected@S3 == 3);
//query probability(infected@S0 + infected@S1 + infected@S2 + infected@S3 == 4);

query expectation(infected@S0 + infected@S1 + infected@S2 + infected@S3);


def first(pkt,port) state infected(0){
	if infected == 0 {
		infected = 1;
		new;
		fwd(uniformInt(1,3));
	}else{ drop; }
}


def node(pkt,port) state infected(0){
	if infected == 0{
		infected = 1;
		dup;
		fwd(uniformInt(1,3));
		fwd(uniformInt(1,3));
	}else{ drop; }
}

def scheduler() state phase(0), cur_node(0){ // Phase 0: Execute RunSw, Phase 1: Exectue FwdQ
	for p in [0..2){
		if phase == 0{
			for i in [0..k){
				if (Q_in@cur_node).size() > 0{
					return (RunSw,cur_node);
				}
				cur_node = (cur_node + 1) % k;
			}
			phase = 1;
			cur_node = 0;
		}
		if phase == 1{
			for i in [0..k){
				if (Q_out@cur_node).size() > 0{
					return (FwdQ,cur_node);
				}
				cur_node = (cur_node + 1) % k;
			}
			phase = 0;
			cur_node = 0;
		}
	}
	assert(0);
}
