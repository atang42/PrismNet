-*- mode: compilation; default-directory: "~/eth/phd/projects/networks/netppl-implementation/examples/" -*-
Compilation started at Mon Jan 23 16:20:09

time psi --noboundscheck congestion-synthesis-contracted.psi --bruteforce --trace --mathematica --expectation
statement: __d := __D'()
statement: this.__H0 = __h0_ty'() , this.__H1 = __h1_ty'() , this.__S0 = __s0_ty'() , this.__S1 = __s1_ty'() , this.__S2 = __s2_ty'()
statement: this.__H0 = __h0_ty'() , this.__H1 = __h1_ty'() , this.__S0 = __s0_ty'() , this.__S1 = __s1_ty'()
statement: this.__H0 = __h0_ty'() , this.__H1 = __h1_ty'() , this.__S0 = __s0_ty'()
statement: this.__H0 = __h0_ty'() , this.__H1 = __h1_ty'()
statement: this.__H0 = __h0_ty'()
statement: this.Q_in = Queue'()
statement: this.data = ([]: (Packet × ℝ)[])
statement: return this
statement: this.Q_out = Queue'()
statement: this.data = ([]: (Packet × ℝ)[])
statement: return this
statement: this.pkt_count = 0
statement: return this
statement: this.__H1 = __h1_ty'()
statement: this.Q_in = Queue'()
statement: this.data = ([]: (Packet × ℝ)[])
statement: return this
statement: this.Q_out = Queue'()
statement: this.data = ([]: (Packet × ℝ)[])
statement: return this
statement: this.pkt_count = 0
statement: return this
statement: this.__S0 = __s0_ty'()
statement: this.Q_in = Queue'()
statement: this.data = ([]: (Packet × ℝ)[])
statement: return this
statement: this.Q_out = Queue'()
statement: this.data = ([]: (Packet × ℝ)[])
statement: return this
statement: this.route1 = 0
statement: this.route2 = 0
statement: return this
statement: this.__S1 = __s1_ty'()
statement: this.Q_in = Queue'()
statement: this.data = ([]: (Packet × ℝ)[])
statement: return this
statement: this.Q_out = Queue'()
statement: this.data = ([]: (Packet × ℝ)[])
statement: return this
statement: this.route1 = 0
statement: this.route2 = 0
statement: return this
statement: this.__S2 = __s2_ty'()
statement: this.__state = 0
statement: this.Q_in = Queue'()
statement: this.data = ([]: (Packet × ℝ)[])
statement: return this
statement: this.Q_out = Queue'()
statement: this.data = ([]: (Packet × ℝ)[])
statement: return this
statement: return this
statement: this.curAction = 0
statement: return this
statement: __d.__H0.__run()
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.Q_in.data[0][0].dst = 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    this.pkt_count = this.pkt_count + 1;
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: this.Q_in.data[0][0].dst = 1
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: this.pkt_count = this.pkt_count + 1
statement: return ()
statement: repeat 30 {
    __d.__step();
}
statement: __d.__step()
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
    }
}
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: (action,node) := this.scheduler()
statement: actions := ([]: (R × R)[])
statement: for i in [0..5){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else {
        this.__S2.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else {
        this.__S2.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: return actions[uniformInt(0,actions.length - 1)]
statement: if action {
    if node == 0 && this.__H0.Q_out.size() {
        (pkt,port) := this.__H0.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this.__H1.Q_out.size() {
        (pkt,port) := this.__H1.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,3));
        }
    }
    if node == 2 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this.__H0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__H1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 4 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
    }
} else {
    if node == 0 && this.__H0.Q_in.size() {
        this.__H0.__run();
    }
    if node == 1 && this.__H1.Q_in.size() {
        this.__H1.__run();
    }
    if node == 2 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 3 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 4 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
}
statement: if node == 0 && this.__H0.Q_out.size() {
    (pkt,port) := this.__H0.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__H0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,3));
}
statement: this.__S0.Q_in.pushBack((pkt,3))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 1 && this.__H1.Q_out.size() {
    (pkt,port) := this.__H1.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: if node == 2 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this.__H0.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: if node == 3 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__H1.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: if node == 4 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
}
statement: return this.data.length
statement: if node == 0 && this.__H0.Q_in.size() {
    this.__H0.__run();
}
statement: return this.data.length
statement: this.__H0.__run()
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.Q_in.data[0][0].dst = 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    this.pkt_count = this.pkt_count + 1;
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: this.Q_in.data[0][0].dst = 1
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: this.pkt_count = this.pkt_count + 1
statement: return ()
statement: if node == 1 && this.__H1.Q_in.size() {
    this.__H1.__run();
}
statement: return this.data.length
statement: if node == 2 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
statement: return this.data.length
statement: if node == 3 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
statement: return this.data.length
statement: if node == 4 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
statement: return this.data.length
statement: return ()
statement: __d.__step()
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
    }
}
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: (action,node) := this.scheduler()
statement: actions := ([]: (R × R)[])
statement: for i in [0..5){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else {
        this.__S2.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else {
        this.__S2.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: return actions[uniformInt(0,actions.length - 1)]
statement: if action {
    if node == 0 && this.__H0.Q_out.size() {
        (pkt,port) := this.__H0.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this.__H1.Q_out.size() {
        (pkt,port) := this.__H1.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,3));
        }
    }
    if node == 2 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this.__H0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__H1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 4 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
    }
} else {
    if node == 0 && this.__H0.Q_in.size() {
        this.__H0.__run();
    }
    if node == 1 && this.__H1.Q_in.size() {
        this.__H1.__run();
    }
    if node == 2 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 3 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 4 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
}
statement: if node == 0 && this.__H0.Q_out.size() {
    (pkt,port) := this.__H0.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__H0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,3));
}
statement: this.__S0.Q_in.pushBack((pkt,3))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 1 && this.__H1.Q_out.size() {
    (pkt,port) := this.__H1.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: if node == 2 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this.__H0.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: if node == 3 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__H1.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: if node == 4 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
}
statement: return this.data.length
statement: if node == 0 && this.__H0.Q_in.size() {
    this.__H0.__run();
}
statement: return this.data.length
statement: this.__H0.__run()
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.Q_in.data[0][0].dst = 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    this.pkt_count = this.pkt_count + 1;
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: this.Q_in.data[0][0].dst = 1
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: this.pkt_count = this.pkt_count + 1
statement: return ()
statement: if node == 1 && this.__H1.Q_in.size() {
    this.__H1.__run();
}
statement: return this.data.length
statement: if node == 2 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
statement: return this.data.length
statement: this.__S0.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.route1 = ?
statement: this.route2 = ? + ?
statement: if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 3 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
statement: return this.data.length
statement: if node == 4 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
statement: return this.data.length
statement: return ()
statement: __d.__step()
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
    }
}
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: (action,node) := this.scheduler()
statement: actions := ([]: (R × R)[])
statement: for i in [0..5){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else {
        this.__S2.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else {
        this.__S2.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: return actions[uniformInt(0,actions.length - 1)]
statement: if action {
    if node == 0 && this.__H0.Q_out.size() {
        (pkt,port) := this.__H0.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this.__H1.Q_out.size() {
        (pkt,port) := this.__H1.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,3));
        }
    }
    if node == 2 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this.__H0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__H1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 4 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
    }
} else {
    if node == 0 && this.__H0.Q_in.size() {
        this.__H0.__run();
    }
    if node == 1 && this.__H1.Q_in.size() {
        this.__H1.__run();
    }
    if node == 2 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 3 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 4 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
}
statement: if node == 0 && this.__H0.Q_out.size() {
    (pkt,port) := this.__H0.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__H0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,3));
}
statement: this.__S0.Q_in.pushBack((pkt,3))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 1 && this.__H1.Q_out.size() {
    (pkt,port) := this.__H1.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: if node == 2 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this.__H0.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S1.Q_in.pushBack((pkt,1));
}
statement: this.__S1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,1));
}
statement: this.__S2.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 3 {
    this.__H0.Q_in.pushBack((pkt,1));
}
statement: if node == 3 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__H1.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: if node == 4 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
}
statement: return this.data.length
statement: if node == 0 && this.__H0.Q_in.size() {
    this.__H0.__run();
}
statement: return this.data.length
statement: this.__H0.__run()
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.Q_in.data[0][0].dst = 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    this.pkt_count = this.pkt_count + 1;
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: this.Q_in.data[0][0].dst = 1
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: this.pkt_count = this.pkt_count + 1
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 1 && this.__H1.Q_in.size() {
    this.__H1.__run();
}
statement: return this.data.length
statement: if node == 2 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
statement: return this.data.length
statement: this.__S0.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.route1 = ?
statement: this.route2 = ? + ?
statement: if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 3 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
statement: return this.data.length
statement: if node == 4 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
statement: return this.data.length
statement: return ()
statement: __d.__step()
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
    }
}
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: (action,node) := this.scheduler()
statement: actions := ([]: (R × R)[])
statement: for i in [0..5){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else {
        this.__S2.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else {
        this.__S2.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: return actions[uniformInt(0,actions.length - 1)]
statement: if action {
    if node == 0 && this.__H0.Q_out.size() {
        (pkt,port) := this.__H0.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this.__H1.Q_out.size() {
        (pkt,port) := this.__H1.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,3));
        }
    }
    if node == 2 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this.__H0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__H1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 4 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
    }
} else {
    if node == 0 && this.__H0.Q_in.size() {
        this.__H0.__run();
    }
    if node == 1 && this.__H1.Q_in.size() {
        this.__H1.__run();
    }
    if node == 2 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 3 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 4 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
}
statement: if node == 0 && this.__H0.Q_out.size() {
    (pkt,port) := this.__H0.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__H0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,3));
}
statement: this.__S0.Q_in.pushBack((pkt,3))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 1 && this.__H1.Q_out.size() {
    (pkt,port) := this.__H1.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: if node == 2 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this.__H0.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S1.Q_in.pushBack((pkt,1));
}
statement: this.__S1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,1));
}
statement: this.__S2.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 3 {
    this.__H0.Q_in.pushBack((pkt,1));
}
statement: if node == 3 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__H1.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: if node == 4 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
}
statement: return this.data.length
statement: if node == 0 && this.__H0.Q_in.size() {
    this.__H0.__run();
}
statement: return this.data.length
statement: this.__H0.__run()
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.Q_in.data[0][0].dst = 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    this.pkt_count = this.pkt_count + 1;
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: this.Q_in.data[0][0].dst = 1
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: this.pkt_count = this.pkt_count + 1
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 1 && this.__H1.Q_in.size() {
    this.__H1.__run();
}
statement: return this.data.length
statement: if node == 2 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
statement: return this.data.length
statement: this.__S0.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.route1 = ?
statement: this.route2 = ? + ?
statement: if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 3 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
statement: return this.data.length
statement: this.__S1.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 4 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
statement: return this.data.length
statement: this.__S2.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: return ()
statement: __d.__step()
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
    }
}
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: (action,node) := this.scheduler()
statement: actions := ([]: (R × R)[])
statement: for i in [0..5){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else {
        this.__S2.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else {
        this.__S2.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: return actions[uniformInt(0,actions.length - 1)]
statement: if action {
    if node == 0 && this.__H0.Q_out.size() {
        (pkt,port) := this.__H0.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this.__H1.Q_out.size() {
        (pkt,port) := this.__H1.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,3));
        }
    }
    if node == 2 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this.__H0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__H1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 4 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
    }
} else {
    if node == 0 && this.__H0.Q_in.size() {
        this.__H0.__run();
    }
    if node == 1 && this.__H1.Q_in.size() {
        this.__H1.__run();
    }
    if node == 2 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 3 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 4 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
}
statement: if node == 0 && this.__H0.Q_out.size() {
    (pkt,port) := this.__H0.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__H0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,3));
}
statement: this.__S0.Q_in.pushBack((pkt,3))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 1 && this.__H1.Q_out.size() {
    (pkt,port) := this.__H1.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: if node == 2 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this.__H0.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S1.Q_in.pushBack((pkt,1));
}
statement: this.__S1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,1));
}
statement: this.__S2.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 3 {
    this.__H0.Q_in.pushBack((pkt,1));
}
statement: if node == 3 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__H1.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S1.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 3 {
    this.__H1.Q_in.pushBack((pkt,1));
}
statement: this.__H1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 4 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S2.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,2));
}
statement: this.__S1.Q_in.pushBack((pkt,2))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 0 && this.__H0.Q_in.size() {
    this.__H0.__run();
}
statement: return this.data.length
statement: this.__H0.__run()
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.Q_in.data[0][0].dst = 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    this.pkt_count = this.pkt_count + 1;
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: this.Q_in.data[0][0].dst = 1
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: this.pkt_count = this.pkt_count + 1
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 1 && this.__H1.Q_in.size() {
    this.__H1.__run();
}
statement: return this.data.length
statement: if node == 2 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
statement: return this.data.length
statement: this.__S0.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.route1 = ?
statement: this.route2 = ? + ?
statement: if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 3 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
statement: return this.data.length
statement: this.__S1.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 4 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
statement: return this.data.length
statement: this.__S2.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: return ()
statement: __d.__step()
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
    }
}
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: (action,node) := this.scheduler()
statement: actions := ([]: (R × R)[])
statement: for i in [0..5){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else {
        this.__S2.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else {
        this.__S2.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: return actions[uniformInt(0,actions.length - 1)]
statement: if action {
    if node == 0 && this.__H0.Q_out.size() {
        (pkt,port) := this.__H0.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this.__H1.Q_out.size() {
        (pkt,port) := this.__H1.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,3));
        }
    }
    if node == 2 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this.__H0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__H1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 4 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
    }
} else {
    if node == 0 && this.__H0.Q_in.size() {
        this.__H0.__run();
    }
    if node == 1 && this.__H1.Q_in.size() {
        this.__H1.__run();
    }
    if node == 2 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 3 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 4 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
}
statement: if node == 0 && this.__H0.Q_out.size() {
    (pkt,port) := this.__H0.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__H0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,3));
}
statement: this.__S0.Q_in.pushBack((pkt,3))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 1 && this.__H1.Q_out.size() {
    (pkt,port) := this.__H1.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: if node == 2 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this.__H0.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S1.Q_in.pushBack((pkt,1));
}
statement: this.__S1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,1));
}
statement: this.__S2.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 3 {
    this.__H0.Q_in.pushBack((pkt,1));
}
statement: if node == 3 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__H1.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S1.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 3 {
    this.__H1.Q_in.pushBack((pkt,1));
}
statement: this.__H1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 4 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S2.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,2));
}
statement: this.__S1.Q_in.pushBack((pkt,2))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 0 && this.__H0.Q_in.size() {
    this.__H0.__run();
}
statement: return this.data.length
statement: this.__H0.__run()
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.Q_in.data[0][0].dst = 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    this.pkt_count = this.pkt_count + 1;
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: this.Q_in.data[0][0].dst = 1
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: this.pkt_count = this.pkt_count + 1
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 1 && this.__H1.Q_in.size() {
    this.__H1.__run();
}
statement: return this.data.length
statement: this.__H1.__run()
statement: this.pkt_count = this.pkt_count + 1
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 2 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
statement: return this.data.length
statement: this.__S0.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.route1 = ?
statement: this.route2 = ? + ?
statement: if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 3 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
statement: return this.data.length
statement: this.__S1.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][0].dst == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 4 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
statement: return this.data.length
statement: this.__S2.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: return ()
statement: __d.__step()
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
    }
}
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: (action,node) := this.scheduler()
statement: actions := ([]: (R × R)[])
statement: for i in [0..5){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else {
        this.__S2.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else {
        this.__S2.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: return actions[uniformInt(0,actions.length - 1)]
statement: if action {
    if node == 0 && this.__H0.Q_out.size() {
        (pkt,port) := this.__H0.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this.__H1.Q_out.size() {
        (pkt,port) := this.__H1.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,3));
        }
    }
    if node == 2 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this.__H0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__H1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 4 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
    }
} else {
    if node == 0 && this.__H0.Q_in.size() {
        this.__H0.__run();
    }
    if node == 1 && this.__H1.Q_in.size() {
        this.__H1.__run();
    }
    if node == 2 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 3 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 4 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
}
statement: if node == 0 && this.__H0.Q_out.size() {
    (pkt,port) := this.__H0.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__H0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,3));
}
statement: this.__S0.Q_in.pushBack((pkt,3))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 1 && this.__H1.Q_out.size() {
    (pkt,port) := this.__H1.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: if node == 2 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this.__H0.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S1.Q_in.pushBack((pkt,1));
}
statement: this.__S1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,1));
}
statement: this.__S2.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 3 {
    this.__H0.Q_in.pushBack((pkt,1));
}
statement: if node == 3 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__H1.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S1.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 3 {
    this.__H1.Q_in.pushBack((pkt,1));
}
statement: this.__H1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 4 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S2.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,2));
}
statement: this.__S1.Q_in.pushBack((pkt,2))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 0 && this.__H0.Q_in.size() {
    this.__H0.__run();
}
statement: return this.data.length
statement: this.__H0.__run()
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.Q_in.data[0][0].dst = 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    this.pkt_count = this.pkt_count + 1;
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: this.Q_in.data[0][0].dst = 1
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: this.pkt_count = this.pkt_count + 1
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 1 && this.__H1.Q_in.size() {
    this.__H1.__run();
}
statement: return this.data.length
statement: this.__H1.__run()
statement: this.pkt_count = this.pkt_count + 1
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 2 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
statement: return this.data.length
statement: this.__S0.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.route1 = ?
statement: this.route2 = ? + ?
statement: if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 3 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
statement: return this.data.length
statement: this.__S1.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][0].dst == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 4 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
statement: return this.data.length
statement: this.__S2.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: return ()
statement: __d.__step()
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
    }
}
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: (action,node) := this.scheduler()
statement: actions := ([]: (R × R)[])
statement: for i in [0..5){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else {
        this.__S2.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else {
        this.__S2.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: return actions[uniformInt(0,actions.length - 1)]
statement: if action {
    if node == 0 && this.__H0.Q_out.size() {
        (pkt,port) := this.__H0.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this.__H1.Q_out.size() {
        (pkt,port) := this.__H1.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,3));
        }
    }
    if node == 2 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this.__H0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__H1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 4 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
    }
} else {
    if node == 0 && this.__H0.Q_in.size() {
        this.__H0.__run();
    }
    if node == 1 && this.__H1.Q_in.size() {
        this.__H1.__run();
    }
    if node == 2 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 3 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 4 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
}
statement: if node == 0 && this.__H0.Q_out.size() {
    (pkt,port) := this.__H0.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__H0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,3));
}
statement: this.__S0.Q_in.pushBack((pkt,3))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 1 && this.__H1.Q_out.size() {
    (pkt,port) := this.__H1.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: if node == 2 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this.__H0.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S1.Q_in.pushBack((pkt,1));
}
statement: this.__S1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,1));
}
statement: this.__S2.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 3 {
    this.__H0.Q_in.pushBack((pkt,1));
}
statement: if node == 3 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__H1.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S1.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 3 {
    this.__H1.Q_in.pushBack((pkt,1));
}
statement: this.__H1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 4 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S2.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,2));
}
statement: this.__S1.Q_in.pushBack((pkt,2))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 0 && this.__H0.Q_in.size() {
    this.__H0.__run();
}
statement: return this.data.length
statement: this.__H0.__run()
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.Q_in.data[0][0].dst = 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    this.pkt_count = this.pkt_count + 1;
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: this.Q_in.data[0][0].dst = 1
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: this.pkt_count = this.pkt_count + 1
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 1 && this.__H1.Q_in.size() {
    this.__H1.__run();
}
statement: return this.data.length
statement: this.__H1.__run()
statement: this.pkt_count = this.pkt_count + 1
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 2 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
statement: return this.data.length
statement: this.__S0.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.route1 = ?
statement: this.route2 = ? + ?
statement: if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 3 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
statement: return this.data.length
statement: this.__S1.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][0].dst == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 4 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
statement: return this.data.length
statement: this.__S2.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: return ()
statement: __d.__step()
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
    }
}
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: (action,node) := this.scheduler()
statement: actions := ([]: (R × R)[])
statement: for i in [0..5){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else {
        this.__S2.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else {
        this.__S2.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: return actions[uniformInt(0,actions.length - 1)]
statement: if action {
    if node == 0 && this.__H0.Q_out.size() {
        (pkt,port) := this.__H0.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this.__H1.Q_out.size() {
        (pkt,port) := this.__H1.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,3));
        }
    }
    if node == 2 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this.__H0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__H1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 4 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
    }
} else {
    if node == 0 && this.__H0.Q_in.size() {
        this.__H0.__run();
    }
    if node == 1 && this.__H1.Q_in.size() {
        this.__H1.__run();
    }
    if node == 2 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 3 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 4 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
}
statement: if node == 0 && this.__H0.Q_out.size() {
    (pkt,port) := this.__H0.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__H0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,3));
}
statement: this.__S0.Q_in.pushBack((pkt,3))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 1 && this.__H1.Q_out.size() {
    (pkt,port) := this.__H1.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: if node == 2 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this.__H0.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S1.Q_in.pushBack((pkt,1));
}
statement: this.__S1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,1));
}
statement: this.__S2.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 3 {
    this.__H0.Q_in.pushBack((pkt,1));
}
statement: if node == 3 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__H1.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S1.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 3 {
    this.__H1.Q_in.pushBack((pkt,1));
}
statement: this.__H1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 4 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S2.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,2));
}
statement: this.__S1.Q_in.pushBack((pkt,2))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 0 && this.__H0.Q_in.size() {
    this.__H0.__run();
}
statement: return this.data.length
statement: this.__H0.__run()
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.Q_in.data[0][0].dst = 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    this.pkt_count = this.pkt_count + 1;
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: this.Q_in.data[0][0].dst = 1
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: this.pkt_count = this.pkt_count + 1
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 1 && this.__H1.Q_in.size() {
    this.__H1.__run();
}
statement: return this.data.length
statement: this.__H1.__run()
statement: this.pkt_count = this.pkt_count + 1
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 2 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
statement: return this.data.length
statement: this.__S0.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.route1 = ?
statement: this.route2 = ? + ?
statement: if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 3 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
statement: return this.data.length
statement: this.__S1.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][0].dst == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 4 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
statement: return this.data.length
statement: this.__S2.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: return ()
statement: __d.__step()
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
    }
}
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: (action,node) := this.scheduler()
statement: actions := ([]: (R × R)[])
statement: for i in [0..5){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else {
        this.__S2.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else {
        this.__S2.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: return actions[uniformInt(0,actions.length - 1)]
statement: if action {
    if node == 0 && this.__H0.Q_out.size() {
        (pkt,port) := this.__H0.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this.__H1.Q_out.size() {
        (pkt,port) := this.__H1.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,3));
        }
    }
    if node == 2 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this.__H0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__H1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 4 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
    }
} else {
    if node == 0 && this.__H0.Q_in.size() {
        this.__H0.__run();
    }
    if node == 1 && this.__H1.Q_in.size() {
        this.__H1.__run();
    }
    if node == 2 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 3 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 4 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
}
statement: if node == 0 && this.__H0.Q_out.size() {
    (pkt,port) := this.__H0.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__H0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,3));
}
statement: this.__S0.Q_in.pushBack((pkt,3))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 1 && this.__H1.Q_out.size() {
    (pkt,port) := this.__H1.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: if node == 2 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this.__H0.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S1.Q_in.pushBack((pkt,1));
}
statement: this.__S1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,1));
}
statement: this.__S2.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 3 {
    this.__H0.Q_in.pushBack((pkt,1));
}
statement: if node == 3 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__H1.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S1.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 3 {
    this.__H1.Q_in.pushBack((pkt,1));
}
statement: this.__H1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 4 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S2.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,2));
}
statement: this.__S1.Q_in.pushBack((pkt,2))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 0 && this.__H0.Q_in.size() {
    this.__H0.__run();
}
statement: return this.data.length
statement: this.__H0.__run()
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.Q_in.data[0][0].dst = 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    this.pkt_count = this.pkt_count + 1;
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: this.Q_in.data[0][0].dst = 1
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: this.pkt_count = this.pkt_count + 1
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 1 && this.__H1.Q_in.size() {
    this.__H1.__run();
}
statement: return this.data.length
statement: this.__H1.__run()
statement: this.pkt_count = this.pkt_count + 1
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 2 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
statement: return this.data.length
statement: this.__S0.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.route1 = ?
statement: this.route2 = ? + ?
statement: if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 3 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
statement: return this.data.length
statement: this.__S1.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][0].dst == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 4 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
statement: return this.data.length
statement: this.__S2.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: return ()
statement: __d.__step()
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
    }
}
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: (action,node) := this.scheduler()
statement: actions := ([]: (R × R)[])
statement: for i in [0..5){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else {
        this.__S2.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else {
        this.__S2.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: return actions[uniformInt(0,actions.length - 1)]
statement: if action {
    if node == 0 && this.__H0.Q_out.size() {
        (pkt,port) := this.__H0.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this.__H1.Q_out.size() {
        (pkt,port) := this.__H1.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,3));
        }
    }
    if node == 2 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this.__H0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__H1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 4 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
    }
} else {
    if node == 0 && this.__H0.Q_in.size() {
        this.__H0.__run();
    }
    if node == 1 && this.__H1.Q_in.size() {
        this.__H1.__run();
    }
    if node == 2 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 3 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 4 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
}
statement: if node == 0 && this.__H0.Q_out.size() {
    (pkt,port) := this.__H0.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__H0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,3));
}
statement: this.__S0.Q_in.pushBack((pkt,3))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 1 && this.__H1.Q_out.size() {
    (pkt,port) := this.__H1.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: if node == 2 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this.__H0.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S1.Q_in.pushBack((pkt,1));
}
statement: this.__S1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,1));
}
statement: this.__S2.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 3 {
    this.__H0.Q_in.pushBack((pkt,1));
}
statement: if node == 3 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__H1.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S1.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 3 {
    this.__H1.Q_in.pushBack((pkt,1));
}
statement: this.__H1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 4 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S2.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,2));
}
statement: this.__S1.Q_in.pushBack((pkt,2))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 0 && this.__H0.Q_in.size() {
    this.__H0.__run();
}
statement: return this.data.length
statement: this.__H0.__run()
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.Q_in.data[0][0].dst = 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    this.pkt_count = this.pkt_count + 1;
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: this.Q_in.data[0][0].dst = 1
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: this.pkt_count = this.pkt_count + 1
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 1 && this.__H1.Q_in.size() {
    this.__H1.__run();
}
statement: return this.data.length
statement: this.__H1.__run()
statement: this.pkt_count = this.pkt_count + 1
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 2 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
statement: return this.data.length
statement: this.__S0.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.route1 = ?
statement: this.route2 = ? + ?
statement: if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 3 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
statement: return this.data.length
statement: this.__S1.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][0].dst == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 4 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
statement: return this.data.length
statement: this.__S2.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: return ()
statement: __d.__step()
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
    }
}
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: (action,node) := this.scheduler()
statement: actions := ([]: (R × R)[])
statement: for i in [0..5){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else {
        this.__S2.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else {
        this.__S2.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: return actions[uniformInt(0,actions.length - 1)]
statement: if action {
    if node == 0 && this.__H0.Q_out.size() {
        (pkt,port) := this.__H0.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this.__H1.Q_out.size() {
        (pkt,port) := this.__H1.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,3));
        }
    }
    if node == 2 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this.__H0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__H1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 4 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
    }
} else {
    if node == 0 && this.__H0.Q_in.size() {
        this.__H0.__run();
    }
    if node == 1 && this.__H1.Q_in.size() {
        this.__H1.__run();
    }
    if node == 2 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 3 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 4 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
}
statement: if node == 0 && this.__H0.Q_out.size() {
    (pkt,port) := this.__H0.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__H0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,3));
}
statement: this.__S0.Q_in.pushBack((pkt,3))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 1 && this.__H1.Q_out.size() {
    (pkt,port) := this.__H1.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: if node == 2 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this.__H0.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S1.Q_in.pushBack((pkt,1));
}
statement: this.__S1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,1));
}
statement: this.__S2.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 3 {
    this.__H0.Q_in.pushBack((pkt,1));
}
statement: if node == 3 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__H1.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S1.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 3 {
    this.__H1.Q_in.pushBack((pkt,1));
}
statement: this.__H1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 4 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S2.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,2));
}
statement: this.__S1.Q_in.pushBack((pkt,2))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 0 && this.__H0.Q_in.size() {
    this.__H0.__run();
}
statement: return this.data.length
statement: this.__H0.__run()
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.Q_in.data[0][0].dst = 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    this.pkt_count = this.pkt_count + 1;
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: this.Q_in.data[0][0].dst = 1
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: this.pkt_count = this.pkt_count + 1
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 1 && this.__H1.Q_in.size() {
    this.__H1.__run();
}
statement: return this.data.length
statement: this.__H1.__run()
statement: this.pkt_count = this.pkt_count + 1
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 2 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
statement: return this.data.length
statement: this.__S0.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.route1 = ?
statement: this.route2 = ? + ?
statement: if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 3 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
statement: return this.data.length
statement: this.__S1.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][0].dst == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 4 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
statement: return this.data.length
statement: this.__S2.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: return ()
statement: __d.__step()
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
    }
}
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: (action,node) := this.scheduler()
statement: actions := ([]: (R × R)[])
statement: for i in [0..5){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else {
        this.__S2.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else {
        this.__S2.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: return actions[uniformInt(0,actions.length - 1)]
statement: if action {
    if node == 0 && this.__H0.Q_out.size() {
        (pkt,port) := this.__H0.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this.__H1.Q_out.size() {
        (pkt,port) := this.__H1.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,3));
        }
    }
    if node == 2 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this.__H0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__H1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 4 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
    }
} else {
    if node == 0 && this.__H0.Q_in.size() {
        this.__H0.__run();
    }
    if node == 1 && this.__H1.Q_in.size() {
        this.__H1.__run();
    }
    if node == 2 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 3 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 4 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
}
statement: if node == 0 && this.__H0.Q_out.size() {
    (pkt,port) := this.__H0.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__H0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,3));
}
statement: this.__S0.Q_in.pushBack((pkt,3))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 1 && this.__H1.Q_out.size() {
    (pkt,port) := this.__H1.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: if node == 2 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this.__H0.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S1.Q_in.pushBack((pkt,1));
}
statement: this.__S1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,1));
}
statement: this.__S2.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 3 {
    this.__H0.Q_in.pushBack((pkt,1));
}
statement: if node == 3 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__H1.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S1.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 3 {
    this.__H1.Q_in.pushBack((pkt,1));
}
statement: this.__H1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 4 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S2.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,2));
}
statement: this.__S1.Q_in.pushBack((pkt,2))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 0 && this.__H0.Q_in.size() {
    this.__H0.__run();
}
statement: return this.data.length
statement: this.__H0.__run()
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.Q_in.data[0][0].dst = 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    this.pkt_count = this.pkt_count + 1;
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: this.Q_in.data[0][0].dst = 1
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: this.pkt_count = this.pkt_count + 1
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 1 && this.__H1.Q_in.size() {
    this.__H1.__run();
}
statement: return this.data.length
statement: this.__H1.__run()
statement: this.pkt_count = this.pkt_count + 1
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 2 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
statement: return this.data.length
statement: this.__S0.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.route1 = ?
statement: this.route2 = ? + ?
statement: if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 3 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
statement: return this.data.length
statement: this.__S1.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][0].dst == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 4 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
statement: return this.data.length
statement: this.__S2.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: return ()
statement: __d.__step()
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
    }
}
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: (action,node) := this.scheduler()
statement: actions := ([]: (R × R)[])
statement: for i in [0..5){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else {
        this.__S2.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else {
        this.__S2.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: return actions[uniformInt(0,actions.length - 1)]
statement: if action {
    if node == 0 && this.__H0.Q_out.size() {
        (pkt,port) := this.__H0.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this.__H1.Q_out.size() {
        (pkt,port) := this.__H1.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,3));
        }
    }
    if node == 2 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this.__H0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__H1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 4 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
    }
} else {
    if node == 0 && this.__H0.Q_in.size() {
        this.__H0.__run();
    }
    if node == 1 && this.__H1.Q_in.size() {
        this.__H1.__run();
    }
    if node == 2 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 3 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 4 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
}
statement: if node == 0 && this.__H0.Q_out.size() {
    (pkt,port) := this.__H0.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__H0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,3));
}
statement: this.__S0.Q_in.pushBack((pkt,3))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 1 && this.__H1.Q_out.size() {
    (pkt,port) := this.__H1.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: if node == 2 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this.__H0.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S1.Q_in.pushBack((pkt,1));
}
statement: this.__S1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,1));
}
statement: this.__S2.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 3 {
    this.__H0.Q_in.pushBack((pkt,1));
}
statement: if node == 3 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__H1.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S1.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 3 {
    this.__H1.Q_in.pushBack((pkt,1));
}
statement: this.__H1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 4 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S2.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,2));
}
statement: this.__S1.Q_in.pushBack((pkt,2))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 0 && this.__H0.Q_in.size() {
    this.__H0.__run();
}
statement: return this.data.length
statement: this.__H0.__run()
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.Q_in.data[0][0].dst = 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    this.pkt_count = this.pkt_count + 1;
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: this.Q_in.data[0][0].dst = 1
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: this.pkt_count = this.pkt_count + 1
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 1 && this.__H1.Q_in.size() {
    this.__H1.__run();
}
statement: return this.data.length
statement: this.__H1.__run()
statement: this.pkt_count = this.pkt_count + 1
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 2 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
statement: return this.data.length
statement: this.__S0.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.route1 = ?
statement: this.route2 = ? + ?
statement: if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 3 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
statement: return this.data.length
statement: this.__S1.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][0].dst == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 4 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
statement: return this.data.length
statement: this.__S2.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: return ()
statement: __d.__step()
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
    }
}
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: (action,node) := this.scheduler()
statement: actions := ([]: (R × R)[])
statement: for i in [0..5){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else {
        this.__S2.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else {
        this.__S2.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: return actions[uniformInt(0,actions.length - 1)]
statement: if action {
    if node == 0 && this.__H0.Q_out.size() {
        (pkt,port) := this.__H0.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this.__H1.Q_out.size() {
        (pkt,port) := this.__H1.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,3));
        }
    }
    if node == 2 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this.__H0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__H1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 4 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
    }
} else {
    if node == 0 && this.__H0.Q_in.size() {
        this.__H0.__run();
    }
    if node == 1 && this.__H1.Q_in.size() {
        this.__H1.__run();
    }
    if node == 2 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 3 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 4 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
}
statement: if node == 0 && this.__H0.Q_out.size() {
    (pkt,port) := this.__H0.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__H0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,3));
}
statement: this.__S0.Q_in.pushBack((pkt,3))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 1 && this.__H1.Q_out.size() {
    (pkt,port) := this.__H1.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: if node == 2 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this.__H0.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S1.Q_in.pushBack((pkt,1));
}
statement: this.__S1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,1));
}
statement: this.__S2.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 3 {
    this.__H0.Q_in.pushBack((pkt,1));
}
statement: if node == 3 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__H1.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S1.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 3 {
    this.__H1.Q_in.pushBack((pkt,1));
}
statement: this.__H1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 4 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S2.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,2));
}
statement: this.__S1.Q_in.pushBack((pkt,2))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 0 && this.__H0.Q_in.size() {
    this.__H0.__run();
}
statement: return this.data.length
statement: this.__H0.__run()
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.Q_in.data[0][0].dst = 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    this.pkt_count = this.pkt_count + 1;
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: this.Q_in.data[0][0].dst = 1
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: this.pkt_count = this.pkt_count + 1
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 1 && this.__H1.Q_in.size() {
    this.__H1.__run();
}
statement: return this.data.length
statement: this.__H1.__run()
statement: this.pkt_count = this.pkt_count + 1
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 2 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
statement: return this.data.length
statement: this.__S0.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.route1 = ?
statement: this.route2 = ? + ?
statement: if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 3 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
statement: return this.data.length
statement: this.__S1.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][0].dst == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 4 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
statement: return this.data.length
statement: this.__S2.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: return ()
statement: __d.__step()
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
    }
}
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: (action,node) := this.scheduler()
statement: actions := ([]: (R × R)[])
statement: for i in [0..5){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else {
        this.__S2.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else {
        this.__S2.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: return actions[uniformInt(0,actions.length - 1)]
statement: if action {
    if node == 0 && this.__H0.Q_out.size() {
        (pkt,port) := this.__H0.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this.__H1.Q_out.size() {
        (pkt,port) := this.__H1.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,3));
        }
    }
    if node == 2 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this.__H0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__H1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 4 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
    }
} else {
    if node == 0 && this.__H0.Q_in.size() {
        this.__H0.__run();
    }
    if node == 1 && this.__H1.Q_in.size() {
        this.__H1.__run();
    }
    if node == 2 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 3 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 4 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
}
statement: if node == 0 && this.__H0.Q_out.size() {
    (pkt,port) := this.__H0.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__H0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,3));
}
statement: this.__S0.Q_in.pushBack((pkt,3))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 1 && this.__H1.Q_out.size() {
    (pkt,port) := this.__H1.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: if node == 2 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this.__H0.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S1.Q_in.pushBack((pkt,1));
}
statement: this.__S1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,1));
}
statement: this.__S2.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 3 {
    this.__H0.Q_in.pushBack((pkt,1));
}
statement: if node == 3 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__H1.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S1.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 3 {
    this.__H1.Q_in.pushBack((pkt,1));
}
statement: this.__H1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 4 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S2.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,2));
}
statement: this.__S1.Q_in.pushBack((pkt,2))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 0 && this.__H0.Q_in.size() {
    this.__H0.__run();
}
statement: return this.data.length
statement: this.__H0.__run()
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.Q_in.data[0][0].dst = 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    this.pkt_count = this.pkt_count + 1;
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: this.Q_in.data[0][0].dst = 1
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: this.pkt_count = this.pkt_count + 1
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 1 && this.__H1.Q_in.size() {
    this.__H1.__run();
}
statement: return this.data.length
statement: this.__H1.__run()
statement: this.pkt_count = this.pkt_count + 1
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 2 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
statement: return this.data.length
statement: this.__S0.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.route1 = ?
statement: this.route2 = ? + ?
statement: if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 3 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
statement: return this.data.length
statement: this.__S1.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][0].dst == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 4 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
statement: return this.data.length
statement: this.__S2.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: return ()
statement: __d.__step()
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
    }
}
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: (action,node) := this.scheduler()
statement: actions := ([]: (R × R)[])
statement: for i in [0..5){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else {
        this.__S2.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else {
        this.__S2.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: return actions[uniformInt(0,actions.length - 1)]
statement: if action {
    if node == 0 && this.__H0.Q_out.size() {
        (pkt,port) := this.__H0.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this.__H1.Q_out.size() {
        (pkt,port) := this.__H1.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,3));
        }
    }
    if node == 2 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this.__H0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__H1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 4 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
    }
} else {
    if node == 0 && this.__H0.Q_in.size() {
        this.__H0.__run();
    }
    if node == 1 && this.__H1.Q_in.size() {
        this.__H1.__run();
    }
    if node == 2 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 3 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 4 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
}
statement: if node == 0 && this.__H0.Q_out.size() {
    (pkt,port) := this.__H0.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__H0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,3));
}
statement: this.__S0.Q_in.pushBack((pkt,3))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 1 && this.__H1.Q_out.size() {
    (pkt,port) := this.__H1.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: if node == 2 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this.__H0.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S1.Q_in.pushBack((pkt,1));
}
statement: this.__S1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,1));
}
statement: this.__S2.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 3 {
    this.__H0.Q_in.pushBack((pkt,1));
}
statement: if node == 3 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__H1.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S1.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 3 {
    this.__H1.Q_in.pushBack((pkt,1));
}
statement: this.__H1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 4 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S2.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,2));
}
statement: this.__S1.Q_in.pushBack((pkt,2))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 0 && this.__H0.Q_in.size() {
    this.__H0.__run();
}
statement: return this.data.length
statement: this.__H0.__run()
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.Q_in.data[0][0].dst = 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    this.pkt_count = this.pkt_count + 1;
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: this.Q_in.data[0][0].dst = 1
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: this.pkt_count = this.pkt_count + 1
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 1 && this.__H1.Q_in.size() {
    this.__H1.__run();
}
statement: return this.data.length
statement: this.__H1.__run()
statement: this.pkt_count = this.pkt_count + 1
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 2 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
statement: return this.data.length
statement: this.__S0.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.route1 = ?
statement: this.route2 = ? + ?
statement: if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 3 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
statement: return this.data.length
statement: this.__S1.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][0].dst == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 4 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
statement: return this.data.length
statement: this.__S2.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: return ()
statement: __d.__step()
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
    }
}
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: (action,node) := this.scheduler()
statement: actions := ([]: (R × R)[])
statement: for i in [0..5){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else {
        this.__S2.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else {
        this.__S2.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: return actions[uniformInt(0,actions.length - 1)]
statement: if action {
    if node == 0 && this.__H0.Q_out.size() {
        (pkt,port) := this.__H0.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this.__H1.Q_out.size() {
        (pkt,port) := this.__H1.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,3));
        }
    }
    if node == 2 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this.__H0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__H1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 4 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
    }
} else {
    if node == 0 && this.__H0.Q_in.size() {
        this.__H0.__run();
    }
    if node == 1 && this.__H1.Q_in.size() {
        this.__H1.__run();
    }
    if node == 2 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 3 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 4 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
}
statement: if node == 0 && this.__H0.Q_out.size() {
    (pkt,port) := this.__H0.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__H0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,3));
}
statement: this.__S0.Q_in.pushBack((pkt,3))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 1 && this.__H1.Q_out.size() {
    (pkt,port) := this.__H1.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: if node == 2 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this.__H0.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S1.Q_in.pushBack((pkt,1));
}
statement: this.__S1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,1));
}
statement: this.__S2.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 3 {
    this.__H0.Q_in.pushBack((pkt,1));
}
statement: if node == 3 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__H1.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S1.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 3 {
    this.__H1.Q_in.pushBack((pkt,1));
}
statement: this.__H1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 4 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S2.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,2));
}
statement: this.__S1.Q_in.pushBack((pkt,2))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 0 && this.__H0.Q_in.size() {
    this.__H0.__run();
}
statement: return this.data.length
statement: this.__H0.__run()
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.Q_in.data[0][0].dst = 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    this.pkt_count = this.pkt_count + 1;
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: this.Q_in.data[0][0].dst = 1
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: this.pkt_count = this.pkt_count + 1
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 1 && this.__H1.Q_in.size() {
    this.__H1.__run();
}
statement: return this.data.length
statement: this.__H1.__run()
statement: this.pkt_count = this.pkt_count + 1
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 2 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
statement: return this.data.length
statement: this.__S0.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.route1 = ?
statement: this.route2 = ? + ?
statement: if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 3 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
statement: return this.data.length
statement: this.__S1.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][0].dst == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 4 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
statement: return this.data.length
statement: this.__S2.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: return ()
statement: __d.__step()
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
    }
}
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: (action,node) := this.scheduler()
statement: actions := ([]: (R × R)[])
statement: for i in [0..5){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else {
        this.__S2.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else {
        this.__S2.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: return actions[uniformInt(0,actions.length - 1)]
statement: if action {
    if node == 0 && this.__H0.Q_out.size() {
        (pkt,port) := this.__H0.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this.__H1.Q_out.size() {
        (pkt,port) := this.__H1.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,3));
        }
    }
    if node == 2 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this.__H0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__H1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 4 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
    }
} else {
    if node == 0 && this.__H0.Q_in.size() {
        this.__H0.__run();
    }
    if node == 1 && this.__H1.Q_in.size() {
        this.__H1.__run();
    }
    if node == 2 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 3 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 4 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
}
statement: if node == 0 && this.__H0.Q_out.size() {
    (pkt,port) := this.__H0.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__H0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,3));
}
statement: this.__S0.Q_in.pushBack((pkt,3))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 1 && this.__H1.Q_out.size() {
    (pkt,port) := this.__H1.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: if node == 2 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this.__H0.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S1.Q_in.pushBack((pkt,1));
}
statement: this.__S1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,1));
}
statement: this.__S2.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 3 {
    this.__H0.Q_in.pushBack((pkt,1));
}
statement: if node == 3 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__H1.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S1.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 3 {
    this.__H1.Q_in.pushBack((pkt,1));
}
statement: this.__H1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 4 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S2.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,2));
}
statement: this.__S1.Q_in.pushBack((pkt,2))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 0 && this.__H0.Q_in.size() {
    this.__H0.__run();
}
statement: return this.data.length
statement: this.__H0.__run()
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.Q_in.data[0][0].dst = 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    this.pkt_count = this.pkt_count + 1;
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 1 && this.__H1.Q_in.size() {
    this.__H1.__run();
}
statement: return this.data.length
statement: this.__H1.__run()
statement: this.pkt_count = this.pkt_count + 1
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 2 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
statement: return this.data.length
statement: this.__S0.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.route1 = ?
statement: this.route2 = ? + ?
statement: if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 3 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
statement: return this.data.length
statement: this.__S1.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][0].dst == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 4 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
statement: return this.data.length
statement: this.__S2.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: return ()
statement: __d.__step()
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
    }
}
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: (action,node) := this.scheduler()
statement: actions := ([]: (R × R)[])
statement: for i in [0..5){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else {
        this.__S2.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else {
        this.__S2.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: return actions[uniformInt(0,actions.length - 1)]
statement: if action {
    if node == 0 && this.__H0.Q_out.size() {
        (pkt,port) := this.__H0.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this.__H1.Q_out.size() {
        (pkt,port) := this.__H1.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,3));
        }
    }
    if node == 2 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this.__H0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__H1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 4 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
    }
} else {
    if node == 0 && this.__H0.Q_in.size() {
        this.__H0.__run();
    }
    if node == 1 && this.__H1.Q_in.size() {
        this.__H1.__run();
    }
    if node == 2 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 3 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 4 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
}
statement: if node == 0 && this.__H0.Q_out.size() {
    (pkt,port) := this.__H0.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__H0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,3));
}
statement: this.__S0.Q_in.pushBack((pkt,3))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 1 && this.__H1.Q_out.size() {
    (pkt,port) := this.__H1.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: if node == 2 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this.__H0.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S1.Q_in.pushBack((pkt,1));
}
statement: this.__S1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,1));
}
statement: this.__S2.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 3 {
    this.__H0.Q_in.pushBack((pkt,1));
}
statement: if node == 3 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__H1.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S1.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 3 {
    this.__H1.Q_in.pushBack((pkt,1));
}
statement: this.__H1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 4 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S2.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,2));
}
statement: this.__S1.Q_in.pushBack((pkt,2))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 0 && this.__H0.Q_in.size() {
    this.__H0.__run();
}
statement: return this.data.length
statement: this.__H0.__run()
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.Q_in.data[0][0].dst = 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    this.pkt_count = this.pkt_count + 1;
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 1 && this.__H1.Q_in.size() {
    this.__H1.__run();
}
statement: return this.data.length
statement: this.__H1.__run()
statement: this.pkt_count = this.pkt_count + 1
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 2 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
statement: return this.data.length
statement: this.__S0.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.route1 = ?
statement: this.route2 = ? + ?
statement: if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 3 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
statement: return this.data.length
statement: this.__S1.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][0].dst == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 4 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
statement: return this.data.length
statement: this.__S2.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: return ()
statement: __d.__step()
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
    }
}
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: (action,node) := this.scheduler()
statement: actions := ([]: (R × R)[])
statement: for i in [0..5){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else {
        this.__S2.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else {
        this.__S2.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: return actions[uniformInt(0,actions.length - 1)]
statement: if action {
    if node == 0 && this.__H0.Q_out.size() {
        (pkt,port) := this.__H0.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this.__H1.Q_out.size() {
        (pkt,port) := this.__H1.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,3));
        }
    }
    if node == 2 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this.__H0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__H1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 4 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
    }
} else {
    if node == 0 && this.__H0.Q_in.size() {
        this.__H0.__run();
    }
    if node == 1 && this.__H1.Q_in.size() {
        this.__H1.__run();
    }
    if node == 2 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 3 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 4 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
}
statement: if node == 0 && this.__H0.Q_out.size() {
    (pkt,port) := this.__H0.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__H0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,3));
}
statement: this.__S0.Q_in.pushBack((pkt,3))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 1 && this.__H1.Q_out.size() {
    (pkt,port) := this.__H1.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: if node == 2 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this.__H0.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S1.Q_in.pushBack((pkt,1));
}
statement: this.__S1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,1));
}
statement: this.__S2.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 3 {
    this.__H0.Q_in.pushBack((pkt,1));
}
statement: if node == 3 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__H1.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S1.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 3 {
    this.__H1.Q_in.pushBack((pkt,1));
}
statement: this.__H1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 4 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S2.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,2));
}
statement: this.__S1.Q_in.pushBack((pkt,2))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 0 && this.__H0.Q_in.size() {
    this.__H0.__run();
}
statement: return this.data.length
statement: this.__H0.__run()
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.Q_in.data[0][0].dst = 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    this.pkt_count = this.pkt_count + 1;
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 1 && this.__H1.Q_in.size() {
    this.__H1.__run();
}
statement: return this.data.length
statement: this.__H1.__run()
statement: this.pkt_count = this.pkt_count + 1
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 2 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
statement: return this.data.length
statement: this.__S0.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.route1 = ?
statement: this.route2 = ? + ?
statement: if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 3 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
statement: return this.data.length
statement: this.__S1.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][0].dst == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 4 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
statement: return this.data.length
statement: this.__S2.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: return ()
statement: __d.__step()
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
    }
}
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: (action,node) := this.scheduler()
statement: actions := ([]: (R × R)[])
statement: for i in [0..5){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else {
        this.__S2.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else {
        this.__S2.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: return actions[uniformInt(0,actions.length - 1)]
statement: if action {
    if node == 0 && this.__H0.Q_out.size() {
        (pkt,port) := this.__H0.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this.__H1.Q_out.size() {
        (pkt,port) := this.__H1.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,3));
        }
    }
    if node == 2 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this.__H0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__H1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 4 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
    }
} else {
    if node == 0 && this.__H0.Q_in.size() {
        this.__H0.__run();
    }
    if node == 1 && this.__H1.Q_in.size() {
        this.__H1.__run();
    }
    if node == 2 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 3 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 4 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
}
statement: if node == 0 && this.__H0.Q_out.size() {
    (pkt,port) := this.__H0.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__H0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,3));
}
statement: this.__S0.Q_in.pushBack((pkt,3))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 1 && this.__H1.Q_out.size() {
    (pkt,port) := this.__H1.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: if node == 2 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this.__H0.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S1.Q_in.pushBack((pkt,1));
}
statement: this.__S1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,1));
}
statement: this.__S2.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 3 {
    this.__H0.Q_in.pushBack((pkt,1));
}
statement: if node == 3 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__H1.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S1.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 3 {
    this.__H1.Q_in.pushBack((pkt,1));
}
statement: this.__H1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 4 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S2.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,2));
}
statement: this.__S1.Q_in.pushBack((pkt,2))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 0 && this.__H0.Q_in.size() {
    this.__H0.__run();
}
statement: return this.data.length
statement: this.__H0.__run()
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.Q_in.data[0][0].dst = 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    this.pkt_count = this.pkt_count + 1;
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 1 && this.__H1.Q_in.size() {
    this.__H1.__run();
}
statement: return this.data.length
statement: this.__H1.__run()
statement: this.pkt_count = this.pkt_count + 1
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 2 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
statement: return this.data.length
statement: this.__S0.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.route1 = ?
statement: this.route2 = ? + ?
statement: if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 3 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
statement: return this.data.length
statement: this.__S1.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][0].dst == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 4 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
statement: return this.data.length
statement: this.__S2.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: return ()
statement: __d.__step()
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
    }
}
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: (action,node) := this.scheduler()
statement: actions := ([]: (R × R)[])
statement: for i in [0..5){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else {
        this.__S2.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else {
        this.__S2.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: return actions[uniformInt(0,actions.length - 1)]
statement: if action {
    if node == 0 && this.__H0.Q_out.size() {
        (pkt,port) := this.__H0.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this.__H1.Q_out.size() {
        (pkt,port) := this.__H1.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,3));
        }
    }
    if node == 2 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this.__H0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__H1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 4 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
    }
} else {
    if node == 0 && this.__H0.Q_in.size() {
        this.__H0.__run();
    }
    if node == 1 && this.__H1.Q_in.size() {
        this.__H1.__run();
    }
    if node == 2 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 3 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 4 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
}
statement: if node == 0 && this.__H0.Q_out.size() {
    (pkt,port) := this.__H0.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: if node == 1 && this.__H1.Q_out.size() {
    (pkt,port) := this.__H1.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: if node == 2 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this.__H0.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S1.Q_in.pushBack((pkt,1));
}
statement: this.__S1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,1));
}
statement: this.__S2.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 3 {
    this.__H0.Q_in.pushBack((pkt,1));
}
statement: if node == 3 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__H1.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S1.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 3 {
    this.__H1.Q_in.pushBack((pkt,1));
}
statement: this.__H1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 4 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S2.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,2));
}
statement: this.__S1.Q_in.pushBack((pkt,2))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 0 && this.__H0.Q_in.size() {
    this.__H0.__run();
}
statement: return this.data.length
statement: this.__H0.__run()
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.Q_in.data[0][0].dst = 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    this.pkt_count = this.pkt_count + 1;
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 1 && this.__H1.Q_in.size() {
    this.__H1.__run();
}
statement: return this.data.length
statement: this.__H1.__run()
statement: this.pkt_count = this.pkt_count + 1
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 2 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
statement: return this.data.length
statement: this.__S0.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 0 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.route1 = ?
statement: this.route2 = ? + ?
statement: if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 3 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
statement: return this.data.length
statement: this.__S1.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][0].dst == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 4 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
statement: return this.data.length
statement: this.__S2.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: return ()
statement: __d.__step()
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
    }
}
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: (action,node) := this.scheduler()
statement: actions := ([]: (R × R)[])
statement: for i in [0..5){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else {
        this.__S2.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else {
        this.__S2.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: return actions[uniformInt(0,actions.length - 1)]
statement: if action {
    if node == 0 && this.__H0.Q_out.size() {
        (pkt,port) := this.__H0.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this.__H1.Q_out.size() {
        (pkt,port) := this.__H1.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,3));
        }
    }
    if node == 2 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this.__H0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__H1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 4 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
    }
} else {
    if node == 0 && this.__H0.Q_in.size() {
        this.__H0.__run();
    }
    if node == 1 && this.__H1.Q_in.size() {
        this.__H1.__run();
    }
    if node == 2 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 3 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 4 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
}
statement: if node == 0 && this.__H0.Q_out.size() {
    (pkt,port) := this.__H0.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: if node == 1 && this.__H1.Q_out.size() {
    (pkt,port) := this.__H1.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: if node == 2 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this.__H0.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S0.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S1.Q_in.pushBack((pkt,1));
}
statement: this.__S1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,1));
}
statement: this.__S2.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if port == 3 {
    this.__H0.Q_in.pushBack((pkt,1));
}
statement: if node == 3 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__H1.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S1.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 3 {
    this.__H1.Q_in.pushBack((pkt,1));
}
statement: this.__H1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 4 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S2.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,2));
}
statement: this.__S1.Q_in.pushBack((pkt,2))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 0 && this.__H0.Q_in.size() {
    this.__H0.__run();
}
statement: return this.data.length
statement: this.__H0.__run()
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.Q_in.data[0][0].dst = 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    this.pkt_count = this.pkt_count + 1;
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 1 && this.__H1.Q_in.size() {
    this.__H1.__run();
}
statement: return this.data.length
statement: this.__H1.__run()
statement: this.pkt_count = this.pkt_count + 1
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 2 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
statement: return this.data.length
statement: if node == 3 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
statement: return this.data.length
statement: this.__S1.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][0].dst == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 4 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
statement: return this.data.length
statement: this.__S2.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: return ()
statement: __d.__step()
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
    }
}
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: (action,node) := this.scheduler()
statement: actions := ([]: (R × R)[])
statement: for i in [0..5){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else {
        this.__S2.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else {
        this.__S2.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: return actions[uniformInt(0,actions.length - 1)]
statement: if action {
    if node == 0 && this.__H0.Q_out.size() {
        (pkt,port) := this.__H0.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this.__H1.Q_out.size() {
        (pkt,port) := this.__H1.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,3));
        }
    }
    if node == 2 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this.__H0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__H1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 4 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
    }
} else {
    if node == 0 && this.__H0.Q_in.size() {
        this.__H0.__run();
    }
    if node == 1 && this.__H1.Q_in.size() {
        this.__H1.__run();
    }
    if node == 2 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 3 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 4 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
}
statement: if node == 0 && this.__H0.Q_out.size() {
    (pkt,port) := this.__H0.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: if node == 1 && this.__H1.Q_out.size() {
    (pkt,port) := this.__H1.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: if node == 2 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this.__H0.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: if node == 3 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__H1.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S1.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 3 {
    this.__H1.Q_in.pushBack((pkt,1));
}
statement: this.__H1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 4 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S2.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,2));
}
statement: this.__S1.Q_in.pushBack((pkt,2))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 0 && this.__H0.Q_in.size() {
    this.__H0.__run();
}
statement: return this.data.length
statement: this.__H0.__run()
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.Q_in.data[0][0].dst = 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    this.pkt_count = this.pkt_count + 1;
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 1 && this.__H1.Q_in.size() {
    this.__H1.__run();
}
statement: return this.data.length
statement: this.__H1.__run()
statement: this.pkt_count = this.pkt_count + 1
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 2 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
statement: return this.data.length
statement: if node == 3 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
statement: return this.data.length
statement: this.__S1.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][0].dst == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 4 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
statement: return this.data.length
statement: this.__S2.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: return ()
statement: __d.__step()
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
    }
}
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: (action,node) := this.scheduler()
statement: actions := ([]: (R × R)[])
statement: for i in [0..5){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else {
        this.__S2.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else {
        this.__S2.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: return actions[uniformInt(0,actions.length - 1)]
statement: if action {
    if node == 0 && this.__H0.Q_out.size() {
        (pkt,port) := this.__H0.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this.__H1.Q_out.size() {
        (pkt,port) := this.__H1.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,3));
        }
    }
    if node == 2 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this.__H0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__H1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 4 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
    }
} else {
    if node == 0 && this.__H0.Q_in.size() {
        this.__H0.__run();
    }
    if node == 1 && this.__H1.Q_in.size() {
        this.__H1.__run();
    }
    if node == 2 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 3 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 4 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
}
statement: if node == 0 && this.__H0.Q_out.size() {
    (pkt,port) := this.__H0.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: if node == 1 && this.__H1.Q_out.size() {
    (pkt,port) := this.__H1.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: if node == 2 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this.__H0.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: if node == 3 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__H1.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S1.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 3 {
    this.__H1.Q_in.pushBack((pkt,1));
}
statement: this.__H1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: return ()
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 4 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S2.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,2));
}
statement: this.__S1.Q_in.pushBack((pkt,2))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 0 && this.__H0.Q_in.size() {
    this.__H0.__run();
}
statement: return this.data.length
statement: this.__H0.__run()
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.Q_in.data[0][0].dst = 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    this.pkt_count = this.pkt_count + 1;
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 1 && this.__H1.Q_in.size() {
    this.__H1.__run();
}
statement: return this.data.length
statement: this.__H1.__run()
statement: this.pkt_count = this.pkt_count + 1
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 2 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
statement: return this.data.length
statement: if node == 3 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
statement: return this.data.length
statement: this.__S1.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][0].dst == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 4 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
statement: return this.data.length
statement: return ()
statement: __d.__step()
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
    }
}
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: (action,node) := this.scheduler()
statement: actions := ([]: (R × R)[])
statement: for i in [0..5){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else {
        this.__S2.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else {
        this.__S2.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: return actions[uniformInt(0,actions.length - 1)]
statement: if action {
    if node == 0 && this.__H0.Q_out.size() {
        (pkt,port) := this.__H0.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this.__H1.Q_out.size() {
        (pkt,port) := this.__H1.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,3));
        }
    }
    if node == 2 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this.__H0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__H1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 4 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
    }
} else {
    if node == 0 && this.__H0.Q_in.size() {
        this.__H0.__run();
    }
    if node == 1 && this.__H1.Q_in.size() {
        this.__H1.__run();
    }
    if node == 2 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 3 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 4 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
}
statement: if node == 0 && this.__H0.Q_out.size() {
    (pkt,port) := this.__H0.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: if node == 1 && this.__H1.Q_out.size() {
    (pkt,port) := this.__H1.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: if node == 2 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this.__H0.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: if node == 3 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__H1.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S1.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 3 {
    this.__H1.Q_in.pushBack((pkt,1));
}
statement: this.__H1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 4 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
}
statement: return this.data.length
statement: if node == 0 && this.__H0.Q_in.size() {
    this.__H0.__run();
}
statement: return this.data.length
statement: this.__H0.__run()
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.Q_in.data[0][0].dst = 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    this.pkt_count = this.pkt_count + 1;
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 1 && this.__H1.Q_in.size() {
    this.__H1.__run();
}
statement: return this.data.length
statement: this.__H1.__run()
statement: this.pkt_count = this.pkt_count + 1
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 2 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
statement: return this.data.length
statement: if node == 3 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
statement: return this.data.length
statement: this.__S1.__run()
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][1] == 2 {
    if this.Q_in.data[0][0].dst == 1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    }
} else if this.Q_in.data[0][1] == 3 {
    this.route1 = ?;
    this.route2 = ? + ?;
    if this.route1 < this.route2 || this.route1 == this.route2 && flip(1 / 2) {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    }
}
statement: if this.Q_in.data[0][0].dst == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: return ()
statement: if node == 4 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
statement: return this.data.length
statement: return ()
statement: __d.__step()
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
    }
}
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: (action,node) := this.scheduler()
statement: actions := ([]: (R × R)[])
statement: for i in [0..5){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else {
        this.__S2.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else {
        this.__S2.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: actions ~= [(1,i)]
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: return actions[uniformInt(0,actions.length - 1)]
statement: if action {
    if node == 0 && this.__H0.Q_out.size() {
        (pkt,port) := this.__H0.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this.__H1.Q_out.size() {
        (pkt,port) := this.__H1.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,3));
        }
    }
    if node == 2 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this.__H0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__H1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 4 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
    }
} else {
    if node == 0 && this.__H0.Q_in.size() {
        this.__H0.__run();
    }
    if node == 1 && this.__H1.Q_in.size() {
        this.__H1.__run();
    }
    if node == 2 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 3 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 4 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
}
statement: if node == 0 && this.__H0.Q_out.size() {
    (pkt,port) := this.__H0.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: if node == 1 && this.__H1.Q_out.size() {
    (pkt,port) := this.__H1.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,3));
    }
}
statement: return this.data.length
statement: if node == 2 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this.__H0.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: if node == 3 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__H1.Q_in.pushBack((pkt,1));
    }
}
statement: return this.data.length
statement: (pkt,port) := this.__S1.Q_out.takeFront()
statement: r := this.front()
statement: return this.data[0]
statement: this.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return r
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,2));
}
statement: if port == 3 {
    this.__H1.Q_in.pushBack((pkt,1));
}
statement: this.__H1.Q_in.pushBack((pkt,1))
statement: if this.size() >= 2 {
    return ();
}
statement: return this.data.length
statement: this.data = this.data ~ [x]
statement: return ()
statement: if node == 4 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
}
statement: return this.data.length
statement: if node == 0 && this.__H0.Q_in.size() {
    this.__H0.__run();
}
statement: return this.data.length
statement: this.__H0.__run()
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.Q_in.data[0][0].dst = 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    this.pkt_count = this.pkt_count + 1;
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 1 && this.__H1.Q_in.size() {
    this.__H1.__run();
}
statement: return this.data.length
statement: this.__H1.__run()
statement: this.pkt_count = this.pkt_count + 1
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 2 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
statement: return this.data.length
statement: if node == 3 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
statement: return this.data.length
statement: if node == 4 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
statement: return this.data.length
statement: return ()
statement: __d.__step()
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
    }
}
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: (action,node) := this.scheduler()
statement: actions := ([]: (R × R)[])
statement: for i in [0..5){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else {
        this.__S2.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else {
        this.__S2.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: actions ~= [(0,i)]
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else {
    this.__S2.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
statement: return this.data.length
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else {
    this.__S2.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
statement: return this.data.length
statement: return actions[uniformInt(0,actions.length - 1)]
statement: if action {
    if node == 0 && this.__H0.Q_out.size() {
        (pkt,port) := this.__H0.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
    }
    if node == 1 && this.__H1.Q_out.size() {
        (pkt,port) := this.__H1.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,3));
        }
    }
    if node == 2 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this.__H0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__H1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 4 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
    }
} else {
    if node == 0 && this.__H0.Q_in.size() {
        this.__H0.__run();
    }
    if node == 1 && this.__H1.Q_in.size() {
        this.__H1.__run();
    }
    if node == 2 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 3 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 4 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
}
statement: if node == 0 && this.__H0.Q_in.size() {
    this.__H0.__run();
}
statement: return this.data.length
statement: this.__H0.__run()
statement: this.Q_in.pushFront((Packet'(),0))
statement: this.dst = 0
statement: return this
statement: this.data = [x] ~ this.data
statement: return ()
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.Q_in.data[0][0].dst = 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    this.pkt_count = this.pkt_count + 1;
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 1 && this.__H1.Q_in.size() {
    this.__H1.__run();
}
statement: return this.data.length
statement: this.__H1.__run()
statement: this.pkt_count = this.pkt_count + 1
statement: this.Q_in.popFront()
statement: this.data = this.data[1..this.size()]
statement: return this.data.length
statement: return ()
statement: return ()
statement: if node == 2 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
statement: return this.data.length
statement: if node == 3 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
statement: return this.data.length
statement: if node == 4 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
statement: return this.data.length
statement: return ()
statement: __d.__step()
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
    }
}
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return ()
statement: assert(!(__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__H1.Q_in.size() || __d.__H1.Q_out.size() || __d.__S0.Q_in.size() || __d.__S0.Q_out.size() || __d.__S1.Q_in.size() || __d.__S1.Q_out.size() || __d.__S2.Q_in.size() || __d.__S2.Q_out.size()))
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: return this.data.length
statement: q₁ := Expectation(((if 1 == 0 {
    __d.__H0.pkt_count;
} else if 1 == 1 {
    __d.__H1.pkt_count;
} else {
    assert(0);
}) < 3) != 0)
statement: return (q₁)
E[r] = (1/286511799958070431838109696*2025575442161*Boole[-COST01+COST02+COST21<=0]*Boole[-COST02+-COST21+COST01!=0]+1/4584188799329126909409755136*30378810105265*Boole[-COST01+COST02+COST21==0]+1/73691306573577785966592*491806403*Boole[-COST02+-COST21+COST01!=0]*Boole[-COST02+-COST21+COST01<=0])*(1/67706637778944*Boole[-COST01+COST02+COST21==0]+1/67706637778944*Boole[-COST02+-COST21+COST01!=0])*(11284439629824*Boole[-COST01+COST02+COST21<=0]+11284439629824*Boole[-COST02+-COST21+COST01<=0]+45137758519296*Boole[-COST01+COST02+COST21==0]+56422198149120*Boole[-COST02+-COST21+COST01!=0])*(67706637778944*Boole[-COST01+COST02+COST21==0]+67706637778944*Boole[-COST02+-COST21+COST01!=0])

real	26m38.060s
user	25m36.008s
sys	0m1.996s

Compilation finished at Mon Jan 23 16:46:47
