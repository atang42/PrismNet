num_steps := 30;
dat Queue{
    data: (Packet × ℝ)[];
    def Queue(){
        data = ([]:(Packet × ℝ)[]);
    }
    def pushFront(x: Packet × ℝ){
        data=[x]~data;
    }
    def pushBack(x: Packet × ℝ){
        data=data~[x];
    }
    def takeFront(){
        r:=front();
        popFront();
        return r;
    }
    def takeBack(){
        r:=data[size()-1];
        data=data[0..size()-1];
        return r;
    }
    def size(){
        return data.length;
    }
    def front(){
        return data[0];
    }
    def dupFront(){
        pushFront(front());
    }
    def popFront(){
        data=data[1..size()];
    }
}
k := 4, H0 := 0, H1 := 1, S1 := 2, S2 := 3;
NUM_PACKETS := 4;
dat Packet{
    def Packet(){
    }
}
dat __h0_ty{
    Q_in: Queue, Q_out: Queue;
    pkt_count: ℝ;
    def __h0_ty(){
        Q_in = Queue();
        Q_out = Queue();
    }
    def __run(){
        Q_in.pushFront((Packet(),0));
        if pkt_count<NUM_PACKETS{
            Q_in.pushFront((Packet(),0));
            pkt_count = pkt_count+1;
            Q_out.pushBack((Q_in.takeFront()[0],1));
        }else{
            Q_in.popFront();
            Q_in.popFront();
        }
    }
}
dat __s1_ty{
	Q_in: Queue, Q_out: Queue;
    def __s1_ty(){
        Q_in = Queue();
        Q_out = Queue();
    }
    def __run(){
        Q_out.pushBack((Q_in.takeFront()[0],2));
    }
}
dat __s2_ty{
	Q_in: Queue, Q_out: Queue;
    def __s2_ty(){
        Q_in = Queue();
        Q_out = Queue();
    }
    def __run(){
        Q_out.pushBack((Q_in.takeFront()[0],2));
    }
}
dat __h1_ty{
    Q_in: Queue, Q_out: Queue;
    pkt_count: ℝ;
    def __h1_ty(){
        Q_in = Queue();
        Q_out = Queue();
        pkt_count = 0;
    }
    def __run(){
        pkt_count = pkt_count+1;
        Q_in.popFront();
    }
}
RunSw:=0, FwdQ:=1;
dat __D{
    __H0 : __h0_ty, __H1 : __h1_ty, __S1 : __s1_ty, __S2 : __s2_ty;
    def __D(){
        __H0 = __h0_ty(), __H1 = __h1_ty(), __S1 = __s1_ty(), __S2 = __s2_ty();
    }
    def scheduler(){
        actions := ([]: (R x R)[]);
        for i in [0..k){
            if (if i == 0 { __H0.Q_in } else if i == 1 { __H1.Q_in } else if i == 2 { __S1.Q_in } else  { __S2.Q_in }).size() > 0 {
                actions ~= [(RunSw,i)];
            }
            if (if i == 0 { __H0.Q_out } else if i == 1 { __H1.Q_out } else if i == 2 { __S1.Q_out } else  { __S2.Q_out }).size() > 0 {
                actions ~= [(FwdQ,i)];
            }
        }
        return actions[uniformInt(0,actions.length - 1)];
    }
    def __step(){
        if __H0.Q_in.size() || __H0.Q_out.size() || __H1.Q_in.size() || __H1.Q_out.size() || __S1.Q_in.size() || __S1.Q_out.size() || __S2.Q_in.size() || __S2.Q_out.size() {
            (action,node) := scheduler();
            if action {
                if node == 0 && __H0.Q_out.size() {
                    (pkt,port) := __H0.Q_out.takeFront();
                    if port == 1 {
                        __S1.Q_in.pushBack((pkt, 1));
                    }
                }
                if node == 1 && __H1.Q_out.size() {
                    (pkt,port) := __H1.Q_out.takeFront();
                    if port == 1 {
                        __S2.Q_in.pushBack((pkt, 2));
                    }
                }
                if node == 2 && __S1.Q_out.size() {
                    (pkt,port) := __S1.Q_out.takeFront();
                    if port == 1 {
                        __H0.Q_in.pushBack((pkt, 1));
                    }
                    if port == 2 {
                        __S2.Q_in.pushBack((pkt, 1));
                    }
                }
                if node == 3 && __S2.Q_out.size() {
                    (pkt,port) := __S2.Q_out.takeFront();
                    if port == 1 {
                        __S1.Q_in.pushBack((pkt, 2));
                    }
                    if port == 2 {
                        __H1.Q_in.pushBack((pkt, 1));
                    }
                }
            } else {
                if node == 0 && __H0.Q_in.size() {
                    __H0.__run();
                }
                if node == 1 && __H1.Q_in.size() {
                    __H1.__run();
                }
                if node == 2 && __S1.Q_in.size() {
                    __S1.__run();
                }
                if node == 3 && __S2.Q_in.size() {
                    __S2.__run();
                }
            }
        }
    }
}
def main(){
    __d := __D();
    __d.__H0.__run();
    repeat num_steps {
        __d.__step();
    }
    assert(!(__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__H1.Q_in.size() || __d.__H1.Q_out.size() || __d.__S1.Q_in.size() || __d.__S1.Q_out.size() || __d.__S2.Q_in.size() || __d.__S2.Q_out.size()));
    q₁ := Expectation(((if H1 == 0 { __d.__H0.pkt_count } else if H1 == 1 { __d.__H1.pkt_count } else { assert(0) }) < NUM_PACKETS) !=0);
    return (q₁);
}

